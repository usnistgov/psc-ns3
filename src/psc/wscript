# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

# def options(opt):
#     pass

# def configure(conf):
#     conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')

def build(bld):
    module = bld.create_ns3_module('psc', ['energy', 'mobility', 'network', 'antenna', 'buildings', 'lte', 'point-to-point', 'sip'])
    module.source = [
        'model/intel-http-client.cc',
        'model/intel-http-header.cc',
        'model/intel-http-server.cc',
        'model/psc-video-streaming.cc',
        'model/psc-video-streaming-distributions.cc',
        'model/psc-scenario-definition.cc',
        'model/psc-application.cc',
        'model/psc-application-client.cc',
        'model/psc-application-server.cc',
        'model/psc-application-configuration.cc',
        'model/mcptt-msg.cc',
        'model/mcptt-floor-msg.cc',
        'model/mcptt-media-msg.cc',
        'model/mcptt-media-src.cc',
        'model/mcptt-pusher.cc',
        'model/mcptt-pusher-orchestrator-interface.cc',
        'model/mcptt-pusher-orchestrator.cc',
        'model/mcptt-pusher-orchestrator-spurt-cdf.cc',
        'model/mcptt-pusher-orchestrator-session-cdf.cc',
        'model/mcptt-pusher-orchestrator-contention.cc',
        'model/mcptt-floor-participant.cc',
        'model/mcptt-floor-msg-sink.cc',
        'model/mcptt-off-network-floor-participant.cc',
        'model/mcptt-off-network-floor-participant-state.cc',
        'model/mcptt-server-app.cc',
        'model/mcptt-on-network-floor-participant.cc',
        'model/mcptt-on-network-floor-participant-state.cc',
        'model/mcptt-on-network-floor-arbitrator.cc',
        'model/mcptt-on-network-floor-arbitrator-state.cc',
        'model/mcptt-on-network-floor-dual-control.cc',
        'model/mcptt-on-network-floor-dual-control-state.cc',
        'model/mcptt-on-network-floor-towards-participant.cc',
        'model/mcptt-on-network-floor-towards-participant-state.cc',
        'model/mcptt-ptt-app.cc',
        'model/mcptt-floor-msg-field.cc',
        'model/mcptt-queued-user-info.cc',
        'model/mcptt-timer.cc',
        'model/mcptt-counter.cc',
        'model/mcptt-floor-queue.cc',
        'model/mcptt-rtp-header.cc',
        'model/mcptt-sdp-fmtp-header.cc',
        'model/mcptt-entity-id.cc',
        'model/mcptt-call-msg-field.cc',
        'model/mcptt-call-msg.cc',
        'model/mcptt-call-machine.cc',
        'model/mcptt-server-call-machine.cc',
        'model/mcptt-call-machine-grp-basic.cc',
        'model/mcptt-call-machine-grp-basic-state.cc',
        'model/mcptt-call-machine-grp-broadcast.cc',
        'model/mcptt-call-machine-grp-broadcast-state.cc',
        'model/mcptt-call-machine-private.cc',
        'model/mcptt-call-machine-private-state.cc',
        'model/mcptt-on-network-call-machine-client.cc',
        'model/mcptt-on-network-call-machine-client-state.cc',
        'model/mcptt-server-call-machine-group-prearranged.cc',
        'model/mcptt-server-call-machine-group-prearranged-state.cc',
        'model/mcptt-call-type-machine.cc',
        'model/mcptt-call-type-machine-grp-basic.cc',
        'model/mcptt-call-type-machine-private.cc',
        'model/mcptt-call-type-machine-private-state.cc',
        'model/mcptt-emerg-alert-machine.cc',
        'model/mcptt-emerg-alert-machine-basic.cc',
        'model/mcptt-channel.cc',
        'model/mcptt-call.cc',
        'model/mcptt-server-call.cc',
        'model/uav-mobility-energy-model.cc',
        'model/udp-group-echo-server.cc',
        'helper/ims-helper.cc',
        'helper/intel-http-helper.cc',
        'helper/mcptt-helper.cc',
        'helper/mcptt-server-helper.cc',
        'helper/mcptt-call-helper.cc',
        'helper/mcptt-trace-helper.cc',
        'helper/mcptt-msg-stats.cc',
        'helper/mcptt-state-machine-stats.cc',
        'helper/uav-mobility-energy-model-helper.cc',
        'helper/udp-group-echo-helper.cc',
        'helper/psc-scenario-trace-helper.cc',
        'helper/psc-application-helper.cc',
        ]

    module_test = bld.create_ns3_module_test_library('psc')
    module_test.source = [
        'test/intel-http-model-test.cc',
        'test/mcptt-call-control-broadcast.cc',
        'test/mcptt-call-control-private.cc',
        'test/mcptt-call-control.cc',
        'test/mcptt-call-control-on-network.cc',
        'test/mcptt-call-control-msg.cc',
        'test/mcptt-call-type-control-private.cc',
        'test/mcptt-call-type-control.cc',
        'test/mcptt-floor-control.cc',
        'test/mcptt-floor-control-on-network.cc',
        'test/mcptt-floor-control-msg.cc',
        'test/mcptt-msg-dropper.cc',
        'test/mcptt-test-call.cc',
        'test/mcptt-test-case-config.cc',
        'test/mcptt-test-case-config-on-network.cc',
        'test/mcptt-test-case.cc',
        'test/uav-mobility-energy-model-test.cc',
        'test/uav-mobility-energy-model-helper-test.cc',
        ]

    headers = bld(features='ns3header')
    headers.module = 'psc'
    headers.source = [
        'model/intel-http-client.h',
        'model/intel-http-header.h',
        'model/intel-http-server.h',
        'model/psc-video-streaming.h',
        'model/psc-video-streaming-distributions.h',
        'model/psc-scenario-definition.h',
        'model/psc-application.h',
        'model/psc-application-client.h',
        'model/psc-application-server.h',
        'model/psc-application-configuration.h',
        'model/mcptt-media-sink.h',
        'model/mcptt-floor-msg.h',
        'model/mcptt-media-src.h',
        'model/mcptt-pusher.h',
        'model/mcptt-pusher-orchestrator-interface.h',
        'model/mcptt-pusher-orchestrator.h',
        'model/mcptt-pusher-orchestrator-spurt-cdf.h',
        'model/mcptt-pusher-orchestrator-session-cdf.h',
        'model/mcptt-pusher-orchestrator-contention.h',
        'model/mcptt-floor-participant.h',
        'model/mcptt-floor-msg-sink.h',
        'model/mcptt-off-network-floor-participant.h',
        'model/mcptt-off-network-floor-participant-state.h',
        'model/mcptt-server-app.h',
        'model/mcptt-on-network-floor-participant.h',
        'model/mcptt-on-network-floor-participant-state.h',
        'model/mcptt-on-network-floor-arbitrator.h',
        'model/mcptt-on-network-floor-arbitrator-state.h',
        'model/mcptt-on-network-floor-dual-control.h',
        'model/mcptt-on-network-floor-dual-control-state.h',
        'model/mcptt-on-network-floor-towards-participant.h',
        'model/mcptt-on-network-floor-towards-participant-state.h',
        'model/mcptt-ptt-app.h',
        'model/mcptt-msg.h',
        'model/mcptt-media-msg.h',
        'model/mcptt-floor-msg-field.h',
        'model/mcptt-queued-user-info.h',
        'model/mcptt-timer.h',
        'model/mcptt-counter.h',
        'model/mcptt-floor-queue.h',
        'model/mcptt-rtp-header.h',
        'model/mcptt-sdp-fmtp-header.h',
        'model/mcptt-entity-id.h',
        'model/mcptt-call-msg-field.h',
        'model/mcptt-call-msg.h',
        'model/mcptt-call-machine.h',
        'model/mcptt-server-call-machine.h',
        'model/mcptt-call-machine-grp-basic.h',
        'model/mcptt-call-machine-grp-basic-state.h',
        'model/mcptt-call-machine-grp-broadcast.h',
        'model/mcptt-call-machine-grp-broadcast-state.h',
        'model/mcptt-call-machine-private.h',
        'model/mcptt-call-machine-private-state.h',
        'model/mcptt-on-network-call-machine-client.h',
        'model/mcptt-on-network-call-machine-client-state.h',
        'model/mcptt-server-call-machine-group-prearranged.h',
        'model/mcptt-server-call-machine-group-prearranged-state.h',
        'model/mcptt-call-type-machine.h',
        'model/mcptt-call-type-machine-grp-basic.h',
        'model/mcptt-call-type-machine-private.h',
        'model/mcptt-call-type-machine-private-state.h',
        'model/mcptt-emerg-alert-machine.h',
        'model/mcptt-emerg-alert-machine.h',
        'model/mcptt-emerg-alert-machine-basic.h',
        'model/mcptt-channel.h',
        'model/mcptt-call.h',
        'model/mcptt-server-call.h',
        'model/uav-mobility-energy-model.h',
        'model/udp-group-echo-server.h',
        'helper/intel-http-helper.h',
        'helper/mcptt-helper.h',
        'helper/mcptt-server-helper.h',
        'helper/mcptt-call-helper.h',
        'helper/mcptt-trace-helper.h',
        'helper/mcptt-msg-stats.h',
        'helper/mcptt-state-machine-stats.h',
        'helper/ims-helper.h',
        'helper/uav-mobility-energy-model-helper.h',
        'helper/udp-group-echo-helper.h',
        'helper/psc-scenario-trace-helper.h',
        'helper/psc-application-helper.h',

        ]

    if (bld.env['ENABLE_EXAMPLES']):
        bld.recurse('examples')

    bld.ns3_python_bindings()

