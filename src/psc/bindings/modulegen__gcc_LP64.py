from pybindgen import Module, FileCodeSink, param, retval, cppclass, typehandlers


import pybindgen.settings
import warnings

class ErrorHandler(pybindgen.settings.ErrorHandler):
    def handle_error(self, wrapper, exception, traceback_):
        warnings.warn("exception %r in wrapper %s" % (exception, wrapper))
        return True
pybindgen.settings.error_handler = ErrorHandler()


import sys

def module_init():
    root_module = Module('ns.psc', cpp_namespace='::ns3')
    return root_module

def register_types(module):
    root_module = module.get_root()
    
    ## ff-mac-common.h (module 'lte'): ns3::Result_e [enumeration]
    module.add_enum('Result_e', ['SUCCESS', 'FAILURE'], import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::SetupRelease_e [enumeration]
    module.add_enum('SetupRelease_e', ['setup', 'release'], import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::CeBitmap_e [enumeration]
    module.add_enum('CeBitmap_e', ['TA', 'DRX', 'CR'], import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::NormalExtended_e [enumeration]
    module.add_enum('NormalExtended_e', ['normal', 'extended'], import_from_module='ns.lte')
    ## log.h (module 'core'): ns3::LogLevel [enumeration]
    module.add_enum('LogLevel', ['LOG_NONE', 'LOG_ERROR', 'LOG_LEVEL_ERROR', 'LOG_WARN', 'LOG_LEVEL_WARN', 'LOG_DEBUG', 'LOG_LEVEL_DEBUG', 'LOG_INFO', 'LOG_LEVEL_INFO', 'LOG_FUNCTION', 'LOG_LEVEL_FUNCTION', 'LOG_LOGIC', 'LOG_LEVEL_LOGIC', 'LOG_ALL', 'LOG_LEVEL_ALL', 'LOG_PREFIX_FUNC', 'LOG_PREFIX_TIME', 'LOG_PREFIX_NODE', 'LOG_PREFIX_LEVEL', 'LOG_PREFIX_ALL'], import_from_module='ns.core')
    ## address.h (module 'network'): ns3::Address [class]
    module.add_class('Address', import_from_module='ns.network')
    ## address.h (module 'network'): ns3::Address::MaxSize_e [enumeration]
    module.add_enum('MaxSize_e', ['MAX_SIZE'], outer_class=root_module['ns3::Address'], import_from_module='ns.network')
    ## eps-bearer.h (module 'lte'): ns3::AllocationRetentionPriority [struct]
    module.add_class('AllocationRetentionPriority', import_from_module='ns.lte')
    ## angles.h (module 'antenna'): ns3::Angles [class]
    module.add_class('Angles', import_from_module='ns.antenna')
    ## application-container.h (module 'network'): ns3::ApplicationContainer [class]
    module.add_class('ApplicationContainer', import_from_module='ns.network')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Application > > const_iterator', 'ns3::ApplicationContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Application > > const_iterator*', 'ns3::ApplicationContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Application > > const_iterator&', 'ns3::ApplicationContainer::Iterator&')
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList [class]
    module.add_class('AttributeConstructionList', import_from_module='ns.core')
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item [struct]
    module.add_class('Item', import_from_module='ns.core', outer_class=root_module['ns3::AttributeConstructionList'])
    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo [struct]
    module.add_class('BandInfo', import_from_module='ns.spectrum')
    ## box.h (module 'mobility'): ns3::Box [class]
    module.add_class('Box', import_from_module='ns.mobility')
    ## box.h (module 'mobility'): ns3::Box::Side [enumeration]
    module.add_enum('Side', ['RIGHT', 'LEFT', 'TOP', 'BOTTOM', 'UP', 'DOWN'], outer_class=root_module['ns3::Box'], import_from_module='ns.mobility')
    ## buffer.h (module 'network'): ns3::Buffer [class]
    module.add_class('Buffer', import_from_module='ns.network')
    ## buffer.h (module 'network'): ns3::Buffer::Iterator [class]
    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::Buffer'])
    ## lte-common.h (module 'lte'): ns3::BufferSizeLevelBsr [class]
    module.add_class('BufferSizeLevelBsr', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::BuildBroadcastListElement_s [struct]
    module.add_class('BuildBroadcastListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::BuildBroadcastListElement_s::Type_e [enumeration]
    module.add_enum('Type_e', ['BCCH', 'PCCH', 'NotValid'], outer_class=root_module['ns3::BuildBroadcastListElement_s'], import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::BuildDataListElement_s [struct]
    module.add_class('BuildDataListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::BuildRarListElement_s [struct]
    module.add_class('BuildRarListElement_s', import_from_module='ns.lte')
    ## building-container.h (module 'buildings'): ns3::BuildingContainer [class]
    module.add_class('BuildingContainer', import_from_module='ns.buildings')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator', 'ns3::BuildingContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator*', 'ns3::BuildingContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator&', 'ns3::BuildingContainer::Iterator&')
    ## ff-mac-common.h (module 'lte'): ns3::BwPart_s [struct]
    module.add_class('BwPart_s', import_from_module='ns.lte')
    ## packet.h (module 'network'): ns3::ByteTagIterator [class]
    module.add_class('ByteTagIterator', import_from_module='ns.network')
    ## packet.h (module 'network'): ns3::ByteTagIterator::Item [class]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagIterator'])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList [class]
    module.add_class('ByteTagList', import_from_module='ns.network')
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator [class]
    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList'])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item [struct]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList::Iterator'])
    ## callback.h (module 'core'): ns3::CallbackBase [class]
    module.add_class('CallbackBase', import_from_module='ns.core')
    ## ff-mac-common.h (module 'lte'): ns3::CqiConfig_s [struct]
    module.add_class('CqiConfig_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::CqiListElement_s [struct]
    module.add_class('CqiListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::CqiListElement_s::CqiType_e [enumeration]
    module.add_enum('CqiType_e', ['P10', 'P11', 'P20', 'P21', 'A12', 'A22', 'A20', 'A30', 'A31', 'NotValid'], outer_class=root_module['ns3::CqiListElement_s'], import_from_module='ns.lte')
    ## data-output-interface.h (module 'stats'): ns3::DataOutputCallback [class]
    module.add_class('DataOutputCallback', allow_subclassing=True, import_from_module='ns.stats')
    ## data-rate.h (module 'network'): ns3::DataRate [class]
    module.add_class('DataRate', import_from_module='ns.network')
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeChecker'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeValue'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::EventImpl'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::LteControlMessage> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::LteControlMessage'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::LteHarqPhy> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::LteHarqPhy'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::LteSlHarqPhy> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::LteSlHarqPhy'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::NixVector'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::OutputStreamWrapper> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::OutputStreamWrapper'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Packet'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::SpectrumModel> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::SpectrumModel'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::SpectrumSignalParameters> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::SpectrumSignalParameters'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::SpectrumValue> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::SpectrumValue'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::VendorSpecificValue> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::VendorSpecificValue'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttCallMachineGrpBasicState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttCallMachineGrpBroadcastState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttCallMachinePrivateState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttCallTypeMachinePrivateState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOnNetworkCallMachineClientState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOnNetworkFloorDualControlState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer [class]
    module.add_class('DeviceEnergyModelContainer', import_from_module='ns.energy')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::DeviceEnergyModel > > const_iterator', 'ns3::DeviceEnergyModelContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::DeviceEnergyModel > > const_iterator*', 'ns3::DeviceEnergyModelContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::DeviceEnergyModel > > const_iterator&', 'ns3::DeviceEnergyModelContainer::Iterator&')
    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelHelper [class]
    module.add_class('DeviceEnergyModelHelper', allow_subclassing=True, import_from_module='ns.energy')
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s [struct]
    module.add_class('DlDciListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::Format_e [enumeration]
    module.add_enum('Format_e', ['ONE', 'ONE_A', 'ONE_B', 'ONE_C', 'ONE_D', 'TWO', 'TWO_A', 'TWO_B', 'NotValid_Dci_Format'], outer_class=root_module['ns3::DlDciListElement_s'], import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::VrbFormat_e [enumeration]
    module.add_enum('VrbFormat_e', ['VRB_DISTRIBUTED', 'VRB_LOCALIZED', 'NotValid_VRB_Format'], outer_class=root_module['ns3::DlDciListElement_s'], import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::Ngap_e [enumeration]
    module.add_enum('Ngap_e', ['GAP1', 'GAP2', 'NotValid_Ngap'], outer_class=root_module['ns3::DlDciListElement_s'], import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::DlInfoListElement_s [struct]
    module.add_class('DlInfoListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::DlInfoListElement_s::HarqStatus_e [enumeration]
    module.add_enum('HarqStatus_e', ['ACK', 'NACK', 'DTX'], outer_class=root_module['ns3::DlInfoListElement_s'], import_from_module='ns.lte')
    ## lte-common.h (module 'lte'): ns3::DlSchedulingCallbackInfo [struct]
    module.add_class('DlSchedulingCallbackInfo', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::DrxConfig_s [struct]
    module.add_class('DrxConfig_s', import_from_module='ns.lte')
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceHelper [class]
    module.add_class('EnergySourceHelper', allow_subclassing=True, import_from_module='ns.energy')
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider [class]
    module.add_class('EpcEnbS1SapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::BearerToBeSwitched [struct]
    module.add_class('BearerToBeSwitched', import_from_module='ns.lte', outer_class=root_module['ns3::EpcEnbS1SapProvider'])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters [struct]
    module.add_class('PathSwitchRequestParameters', import_from_module='ns.lte', outer_class=root_module['ns3::EpcEnbS1SapProvider'])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser [class]
    module.add_class('EpcEnbS1SapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters [struct]
    module.add_class('DataRadioBearerSetupRequestParameters', import_from_module='ns.lte', outer_class=root_module['ns3::EpcEnbS1SapUser'])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::InitialContextSetupRequestParameters [struct]
    module.add_class('InitialContextSetupRequestParameters', import_from_module='ns.lte', outer_class=root_module['ns3::EpcEnbS1SapUser'])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters [struct]
    module.add_class('PathSwitchRequestAcknowledgeParameters', import_from_module='ns.lte', outer_class=root_module['ns3::EpcEnbS1SapUser'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap [class]
    module.add_class('EpcX2Sap', import_from_module='ns.lte')
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem [enumeration]
    module.add_enum('UlInterferenceOverloadIndicationItem', ['HighInterference', 'MediumInterference', 'LowInterference'], outer_class=root_module['ns3::EpcX2Sap'], import_from_module='ns.lte')
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::LoadIndicator [enumeration]
    module.add_enum('LoadIndicator', ['LowLoad', 'MediumLoad', 'HighLoad', 'Overload'], outer_class=root_module['ns3::EpcX2Sap'], import_from_module='ns.lte')
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::IdCause [enumeration]
    module.add_enum('IdCause', ['HandoverDesirableForRadioReason', 'TimeCriticalHandover'], outer_class=root_module['ns3::EpcX2Sap'], import_from_module='ns.lte')
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellInformationItem [struct]
    module.add_class('CellInformationItem', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem [struct]
    module.add_class('CellMeasurementResultItem', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CompositeAvailCapacity [struct]
    module.add_class('CompositeAvailCapacity', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabAdmittedItem [struct]
    module.add_class('ErabAdmittedItem', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabNotAdmittedItem [struct]
    module.add_class('ErabNotAdmittedItem', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabToBeSetupItem [struct]
    module.add_class('ErabToBeSetupItem', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem [struct]
    module.add_class('ErabsSubjectToStatusTransferItem', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverPreparationFailureParams [struct]
    module.add_class('HandoverPreparationFailureParams', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestAckParams [struct]
    module.add_class('HandoverRequestAckParams', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams [struct]
    module.add_class('HandoverRequestParams', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::LoadInformationParams [struct]
    module.add_class('LoadInformationParams', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::RelativeNarrowbandTxBand [struct]
    module.add_class('RelativeNarrowbandTxBand', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ResourceStatusUpdateParams [struct]
    module.add_class('ResourceStatusUpdateParams', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::SnStatusTransferParams [struct]
    module.add_class('SnStatusTransferParams', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeContextReleaseParams [struct]
    module.add_class('UeContextReleaseParams', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeDataParams [struct]
    module.add_class('UeDataParams', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UlHighInterferenceInformationItem [struct]
    module.add_class('UlHighInterferenceInformationItem', import_from_module='ns.lte', outer_class=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2SapProvider [class]
    module.add_class('EpcX2SapProvider', import_from_module='ns.lte', parent=root_module['ns3::EpcX2Sap'])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2SapUser [class]
    module.add_class('EpcX2SapUser', import_from_module='ns.lte', parent=root_module['ns3::EpcX2Sap'])
    ## lte-common.h (module 'lte'): ns3::EutranMeasurementMapping [class]
    module.add_class('EutranMeasurementMapping', import_from_module='ns.lte')
    ## event-id.h (module 'core'): ns3::EventId [class]
    module.add_class('EventId', import_from_module='ns.core')
    ## event-id.h (module 'core'): ns3::EventId::UID [enumeration]
    module.add_enum('UID', ['INVALID', 'NOW', 'DESTROY', 'RESERVED', 'VALID'], outer_class=root_module['ns3::EventId'], import_from_module='ns.core')
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider [class]
    module.add_class('FfMacCschedSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters [struct]
    module.add_class('CschedCellConfigReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::HoppingMode_e [enumeration]
    module.add_enum('HoppingMode_e', ['inter', 'interintra'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters'], import_from_module='ns.lte')
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::PhichResource_e [enumeration]
    module.add_enum('PhichResource_e', ['PHICH_R_ONE_SIXTH', 'PHICH_R_HALF', 'PHICH_R_ONE', 'PHICH_R_TWO'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters'], import_from_module='ns.lte')
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::DuplexMode_e [enumeration]
    module.add_enum('DuplexMode_e', ['DM_TDD', 'DM_FDD'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters'], import_from_module='ns.lte')
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::Enable64Qam_e [enumeration]
    module.add_enum('Enable64Qam_e', ['MOD_16QAM', 'MOD_64QAM'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters'], import_from_module='ns.lte')
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedDiscPoolConfigReqParameters [struct]
    module.add_class('CschedDiscPoolConfigReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedDiscPoolReleaseReqParameters [struct]
    module.add_class('CschedDiscPoolReleaseReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters [struct]
    module.add_class('CschedLcConfigReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters [struct]
    module.add_class('CschedLcReleaseReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedPoolConfigReqParameters [struct]
    module.add_class('CschedPoolConfigReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedPoolReleaseReqParameters [struct]
    module.add_class('CschedPoolReleaseReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters [struct]
    module.add_class('CschedUeConfigReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::MeasGapConfigPattern_e [enumeration]
    module.add_enum('MeasGapConfigPattern_e', ['MGP_GP1', 'MGP_GP2', 'OFF'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters'], import_from_module='ns.lte')
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::OpenClosedLoop_e [enumeration]
    module.add_enum('OpenClosedLoop_e', ['noneloop', 'openloop', 'closedloop'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters'], import_from_module='ns.lte')
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::RepMode_e [enumeration]
    module.add_enum('RepMode_e', ['rm12', 'rm20', 'rm22', 'rm30', 'rm31', 'nonemode'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters'], import_from_module='ns.lte')
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::FeedbackMode_e [enumeration]
    module.add_enum('FeedbackMode_e', ['bundling', 'multiplexing'], outer_class=root_module['ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters'], import_from_module='ns.lte')
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters [struct]
    module.add_class('CschedUeReleaseReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapProvider'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser [class]
    module.add_class('FfMacCschedSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters [struct]
    module.add_class('CschedCellConfigCnfParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters [struct]
    module.add_class('CschedCellConfigUpdateIndParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters [struct]
    module.add_class('CschedLcConfigCnfParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters [struct]
    module.add_class('CschedLcReleaseCnfParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters [struct]
    module.add_class('CschedUeConfigCnfParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters [struct]
    module.add_class('CschedUeConfigUpdateIndParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters [struct]
    module.add_class('CschedUeReleaseCnfParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacCschedSapUser'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider [class]
    module.add_class('FfMacSchedSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters [struct]
    module.add_class('SchedDlCqiInfoReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters [struct]
    module.add_class('SchedDlMacBufferReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters [struct]
    module.add_class('SchedDlPagingBufferReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters [struct]
    module.add_class('SchedDlRachInfoReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters [struct]
    module.add_class('SchedDlRlcBufferReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters [struct]
    module.add_class('SchedDlTriggerReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters [struct]
    module.add_class('SchedUlCqiInfoReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters [struct]
    module.add_class('SchedUlMacCtrlInfoReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters [struct]
    module.add_class('SchedUlNoiseInterferenceReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters [struct]
    module.add_class('SchedUlSrInfoReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters [struct]
    module.add_class('SchedUlTriggerReqParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapProvider'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser [class]
    module.add_class('FfMacSchedSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters [struct]
    module.add_class('SchedDlConfigIndParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapUser'])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters [struct]
    module.add_class('SchedUlConfigIndParameters', import_from_module='ns.lte', outer_class=root_module['ns3::FfMacSchedSapUser'])
    ## eps-bearer.h (module 'lte'): ns3::GbrQosInformation [struct]
    module.add_class('GbrQosInformation', import_from_module='ns.lte')
    ## lte-harq-phy.h (module 'lte'): ns3::HarqProcessInfoElement_t [struct]
    module.add_class('HarqProcessInfoElement_t', import_from_module='ns.lte')
    ## hash.h (module 'core'): ns3::Hasher [class]
    module.add_class('Hasher', import_from_module='ns.core')
    ## ff-mac-common.h (module 'lte'): ns3::HigherLayerSelected_s [struct]
    module.add_class('HigherLayerSelected_s', import_from_module='ns.lte')
    ## lte-common.h (module 'lte'): ns3::ImsiLcidPair_t [struct]
    module.add_class('ImsiLcidPair_t', import_from_module='ns.lte')
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
    module.add_class('Inet6SocketAddress', import_from_module='ns.network')
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
    root_module['ns3::Inet6SocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
    module.add_class('InetSocketAddress', import_from_module='ns.network')
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
    root_module['ns3::InetSocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
    ## int-to-type.h (module 'core'): ns3::IntToType<0> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['0'])
    ## int-to-type.h (module 'core'): ns3::IntToType<0>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 0 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<1> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['1'])
    ## int-to-type.h (module 'core'): ns3::IntToType<1>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 1 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<2> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['2'])
    ## int-to-type.h (module 'core'): ns3::IntToType<2>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 2 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<3> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['3'])
    ## int-to-type.h (module 'core'): ns3::IntToType<3>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 3 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<4> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['4'])
    ## int-to-type.h (module 'core'): ns3::IntToType<4>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 4 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<5> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['5'])
    ## int-to-type.h (module 'core'): ns3::IntToType<5>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 5 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<6> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['6'])
    ## int-to-type.h (module 'core'): ns3::IntToType<6>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 6 >'], import_from_module='ns.core')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
    module.add_class('Ipv4Address', import_from_module='ns.network')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
    root_module['ns3::Ipv4Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash [class]
    module.add_class('Ipv4AddressHash', import_from_module='ns.network')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask [class]
    module.add_class('Ipv4Mask', import_from_module='ns.network')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
    module.add_class('Ipv6Address', import_from_module='ns.network')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
    root_module['ns3::Ipv6Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash [class]
    module.add_class('Ipv6AddressHash', import_from_module='ns.network')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix [class]
    module.add_class('Ipv6Prefix', import_from_module='ns.network')
    ## log.h (module 'core'): ns3::LogComponent [class]
    module.add_class('LogComponent', import_from_module='ns.core')
    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >', 'ns3::LogComponent::ComponentList')
    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >*', 'ns3::LogComponent::ComponentList*')
    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >&', 'ns3::LogComponent::ComponentList&')
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s [struct]
    module.add_class('LogicalChannelConfigListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::Direction_e [enumeration]
    module.add_enum('Direction_e', ['DIR_UL', 'DIR_DL', 'DIR_BOTH', 'NotValid'], outer_class=root_module['ns3::LogicalChannelConfigListElement_s'], import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::QosBearerType_e [enumeration]
    module.add_enum('QosBearerType_e', ['QBT_NON_GBR', 'QBT_GBR', 'NotValid_QosBearerType'], outer_class=root_module['ns3::LogicalChannelConfigListElement_s'], import_from_module='ns.lte')
    ## lte-anr-sap.h (module 'lte'): ns3::LteAnrSapProvider [class]
    module.add_class('LteAnrSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-anr-sap.h (module 'lte'): ns3::LteAnrSapUser [class]
    module.add_class('LteAnrSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-as-sap.h (module 'lte'): ns3::LteAsSapProvider [class]
    module.add_class('LteAsSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-as-sap.h (module 'lte'): ns3::LteAsSapUser [class]
    module.add_class('LteAsSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-ccm-mac-sap.h (module 'lte'): ns3::LteCcmMacSapProvider [class]
    module.add_class('LteCcmMacSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapProvider [class]
    module.add_class('LteCcmRrcSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapProvider::LcsConfig [struct]
    module.add_class('LcsConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteCcmRrcSapProvider'])
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapUser [class]
    module.add_class('LteCcmRrcSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider [class]
    module.add_class('LteEnbCmacSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue [struct]
    module.add_class('AllocateNcRaPreambleReturnValue', import_from_module='ns.lte', outer_class=root_module['ns3::LteEnbCmacSapProvider'])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo [struct]
    module.add_class('LcInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteEnbCmacSapProvider'])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::RachConfig [struct]
    module.add_class('RachConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteEnbCmacSapProvider'])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::UeConfig [struct]
    module.add_class('UeConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteEnbCmacSapProvider'])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapUser [class]
    module.add_class('LteEnbCmacSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapUser::UeConfig [struct]
    module.add_class('UeConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteEnbCmacSapUser'])
    ## lte-enb-cphy-sap.h (module 'lte'): ns3::LteEnbCphySapProvider [class]
    module.add_class('LteEnbCphySapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-enb-cphy-sap.h (module 'lte'): ns3::LteEnbCphySapUser [class]
    module.add_class('LteEnbCphySapUser', import_from_module='ns.lte')
    ## lte-enb-phy-sap.h (module 'lte'): ns3::LteEnbPhySapProvider [class]
    module.add_class('LteEnbPhySapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-enb-phy-sap.h (module 'lte'): ns3::LteEnbPhySapUser [class]
    module.add_class('LteEnbPhySapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-common.h (module 'lte'): ns3::LteFfConverter [class]
    module.add_class('LteFfConverter', import_from_module='ns.lte')
    ## lte-ffr-rrc-sap.h (module 'lte'): ns3::LteFfrRrcSapProvider [class]
    module.add_class('LteFfrRrcSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-ffr-rrc-sap.h (module 'lte'): ns3::LteFfrRrcSapUser [class]
    module.add_class('LteFfrRrcSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-common.h (module 'lte'): ns3::LteFlowId_t [struct]
    module.add_class('LteFlowId_t', import_from_module='ns.lte')
    ## lte-handover-management-sap.h (module 'lte'): ns3::LteHandoverManagementSapProvider [class]
    module.add_class('LteHandoverManagementSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-handover-management-sap.h (module 'lte'): ns3::LteHandoverManagementSapUser [class]
    module.add_class('LteHandoverManagementSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider [class]
    module.add_class('LteMacSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters [struct]
    module.add_class('ReportBufferStatusParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteMacSapProvider'])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters [struct]
    module.add_class('TransmitPduParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteMacSapProvider'])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser [class]
    module.add_class('LteMacSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::ReceivePduParameters [struct]
    module.add_class('ReceivePduParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteMacSapUser'])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters [struct]
    module.add_class('TxOpportunityParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteMacSapUser'])
    ## lte-nist-error-model.h (module 'lte'): ns3::LteNistErrorModel [class]
    module.add_class('LteNistErrorModel', import_from_module='ns.lte')
    ## lte-nist-error-model.h (module 'lte'): ns3::LteNistErrorModel::LtePhyChannel [enumeration]
    module.add_enum('LtePhyChannel', ['PDCCH', 'PDSCH', 'PUCCH', 'PUSCH', 'PSCCH', 'PSSCH', 'PSDCH'], outer_class=root_module['ns3::LteNistErrorModel'], import_from_module='ns.lte')
    ## lte-nist-error-model.h (module 'lte'): ns3::LteNistErrorModel::LteFadingModel [enumeration]
    module.add_enum('LteFadingModel', ['AWGN'], outer_class=root_module['ns3::LteNistErrorModel'], import_from_module='ns.lte')
    ## lte-nist-error-model.h (module 'lte'): ns3::LteNistErrorModel::LteTxMode [enumeration]
    module.add_enum('LteTxMode', ['SISO', 'SIMO', 'TxDiversity', 'SpatMultplex'], outer_class=root_module['ns3::LteNistErrorModel'], import_from_module='ns.lte')
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::LtePc5SignallingHeaderSequenceNumber [class]
    module.add_class('LtePc5SignallingHeaderSequenceNumber', import_from_module='ns.lte')
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider [class]
    module.add_class('LtePdcpSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider::TransmitPdcpSduParameters [struct]
    module.add_class('TransmitPdcpSduParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LtePdcpSapProvider'])
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser [class]
    module.add_class('LtePdcpSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::SduType_t [enumeration]
    module.add_enum('SduType_t', ['IP_SDU', 'ARP_SDU', 'PC5_SIGNALING_SDU', 'NON_IP_SDU'], outer_class=root_module['ns3::LtePdcpSapUser'], import_from_module='ns.lte')
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::ReceivePdcpSduParameters [struct]
    module.add_class('ReceivePdcpSduParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LtePdcpSapUser'])
    typehandlers.add_type_alias('ns3::LtePdcpSapUser::SduType_t', 'ns3::LtePdcpSapUser::SduType_t')
    typehandlers.add_type_alias('ns3::LtePdcpSapUser::SduType_t*', 'ns3::LtePdcpSapUser::SduType_t*')
    typehandlers.add_type_alias('ns3::LtePdcpSapUser::SduType_t&', 'ns3::LtePdcpSapUser::SduType_t&')
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapProvider [class]
    module.add_class('LteRlcSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapProvider::TransmitPdcpPduParameters [struct]
    module.add_class('TransmitPdcpPduParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteRlcSapProvider'])
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapUser [class]
    module.add_class('LteRlcSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap [class]
    module.add_class('LteRrcSap', import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReestablishmentCause [enumeration]
    module.add_enum('ReestablishmentCause', ['RECONFIGURATION_FAILURE', 'HANDOVER_FAILURE', 'OTHER_FAILURE'], outer_class=root_module['ns3::LteRrcSap'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoCommon [struct]
    module.add_class('AntennaInfoCommon', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoDedicated [struct]
    module.add_class('AntennaInfoDedicated', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoUl [struct]
    module.add_class('AntennaInfoUl', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AsConfig [struct]
    module.add_class('AsConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::BlackCellsToAddMod [struct]
    module.add_class('BlackCellsToAddMod', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CarrierBandwidthEutra [struct]
    module.add_class('CarrierBandwidthEutra', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CarrierFreqEutra [struct]
    module.add_class('CarrierFreqEutra', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellAccessRelatedInfo [struct]
    module.add_class('CellAccessRelatedInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellIdentification [struct]
    module.add_class('CellIdentification', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellSelectionInfo [struct]
    module.add_class('CellSelectionInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellsToAddMod [struct]
    module.add_class('CellsToAddMod', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CgiInfo [struct]
    module.add_class('CgiInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::DrbToAddMod [struct]
    module.add_class('DrbToAddMod', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::FreqInfo [struct]
    module.add_class('FreqInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::HandoverPreparationInfo [struct]
    module.add_class('HandoverPreparationInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::LogicalChannelConfig [struct]
    module.add_class('LogicalChannelConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlock [struct]
    module.add_class('MasterInformationBlock', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlockSL [struct]
    module.add_class('MasterInformationBlockSL', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig [struct]
    module.add_class('MeasConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasGapConfig [struct]
    module.add_class('MeasGapConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasGapConfig::action [enumeration]
    module.add_enum('action', ['SETUP', 'RESET'], outer_class=root_module['ns3::LteRrcSap::MeasGapConfig'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasGapConfig::gap [enumeration]
    module.add_enum('gap', ['GP0', 'GP1'], outer_class=root_module['ns3::LteRrcSap::MeasGapConfig'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasIdToAddMod [struct]
    module.add_class('MeasIdToAddMod', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra [struct]
    module.add_class('MeasObjectEutra', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectToAddMod [struct]
    module.add_class('MeasObjectToAddMod', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultBestNeighCell [struct]
    module.add_class('MeasResultBestNeighCell', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultEutra [struct]
    module.add_class('MeasResultEutra', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultPCell [struct]
    module.add_class('MeasResultPCell', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultSCell [struct]
    module.add_class('MeasResultSCell', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultServFreq [struct]
    module.add_class('MeasResultServFreq', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResults [struct]
    module.add_class('MeasResults', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasurementReport [struct]
    module.add_class('MeasurementReport', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo [struct]
    module.add_class('MobilityControlInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityStateParameters [struct]
    module.add_class('MobilityStateParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::NonCriticalExtensionConfiguration [struct]
    module.add_class('NonCriticalExtensionConfiguration', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::NonUlConfiguration [struct]
    module.add_class('NonUlConfiguration', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PdschConfigCommon [struct]
    module.add_class('PdschConfigCommon', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PdschConfigDedicated [struct]
    module.add_class('PdschConfigDedicated', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PdschConfigDedicated::db [enumeration]
    module.add_enum('db', ['dB_6', 'dB_4dot77', 'dB_3', 'dB_1dot77', 'dB0', 'dB1', 'dB2', 'dB3'], outer_class=root_module['ns3::LteRrcSap::PdschConfigDedicated'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PeriodicBsrTimer [struct]
    module.add_class('PeriodicBsrTimer', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PeriodicBsrTimer [enumeration]
    module.add_enum('', ['sf5', 'sf10', 'sf16', 'sf20', 'sf32', 'sf40', 'sf64', 'sf80', 'sf128', 'sf160', 'sf320', 'sf640', 'sf1280', 'sf2560', 'infinity'], outer_class=root_module['ns3::LteRrcSap::PeriodicBsrTimer'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysCellIdRange [struct]
    module.add_class('PhysCellIdRange', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicated [struct]
    module.add_class('PhysicalConfigDedicated', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell [struct]
    module.add_class('PhysicalConfigDedicatedSCell', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PlmnIdentityInfo [struct]
    module.add_class('PlmnIdentityInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PlmnIdentityList [struct]
    module.add_class('PlmnIdentityList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PoolSelection [struct]
    module.add_class('PoolSelection', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PoolSelection [enumeration]
    module.add_enum('', ['RSRPBASED', 'RANDOM'], outer_class=root_module['ns3::LteRrcSap::PoolSelection'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PoolSelectionRsrpBased [struct]
    module.add_class('PoolSelectionRsrpBased', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PrachConfigSCell [struct]
    module.add_class('PrachConfigSCell', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PreambleInfo [struct]
    module.add_class('PreambleInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PuschConfigDedicatedSCell [struct]
    module.add_class('PuschConfigDedicatedSCell', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::QuantityConfig [struct]
    module.add_class('QuantityConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RaSupervisionInfo [struct]
    module.add_class('RaSupervisionInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RachConfigCommon [struct]
    module.add_class('RachConfigCommon', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RachConfigDedicated [struct]
    module.add_class('RachConfigDedicated', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommon [struct]
    module.add_class('RadioResourceConfigCommon', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSCell [struct]
    module.add_class('RadioResourceConfigCommonSCell', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSib [struct]
    module.add_class('RadioResourceConfigCommonSib', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicated [struct]
    module.add_class('RadioResourceConfigDedicated', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicatedSCell [struct]
    module.add_class('RadioResourceConfigDedicatedSCell', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReestabUeIdentity [struct]
    module.add_class('ReestabUeIdentity', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra [struct]
    module.add_class('ReportConfigEutra', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra [enumeration]
    module.add_enum('', ['EVENT', 'PERIODICAL'], outer_class=root_module['ns3::LteRrcSap::ReportConfigEutra'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra [enumeration]
    module.add_enum('', ['EVENT_A1', 'EVENT_A2', 'EVENT_A3', 'EVENT_A4', 'EVENT_A5'], outer_class=root_module['ns3::LteRrcSap::ReportConfigEutra'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::report [enumeration]
    module.add_enum('report', ['REPORT_STRONGEST_CELLS', 'REPORT_CGI'], outer_class=root_module['ns3::LteRrcSap::ReportConfigEutra'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra [enumeration]
    module.add_enum('', ['RSRP', 'RSRQ'], outer_class=root_module['ns3::LteRrcSap::ReportConfigEutra'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra [enumeration]
    module.add_enum('', ['SAME_AS_TRIGGER_QUANTITY', 'BOTH'], outer_class=root_module['ns3::LteRrcSap::ReportConfigEutra'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra [enumeration]
    module.add_enum('', ['MS120', 'MS240', 'MS480', 'MS640', 'MS1024', 'MS2048', 'MS5120', 'MS10240', 'MIN1', 'MIN6', 'MIN12', 'MIN30', 'MIN60', 'SPARE3', 'SPARE2', 'SPARE1'], outer_class=root_module['ns3::LteRrcSap::ReportConfigEutra'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigToAddMod [struct]
    module.add_class('ReportConfigToAddMod', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RetxBsrTimer [struct]
    module.add_class('RetxBsrTimer', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RetxBsrTimer [enumeration]
    module.add_enum('', ['sf320', 'sf640', 'sf1280', 'sf2560', 'sf5120', 'sf10240'], outer_class=root_module['ns3::LteRrcSap::RetxBsrTimer'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RlcConfig [struct]
    module.add_class('RlcConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RlcConfig::direction [enumeration]
    module.add_enum('direction', ['AM', 'UM_BI_DIRECTIONAL', 'UM_UNI_DIRECTIONAL_UL', 'UM_UNI_DIRECTIONAL_DL'], outer_class=root_module['ns3::LteRrcSap::RlcConfig'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration [struct]
    module.add_class('RrcConnectionReconfiguration', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfigurationCompleted [struct]
    module.add_class('RrcConnectionReconfigurationCompleted', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishment [struct]
    module.add_class('RrcConnectionReestablishment', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentComplete [struct]
    module.add_class('RrcConnectionReestablishmentComplete', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentReject [struct]
    module.add_class('RrcConnectionReestablishmentReject', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentRequest [struct]
    module.add_class('RrcConnectionReestablishmentRequest', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReject [struct]
    module.add_class('RrcConnectionReject', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionRelease [struct]
    module.add_class('RrcConnectionRelease', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionRequest [struct]
    module.add_class('RrcConnectionRequest', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionSetup [struct]
    module.add_class('RrcConnectionSetup', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionSetupCompleted [struct]
    module.add_class('RrcConnectionSetupCompleted', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SCellToAddMod [struct]
    module.add_class('SCellToAddMod', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib18CommConfig [struct]
    module.add_class('Sib18CommConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfig [struct]
    module.add_class('Sib19DiscConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfigRelay [struct]
    module.add_class('Sib19DiscConfigRelay', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SidelinkUeInformation [struct]
    module.add_class('SidelinkUeInformation', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCarrierFreqInfoList [struct]
    module.add_class('SlCarrierFreqInfoList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfig [struct]
    module.add_class('SlCommConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfig [enumeration]
    module.add_enum('', ['RELEASE', 'SETUP'], outer_class=root_module['ns3::LteRrcSap::SlCommConfig'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigScheduled [struct]
    module.add_class('SlCommConfigScheduled', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigUeSelected [struct]
    module.add_class('SlCommConfigUeSelected', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool [struct]
    module.add_class('SlCommResourcePool', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::TxParameters [struct]
    module.add_class('TxParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap::SlCommResourcePool'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::UeSelectedResourceConfig [struct]
    module.add_class('UeSelectedResourceConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap::SlCommResourcePool'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommRxPoolList [struct]
    module.add_class('SlCommRxPoolList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolList [struct]
    module.add_class('SlCommTxPoolList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolToAddMod [struct]
    module.add_class('SlCommTxPoolToAddMod', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolToAddModList [struct]
    module.add_class('SlCommTxPoolToAddModList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxResourceReq [struct]
    module.add_class('SlCommTxResourceReq', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxResourcesSetup [struct]
    module.add_class('SlCommTxResourcesSetup', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxResourcesSetup [enumeration]
    module.add_enum('', ['SCHEDULED', 'UE_SELECTED'], outer_class=root_module['ns3::LteRrcSap::SlCommTxResourcesSetup'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCpLen [struct]
    module.add_class('SlCpLen', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCpLen [enumeration]
    module.add_enum('', ['NORMAL', 'EXTENDED'], outer_class=root_module['ns3::LteRrcSap::SlCpLen'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDestinationInfoList [struct]
    module.add_class('SlDestinationInfoList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfig [struct]
    module.add_class('SlDiscConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfig [enumeration]
    module.add_enum('', ['RELEASE', 'SETUP'], outer_class=root_module['ns3::LteRrcSap::SlDiscConfig'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRelayUe [struct]
    module.add_class('SlDiscConfigRelayUe', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRemoteUe [struct]
    module.add_class('SlDiscConfigRemoteUe', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigScheduled [struct]
    module.add_class('SlDiscConfigScheduled', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigUeSelected [struct]
    module.add_class('SlDiscConfigUeSelected', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool [struct]
    module.add_class('SlDiscResourcePool', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::RxParameters [struct]
    module.add_class('RxParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap::SlDiscResourcePool'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::RxParameters::TddConfig [struct]
    module.add_class('TddConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap::SlDiscResourcePool::RxParameters'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters [struct]
    module.add_class('TxParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap::SlDiscResourcePool'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters::UeSelectedResourceConfig [struct]
    module.add_class('UeSelectedResourceConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap::SlDiscResourcePool::TxParameters'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscRxPoolList [struct]
    module.add_class('SlDiscRxPoolList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolList [struct]
    module.add_class('SlDiscTxPoolList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolToAddMod [struct]
    module.add_class('SlDiscTxPoolToAddMod', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolToAddModList [struct]
    module.add_class('SlDiscTxPoolToAddModList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPowerInfo [struct]
    module.add_class('SlDiscTxPowerInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPowerInfoList [struct]
    module.add_class('SlDiscTxPowerInfoList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxResourcesSetup [struct]
    module.add_class('SlDiscTxResourcesSetup', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxResourcesSetup [enumeration]
    module.add_enum('', ['SCHEDULED', 'UE_SELECTED'], outer_class=root_module['ns3::LteRrcSap::SlDiscTxResourcesSetup'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigComm [struct]
    module.add_class('SlHoppingConfigComm', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigComm [enumeration]
    module.add_enum('', ['ns1', 'ns2', 'ns4', 'uninitialized'], outer_class=root_module['ns3::LteRrcSap::SlHoppingConfigComm'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigDisc [struct]
    module.add_class('SlHoppingConfigDisc', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigDisc [enumeration]
    module.add_enum('', ['n1', 'n5'], outer_class=root_module['ns3::LteRrcSap::SlHoppingConfigDisc'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlMacMainConfigSl [struct]
    module.add_class('SlMacMainConfigSl', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlOffsetIndicator [struct]
    module.add_class('SlOffsetIndicator', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPeriodComm [struct]
    module.add_class('SlPeriodComm', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPeriodComm [enumeration]
    module.add_enum('', ['sf40', 'sf60', 'sf70', 'sf80', 'sf120', 'sf140', 'sf160', 'sf240', 'sf280', 'sf320'], outer_class=root_module['ns3::LteRrcSap::SlPeriodComm'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPeriodDisc [struct]
    module.add_class('SlPeriodDisc', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPeriodDisc [enumeration]
    module.add_enum('', ['rf32', 'rf64', 'rf128', 'rf256', 'rf512', 'rf1024'], outer_class=root_module['ns3::LteRrcSap::SlPeriodDisc'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool [struct]
    module.add_class('SlPreconfigCommPool', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPoolList [struct]
    module.add_class('SlPreconfigCommPoolList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool [struct]
    module.add_class('SlPreconfigDiscPool', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::TxParameters [struct]
    module.add_class('TxParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap::SlPreconfigDiscPool'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPoolList [struct]
    module.add_class('SlPreconfigDiscPoolList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigGeneral [struct]
    module.add_class('SlPreconfigGeneral', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigRelay [struct]
    module.add_class('SlPreconfigRelay', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigSync [struct]
    module.add_class('SlPreconfigSync', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfiguration [struct]
    module.add_class('SlPreconfiguration', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlReselectionInfoRelay [struct]
    module.add_class('SlReselectionInfoRelay', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlSyncConfigList [struct]
    module.add_class('SlSyncConfigList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfIndexPair [struct]
    module.add_class('SlTfIndexPair', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfIndexPairList [struct]
    module.add_class('SlTfIndexPairList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfResourceConfig [struct]
    module.add_class('SlTfResourceConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTrptSubset [struct]
    module.add_class('SlTrptSubset', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTxParameters [struct]
    module.add_class('SlTxParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTxParameters [enumeration]
    module.add_enum('', ['al0', 'al04', 'al05', 'al06', 'al07', 'al08', 'al09', 'al1'], outer_class=root_module['ns3::LteRrcSap::SlTxParameters'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTxPoolToReleaseList [struct]
    module.add_class('SlTxPoolToReleaseList', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigCommon [struct]
    module.add_class('SoundingRsUlConfigCommon', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigCommon::action [enumeration]
    module.add_enum('action', ['SETUP', 'RESET'], outer_class=root_module['ns3::LteRrcSap::SoundingRsUlConfigCommon'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigDedicated [struct]
    module.add_class('SoundingRsUlConfigDedicated', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigDedicated::action [enumeration]
    module.add_enum('action', ['SETUP', 'RESET'], outer_class=root_module['ns3::LteRrcSap::SoundingRsUlConfigDedicated'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpecialSubframePatterns [struct]
    module.add_class('SpecialSubframePatterns', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpecialSubframePatterns [enumeration]
    module.add_enum('', ['ssp0', 'ssp1', 'ssp2', 'ssp3', 'ssp4', 'ssp5', 'ssp6', 'ssp7', 'ssp8'], outer_class=root_module['ns3::LteRrcSap::SpecialSubframePatterns'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStatePars [struct]
    module.add_class('SpeedStatePars', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStatePars::action [enumeration]
    module.add_enum('action', ['SETUP', 'RESET'], outer_class=root_module['ns3::LteRrcSap::SpeedStatePars'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStateScaleFactors [struct]
    module.add_class('SpeedStateScaleFactors', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SrbToAddMod [struct]
    module.add_class('SrbToAddMod', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SubframeAssignment [struct]
    module.add_class('SubframeAssignment', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SubframeAssignment [enumeration]
    module.add_enum('', ['sa0', 'sa1', 'sa2', 'sa3', 'sa4', 'sa5', 'sa6'], outer_class=root_module['ns3::LteRrcSap::SubframeAssignment'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SubframeBitmapSl [struct]
    module.add_class('SubframeBitmapSl', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformation [struct]
    module.add_class('SystemInformation', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType1 [struct]
    module.add_class('SystemInformationBlockType1', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType18 [struct]
    module.add_class('SystemInformationBlockType18', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType19 [struct]
    module.add_class('SystemInformationBlockType19', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType2 [struct]
    module.add_class('SystemInformationBlockType2', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ThresholdEutra [struct]
    module.add_class('ThresholdEutra', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ThresholdEutra [enumeration]
    module.add_enum('', ['THRESHOLD_RSRP', 'THRESHOLD_RSRQ'], outer_class=root_module['ns3::LteRrcSap::ThresholdEutra'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::TxFailParam [struct]
    module.add_class('TxFailParam', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::TxProbability [struct]
    module.add_class('TxProbability', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::TxProbability [enumeration]
    module.add_enum('', ['p25', 'p50', 'p75', 'p100'], outer_class=root_module['ns3::LteRrcSap::TxProbability'], import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlConfiguration [struct]
    module.add_class('UlConfiguration', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlPowerControlCommonSCell [struct]
    module.add_class('UlPowerControlCommonSCell', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlPowerControlDedicatedSCell [struct]
    module.add_class('UlPowerControlDedicatedSCell', import_from_module='ns.lte', outer_class=root_module['ns3::LteRrcSap'])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteSlSyncParams [struct]
    module.add_class('LteSlSyncParams', import_from_module='ns.lte')
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapProvider [class]
    module.add_class('LteUeCcmRrcSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapProvider::LcsConfig [struct]
    module.add_class('LcsConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeCcmRrcSapProvider'])
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapUser [class]
    module.add_class('LteUeCcmRrcSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider [class]
    module.add_class('LteUeCmacSapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::LogicalChannelConfig [struct]
    module.add_class('LogicalChannelConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeCmacSapProvider'])
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::RachConfig [struct]
    module.add_class('RachConfig', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeCmacSapProvider'])
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapUser [class]
    module.add_class('LteUeCmacSapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-common.h (module 'lte'): ns3::LteUeConfig_t [struct]
    module.add_class('LteUeConfig_t', import_from_module='ns.lte')
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapProvider [class]
    module.add_class('LteUeCphySapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser [class]
    module.add_class('LteUeCphySapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeMeasurementsElement [struct]
    module.add_class('UeMeasurementsElement', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeCphySapUser'])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeMeasurementsParameters [struct]
    module.add_class('UeMeasurementsParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeCphySapUser'])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement [struct]
    module.add_class('UeSdRsrpMeasurementsElement', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeCphySapUser'])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSdRsrpMeasurementsParameters [struct]
    module.add_class('UeSdRsrpMeasurementsParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeCphySapUser'])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSlssMeasurementsElement [struct]
    module.add_class('UeSlssMeasurementsElement', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeCphySapUser'])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSlssMeasurementsParameters [struct]
    module.add_class('UeSlssMeasurementsParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeCphySapUser'])
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider [class]
    module.add_class('LteUePhySapProvider', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters [struct]
    module.add_class('TransmitSlPhySduParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteUePhySapProvider'])
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters::SidelinkChannel [enumeration]
    module.add_enum('SidelinkChannel', ['PSBCH', 'PSCCH', 'PSSCH', 'PSDCH', 'INVALID_CH'], outer_class=root_module['ns3::LteUePhySapProvider::TransmitSlPhySduParameters'], import_from_module='ns.lte')
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapUser [class]
    module.add_class('LteUePhySapUser', allow_subclassing=True, import_from_module='ns.lte')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapProvider [class]
    module.add_class('LteUeRrcSapProvider', import_from_module='ns.lte', parent=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapProvider::CompleteSetupParameters [struct]
    module.add_class('CompleteSetupParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeRrcSapProvider'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapUser [class]
    module.add_class('LteUeRrcSapUser', import_from_module='ns.lte', parent=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapUser::SetupParameters [struct]
    module.add_class('SetupParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeRrcSapUser'])
    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
    module.add_class('Mac48Address', import_from_module='ns.network')
    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
    root_module['ns3::Mac48Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## mac64-address.h (module 'network'): ns3::Mac64Address [class]
    module.add_class('Mac64Address', import_from_module='ns.network')
    ## mac64-address.h (module 'network'): ns3::Mac64Address [class]
    root_module['ns3::Mac64Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
    module.add_class('Mac8Address', import_from_module='ns.network')
    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
    root_module['ns3::Mac8Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## ff-mac-common.h (module 'lte'): ns3::MacCeListElement_s [struct]
    module.add_class('MacCeListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::MacCeListElement_s::MacCeType_e [enumeration]
    module.add_enum('MacCeType_e', ['BSR', 'PHR', 'CRNTI', 'SLBSR', 'NotValid'], outer_class=root_module['ns3::MacCeListElement_s'], import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::MacCeValue_u [struct]
    module.add_class('MacCeValue_u', import_from_module='ns.lte')
    ## names.h (module 'core'): ns3::Names [class]
    module.add_class('Names', import_from_module='ns.core')
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer [class]
    module.add_class('NetDeviceContainer', import_from_module='ns.network')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator', 'ns3::NetDeviceContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator*', 'ns3::NetDeviceContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator&', 'ns3::NetDeviceContainer::Iterator&')
    ## node-container.h (module 'network'): ns3::NodeContainer [class]
    module.add_class('NodeContainer', import_from_module='ns.network')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
    ## object-base.h (module 'core'): ns3::ObjectBase [class]
    module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
    ## object.h (module 'core'): ns3::ObjectDeleter [struct]
    module.add_class('ObjectDeleter', import_from_module='ns.core')
    ## object-factory.h (module 'core'): ns3::ObjectFactory [class]
    module.add_class('ObjectFactory', import_from_module='ns.core')
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata [class]
    module.add_class('PacketMetadata', import_from_module='ns.network')
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [struct]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::ItemType [enumeration]
    module.add_enum('ItemType', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator [class]
    module.add_class('ItemIterator', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
    ## packet.h (module 'network'): ns3::PacketTagIterator [class]
    module.add_class('PacketTagIterator', import_from_module='ns.network')
    ## packet.h (module 'network'): ns3::PacketTagIterator::Item [class]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagIterator'])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList [class]
    module.add_class('PacketTagList', import_from_module='ns.network')
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData [struct]
    module.add_class('TagData', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagList'])
    ## ff-mac-common.h (module 'lte'): ns3::PagingInfoListElement_s [struct]
    module.add_class('PagingInfoListElement_s', import_from_module='ns.lte')
    ## log.h (module 'core'): ns3::ParameterLogger [class]
    module.add_class('ParameterLogger', import_from_module='ns.core')
    ## ff-mac-common.h (module 'lte'): ns3::PhichListElement_s [struct]
    module.add_class('PhichListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::PhichListElement_s::Phich_e [enumeration]
    module.add_enum('Phich_e', ['ACK', 'NACK', 'NotValid'], outer_class=root_module['ns3::PhichListElement_s'], import_from_module='ns.lte')
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters [struct]
    module.add_class('PhyReceptionStatParameters', import_from_module='ns.lte')
    typehandlers.add_type_alias('void ( * ) ( ns3::PhyReceptionStatParameters const )', 'ns3::PhyReceptionStatParameters::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::PhyReceptionStatParameters const )*', 'ns3::PhyReceptionStatParameters::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::PhyReceptionStatParameters const )&', 'ns3::PhyReceptionStatParameters::TracedCallback&')
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters [struct]
    module.add_class('PhyTransmissionStatParameters', import_from_module='ns.lte')
    typehandlers.add_type_alias('void ( * ) ( ns3::PhyTransmissionStatParameters const )', 'ns3::PhyTransmissionStatParameters::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::PhyTransmissionStatParameters const )*', 'ns3::PhyTransmissionStatParameters::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::PhyTransmissionStatParameters const )&', 'ns3::PhyTransmissionStatParameters::TracedCallback&')
    ## ff-mac-common.h (module 'lte'): ns3::RachListElement_s [struct]
    module.add_class('RachListElement_s', import_from_module='ns.lte')
    ## radio-bearer-stats-connector.h (module 'lte'): ns3::RadioBearerStatsConnector [class]
    module.add_class('RadioBearerStatsConnector', import_from_module='ns.lte')
    ## rectangle.h (module 'mobility'): ns3::Rectangle [class]
    module.add_class('Rectangle', import_from_module='ns.mobility')
    ## rectangle.h (module 'mobility'): ns3::Rectangle::Side [enumeration]
    module.add_enum('Side', ['RIGHT', 'LEFT', 'TOP', 'BOTTOM'], outer_class=root_module['ns3::Rectangle'], import_from_module='ns.mobility')
    ## ff-mac-common.h (module 'lte'): ns3::RlcPduListElement_s [struct]
    module.add_class('RlcPduListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::SbMeasResult_s [struct]
    module.add_class('SbMeasResult_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s [struct]
    module.add_class('SciListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::SiConfiguration_s [struct]
    module.add_class('SiConfiguration_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::SiMessageListElement_s [struct]
    module.add_class('SiMessageListElement_s', import_from_module='ns.lte')
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::ObjectBase'], template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'])
    ## simulator.h (module 'core'): ns3::Simulator [class]
    module.add_class('Simulator', destructor_visibility='private', import_from_module='ns.core')
    ## simulator.h (module 'core'): ns3::Simulator [enumeration]
    module.add_enum('', ['NO_CONTEXT'], outer_class=root_module['ns3::Simulator'], import_from_module='ns.core')
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlCtrlPacketInfo_t [struct]
    module.add_class('SlCtrlPacketInfo_t', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::SlDciListElement_s [struct]
    module.add_class('SlDciListElement_s', import_from_module='ns.lte')
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDiscTbId_t [struct]
    module.add_class('SlDiscTbId_t', import_from_module='ns.lte')
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t [struct]
    module.add_class('SlDisctbInfo_t', import_from_module='ns.lte')
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters [struct]
    module.add_class('SlPhyReceptionStatParameters', import_from_module='ns.lte')
    typehandlers.add_type_alias('void ( * ) ( ns3::SlPhyReceptionStatParameters const )', 'ns3::SlPhyReceptionStatParameters::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::SlPhyReceptionStatParameters const )*', 'ns3::SlPhyReceptionStatParameters::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::SlPhyReceptionStatParameters const )&', 'ns3::SlPhyReceptionStatParameters::TracedCallback&')
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters [struct]
    module.add_class('SlPhyTransmissionStatParameters', import_from_module='ns.lte')
    typehandlers.add_type_alias('void ( * ) ( ns3::SlPhyTransmissionStatParameters const )', 'ns3::SlPhyTransmissionStatParameters::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::SlPhyTransmissionStatParameters const )*', 'ns3::SlPhyTransmissionStatParameters::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::SlPhyTransmissionStatParameters const )&', 'ns3::SlPhyTransmissionStatParameters::TracedCallback&')
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlRxPacketInfo_t [struct]
    module.add_class('SlRxPacketInfo_t', import_from_module='ns.lte')
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlTbId_t [struct]
    module.add_class('SlTbId_t', import_from_module='ns.lte')
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters [struct]
    module.add_class('SlUeMacStatParameters', import_from_module='ns.lte')
    typehandlers.add_type_alias('void ( * ) ( ns3::SlUeMacStatParameters const )', 'ns3::SlUeMacStatParameters::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::SlUeMacStatParameters const )*', 'ns3::SlUeMacStatParameters::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::SlUeMacStatParameters const )&', 'ns3::SlUeMacStatParameters::TracedCallback&')
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t [struct]
    module.add_class('SltbInfo_t', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::SpsConfig_s [struct]
    module.add_class('SpsConfig_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::SrConfig_s [struct]
    module.add_class('SrConfig_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::SrListElement_s [struct]
    module.add_class('SrListElement_s', import_from_module='ns.lte')
    ## data-calculator.h (module 'stats'): ns3::StatisticalSummary [class]
    module.add_class('StatisticalSummary', allow_subclassing=True, import_from_module='ns.stats')
    ## tag.h (module 'network'): ns3::Tag [class]
    module.add_class('Tag', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
    ## tag-buffer.h (module 'network'): ns3::TagBuffer [class]
    module.add_class('TagBuffer', import_from_module='ns.network')
    ## lte-nist-error-model.h (module 'lte'): ns3::TbErrorStats_t [struct]
    module.add_class('TbErrorStats_t', import_from_module='ns.lte')
    ## lte-spectrum-phy.h (module 'lte'): ns3::TbId_t [struct]
    module.add_class('TbId_t', import_from_module='ns.lte')
    ## nstime.h (module 'core'): ns3::Time [class]
    module.add_class('Time', import_from_module='ns.core')
    ## nstime.h (module 'core'): ns3::Time::Unit [enumeration]
    module.add_enum('Unit', ['Y', 'D', 'H', 'MIN', 'S', 'MS', 'US', 'NS', 'PS', 'FS', 'LAST', 'AUTO'], outer_class=root_module['ns3::Time'], import_from_module='ns.core')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
    ## nstime.h (module 'core'): ns3::TimeWithUnit [class]
    module.add_class('TimeWithUnit', import_from_module='ns.core')
    ## timer.h (module 'core'): ns3::Timer [class]
    module.add_class('Timer', import_from_module='ns.core')
    ## timer.h (module 'core'): ns3::Timer::DestroyPolicy [enumeration]
    module.add_enum('DestroyPolicy', ['CANCEL_ON_DESTROY', 'REMOVE_ON_DESTROY', 'CHECK_ON_DESTROY'], outer_class=root_module['ns3::Timer'], import_from_module='ns.core')
    ## timer.h (module 'core'): ns3::Timer::State [enumeration]
    module.add_enum('State', ['RUNNING', 'EXPIRED', 'SUSPENDED'], outer_class=root_module['ns3::Timer'], import_from_module='ns.core')
    ## timer-impl.h (module 'core'): ns3::TimerImpl [class]
    module.add_class('TimerImpl', allow_subclassing=True, import_from_module='ns.core')
    ## traced-value.h (module 'core'): ns3::TracedValue<bool> [class]
    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['bool'])
    ## traced-value.h (module 'core'): ns3::TracedValue<double> [class]
    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['double'])
    ## lte-common.h (module 'lte'): ns3::TransmissionModesLayers [class]
    module.add_class('TransmissionModesLayers', import_from_module='ns.lte')
    ## type-id.h (module 'core'): ns3::TypeId [class]
    module.add_class('TypeId', import_from_module='ns.core')
    ## type-id.h (module 'core'): ns3::TypeId::AttributeFlag [enumeration]
    module.add_enum('AttributeFlag', ['ATTR_GET', 'ATTR_SET', 'ATTR_CONSTRUCT', 'ATTR_SGC'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
    ## type-id.h (module 'core'): ns3::TypeId::SupportLevel [enumeration]
    module.add_enum('SupportLevel', ['SUPPORTED', 'DEPRECATED', 'OBSOLETE'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation [struct]
    module.add_class('AttributeInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation [struct]
    module.add_class('TraceSourceInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
    typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
    typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
    typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
    ## ff-mac-common.h (module 'lte'): ns3::UeCapabilities_s [struct]
    module.add_class('UeCapabilities_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::UeSelected_s [struct]
    module.add_class('UeSelected_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::UlCqi_s [struct]
    module.add_class('UlCqi_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::UlCqi_s::Type_e [enumeration]
    module.add_enum('Type_e', ['SRS', 'PUSCH', 'PUCCH_1', 'PUCCH_2', 'PRACH', 'NotValid'], outer_class=root_module['ns3::UlCqi_s'], import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s [struct]
    module.add_class('UlDciListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s [struct]
    module.add_class('UlGrant_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::UlInfoListElement_s [struct]
    module.add_class('UlInfoListElement_s', import_from_module='ns.lte')
    ## ff-mac-common.h (module 'lte'): ns3::UlInfoListElement_s::ReceptionStatus_e [enumeration]
    module.add_enum('ReceptionStatus_e', ['Ok', 'NotOk', 'NotValid'], outer_class=root_module['ns3::UlInfoListElement_s'], import_from_module='ns.lte')
    ## vector.h (module 'core'): ns3::Vector2D [class]
    module.add_class('Vector2D', import_from_module='ns.core')
    ## vector.h (module 'core'): ns3::Vector3D [class]
    module.add_class('Vector3D', import_from_module='ns.core')
    ## ff-mac-common.h (module 'lte'): ns3::VendorSpecificListElement_s [struct]
    module.add_class('VendorSpecificListElement_s', import_from_module='ns.lte')
    ## empty.h (module 'core'): ns3::empty [class]
    module.add_class('empty', import_from_module='ns.core')
    ## int64x64-128.h (module 'core'): ns3::int64x64_t [class]
    module.add_class('int64x64_t', import_from_module='ns.core')
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
    module.add_enum('impl_type', ['int128_impl', 'cairo_impl', 'ld_impl'], outer_class=root_module['ns3::int64x64_t'], import_from_module='ns.core')
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t [struct]
    module.add_class('tbInfo_t', import_from_module='ns.lte')
    ## chunk.h (module 'network'): ns3::Chunk [class]
    module.add_class('Chunk', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
    ## eps-bearer.h (module 'lte'): ns3::EpsBearer [class]
    module.add_class('EpsBearer', import_from_module='ns.lte', parent=root_module['ns3::ObjectBase'])
    ## eps-bearer.h (module 'lte'): ns3::EpsBearer::Qci [enumeration]
    module.add_enum('Qci', ['GBR_CONV_VOICE', 'GBR_CONV_VIDEO', 'GBR_GAMING', 'GBR_NON_CONV_VIDEO', 'GBR_MC_PUSH_TO_TALK', 'GBR_NMC_PUSH_TO_TALK', 'GBR_MC_VIDEO', 'GBR_V2X', 'NGBR_IMS', 'NGBR_VIDEO_TCP_OPERATOR', 'NGBR_VOICE_VIDEO_GAMING', 'NGBR_VIDEO_TCP_PREMIUM', 'NGBR_VIDEO_TCP_DEFAULT', 'NGBR_MC_DELAY_SIGNAL', 'NGBR_MC_DATA', 'NGBR_V2X', 'NGBR_LOW_LAT_EMBB', 'DGBR_DISCRETE_AUT_SMALL', 'DGBR_DISCRETE_AUT_LARGE', 'DGBR_ITS', 'DGBR_ELECTRICITY'], outer_class=root_module['ns3::EpsBearer'], import_from_module='ns.lte')
    ## header.h (module 'network'): ns3::Header [class]
    module.add_class('Header', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
    ## lte-ccm-mac-sap.h (module 'lte'): ns3::LteCcmMacSapUser [class]
    module.add_class('LteCcmMacSapUser', import_from_module='ns.lte', parent=root_module['ns3::LteMacSapUser'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapProvider [class]
    module.add_class('LteEnbRrcSapProvider', import_from_module='ns.lte', parent=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters [struct]
    module.add_class('CompleteSetupUeParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteEnbRrcSapProvider'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapUser [class]
    module.add_class('LteEnbRrcSapUser', import_from_module='ns.lte', parent=root_module['ns3::LteRrcSap'])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapUser::SetupUeParameters [struct]
    module.add_class('SetupUeParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteEnbRrcSapUser'])
    ## lte-sl-header.h (module 'lte'): ns3::LteSlDiscHeader [class]
    module.add_class('LteSlDiscHeader', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-header.h (module 'lte'): ns3::LteSlDiscHeader::DiscoveryMsgType [enumeration]
    module.add_enum('DiscoveryMsgType', ['DISC_OPEN_ANNOUNCEMENT', 'DISC_RESTRICTED_RESPONSE', 'DISC_RESTRICTED_QUERY', 'DISC_RELAY_ANNOUNCEMENT', 'DISC_RELAY_SOLICITATION', 'DISC_RELAY_RESPONSE'], outer_class=root_module['ns3::LteSlDiscHeader'], import_from_module='ns.lte')
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::LteSlPc5SignallingMessageType [class]
    module.add_class('LteSlPc5SignallingMessageType', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::LteSlPc5SignallingMessageType::PC5SignallingMessageType [enumeration]
    module.add_enum('PC5SignallingMessageType', ['DirectCommunicationRequest', 'DirectCommunicationAccept', 'DirectCommunicationReject', 'DirectCommunicationKeepalive', 'DirectCommunicationKeepaliveAck', 'DirectCommunicationRelease', 'DirectCommunicationReleaseAccept', 'DirectSecurityModeCommand', 'DirectSecurityModeComplete', 'DirectSecurityModeReject', 'DirectRekeyingRequest', 'DirectRekeyingResponse', 'DirectRekeyingTrigger', 'RemoteUeInfoRequest', 'RemoteUeInfoResponse'], outer_class=root_module['ns3::LteSlPc5SignallingMessageType'], import_from_module='ns.lte')
    ## lte-sl-header.h (module 'lte'): ns3::LteSlSciHeader [class]
    module.add_class('LteSlSciHeader', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## object.h (module 'core'): ns3::Object [class]
    module.add_class('Object', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
    ## object.h (module 'core'): ns3::Object::AggregateIterator [class]
    module.add_class('AggregateIterator', import_from_module='ns.core', outer_class=root_module['ns3::Object'])
    ## packet-burst.h (module 'network'): ns3::PacketBurst [class]
    module.add_class('PacketBurst', import_from_module='ns.network', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::PacketBurst const > )', 'ns3::PacketBurst::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::PacketBurst const > )*', 'ns3::PacketBurst::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::PacketBurst const > )&', 'ns3::PacketBurst::TracedCallback&')
    ## phased-array-model.h (module 'antenna'): ns3::PhasedArrayModel [class]
    module.add_class('PhasedArrayModel', import_from_module='ns.antenna', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('std::vector< std::complex< double > >', 'ns3::PhasedArrayModel::ComplexVector')
    typehandlers.add_type_alias('std::vector< std::complex< double > >*', 'ns3::PhasedArrayModel::ComplexVector*')
    typehandlers.add_type_alias('std::vector< std::complex< double > >&', 'ns3::PhasedArrayModel::ComplexVector&')
    ## phased-array-spectrum-propagation-loss-model.h (module 'spectrum'): ns3::PhasedArraySpectrumPropagationLossModel [class]
    module.add_class('PhasedArraySpectrumPropagationLossModel', import_from_module='ns.spectrum', parent=root_module['ns3::Object'])
    ## propagation-delay-model.h (module 'propagation'): ns3::PropagationDelayModel [class]
    module.add_class('PropagationDelayModel', import_from_module='ns.propagation', parent=root_module['ns3::Object'])
    ## propagation-loss-model.h (module 'propagation'): ns3::PropagationLossModel [class]
    module.add_class('PropagationLossModel', import_from_module='ns.propagation', parent=root_module['ns3::Object'])
    ## propagation-delay-model.h (module 'propagation'): ns3::RandomPropagationDelayModel [class]
    module.add_class('RandomPropagationDelayModel', import_from_module='ns.propagation', parent=root_module['ns3::PropagationDelayModel'])
    ## propagation-loss-model.h (module 'propagation'): ns3::RandomPropagationLossModel [class]
    module.add_class('RandomPropagationLossModel', import_from_module='ns.propagation', parent=root_module['ns3::PropagationLossModel'])
    ## random-variable-stream.h (module 'core'): ns3::RandomVariableStream [class]
    module.add_class('RandomVariableStream', import_from_module='ns.core', parent=root_module['ns3::Object'])
    ## propagation-loss-model.h (module 'propagation'): ns3::RangePropagationLossModel [class]
    module.add_class('RangePropagationLossModel', import_from_module='ns.propagation', parent=root_module['ns3::PropagationLossModel'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::RemoteUeInfoRequest [class]
    module.add_class('RemoteUeInfoRequest', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::RemoteUeInfoResponse [class]
    module.add_class('RemoteUeInfoResponse', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## seq-ts-header.h (module 'applications'): ns3::SeqTsHeader [class]
    module.add_class('SeqTsHeader', import_from_module='ns.applications', parent=root_module['ns3::Header'])
    ## seq-ts-size-header.h (module 'applications'): ns3::SeqTsSizeHeader [class]
    module.add_class('SeqTsSizeHeader', import_from_module='ns.applications', parent=root_module['ns3::SeqTsHeader'])
    ## random-variable-stream.h (module 'core'): ns3::SequentialRandomVariable [class]
    module.add_class('SequentialRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool [class]
    module.add_class('SidelinkCommResourcePool', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SlPoolType [enumeration]
    module.add_enum('SlPoolType', ['UNKNOWN', 'SCHEDULED', 'UE_SELECTED'], outer_class=root_module['ns3::SidelinkCommResourcePool'], import_from_module='ns.lte')
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo [struct]
    module.add_class('SidelinkTransmissionInfo', import_from_module='ns.lte', outer_class=root_module['ns3::SidelinkCommResourcePool'])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SubframeInfo [struct]
    module.add_class('SubframeInfo', import_from_module='ns.lte', outer_class=root_module['ns3::SidelinkCommResourcePool'])
    typehandlers.add_type_alias('void ( * ) ( uint32_t const, uint32_t const, uint32_t const )', 'ns3::SidelinkCommResourcePool::ScPeriodTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t const, uint32_t const, uint32_t const )*', 'ns3::SidelinkCommResourcePool::ScPeriodTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t const, uint32_t const, uint32_t const )&', 'ns3::SidelinkCommResourcePool::ScPeriodTracedCallback&')
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool [class]
    module.add_class('SidelinkDiscResourcePool', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SlPoolType [enumeration]
    module.add_enum('SlPoolType', ['UNKNOWN', 'SCHEDULED', 'UE_SELECTED'], outer_class=root_module['ns3::SidelinkDiscResourcePool'], import_from_module='ns.lte')
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo [struct]
    module.add_class('SidelinkTransmissionInfo', import_from_module='ns.lte', outer_class=root_module['ns3::SidelinkDiscResourcePool'])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SubframeInfo [struct]
    module.add_class('SubframeInfo', import_from_module='ns.lte', outer_class=root_module['ns3::SidelinkDiscResourcePool'])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkRxCommResourcePool [class]
    module.add_class('SidelinkRxCommResourcePool', import_from_module='ns.lte', parent=root_module['ns3::SidelinkCommResourcePool'])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkRxDiscResourcePool [class]
    module.add_class('SidelinkRxDiscResourcePool', import_from_module='ns.lte', parent=root_module['ns3::SidelinkDiscResourcePool'])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkTxCommResourcePool [class]
    module.add_class('SidelinkTxCommResourcePool', import_from_module='ns.lte', parent=root_module['ns3::SidelinkCommResourcePool'])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkTxDiscResourcePool [class]
    module.add_class('SidelinkTxDiscResourcePool', import_from_module='ns.lte', parent=root_module['ns3::SidelinkDiscResourcePool'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EpcTft, ns3::empty, ns3::DefaultDeleter<ns3::EpcTft>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::EpcTft', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EpcTft>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::LteControlMessage>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::LteControlMessage', 'ns3::empty', 'ns3::DefaultDeleter<ns3::LteControlMessage>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteHarqPhy>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::LteHarqPhy', 'ns3::empty', 'ns3::DefaultDeleter<ns3::LteHarqPhy>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteSlHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteSlHarqPhy>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::LteSlHarqPhy', 'ns3::empty', 'ns3::DefaultDeleter<ns3::LteSlHarqPhy>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteSlTft, ns3::empty, ns3::DefaultDeleter<ns3::LteSlTft>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::LteSlTft', 'ns3::empty', 'ns3::DefaultDeleter<ns3::LteSlTft>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::SpectrumModel', 'ns3::empty', 'ns3::DefaultDeleter<ns3::SpectrumModel>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::SpectrumSignalParameters', 'ns3::empty', 'ns3::DefaultDeleter<ns3::SpectrumSignalParameters>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::SpectrumValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::SpectrumValue>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::VendorSpecificValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::VendorSpecificValue>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttCallMachineGrpBasicState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttCallMachineGrpBroadcastState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttCallMachinePrivateState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttCallTypeMachinePrivateState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOffNetworkFloorParticipantState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOnNetworkCallMachineClientState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOnNetworkFloorArbitratorState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOnNetworkFloorDualControlState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOnNetworkFloorParticipantState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOnNetworkFloorTowardsParticipantState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttServerCallMachineGroupPrearrangedState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>'])
    ## socket.h (module 'network'): ns3::Socket [class]
    module.add_class('Socket', import_from_module='ns.network', parent=root_module['ns3::Object'])
    ## socket.h (module 'network'): ns3::Socket::SocketErrno [enumeration]
    module.add_enum('SocketErrno', ['ERROR_NOTERROR', 'ERROR_ISCONN', 'ERROR_NOTCONN', 'ERROR_MSGSIZE', 'ERROR_AGAIN', 'ERROR_SHUTDOWN', 'ERROR_OPNOTSUPP', 'ERROR_AFNOSUPPORT', 'ERROR_INVAL', 'ERROR_BADF', 'ERROR_NOROUTETOHOST', 'ERROR_NODEV', 'ERROR_ADDRNOTAVAIL', 'ERROR_ADDRINUSE', 'SOCKET_ERRNO_LAST'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
    ## socket.h (module 'network'): ns3::Socket::SocketType [enumeration]
    module.add_enum('SocketType', ['NS3_SOCK_STREAM', 'NS3_SOCK_SEQPACKET', 'NS3_SOCK_DGRAM', 'NS3_SOCK_RAW'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
    ## socket.h (module 'network'): ns3::Socket::SocketPriority [enumeration]
    module.add_enum('SocketPriority', ['NS3_PRIO_BESTEFFORT', 'NS3_PRIO_FILLER', 'NS3_PRIO_BULK', 'NS3_PRIO_INTERACTIVE_BULK', 'NS3_PRIO_INTERACTIVE', 'NS3_PRIO_CONTROL'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
    ## socket.h (module 'network'): ns3::Socket::Ipv6MulticastFilterMode [enumeration]
    module.add_enum('Ipv6MulticastFilterMode', ['INCLUDE', 'EXCLUDE'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
    ## socket.h (module 'network'): ns3::SocketIpTosTag [class]
    module.add_class('SocketIpTosTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketIpTtlTag [class]
    module.add_class('SocketIpTtlTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag [class]
    module.add_class('SocketIpv6HopLimitTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag [class]
    module.add_class('SocketIpv6TclassTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketPriorityTag [class]
    module.add_class('SocketPriorityTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag [class]
    module.add_class('SocketSetDontFragmentTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## spectrum-interference.h (module 'spectrum'): ns3::SpectrumInterference [class]
    module.add_class('SpectrumInterference', import_from_module='ns.spectrum', parent=root_module['ns3::Object'])
    ## spectrum-model.h (module 'spectrum'): ns3::SpectrumModel [class]
    module.add_class('SpectrumModel', import_from_module='ns.spectrum', parent=root_module['ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> >'])
    ## spectrum-phy.h (module 'spectrum'): ns3::SpectrumPhy [class]
    module.add_class('SpectrumPhy', import_from_module='ns.spectrum', parent=root_module['ns3::Object'])
    ## spectrum-propagation-loss-model.h (module 'spectrum'): ns3::SpectrumPropagationLossModel [class]
    module.add_class('SpectrumPropagationLossModel', import_from_module='ns.spectrum', parent=root_module['ns3::Object'])
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters [struct]
    module.add_class('SpectrumSignalParameters', import_from_module='ns.spectrum', parent=root_module['ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> >'])
    ## spectrum-value.h (module 'spectrum'): ns3::SpectrumValue [class]
    module.add_class('SpectrumValue', import_from_module='ns.spectrum', parent=root_module['ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> >'])
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::SpectrumValue > )', 'ns3::SpectrumValue::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::SpectrumValue > )*', 'ns3::SpectrumValue::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::SpectrumValue > )&', 'ns3::SpectrumValue::TracedCallback&')
    ## propagation-loss-model.h (module 'propagation'): ns3::ThreeLogDistancePropagationLossModel [class]
    module.add_class('ThreeLogDistancePropagationLossModel', import_from_module='ns.propagation', parent=root_module['ns3::PropagationLossModel'])
    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor [class]
    module.add_class('TraceSourceAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
    ## trailer.h (module 'network'): ns3::Trailer [class]
    module.add_class('Trailer', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
    ## random-variable-stream.h (module 'core'): ns3::TriangularRandomVariable [class]
    module.add_class('TriangularRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## propagation-loss-model.h (module 'propagation'): ns3::TwoRayGroundPropagationLossModel [class]
    module.add_class('TwoRayGroundPropagationLossModel', import_from_module='ns.propagation', parent=root_module['ns3::PropagationLossModel'])
    ## lte-enb-rrc.h (module 'lte'): ns3::UeManager [class]
    module.add_class('UeManager', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-enb-rrc.h (module 'lte'): ns3::UeManager::State [enumeration]
    module.add_enum('State', ['INITIAL_RANDOM_ACCESS', 'CONNECTION_SETUP', 'CONNECTION_REJECTED', 'ATTACH_REQUEST', 'CONNECTED_NORMALLY', 'CONNECTION_RECONFIGURATION', 'CONNECTION_REESTABLISHMENT', 'HANDOVER_PREPARATION', 'HANDOVER_JOINING', 'HANDOVER_PATH_SWITCH', 'HANDOVER_LEAVING', 'NUM_STATES'], outer_class=root_module['ns3::UeManager'], import_from_module='ns.lte')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, ns3::UeManager::State const, ns3::UeManager::State const )', 'ns3::UeManager::StateTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, ns3::UeManager::State const, ns3::UeManager::State const )*', 'ns3::UeManager::StateTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, ns3::UeManager::State const, ns3::UeManager::State const )&', 'ns3::UeManager::StateTracedCallback&')
    ## random-variable-stream.h (module 'core'): ns3::UniformRandomVariable [class]
    module.add_class('UniformRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## ff-mac-common.h (module 'lte'): ns3::VendorSpecificValue [struct]
    module.add_class('VendorSpecificValue', import_from_module='ns.lte', parent=root_module['ns3::SimpleRefCount< ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> >'])
    ## random-variable-stream.h (module 'core'): ns3::WeibullRandomVariable [class]
    module.add_class('WeibullRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## random-variable-stream.h (module 'core'): ns3::ZetaRandomVariable [class]
    module.add_class('ZetaRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## random-variable-stream.h (module 'core'): ns3::ZipfRandomVariable [class]
    module.add_class('ZipfRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## antenna-model.h (module 'antenna'): ns3::AntennaModel [class]
    module.add_class('AntennaModel', import_from_module='ns.antenna', parent=root_module['ns3::Object'])
    ## application.h (module 'network'): ns3::Application [class]
    module.add_class('Application', import_from_module='ns.network', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( ns3::Time const &, ns3::Address const & )', 'ns3::Application::DelayAddressCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time const &, ns3::Address const & )*', 'ns3::Application::DelayAddressCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time const &, ns3::Address const & )&', 'ns3::Application::DelayAddressCallback&')
    typehandlers.add_type_alias('void ( * ) ( std::string const &, std::string const & )', 'ns3::Application::StateTransitionCallback')
    typehandlers.add_type_alias('void ( * ) ( std::string const &, std::string const & )*', 'ns3::Application::StateTransitionCallback*')
    typehandlers.add_type_alias('void ( * ) ( std::string const &, std::string const & )&', 'ns3::Application::StateTransitionCallback&')
    ## attribute.h (module 'core'): ns3::AttributeAccessor [class]
    module.add_class('AttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
    ## attribute.h (module 'core'): ns3::AttributeChecker [class]
    module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
    ## attribute.h (module 'core'): ns3::AttributeValue [class]
    module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
    ## boolean.h (module 'core'): ns3::BooleanChecker [class]
    module.add_class('BooleanChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## boolean.h (module 'core'): ns3::BooleanValue [class]
    module.add_class('BooleanValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## box.h (module 'mobility'): ns3::BoxChecker [class]
    module.add_class('BoxChecker', import_from_module='ns.mobility', parent=root_module['ns3::AttributeChecker'])
    ## box.h (module 'mobility'): ns3::BoxValue [class]
    module.add_class('BoxValue', import_from_module='ns.mobility', parent=root_module['ns3::AttributeValue'])
    ## building.h (module 'buildings'): ns3::Building [class]
    module.add_class('Building', import_from_module='ns.buildings', parent=root_module['ns3::Object'])
    ## building.h (module 'buildings'): ns3::Building::BuildingType_t [enumeration]
    module.add_enum('BuildingType_t', ['Residential', 'Office', 'Commercial'], outer_class=root_module['ns3::Building'], import_from_module='ns.buildings')
    ## building.h (module 'buildings'): ns3::Building::ExtWallsType_t [enumeration]
    module.add_enum('ExtWallsType_t', ['Wood', 'ConcreteWithWindows', 'ConcreteWithoutWindows', 'StoneBlocks'], outer_class=root_module['ns3::Building'], import_from_module='ns.buildings')
    ## callback.h (module 'core'): ns3::CallbackChecker [class]
    module.add_class('CallbackChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## callback.h (module 'core'): ns3::CallbackImplBase [class]
    module.add_class('CallbackImplBase', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
    ## callback.h (module 'core'): ns3::CallbackValue [class]
    module.add_class('CallbackValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## cc-helper.h (module 'lte'): ns3::CcHelper [class]
    module.add_class('CcHelper', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## channel.h (module 'network'): ns3::Channel [class]
    module.add_class('Channel', import_from_module='ns.network', parent=root_module['ns3::Object'])
    ## component-carrier.h (module 'lte'): ns3::ComponentCarrier [class]
    module.add_class('ComponentCarrier', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## component-carrier.h (module 'lte'): ns3::ComponentCarrierBaseStation [class]
    module.add_class('ComponentCarrierBaseStation', import_from_module='ns.lte', parent=root_module['ns3::ComponentCarrier'])
    ## component-carrier-enb.h (module 'lte'): ns3::ComponentCarrierEnb [class]
    module.add_class('ComponentCarrierEnb', import_from_module='ns.lte', parent=root_module['ns3::ComponentCarrierBaseStation'])
    ## component-carrier-ue.h (module 'lte'): ns3::ComponentCarrierUe [class]
    module.add_class('ComponentCarrierUe', import_from_module='ns.lte', parent=root_module['ns3::ComponentCarrier'])
    ## random-variable-stream.h (module 'core'): ns3::ConstantRandomVariable [class]
    module.add_class('ConstantRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## propagation-delay-model.h (module 'propagation'): ns3::ConstantSpeedPropagationDelayModel [class]
    module.add_class('ConstantSpeedPropagationDelayModel', import_from_module='ns.propagation', parent=root_module['ns3::PropagationDelayModel'])
    ## data-calculator.h (module 'stats'): ns3::DataCalculator [class]
    module.add_class('DataCalculator', import_from_module='ns.stats', parent=root_module['ns3::Object'])
    ## data-output-interface.h (module 'stats'): ns3::DataOutputInterface [class]
    module.add_class('DataOutputInterface', import_from_module='ns.stats', parent=root_module['ns3::Object'])
    ## data-rate.h (module 'network'): ns3::DataRateChecker [class]
    module.add_class('DataRateChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## data-rate.h (module 'network'): ns3::DataRateValue [class]
    module.add_class('DataRateValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## random-variable-stream.h (module 'core'): ns3::DeterministicRandomVariable [class]
    module.add_class('DeterministicRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## device-energy-model.h (module 'energy'): ns3::DeviceEnergyModel [class]
    module.add_class('DeviceEnergyModel', import_from_module='ns.energy', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('ns3::Callback< void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::DeviceEnergyModel::ChangeStateCallback')
    typehandlers.add_type_alias('ns3::Callback< void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::DeviceEnergyModel::ChangeStateCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::DeviceEnergyModel::ChangeStateCallback&')
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationAccept [class]
    module.add_class('DirectCommunicationAccept', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationKeepalive [class]
    module.add_class('DirectCommunicationKeepalive', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationKeepaliveAck [class]
    module.add_class('DirectCommunicationKeepaliveAck', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationReject [class]
    module.add_class('DirectCommunicationReject', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationRelease [class]
    module.add_class('DirectCommunicationRelease', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationReleaseAccept [class]
    module.add_class('DirectCommunicationReleaseAccept', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationRequest [class]
    module.add_class('DirectCommunicationRequest', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectRekeyingRequest [class]
    module.add_class('DirectRekeyingRequest', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectRekeyingResponse [class]
    module.add_class('DirectRekeyingResponse', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectRekeyingTrigger [class]
    module.add_class('DirectRekeyingTrigger', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectSecurityModeCommand [class]
    module.add_class('DirectSecurityModeCommand', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectSecurityModeComplete [class]
    module.add_class('DirectSecurityModeComplete', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectSecurityModeReject [class]
    module.add_class('DirectSecurityModeReject', import_from_module='ns.lte', parent=root_module['ns3::Header'])
    ## double.h (module 'core'): ns3::DoubleValue [class]
    module.add_class('DoubleValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## random-variable-stream.h (module 'core'): ns3::EmpiricalRandomVariable [class]
    module.add_class('EmpiricalRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor [class]
    module.add_class('EmptyAttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::AttributeAccessor'])
    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker [class]
    module.add_class('EmptyAttributeChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## attribute.h (module 'core'): ns3::EmptyAttributeValue [class]
    module.add_class('EmptyAttributeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## energy-harvester.h (module 'energy'): ns3::EnergyHarvester [class]
    module.add_class('EnergyHarvester', import_from_module='ns.energy', parent=root_module['ns3::Object'])
    ## energy-source.h (module 'energy'): ns3::EnergySource [class]
    module.add_class('EnergySource', import_from_module='ns.energy', parent=root_module['ns3::Object'])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer [class]
    module.add_class('EnergySourceContainer', import_from_module='ns.energy', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::EnergySource > > const_iterator', 'ns3::EnergySourceContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::EnergySource > > const_iterator*', 'ns3::EnergySourceContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::EnergySource > > const_iterator&', 'ns3::EnergySourceContainer::Iterator&')
    ## enum.h (module 'core'): ns3::EnumChecker [class]
    module.add_class('EnumChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## enum.h (module 'core'): ns3::EnumValue [class]
    module.add_class('EnumValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## epc-tft.h (module 'lte'): ns3::EpcTft [class]
    module.add_class('EpcTft', import_from_module='ns.lte', parent=root_module['ns3::SimpleRefCount< ns3::EpcTft, ns3::empty, ns3::DefaultDeleter<ns3::EpcTft> >'])
    ## epc-tft.h (module 'lte'): ns3::EpcTft::Direction [enumeration]
    module.add_enum('Direction', ['DOWNLINK', 'UPLINK', 'BIDIRECTIONAL'], outer_class=root_module['ns3::EpcTft'], import_from_module='ns.lte')
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter [struct]
    module.add_class('PacketFilter', import_from_module='ns.lte', outer_class=root_module['ns3::EpcTft'])
    ## random-variable-stream.h (module 'core'): ns3::ErlangRandomVariable [class]
    module.add_class('ErlangRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## event-impl.h (module 'core'): ns3::EventImpl [class]
    module.add_class('EventImpl', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
    ## random-variable-stream.h (module 'core'): ns3::ExponentialRandomVariable [class]
    module.add_class('ExponentialRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## propagation-loss-model.h (module 'propagation'): ns3::FixedRssLossModel [class]
    module.add_class('FixedRssLossModel', import_from_module='ns.propagation', parent=root_module['ns3::PropagationLossModel'])
    ## propagation-loss-model.h (module 'propagation'): ns3::FriisPropagationLossModel [class]
    module.add_class('FriisPropagationLossModel', import_from_module='ns.propagation', parent=root_module['ns3::PropagationLossModel'])
    ## random-variable-stream.h (module 'core'): ns3::GammaRandomVariable [class]
    module.add_class('GammaRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## integer.h (module 'core'): ns3::IntegerValue [class]
    module.add_class('IntegerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker [class]
    module.add_class('Ipv4AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue [class]
    module.add_class('Ipv4AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker [class]
    module.add_class('Ipv4MaskChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue [class]
    module.add_class('Ipv4MaskValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker [class]
    module.add_class('Ipv6AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue [class]
    module.add_class('Ipv6AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker [class]
    module.add_class('Ipv6PrefixChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue [class]
    module.add_class('Ipv6PrefixValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## propagation-loss-model.h (module 'propagation'): ns3::LogDistancePropagationLossModel [class]
    module.add_class('LogDistancePropagationLossModel', import_from_module='ns.propagation', parent=root_module['ns3::PropagationLossModel'])
    ## random-variable-stream.h (module 'core'): ns3::LogNormalRandomVariable [class]
    module.add_class('LogNormalRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## lte-amc.h (module 'lte'): ns3::LteAmc [class]
    module.add_class('LteAmc', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-amc.h (module 'lte'): ns3::LteAmc::AmcModel [enumeration]
    module.add_enum('AmcModel', ['PiroEW2010', 'MiErrorModel', 'NistErrorModel'], outer_class=root_module['ns3::LteAmc'], import_from_module='ns.lte')
    ## lte-amc.h (module 'lte'): ns3::LteAmc::McsPrbInfo [struct]
    module.add_class('McsPrbInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteAmc'])
    ## lte-control-messages.h (module 'lte'): ns3::LteControlMessage [class]
    module.add_class('LteControlMessage', import_from_module='ns.lte', parent=root_module['ns3::SimpleRefCount< ns3::LteControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::LteControlMessage> >'])
    ## lte-control-messages.h (module 'lte'): ns3::LteControlMessage::MessageType [enumeration]
    module.add_enum('MessageType', ['DL_DCI', 'UL_DCI', 'DL_CQI', 'UL_CQI', 'BSR', 'DL_HARQ', 'RACH_PREAMBLE', 'RAR', 'MIB', 'SIB1', 'SL_DCI'], outer_class=root_module['ns3::LteControlMessage'], import_from_module='ns.lte')
    ## lte-enb-mac.h (module 'lte'): ns3::LteEnbMac [class]
    module.add_class('LteEnbMac', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( uint32_t const, uint32_t const, uint16_t const, uint8_t const, uint16_t const, uint8_t const, uint16_t const, uint8_t const )', 'ns3::LteEnbMac::DlSchedulingTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t const, uint32_t const, uint16_t const, uint8_t const, uint16_t const, uint8_t const, uint16_t const, uint8_t const )*', 'ns3::LteEnbMac::DlSchedulingTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t const, uint32_t const, uint16_t const, uint8_t const, uint16_t const, uint8_t const, uint16_t const, uint8_t const )&', 'ns3::LteEnbMac::DlSchedulingTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint32_t const, uint32_t const, uint16_t const, uint8_t const, uint16_t const )', 'ns3::LteEnbMac::UlSchedulingTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t const, uint32_t const, uint16_t const, uint8_t const, uint16_t const )*', 'ns3::LteEnbMac::UlSchedulingTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t const, uint32_t const, uint16_t const, uint8_t const, uint16_t const )&', 'ns3::LteEnbMac::UlSchedulingTracedCallback&')
    ## lte-enb-rrc.h (module 'lte'): ns3::LteEnbRrc [class]
    module.add_class('LteEnbRrc', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteEnbRrc::LteEpsBearerToRlcMapping_t [enumeration]
    module.add_enum('LteEpsBearerToRlcMapping_t', ['RLC_SM_ALWAYS', 'RLC_UM_ALWAYS', 'RLC_AM_ALWAYS', 'PER_BASED'], outer_class=root_module['ns3::LteEnbRrc'], import_from_module='ns.lte')
    typehandlers.add_type_alias('void ( * ) ( uint16_t const, uint16_t const )', 'ns3::LteEnbRrc::NewUeContextTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t const, uint16_t const )*', 'ns3::LteEnbRrc::NewUeContextTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t const, uint16_t const )&', 'ns3::LteEnbRrc::NewUeContextTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const )', 'ns3::LteEnbRrc::ConnectionHandoverTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const )*', 'ns3::LteEnbRrc::ConnectionHandoverTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const )&', 'ns3::LteEnbRrc::ConnectionHandoverTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, uint16_t const )', 'ns3::LteEnbRrc::HandoverStartTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, uint16_t const )*', 'ns3::LteEnbRrc::HandoverStartTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, uint16_t const )&', 'ns3::LteEnbRrc::HandoverStartTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, ns3::LteRrcSap::MeasurementReport const )', 'ns3::LteEnbRrc::ReceiveReportTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, ns3::LteRrcSap::MeasurementReport const )*', 'ns3::LteEnbRrc::ReceiveReportTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, ns3::LteRrcSap::MeasurementReport const )&', 'ns3::LteEnbRrc::ReceiveReportTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, std::string const )', 'ns3::LteEnbRrc::TimerExpiryTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, std::string const )*', 'ns3::LteEnbRrc::TimerExpiryTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint16_t const, uint16_t const, std::string const )&', 'ns3::LteEnbRrc::TimerExpiryTracedCallback&')
    ## lte-harq-phy.h (module 'lte'): ns3::LteHarqPhy [class]
    module.add_class('LteHarqPhy', import_from_module='ns.lte', parent=root_module['ns3::SimpleRefCount< ns3::LteHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteHarqPhy> >'])
    ## lte-helper.h (module 'lte'): ns3::LteHelper [class]
    module.add_class('LteHelper', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-interference.h (module 'lte'): ns3::LteInterference [class]
    module.add_class('LteInterference', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-phy.h (module 'lte'): ns3::LtePhy [class]
    module.add_class('LtePhy', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteRadioBearerInfo [class]
    module.add_class('LteRadioBearerInfo', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-rlc.h (module 'lte'): ns3::LteRlc [class]
    module.add_class('LteRlc', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-rlc.h (module 'lte'): ns3::LteRlc::ChannelType [enumeration]
    module.add_enum('ChannelType', ['DEFAULT', 'STCH'], outer_class=root_module['ns3::LteRlc'], import_from_module='ns.lte')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint8_t, uint32_t )', 'ns3::LteRlc::NotifyTxTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint8_t, uint32_t )*', 'ns3::LteRlc::NotifyTxTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint8_t, uint32_t )&', 'ns3::LteRlc::NotifyTxTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint8_t, uint32_t, uint64_t )', 'ns3::LteRlc::ReceiveTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint8_t, uint32_t, uint64_t )*', 'ns3::LteRlc::ReceiveTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint8_t, uint32_t, uint64_t )&', 'ns3::LteRlc::ReceiveTracedCallback&')
    ## lte-rlc.h (module 'lte'): ns3::LteRlcSm [class]
    module.add_class('LteRlcSm', import_from_module='ns.lte', parent=root_module['ns3::LteRlc'])
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSidelinkRadioBearerInfo [class]
    module.add_class('LteSidelinkRadioBearerInfo', import_from_module='ns.lte', parent=root_module['ns3::LteRadioBearerInfo'])
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSignalingRadioBearerInfo [class]
    module.add_class('LteSignalingRadioBearerInfo', import_from_module='ns.lte', parent=root_module['ns3::LteRadioBearerInfo'])
    ## lte-sl-enb-rrc.h (module 'lte'): ns3::LteSlEnbRrc [class]
    module.add_class('LteSlEnbRrc', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-sl-harq-phy.h (module 'lte'): ns3::LteSlHarqPhy [class]
    module.add_class('LteSlHarqPhy', import_from_module='ns.lte', parent=root_module['ns3::SimpleRefCount< ns3::LteSlHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteSlHarqPhy> >'])
    ## lte-sl-interference.h (module 'lte'): ns3::LteSlInterference [class]
    module.add_class('LteSlInterference', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams [class]
    module.add_class('LteSlO2oCommParams', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::DirectSecurityModeState [enumeration]
    module.add_enum('DirectSecurityModeState', ['EMPTY', 'COMMANDED', 'COMPLETED'], outer_class=root_module['ns3::LteSlO2oCommParams'], import_from_module='ns.lte')
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::UeO2OCommState [enumeration]
    module.add_enum('UeO2OCommState', ['RELAY_IDLE', 'RELAY_SETUP_REQUEST', 'RELAY_SECURE_ESTABLISHED', 'RELAY_INIT_RELEASE', 'REMOTE_IDLE', 'REMOTE_INIT_SETUP', 'REMOTE_SECURE_ESTABLISHED', 'REMOTE_INIT_RELEASE'], outer_class=root_module['ns3::LteSlO2oCommParams'], import_from_module='ns.lte')
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::UeO2ORejectReason [enumeration]
    module.add_enum('UeO2ORejectReason', ['COMM_NOT_ALLOWED', 'AUTH_FAILURE', 'CONFLICT_L2_ID', 'LACK_OF_RESOURCES', 'IP_MISMATCH', 'OTHER_ERRORS'], outer_class=root_module['ns3::LteSlO2oCommParams'], import_from_module='ns.lte')
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::UeO2OReleaseReason [enumeration]
    module.add_enum('UeO2OReleaseReason', ['COMM_NO_LONGER_NEEDED', 'COMM_NO_LONGER_ALLOWED', 'COMM_NO_LONGER_AVAILABLE'], outer_class=root_module['ns3::LteSlO2oCommParams'], import_from_module='ns.lte')
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::LteSlPc5ContextId [struct]
    module.add_class('LteSlPc5ContextId', import_from_module='ns.lte', outer_class=root_module['ns3::LteSlO2oCommParams'])
    ## lte-sl-tft.h (module 'lte'): ns3::LteSlTft [class]
    module.add_class('LteSlTft', import_from_module='ns.lte', parent=root_module['ns3::SimpleRefCount< ns3::LteSlTft, ns3::empty, ns3::DefaultDeleter<ns3::LteSlTft> >'])
    ## lte-sl-tft.h (module 'lte'): ns3::LteSlTft::Direction [enumeration]
    module.add_enum('Direction', ['TRANSMIT', 'RECEIVE', 'BIDIRECTIONAL'], outer_class=root_module['ns3::LteSlTft'], import_from_module='ns.lte')
    ## lte-sl-tft.h (module 'lte'): ns3::LteSlTft::AddressType [enumeration]
    module.add_enum('AddressType', ['LOCAL', 'REMOTE'], outer_class=root_module['ns3::LteSlTft'], import_from_module='ns.lte')
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc [class]
    module.add_class('LteSlUeRrc', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::DiscoveryRole [enumeration]
    module.add_enum('DiscoveryRole', ['Monitoring', 'Announcing', 'Discoveree', 'Discoverer'], outer_class=root_module['ns3::LteSlUeRrc'], import_from_module='ns.lte')
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::DiscoveryModel [enumeration]
    module.add_enum('DiscoveryModel', ['ModelA', 'ModelB'], outer_class=root_module['ns3::LteSlUeRrc'], import_from_module='ns.lte')
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::RelayRole [enumeration]
    module.add_enum('RelayRole', ['RemoteUE', 'RelayUE'], outer_class=root_module['ns3::LteSlUeRrc'], import_from_module='ns.lte')
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::AppServiceInfo [struct]
    module.add_class('AppServiceInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteSlUeRrc'])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::RelayServiceInfo [struct]
    module.add_class('RelayServiceInfo', import_from_module='ns.lte', outer_class=root_module['ns3::LteSlUeRrc'])
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t, ns3::Ptr< ns3::Packet > )', 'ns3::LteSlUeRrc::PC5SignalingPacketTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t, ns3::Ptr< ns3::Packet > )*', 'ns3::LteSlUeRrc::PC5SignalingPacketTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t, ns3::Ptr< ns3::Packet > )&', 'ns3::LteSlUeRrc::PC5SignalingPacketTracedCallback&')
    ## lte-spectrum-phy.h (module 'lte'): ns3::LteSpectrumPhy [class]
    module.add_class('LteSpectrumPhy', import_from_module='ns.lte', parent=root_module['ns3::SpectrumPhy'])
    ## lte-spectrum-phy.h (module 'lte'): ns3::LteSpectrumPhy::State [enumeration]
    module.add_enum('State', ['IDLE', 'TX_DL_CTRL', 'TX_DATA', 'TX_UL_SRS', 'RX_DL_CTRL', 'RX_DATA', 'RX_UL_SRS'], outer_class=root_module['ns3::LteSpectrumPhy'], import_from_module='ns.lte')
    typehandlers.add_type_alias('void ( * ) ( uint64_t )', 'ns3::LteSpectrumPhy::DropSlTbTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t )*', 'ns3::LteSpectrumPhy::DropSlTbTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t )&', 'ns3::LteSpectrumPhy::DropSlTbTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::LteSpectrumPhy > )', 'ns3::LteSpectrumPhy::SlStartRxTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::LteSpectrumPhy > )*', 'ns3::LteSpectrumPhy::SlStartRxTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::LteSpectrumPhy > )&', 'ns3::LteSpectrumPhy::SlStartRxTracedCallback&')
    ## lte-stats-calculator.h (module 'lte'): ns3::LteStatsCalculator [class]
    module.add_class('LteStatsCalculator', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-ue-phy.h (module 'lte'): ns3::LteUePhy [class]
    module.add_class('LteUePhy', import_from_module='ns.lte', parent=root_module['ns3::LtePhy'])
    ## lte-ue-phy.h (module 'lte'): ns3::LteUePhy::State [enumeration]
    module.add_enum('State', ['CELL_SEARCH', 'SYNCHRONIZED', 'NUM_STATES'], outer_class=root_module['ns3::LteUePhy'], import_from_module='ns.lte')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, ns3::LteUePhy::State, ns3::LteUePhy::State )', 'ns3::LteUePhy::StateTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, ns3::LteUePhy::State, ns3::LteUePhy::State )*', 'ns3::LteUePhy::StateTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, ns3::LteUePhy::State, ns3::LteUePhy::State )&', 'ns3::LteUePhy::StateTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double, double, uint8_t )', 'ns3::LteUePhy::RsrpSinrTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double, double, uint8_t )*', 'ns3::LteUePhy::RsrpSinrTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double, double, uint8_t )&', 'ns3::LteUePhy::RsrpSinrTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double, double, bool, uint8_t )', 'ns3::LteUePhy::RsrpRsrqTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double, double, bool, uint8_t )*', 'ns3::LteUePhy::RsrpRsrqTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double, double, bool, uint8_t )&', 'ns3::LteUePhy::RsrpRsrqTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, std::vector< int > const & )', 'ns3::LteUePhy::UlPhyResourceBlocksTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, std::vector< int > const & )*', 'ns3::LteUePhy::UlPhyResourceBlocksTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, std::vector< int > const & )&', 'ns3::LteUePhy::UlPhyResourceBlocksTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, ns3::Ptr< ns3::SpectrumValue > )', 'ns3::LteUePhy::PowerSpectralDensityTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, ns3::Ptr< ns3::SpectrumValue > )*', 'ns3::LteUePhy::PowerSpectralDensityTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, ns3::Ptr< ns3::SpectrumValue > )&', 'ns3::LteUePhy::PowerSpectralDensityTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint64_t, uint32_t, double )', 'ns3::LteUePhy::SdRsrpTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint64_t, uint32_t, double )*', 'ns3::LteUePhy::SdRsrpTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint64_t, uint32_t, double )&', 'ns3::LteUePhy::SdRsrpTracedCallback&')
    ## lte-ue-power-control.h (module 'lte'): ns3::LteUePowerControl [class]
    module.add_class('LteUePowerControl', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double )', 'ns3::LteUePowerControl::TxPowerTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double )*', 'ns3::LteUePowerControl::TxPowerTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double )&', 'ns3::LteUePowerControl::TxPowerTracedCallback&')
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc [class]
    module.add_class('LteUeRrc', import_from_module='ns.lte', parent=root_module['ns3::Object'])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::State [enumeration]
    module.add_enum('State', ['IDLE_START', 'IDLE_CELL_SEARCH', 'IDLE_WAIT_MIB_SIB1', 'IDLE_WAIT_MIB', 'IDLE_WAIT_SIB1', 'IDLE_CAMPED_NORMALLY', 'IDLE_WAIT_SIB2', 'IDLE_RANDOM_ACCESS', 'IDLE_CONNECTING', 'CONNECTED_NORMALLY', 'CONNECTED_HANDOVER', 'CONNECTED_PHY_PROBLEM', 'CONNECTED_REESTABLISHING', 'NUM_STATES'], outer_class=root_module['ns3::LteUeRrc'], import_from_module='ns.lte')
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters [struct]
    module.add_class('SlChangeOfSyncRefStatParameters', import_from_module='ns.lte', outer_class=root_module['ns3::LteUeRrc'])
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t )', 'ns3::LteUeRrc::CellSelectionTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t )*', 'ns3::LteUeRrc::CellSelectionTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t )&', 'ns3::LteUeRrc::CellSelectionTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t )', 'ns3::LteUeRrc::ImsiCidRntiTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t )*', 'ns3::LteUeRrc::ImsiCidRntiTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t )&', 'ns3::LteUeRrc::ImsiCidRntiTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, uint16_t )', 'ns3::LteUeRrc::MibSibHandoverTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, uint16_t )*', 'ns3::LteUeRrc::MibSibHandoverTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, uint16_t )&', 'ns3::LteUeRrc::MibSibHandoverTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, ns3::LteUeRrc::State, ns3::LteUeRrc::State )', 'ns3::LteUeRrc::StateTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, ns3::LteUeRrc::State, ns3::LteUeRrc::State )*', 'ns3::LteUeRrc::StateTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, ns3::LteUeRrc::State, ns3::LteUeRrc::State )&', 'ns3::LteUeRrc::StateTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::LteUeRrc >, std::list< ns3::LteRrcSap::SCellToAddMod > )', 'ns3::LteUeRrc::SCarrierConfiguredTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::LteUeRrc >, std::list< ns3::LteRrcSap::SCellToAddMod > )*', 'ns3::LteUeRrc::SCarrierConfiguredTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::LteUeRrc >, std::list< ns3::LteRrcSap::SCellToAddMod > )&', 'ns3::LteUeRrc::SCarrierConfiguredTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, std::string, uint16_t )', 'ns3::LteUeRrc::PhySyncDetectionTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, std::string, uint16_t )*', 'ns3::LteUeRrc::PhySyncDetectionTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, std::string, uint16_t )&', 'ns3::LteUeRrc::PhySyncDetectionTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, uint8_t )', 'ns3::LteUeRrc::ImsiCidRntiCountTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, uint8_t )*', 'ns3::LteUeRrc::ImsiCidRntiCountTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, uint16_t, uint8_t )&', 'ns3::LteUeRrc::ImsiCidRntiCountTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::LteUeRrc::SlChangeOfSyncRefStatParameters const )', 'ns3::LteUeRrc::ChangeOfSyncRefTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::LteUeRrc::SlChangeOfSyncRefStatParameters const )*', 'ns3::LteUeRrc::ChangeOfSyncRefTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::LteUeRrc::SlChangeOfSyncRefStatParameters const )&', 'ns3::LteUeRrc::ChangeOfSyncRefTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint64_t const, uint16_t const, bool const, uint16_t const, uint16_t const )', 'ns3::LteUeRrc::SendSLSSTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint64_t const, uint16_t const, bool const, uint16_t const, uint16_t const )*', 'ns3::LteUeRrc::SendSLSSTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t const, uint64_t const, uint16_t const, bool const, uint16_t const, uint16_t const )&', 'ns3::LteUeRrc::SendSLSSTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, double )', 'ns3::LteUeRrc::RsrpMeasurementTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, double )*', 'ns3::LteUeRrc::RsrpMeasurementTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint16_t, double )&', 'ns3::LteUeRrc::RsrpMeasurementTracedCallback&')
    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker [class]
    module.add_class('Mac48AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue [class]
    module.add_class('Mac48AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## mac64-address.h (module 'network'): ns3::Mac64AddressChecker [class]
    module.add_class('Mac64AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## mac64-address.h (module 'network'): ns3::Mac64AddressValue [class]
    module.add_class('Mac64AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## mac-stats-calculator.h (module 'lte'): ns3::MacStatsCalculator [class]
    module.add_class('MacStatsCalculator', import_from_module='ns.lte', parent=root_module['ns3::LteStatsCalculator'])
    ## propagation-loss-model.h (module 'propagation'): ns3::MatrixPropagationLossModel [class]
    module.add_class('MatrixPropagationLossModel', import_from_module='ns.propagation', parent=root_module['ns3::PropagationLossModel'])
    ## lte-control-messages.h (module 'lte'): ns3::MibLteControlMessage [class]
    module.add_class('MibLteControlMessage', import_from_module='ns.lte', parent=root_module['ns3::LteControlMessage'])
    ## basic-data-calculators.h (module 'stats'): ns3::MinMaxAvgTotalCalculator<unsigned int> [class]
    module.add_class('MinMaxAvgTotalCalculator', import_from_module='ns.stats', parent=[root_module['ns3::DataCalculator'], root_module['ns3::StatisticalSummary']], template_parameters=['unsigned int'])
    ## basic-data-calculators.h (module 'stats'): ns3::MinMaxAvgTotalCalculator<unsigned long> [class]
    module.add_class('MinMaxAvgTotalCalculator', import_from_module='ns.stats', parent=[root_module['ns3::DataCalculator'], root_module['ns3::StatisticalSummary']], template_parameters=['unsigned long'])
    ## mobility-model.h (module 'mobility'): ns3::MobilityModel [class]
    module.add_class('MobilityModel', import_from_module='ns.mobility', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )', 'ns3::MobilityModel::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )*', 'ns3::MobilityModel::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )&', 'ns3::MobilityModel::TracedCallback&')
    ## propagation-loss-model.h (module 'propagation'): ns3::NakagamiPropagationLossModel [class]
    module.add_class('NakagamiPropagationLossModel', import_from_module='ns.propagation', parent=root_module['ns3::PropagationLossModel'])
    ## net-device.h (module 'network'): ns3::NetDevice [class]
    module.add_class('NetDevice', import_from_module='ns.network', parent=root_module['ns3::Object'])
    ## net-device.h (module 'network'): ns3::NetDevice::PacketType [enumeration]
    module.add_enum('PacketType', ['PACKET_HOST', 'NS3_PACKET_HOST', 'PACKET_BROADCAST', 'NS3_PACKET_BROADCAST', 'PACKET_MULTICAST', 'NS3_PACKET_MULTICAST', 'PACKET_OTHERHOST', 'NS3_PACKET_OTHERHOST'], outer_class=root_module['ns3::NetDevice'], import_from_module='ns.network')
    typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
    typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
    ## nix-vector.h (module 'network'): ns3::NixVector [class]
    module.add_class('NixVector', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
    ## node.h (module 'network'): ns3::Node [class]
    module.add_class('Node', import_from_module='ns.network', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
    ## random-variable-stream.h (module 'core'): ns3::NormalRandomVariable [class]
    module.add_class('NormalRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker [class]
    module.add_class('ObjectFactoryChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue [class]
    module.add_class('ObjectFactoryValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper [class]
    module.add_class('OutputStreamWrapper', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >'])
    ## packet.h (module 'network'): ns3::Packet [class]
    module.add_class('Packet', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
    ## random-variable-stream.h (module 'core'): ns3::ParetoRandomVariable [class]
    module.add_class('ParetoRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## phy-rx-stats-calculator.h (module 'lte'): ns3::PhyRxStatsCalculator [class]
    module.add_class('PhyRxStatsCalculator', import_from_module='ns.lte', parent=root_module['ns3::LteStatsCalculator'])
    ## phy-stats-calculator.h (module 'lte'): ns3::PhyStatsCalculator [class]
    module.add_class('PhyStatsCalculator', import_from_module='ns.lte', parent=root_module['ns3::LteStatsCalculator'])
    ## phy-tx-stats-calculator.h (module 'lte'): ns3::PhyTxStatsCalculator [class]
    module.add_class('PhyTxStatsCalculator', import_from_module='ns.lte', parent=root_module['ns3::LteStatsCalculator'])
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::PointToPointNetDevice [class]
    module.add_class('PointToPointNetDevice', import_from_module='ns.point_to_point', parent=root_module['ns3::NetDevice'])
    ## pointer.h (module 'core'): ns3::PointerChecker [class]
    module.add_class('PointerChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## pointer.h (module 'core'): ns3::PointerValue [class]
    module.add_class('PointerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## lte-control-messages.h (module 'lte'): ns3::RachPreambleLteControlMessage [class]
    module.add_class('RachPreambleLteControlMessage', import_from_module='ns.lte', parent=root_module['ns3::LteControlMessage'])
    ## radio-bearer-stats-calculator.h (module 'lte'): ns3::RadioBearerStatsCalculator [class]
    module.add_class('RadioBearerStatsCalculator', import_from_module='ns.lte', parent=root_module['ns3::LteStatsCalculator'])
    ## lte-control-messages.h (module 'lte'): ns3::RarLteControlMessage [class]
    module.add_class('RarLteControlMessage', import_from_module='ns.lte', parent=root_module['ns3::LteControlMessage'])
    ## lte-control-messages.h (module 'lte'): ns3::RarLteControlMessage::Rar [struct]
    module.add_class('Rar', import_from_module='ns.lte', outer_class=root_module['ns3::RarLteControlMessage'])
    ## rectangle.h (module 'mobility'): ns3::RectangleChecker [class]
    module.add_class('RectangleChecker', import_from_module='ns.mobility', parent=root_module['ns3::AttributeChecker'])
    ## rectangle.h (module 'mobility'): ns3::RectangleValue [class]
    module.add_class('RectangleValue', import_from_module='ns.mobility', parent=root_module['ns3::AttributeValue'])
    ## rrc-stats-calculator.h (module 'lte'): ns3::RrcStatsCalculator [class]
    module.add_class('RrcStatsCalculator', import_from_module='ns.lte', parent=root_module['ns3::LteStatsCalculator'])
    ## lte-control-messages.h (module 'lte'): ns3::Sib1LteControlMessage [class]
    module.add_class('Sib1LteControlMessage', import_from_module='ns.lte', parent=root_module['ns3::LteControlMessage'])
    ## simple-device-energy-model.h (module 'energy'): ns3::SimpleDeviceEnergyModel [class]
    module.add_class('SimpleDeviceEnergyModel', import_from_module='ns.energy', parent=root_module['ns3::DeviceEnergyModel'])
    ## lte-control-messages.h (module 'lte'): ns3::SlDciLteControlMessage [class]
    module.add_class('SlDciLteControlMessage', import_from_module='ns.lte', parent=root_module['ns3::LteControlMessage'])
    ## spectrum-channel.h (module 'spectrum'): ns3::SpectrumChannel [class]
    module.add_class('SpectrumChannel', import_from_module='ns.spectrum', parent=root_module['ns3::Channel'])
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::SpectrumPhy const >, ns3::Ptr< ns3::SpectrumPhy const >, double )', 'ns3::SpectrumChannel::LossTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::SpectrumPhy const >, ns3::Ptr< ns3::SpectrumPhy const >, double )*', 'ns3::SpectrumChannel::LossTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::SpectrumPhy const >, ns3::Ptr< ns3::SpectrumPhy const >, double )&', 'ns3::SpectrumChannel::LossTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const >, ns3::Ptr< ns3::MobilityModel const >, double, double, double, double )', 'ns3::SpectrumChannel::GainTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const >, ns3::Ptr< ns3::MobilityModel const >, double, double, double, double )*', 'ns3::SpectrumChannel::GainTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const >, ns3::Ptr< ns3::MobilityModel const >, double, double, double, double )&', 'ns3::SpectrumChannel::GainTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::SpectrumSignalParameters > )', 'ns3::SpectrumChannel::SignalParametersTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::SpectrumSignalParameters > )*', 'ns3::SpectrumChannel::SignalParametersTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::SpectrumSignalParameters > )&', 'ns3::SpectrumChannel::SignalParametersTracedCallback&')
    ## string.h (module 'core'): ns3::StringChecker [class]
    module.add_class('StringChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## string.h (module 'core'): ns3::StringValue [class]
    module.add_class('StringValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## nstime.h (module 'core'): ns3::TimeValue [class]
    module.add_class('TimeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## type-id.h (module 'core'): ns3::TypeIdChecker [class]
    module.add_class('TypeIdChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## type-id.h (module 'core'): ns3::TypeIdValue [class]
    module.add_class('TypeIdValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## uinteger.h (module 'core'): ns3::UintegerValue [class]
    module.add_class('UintegerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## lte-control-messages.h (module 'lte'): ns3::UlDciLteControlMessage [class]
    module.add_class('UlDciLteControlMessage', import_from_module='ns.lte', parent=root_module['ns3::LteControlMessage'])
    ## vector.h (module 'core'): ns3::Vector2DChecker [class]
    module.add_class('Vector2DChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## vector.h (module 'core'): ns3::Vector2DValue [class]
    module.add_class('Vector2DValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## vector.h (module 'core'): ns3::Vector3DChecker [class]
    module.add_class('Vector3DChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## vector.h (module 'core'): ns3::Vector3DValue [class]
    module.add_class('Vector3DValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## address.h (module 'network'): ns3::AddressChecker [class]
    module.add_class('AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## address.h (module 'network'): ns3::AddressValue [class]
    module.add_class('AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## lte-control-messages.h (module 'lte'): ns3::BsrLteControlMessage [class]
    module.add_class('BsrLteControlMessage', import_from_module='ns.lte', parent=root_module['ns3::LteControlMessage'])
    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'bool', 'bool', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'bool', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const char *', 'ns3::sip::SipElement::TransactionState', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Time &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::psc::McpttEntityId &', 'const ns3::psc::McpttEntityId &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'double', 'double', 'ns3::Vector3D', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'double', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::DlSchedulingCallbackInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::DlSchedulingCallbackInfo', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::LteUeRrc::SlChangeOfSyncRefStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::LteUeRrc::SlChangeOfSyncRefStatParameters', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::PhyReceptionStatParameters', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::PhyTransmissionStatParameters', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Application>', 'unsigned short', 'ns3::Ptr<const ns3::Packet>', 'const ns3::TypeId &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::MobilityModel>', 'ns3::Ptr<const ns3::MobilityModel>', 'double', 'double', 'double', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::MobilityModel>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::PacketBurst>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::SpectrumPhy>', 'ns3::Ptr<const ns3::SpectrumPhy>', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::LteSpectrumPhy>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::LteSpectrumPhy>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::LteUeRrc>, std::list<ns3::LteRrcSap::SCellToAddMod, std::allocator<ns3::LteRrcSap::SCellToAddMod>>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::LteUeRrc>', 'std::list<ns3::LteRrcSap::SCellToAddMod, std::allocator<ns3::LteRrcSap::SCellToAddMod>>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'const ns3::Address &', 'const ns3::sip::SipHeader &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'const ns3::sip::SipHeader &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'const ns3::sip::SipHeader &', 'ns3::sip::SipElement::TransactionState', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Address', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::SpectrumSignalParameters>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::psc::McpttCall>', 'ns3::Ptr<ns3::psc::McpttCall>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::SlPhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::SlPhyReceptionStatParameters', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned long, unsigned short, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Time', 'unsigned int', 'unsigned long', 'unsigned short', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned short, std::basic_string<char>, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Time', 'unsigned int', 'unsigned short', 'std::basic_string<char>', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::psc::UavMobilityEnergyModel::State', 'ns3::psc::UavMobilityEnergyModel::State', 'ns3::Vector3D', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, std::basic_string<char>, ns3::SeqTsSizeHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'std::basic_string<char>', 'ns3::SeqTsSizeHeader', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, std::basic_string<char>, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'std::basic_string<char>', 'ns3::Time', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned char', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'unsigned int', 'ns3::Ptr<ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'unsigned int', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned short, unsigned char, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'unsigned int', 'unsigned short', 'unsigned char', 'unsigned short', 'unsigned char', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'unsigned short', 'const std::basic_string<char> &', 'const char *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'unsigned short', 'const std::basic_string<char> &', 'const std::basic_string<char> &', 'const std::basic_string<char> &', 'const std::basic_string<char> &', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned long, unsigned short, bool, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned long', 'unsigned short', 'bool', 'unsigned short', 'unsigned short', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned short', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned short', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteRrcSap::MeasurementReport, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned short', 'unsigned short', 'ns3::LteRrcSap::MeasurementReport', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteSlDiscHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned short', 'unsigned short', 'ns3::LteSlDiscHeader', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteUeRrc::State, ns3::LteUeRrc::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned short', 'unsigned short', 'ns3::LteUeRrc::State', 'ns3::LteUeRrc::State', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::UeManager::State, ns3::UeManager::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned short', 'unsigned short', 'ns3::UeManager::State', 'ns3::UeManager::State', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned short', 'unsigned short', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned short', 'unsigned short', 'std::basic_string<char>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned short', 'unsigned short', 'std::basic_string<char>', 'unsigned char', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned short', 'unsigned short', 'unsigned char', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned long', 'unsigned short', 'unsigned short', 'unsigned short', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, const std::vector<int, std::allocator<int>> &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'const std::vector<int, std::allocator<int>> &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'ns3::Ptr<ns3::SpectrumValue>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned char', 'unsigned int', 'unsigned long', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned int', 'unsigned int', 'ns3::sip::SipElement::DialogState', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned int', 'unsigned int', 'ns3::sip::SipElement::TransactionState', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned long, unsigned int, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned long', 'unsigned int', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned short', 'double', 'double', 'bool', 'unsigned char', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned short', 'double', 'double', 'unsigned char', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned short', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned short', 'double', 'unsigned char', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned short', 'ns3::LteUePhy::State', 'ns3::LteUePhy::State', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned short', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## lte-control-messages.h (module 'lte'): ns3::DlCqiLteControlMessage [class]
    module.add_class('DlCqiLteControlMessage', import_from_module='ns.lte', parent=root_module['ns3::LteControlMessage'])
    ## lte-control-messages.h (module 'lte'): ns3::DlDciLteControlMessage [class]
    module.add_class('DlDciLteControlMessage', import_from_module='ns.lte', parent=root_module['ns3::LteControlMessage'])
    ## lte-control-messages.h (module 'lte'): ns3::DlHarqFeedbackLteControlMessage [class]
    module.add_class('DlHarqFeedbackLteControlMessage', import_from_module='ns.lte', parent=root_module['ns3::LteControlMessage'])
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteDataRadioBearerInfo [class]
    module.add_class('LteDataRadioBearerInfo', import_from_module='ns.lte', parent=root_module['ns3::LteRadioBearerInfo'])
    ## lte-enb-phy.h (module 'lte'): ns3::LteEnbPhy [class]
    module.add_class('LteEnbPhy', import_from_module='ns.lte', parent=root_module['ns3::LtePhy'])
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double, uint8_t )', 'ns3::LteEnbPhy::ReportUeSinrTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double, uint8_t )*', 'ns3::LteEnbPhy::ReportUeSinrTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t, double, uint8_t )&', 'ns3::LteEnbPhy::ReportUeSinrTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, ns3::Ptr< ns3::SpectrumValue > )', 'ns3::LteEnbPhy::ReportInterferenceTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, ns3::Ptr< ns3::SpectrumValue > )*', 'ns3::LteEnbPhy::ReportInterferenceTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, ns3::Ptr< ns3::SpectrumValue > )&', 'ns3::LteEnbPhy::ReportInterferenceTracedCallback&')
    ## lte-net-device.h (module 'lte'): ns3::LteNetDevice [class]
    module.add_class('LteNetDevice', import_from_module='ns.lte', parent=root_module['ns3::NetDevice'])
    ## lte-ue-net-device.h (module 'lte'): ns3::LteUeNetDevice [class]
    module.add_class('LteUeNetDevice', import_from_module='ns.lte', parent=root_module['ns3::LteNetDevice'])
    module.add_container('std::vector< double >', 'double', container_type='vector')
    module.add_container('std::vector< ns3::CeBitmap_e >', 'ns3::CeBitmap_e', container_type='vector')
    module.add_container('std::vector< std::vector< ns3::RlcPduListElement_s > >', 'std::vector< ns3::RlcPduListElement_s >', container_type='vector')
    module.add_container('std::vector< unsigned char >', 'unsigned char', container_type='vector')
    module.add_container('std::vector< unsigned short >', 'short unsigned int', container_type='vector')
    module.add_container('std::vector< ns3::DlInfoListElement_s::HarqStatus_e >', 'ns3::DlInfoListElement_s::HarqStatus_e', container_type='vector')
    module.add_container('std::list< ns3::EpcEnbS1SapProvider::BearerToBeSwitched >', 'ns3::EpcEnbS1SapProvider::BearerToBeSwitched', container_type='list')
    module.add_container('std::vector< bool >', 'bool', container_type='vector')
    module.add_container('std::vector< ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem >', 'ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem', container_type='vector')
    module.add_container('std::vector< ns3::EpcX2Sap::UlHighInterferenceInformationItem >', 'ns3::EpcX2Sap::UlHighInterferenceInformationItem', container_type='vector')
    module.add_container('std::vector< ns3::EpcX2Sap::ErabToBeSetupItem >', 'ns3::EpcX2Sap::ErabToBeSetupItem', container_type='vector')
    module.add_container('std::vector< ns3::EpcX2Sap::ErabAdmittedItem >', 'ns3::EpcX2Sap::ErabAdmittedItem', container_type='vector')
    module.add_container('std::vector< ns3::EpcX2Sap::ErabNotAdmittedItem >', 'ns3::EpcX2Sap::ErabNotAdmittedItem', container_type='vector')
    module.add_container('std::vector< ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem >', 'ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem', container_type='vector')
    module.add_container('std::vector< ns3::EpcX2Sap::CellInformationItem >', 'ns3::EpcX2Sap::CellInformationItem', container_type='vector')
    module.add_container('std::vector< ns3::EpcX2Sap::CellMeasurementResultItem >', 'ns3::EpcX2Sap::CellMeasurementResultItem', container_type='vector')
    module.add_container('std::vector< ns3::VendorSpecificListElement_s >', 'ns3::VendorSpecificListElement_s', container_type='vector')
    module.add_container('std::vector< unsigned int >', 'unsigned int', container_type='vector')
    module.add_container('std::vector< ns3::LogicalChannelConfigListElement_s >', 'ns3::LogicalChannelConfigListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::PagingInfoListElement_s >', 'ns3::PagingInfoListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::DlInfoListElement_s >', 'ns3::DlInfoListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::RachListElement_s >', 'ns3::RachListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::CqiListElement_s >', 'ns3::CqiListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::UlInfoListElement_s >', 'ns3::UlInfoListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::SrListElement_s >', 'ns3::SrListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::MacCeListElement_s >', 'ns3::MacCeListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::BuildDataListElement_s >', 'ns3::BuildDataListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::BuildRarListElement_s >', 'ns3::BuildRarListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::BuildBroadcastListElement_s >', 'ns3::BuildBroadcastListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::UlDciListElement_s >', 'ns3::UlDciListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::PhichListElement_s >', 'ns3::PhichListElement_s', container_type='vector')
    module.add_container('std::vector< ns3::SlDciListElement_s >', 'ns3::SlDciListElement_s', container_type='vector')
    module.add_container('std::map< std::string, ns3::LogComponent * >', ('std::basic_string< char, std::char_traits< char >, std::allocator< char > >', 'ns3::LogComponent *'), container_type='map')
    module.add_container('std::vector< ns3::LteCcmRrcSapProvider::LcsConfig >', 'ns3::LteCcmRrcSapProvider::LcsConfig', container_type='vector')
    module.add_container('std::vector< ns3::LteRrcSap::LogicalChannelConfig >', 'ns3::LteRrcSap::LogicalChannelConfig', container_type='vector')
    module.add_container('ns3::HarqProcessInfoList_t', 'ns3::HarqProcessInfoElement_t', container_type='vector')
    module.add_container('std::list< ns3::LteRrcSap::SrbToAddMod >', 'ns3::LteRrcSap::SrbToAddMod', container_type='list')
    module.add_container('std::list< ns3::LteRrcSap::DrbToAddMod >', 'ns3::LteRrcSap::DrbToAddMod', container_type='list')
    module.add_container('std::list< unsigned char >', 'unsigned char', container_type='list')
    module.add_container('std::list< ns3::LteRrcSap::CellsToAddMod >', 'ns3::LteRrcSap::CellsToAddMod', container_type='list')
    module.add_container('std::list< ns3::LteRrcSap::BlackCellsToAddMod >', 'ns3::LteRrcSap::BlackCellsToAddMod', container_type='list')
    module.add_container('std::list< ns3::LteRrcSap::MeasObjectToAddMod >', 'ns3::LteRrcSap::MeasObjectToAddMod', container_type='list')
    module.add_container('std::list< ns3::LteRrcSap::ReportConfigToAddMod >', 'ns3::LteRrcSap::ReportConfigToAddMod', container_type='list')
    module.add_container('std::list< ns3::LteRrcSap::MeasIdToAddMod >', 'ns3::LteRrcSap::MeasIdToAddMod', container_type='list')
    module.add_container('std::list< unsigned int >', 'unsigned int', container_type='list')
    module.add_container('std::list< ns3::LteRrcSap::MeasResultEutra >', 'ns3::LteRrcSap::MeasResultEutra', container_type='list')
    module.add_container('std::list< ns3::LteRrcSap::MeasResultServFreq >', 'ns3::LteRrcSap::MeasResultServFreq', container_type='list')
    module.add_container('std::list< ns3::LteRrcSap::SCellToAddMod >', 'ns3::LteRrcSap::SCellToAddMod', container_type='list')
    module.add_container('std::vector< ns3::LteUeCcmRrcSapProvider::LcsConfig >', 'ns3::LteUeCcmRrcSapProvider::LcsConfig', container_type='vector')
    module.add_container('std::list< ns3::Ptr< ns3::SidelinkRxCommResourcePool > >', 'ns3::Ptr< ns3::SidelinkRxCommResourcePool >', container_type='list')
    module.add_container('std::list< ns3::Ptr< ns3::SidelinkRxDiscResourcePool > >', 'ns3::Ptr< ns3::SidelinkRxDiscResourcePool >', container_type='list')
    module.add_container('std::vector< ns3::LteUeCphySapUser::UeMeasurementsElement >', 'ns3::LteUeCphySapUser::UeMeasurementsElement', container_type='vector')
    module.add_container('std::vector< ns3::LteUeCphySapUser::UeSlssMeasurementsElement >', 'ns3::LteUeCphySapUser::UeSlssMeasurementsElement', container_type='vector')
    module.add_container('std::vector< ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement >', 'ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement', container_type='vector')
    module.add_container('std::vector< ns3::HigherLayerSelected_s >', 'ns3::HigherLayerSelected_s', container_type='vector')
    module.add_container('std::vector< ns3::SiMessageListElement_s >', 'ns3::SiMessageListElement_s', container_type='vector')
    module.add_container('std::vector< int >', 'int', container_type='vector')
    module.add_container('std::list< ns3::Ptr< ns3::Packet > >', 'ns3::Ptr< ns3::Packet >', container_type='list')
    module.add_container('std::vector< std::complex< double > >', 'std::complex< double >', container_type='vector')
    module.add_container('ns3::PhasedArrayModel::ComplexVector', 'std::complex< double >', container_type='vector')
    module.add_container('std::list< ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo >', 'ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo', container_type='list')
    module.add_container('std::vector< std::vector< unsigned char > >', 'std::vector< unsigned char >', container_type='vector')
    module.add_container('std::list< ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo >', 'ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo', container_type='list')
    module.add_container('std::set< unsigned int >', 'unsigned int', container_type='set')
    module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type='vector')
    module.add_container('std::vector< ns3::BandInfo >', 'ns3::BandInfo', container_type='vector')
    module.add_container('std::map< unsigned char, ns3::ComponentCarrier >', ('unsigned char', 'ns3::ComponentCarrier'), container_type='map')
    module.add_container('std::list< ns3::EpcTft::PacketFilter >', 'ns3::EpcTft::PacketFilter', container_type='list')
    module.add_container('std::vector< ns3::LteAmc::McsPrbInfo >', 'ns3::LteAmc::McsPrbInfo', container_type='vector')
    module.add_container('std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierBaseStation > >', ('unsigned char', 'ns3::Ptr< ns3::ComponentCarrierBaseStation >'), container_type='map')
    module.add_container('std::list< ns3::Ptr< ns3::LteControlMessage > >', 'ns3::Ptr< ns3::LteControlMessage >', container_type='list')
    module.add_container('std::map< std::pair< unsigned long, unsigned int >, double >', ('std::pair< unsigned long, unsigned int >', 'double'), container_type='map')
    module.add_container('std::vector< ns3::SpectrumValue >', 'ns3::SpectrumValue', container_type='vector')
    module.add_container('std::list< ns3::UlDciLteControlMessage >', 'ns3::UlDciLteControlMessage', container_type='list')
    module.add_container('std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierUe > >', ('unsigned char', 'ns3::Ptr< ns3::ComponentCarrierUe >'), container_type='map')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, unsigned int >', 'ns3::Uint32Map')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, unsigned int >*', 'ns3::Uint32Map*')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, unsigned int >&', 'ns3::Uint32Map&')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, unsigned long >', 'ns3::Uint64Map')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, unsigned long >*', 'ns3::Uint64Map*')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, unsigned long >&', 'ns3::Uint64Map&')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned int > > >', 'ns3::Uint32StatsMap')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned int > > >*', 'ns3::Uint32StatsMap*')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned int > > >&', 'ns3::Uint32StatsMap&')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned long > > >', 'ns3::Uint64StatsMap')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned long > > >*', 'ns3::Uint64StatsMap*')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, ns3::Ptr< ns3::MinMaxAvgTotalCalculator< unsigned long > > >&', 'ns3::Uint64StatsMap&')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, double >', 'ns3::DoubleMap')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, double >*', 'ns3::DoubleMap*')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, double >&', 'ns3::DoubleMap&')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, ns3::LteFlowId_t >', 'ns3::FlowIdMap')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, ns3::LteFlowId_t >*', 'ns3::FlowIdMap*')
    typehandlers.add_type_alias('std::map< ns3::ImsiLcidPair_t, ns3::LteFlowId_t >&', 'ns3::FlowIdMap&')
    typehandlers.add_type_alias('std::map< ns3::TbId_t, ns3::tbInfo_t >', 'ns3::expectedTbs_t')
    typehandlers.add_type_alias('std::map< ns3::TbId_t, ns3::tbInfo_t >*', 'ns3::expectedTbs_t*')
    typehandlers.add_type_alias('std::map< ns3::TbId_t, ns3::tbInfo_t >&', 'ns3::expectedTbs_t&')
    typehandlers.add_type_alias('std::map< ns3::SlTbId_t, ns3::SltbInfo_t >', 'ns3::expectedSlTbs_t')
    typehandlers.add_type_alias('std::map< ns3::SlTbId_t, ns3::SltbInfo_t >*', 'ns3::expectedSlTbs_t*')
    typehandlers.add_type_alias('std::map< ns3::SlTbId_t, ns3::SltbInfo_t >&', 'ns3::expectedSlTbs_t&')
    typehandlers.add_type_alias('std::map< ns3::SlDiscTbId_t, ns3::SlDisctbInfo_t >', 'ns3::expectedDiscTbs_t')
    typehandlers.add_type_alias('std::map< ns3::SlDiscTbId_t, ns3::SlDisctbInfo_t >*', 'ns3::expectedDiscTbs_t*')
    typehandlers.add_type_alias('std::map< ns3::SlDiscTbId_t, ns3::SlDisctbInfo_t >&', 'ns3::expectedDiscTbs_t&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::LtePhyRxDataEndErrorCallback')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::LtePhyRxDataEndErrorCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::LtePhyRxDataEndErrorCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::LtePhyRxDataEndOkCallback')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::LtePhyRxDataEndOkCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::LtePhyRxDataEndOkCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::LtePhyRxPsbchEndOkCallback')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::LtePhyRxPsbchEndOkCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::LtePhyRxPsbchEndOkCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, std::list< ns3::Ptr< ns3::LteControlMessage > >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::LtePhyRxCtrlEndOkCallback')
    typehandlers.add_type_alias('ns3::Callback< void, std::list< ns3::Ptr< ns3::LteControlMessage > >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::LtePhyRxCtrlEndOkCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, std::list< ns3::Ptr< ns3::LteControlMessage > >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::LtePhyRxCtrlEndOkCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::LtePhyRxCtrlEndErrorCallback')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::LtePhyRxCtrlEndErrorCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::LtePhyRxCtrlEndErrorCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::LtePhyRxPssCallback')
    typehandlers.add_type_alias('ns3::Callback< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::LtePhyRxPssCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::LtePhyRxPssCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::DlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::LtePhyDlHarqFeedbackCallback')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::DlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::LtePhyDlHarqFeedbackCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::DlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::LtePhyDlHarqFeedbackCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::UlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::LtePhyUlHarqFeedbackCallback')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::UlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::LtePhyUlHarqFeedbackCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::UlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::LtePhyUlHarqFeedbackCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::LtePhyRxSlssCallback')
    typehandlers.add_type_alias('ns3::Callback< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::LtePhyRxSlssCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::LtePhyRxSlssCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ptr< ns3::SpectrumValue >, std::vector< int, std::allocator< int > > const, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::LtePhyRxPsdchSdRsrpCallback')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ptr< ns3::SpectrumValue >, std::vector< int, std::allocator< int > > const, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::LtePhyRxPsdchSdRsrpCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ptr< ns3::SpectrumValue >, std::vector< int, std::allocator< int > > const, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::LtePhyRxPsdchSdRsrpCallback&')
    typehandlers.add_type_alias('std::vector< ns3::HarqProcessInfoElement_t >', 'ns3::HarqProcessInfoList_t')
    typehandlers.add_type_alias('std::vector< ns3::HarqProcessInfoElement_t >*', 'ns3::HarqProcessInfoList_t*')
    typehandlers.add_type_alias('std::vector< ns3::HarqProcessInfoElement_t >&', 'ns3::HarqProcessInfoList_t&')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::GenericPhyTxStartCallback')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::GenericPhyTxStartCallback*')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::GenericPhyTxStartCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::GenericPhyTxEndCallback')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::GenericPhyTxEndCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::GenericPhyTxEndCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::GenericPhyRxStartCallback')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::GenericPhyRxStartCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::GenericPhyRxStartCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::GenericPhyRxEndErrorCallback')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::GenericPhyRxEndErrorCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::GenericPhyRxEndErrorCallback&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::GenericPhyRxEndOkCallback')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::GenericPhyRxEndOkCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::GenericPhyRxEndOkCallback&')
    typehandlers.add_type_alias('std::vector< std::vector< ns3::Ptr< ns3::PacketBurst > > >', 'ns3::DlHarqProcessesBuffer_t')
    typehandlers.add_type_alias('std::vector< std::vector< ns3::Ptr< ns3::PacketBurst > > >*', 'ns3::DlHarqProcessesBuffer_t*')
    typehandlers.add_type_alias('std::vector< std::vector< ns3::Ptr< ns3::PacketBurst > > >&', 'ns3::DlHarqProcessesBuffer_t&')
    typehandlers.add_type_alias('std::vector< double >', 'ns3::Values')
    typehandlers.add_type_alias('std::vector< double >*', 'ns3::Values*')
    typehandlers.add_type_alias('std::vector< double >&', 'ns3::Values&')
    typehandlers.add_type_alias('std::vector< ns3::BandInfo >', 'ns3::Bands')
    typehandlers.add_type_alias('std::vector< ns3::BandInfo >*', 'ns3::Bands*')
    typehandlers.add_type_alias('std::vector< ns3::BandInfo >&', 'ns3::Bands&')
    typehandlers.add_type_alias('uint32_t', 'ns3::SpectrumModelUid_t')
    typehandlers.add_type_alias('uint32_t*', 'ns3::SpectrumModelUid_t*')
    typehandlers.add_type_alias('uint32_t&', 'ns3::SpectrumModelUid_t&')
    typehandlers.add_type_alias('ns3::Vector3D', 'ns3::Vector')
    typehandlers.add_type_alias('ns3::Vector3D*', 'ns3::Vector*')
    typehandlers.add_type_alias('ns3::Vector3D&', 'ns3::Vector&')
    module.add_typedef(root_module['ns3::Vector3D'], 'Vector')
    typehandlers.add_type_alias('ns3::Vector3DValue', 'ns3::VectorValue')
    typehandlers.add_type_alias('ns3::Vector3DValue*', 'ns3::VectorValue*')
    typehandlers.add_type_alias('ns3::Vector3DValue&', 'ns3::VectorValue&')
    module.add_typedef(root_module['ns3::Vector3DValue'], 'VectorValue')
    typehandlers.add_type_alias('ns3::Vector3DChecker', 'ns3::VectorChecker')
    typehandlers.add_type_alias('ns3::Vector3DChecker*', 'ns3::VectorChecker*')
    typehandlers.add_type_alias('ns3::Vector3DChecker&', 'ns3::VectorChecker&')
    module.add_typedef(root_module['ns3::Vector3DChecker'], 'VectorChecker')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )', 'ns3::TimePrinter')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )*', 'ns3::TimePrinter*')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )&', 'ns3::TimePrinter&')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )', 'ns3::NodePrinter')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )*', 'ns3::NodePrinter*')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )&', 'ns3::NodePrinter&')
    
    ## Register a nested module for the namespace Config
    
    nested_module = module.add_cpp_namespace('Config')
    register_types_ns3_Config(nested_module)
    
    
    ## Register a nested module for the namespace FatalImpl
    
    nested_module = module.add_cpp_namespace('FatalImpl')
    register_types_ns3_FatalImpl(nested_module)
    
    
    ## Register a nested module for the namespace Hash
    
    nested_module = module.add_cpp_namespace('Hash')
    register_types_ns3_Hash(nested_module)
    
    
    ## Register a nested module for the namespace TracedValueCallback
    
    nested_module = module.add_cpp_namespace('TracedValueCallback')
    register_types_ns3_TracedValueCallback(nested_module)
    
    
    ## Register a nested module for the namespace internal
    
    nested_module = module.add_cpp_namespace('internal')
    register_types_ns3_internal(nested_module)
    
    
    ## Register a nested module for the namespace psc
    
    nested_module = module.add_cpp_namespace('psc')
    register_types_ns3_psc(nested_module)
    
    
    ## Register a nested module for the namespace sip
    
    nested_module = module.add_cpp_namespace('sip')
    register_types_ns3_sip(nested_module)
    

def register_types_ns3_Config(module):
    root_module = module.get_root()
    
    ## config.h (module 'core'): ns3::Config::MatchContainer [class]
    module.add_class('MatchContainer', import_from_module='ns.core')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Object > > const_iterator', 'ns3::Config::MatchContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Object > > const_iterator*', 'ns3::Config::MatchContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Object > > const_iterator&', 'ns3::Config::MatchContainer::Iterator&')
    module.add_container('std::vector< ns3::Ptr< ns3::Object > >', 'ns3::Ptr< ns3::Object >', container_type='vector')
    module.add_container('std::vector< std::string >', 'std::basic_string< char, std::char_traits< char >, std::allocator< char > >', container_type='vector')

def register_types_ns3_FatalImpl(module):
    root_module = module.get_root()
    

def register_types_ns3_Hash(module):
    root_module = module.get_root()
    
    ## hash-function.h (module 'core'): ns3::Hash::Implementation [class]
    module.add_class('Implementation', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >'])
    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
    
    ## Register a nested module for the namespace Function
    
    nested_module = module.add_cpp_namespace('Function')
    register_types_ns3_Hash_Function(nested_module)
    

def register_types_ns3_Hash_Function(module):
    root_module = module.get_root()
    
    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a [class]
    module.add_class('Fnv1a', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32 [class]
    module.add_class('Hash32', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64 [class]
    module.add_class('Hash64', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3 [class]
    module.add_class('Murmur3', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])

def register_types_ns3_TracedValueCallback(module):
    root_module = module.get_root()
    
    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
    typehandlers.add_type_alias('void ( * ) ( bool, bool )', 'ns3::TracedValueCallback::Bool')
    typehandlers.add_type_alias('void ( * ) ( bool, bool )*', 'ns3::TracedValueCallback::Bool*')
    typehandlers.add_type_alias('void ( * ) ( bool, bool )&', 'ns3::TracedValueCallback::Bool&')
    typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )', 'ns3::TracedValueCallback::Int8')
    typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )*', 'ns3::TracedValueCallback::Int8*')
    typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )&', 'ns3::TracedValueCallback::Int8&')
    typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )', 'ns3::TracedValueCallback::Uint8')
    typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )*', 'ns3::TracedValueCallback::Uint8*')
    typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )&', 'ns3::TracedValueCallback::Uint8&')
    typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )', 'ns3::TracedValueCallback::Int16')
    typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )*', 'ns3::TracedValueCallback::Int16*')
    typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )&', 'ns3::TracedValueCallback::Int16&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )', 'ns3::TracedValueCallback::Uint16')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )*', 'ns3::TracedValueCallback::Uint16*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )&', 'ns3::TracedValueCallback::Uint16&')
    typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )', 'ns3::TracedValueCallback::Int32')
    typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )*', 'ns3::TracedValueCallback::Int32*')
    typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )&', 'ns3::TracedValueCallback::Int32&')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::TracedValueCallback::Uint32')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::TracedValueCallback::Uint32*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::TracedValueCallback::Uint32&')
    typehandlers.add_type_alias('void ( * ) ( int64_t, int64_t )', 'ns3::TracedValueCallback::Int64')
    typehandlers.add_type_alias('void ( * ) ( int64_t, int64_t )*', 'ns3::TracedValueCallback::Int64*')
    typehandlers.add_type_alias('void ( * ) ( int64_t, int64_t )&', 'ns3::TracedValueCallback::Int64&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint64_t )', 'ns3::TracedValueCallback::Uint64')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint64_t )*', 'ns3::TracedValueCallback::Uint64*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint64_t )&', 'ns3::TracedValueCallback::Uint64&')
    typehandlers.add_type_alias('void ( * ) ( double, double )', 'ns3::TracedValueCallback::Double')
    typehandlers.add_type_alias('void ( * ) ( double, double )*', 'ns3::TracedValueCallback::Double*')
    typehandlers.add_type_alias('void ( * ) ( double, double )&', 'ns3::TracedValueCallback::Double&')
    typehandlers.add_type_alias('void ( * ) (  )', 'ns3::TracedValueCallback::Void')
    typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::TracedValueCallback::Void*')
    typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::TracedValueCallback::Void&')
    typehandlers.add_type_alias('void ( * ) ( ns3::DataRate, ns3::DataRate )', 'ns3::TracedValueCallback::DataRate')
    typehandlers.add_type_alias('void ( * ) ( ns3::DataRate, ns3::DataRate )*', 'ns3::TracedValueCallback::DataRate*')
    typehandlers.add_type_alias('void ( * ) ( ns3::DataRate, ns3::DataRate )&', 'ns3::TracedValueCallback::DataRate&')

def register_types_ns3_internal(module):
    root_module = module.get_root()
    

def register_types_ns3_psc(module):
    root_module = module.get_root()
    
    ## ims-helper.h (module 'psc'): ns3::psc::ImsHelper [class]
    module.add_class('ImsHelper', parent=root_module['ns3::Object'])
    ## intel-http-client.h (module 'psc'): ns3::psc::IntelHttpClient [class]
    module.add_class('IntelHttpClient', parent=root_module['ns3::Application'])
    typehandlers.add_type_alias('void ( * ) ( uint16_t )', 'ns3::psc::IntelHttpClient::CacheCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t )*', 'ns3::psc::IntelHttpClient::CacheCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t )&', 'ns3::psc::IntelHttpClient::CacheCallback&')
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpClientHelper [class]
    module.add_class('IntelHttpClientHelper')
    ## intel-http-header.h (module 'psc'): ns3::psc::IntelHttpHeader [class]
    module.add_class('IntelHttpHeader', parent=root_module['ns3::Header'])
    ## intel-http-header.h (module 'psc'): ns3::psc::IntelHttpHeader::Type [enumeration]
    module.add_enum('Type', ['Main', 'Embedded'], outer_class=root_module['ns3::psc::IntelHttpHeader'])
    ## intel-http-server.h (module 'psc'): ns3::psc::IntelHttpServer [class]
    module.add_class('IntelHttpServer', parent=root_module['ns3::Application'])
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpServerHelper [class]
    module.add_class('IntelHttpServerHelper')
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall [class]
    module.add_class('McpttCall', parent=root_module['ns3::Object'])
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall::NetworkCallType [enumeration]
    module.add_enum('NetworkCallType', ['ON_NETWORK', 'OFF_NETWORK', 'INVALID'], outer_class=root_module['ns3::psc::McpttCall'])
    ## mcptt-call-helper.h (module 'psc'): ns3::psc::McpttCallHelper [class]
    module.add_class('McpttCallHelper', allow_subclassing=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachine [class]
    module.add_class('McpttCallMachine', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )', 'ns3::psc::McpttCallMachine::StateChangeTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )*', 'ns3::psc::McpttCallMachine::StateChangeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )&', 'ns3::psc::McpttCallMachine::StateChangeTracedCallback&')
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineGrp [class]
    module.add_class('McpttCallMachineGrp', parent=root_module['ns3::psc::McpttCallMachine'])
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasic [class]
    module.add_class('McpttCallMachineGrpBasic', parent=root_module['ns3::psc::McpttCallMachineGrp'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicState [class]
    module.add_class('McpttCallMachineGrpBasicState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> >'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS1 [class]
    module.add_class('McpttCallMachineGrpBasicStateS1', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS2 [class]
    module.add_class('McpttCallMachineGrpBasicStateS2', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS3 [class]
    module.add_class('McpttCallMachineGrpBasicStateS3', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS4 [class]
    module.add_class('McpttCallMachineGrpBasicStateS4', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS5 [class]
    module.add_class('McpttCallMachineGrpBasicStateS5', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS6 [class]
    module.add_class('McpttCallMachineGrpBasicStateS6', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS7 [class]
    module.add_class('McpttCallMachineGrpBasicStateS7', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcast [class]
    module.add_class('McpttCallMachineGrpBroadcast', parent=root_module['ns3::psc::McpttCallMachineGrp'])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastState [class]
    module.add_class('McpttCallMachineGrpBroadcastState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> >'])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB1 [class]
    module.add_class('McpttCallMachineGrpBroadcastStateB1', parent=root_module['ns3::psc::McpttCallMachineGrpBroadcastState'])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB2 [class]
    module.add_class('McpttCallMachineGrpBroadcastStateB2', parent=root_module['ns3::psc::McpttCallMachineGrpBroadcastState'])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB3 [class]
    module.add_class('McpttCallMachineGrpBroadcastStateB3', parent=root_module['ns3::psc::McpttCallMachineGrpBroadcastState'])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB4 [class]
    module.add_class('McpttCallMachineGrpBroadcastStateB4', parent=root_module['ns3::psc::McpttCallMachineGrpBroadcastState'])
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineNull [class]
    module.add_class('McpttCallMachineNull', parent=root_module['ns3::psc::McpttCallMachine'])
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMachinePrivate [class]
    module.add_class('McpttCallMachinePrivate', parent=root_module['ns3::psc::McpttCallMachineGrp'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateState [class]
    module.add_class('McpttCallMachinePrivateState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> >'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP0 [class]
    module.add_class('McpttCallMachinePrivateStateP0', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP1 [class]
    module.add_class('McpttCallMachinePrivateStateP1', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP2 [class]
    module.add_class('McpttCallMachinePrivateStateP2', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP3 [class]
    module.add_class('McpttCallMachinePrivateStateP3', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP4 [class]
    module.add_class('McpttCallMachinePrivateStateP4', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP5 [class]
    module.add_class('McpttCallMachinePrivateStateP5', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgField [class]
    module.add_class('McpttCallMsgField', parent=root_module['ns3::ObjectBase'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId [class]
    module.add_class('McpttCallMsgFieldCallId', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType [class]
    module.add_class('McpttCallMsgFieldCallType', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode [class]
    module.add_class('McpttCallMsgFieldCommMode', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldConfirmMode [class]
    module.add_class('McpttCallMsgFieldConfirmMode', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime [class]
    module.add_class('McpttCallMsgFieldLastChgTime', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldMsgType [class]
    module.add_class('McpttCallMsgFieldMsgType', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldProbeResp [class]
    module.add_class('McpttCallMsgFieldProbeResp', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason [class]
    module.add_class('McpttCallMsgFieldReason', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval [class]
    module.add_class('McpttCallMsgFieldRefreshInterval', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime [class]
    module.add_class('McpttCallMsgFieldStartTime', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldType6 [class]
    module.add_class('McpttCallMsgFieldType6', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId [class]
    module.add_class('McpttCallMsgFieldUserId', parent=root_module['ns3::psc::McpttCallMsgFieldType6'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc [class]
    module.add_class('McpttCallMsgFieldUserLoc', parent=root_module['ns3::psc::McpttCallMsgFieldType6'])
    ## mcptt-call-type-machine.h (module 'psc'): ns3::psc::McpttCallTypeMachine [class]
    module.add_class('McpttCallTypeMachine', parent=root_module['ns3::Object'])
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic [class]
    module.add_class('McpttCallTypeMachineGrpBasic', parent=root_module['ns3::psc::McpttCallTypeMachine'])
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivate [class]
    module.add_class('McpttCallTypeMachinePrivate', parent=root_module['ns3::psc::McpttCallTypeMachine'])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateState [class]
    module.add_class('McpttCallTypeMachinePrivateState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> >'])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ0 [class]
    module.add_class('McpttCallTypeMachinePrivateStateQ0', parent=root_module['ns3::psc::McpttCallTypeMachinePrivateState'])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ1 [class]
    module.add_class('McpttCallTypeMachinePrivateStateQ1', parent=root_module['ns3::psc::McpttCallTypeMachinePrivateState'])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ2 [class]
    module.add_class('McpttCallTypeMachinePrivateStateQ2', parent=root_module['ns3::psc::McpttCallTypeMachinePrivateState'])
    ## mcptt-channel.h (module 'psc'): ns3::psc::McpttChannel [class]
    module.add_class('McpttChannel', parent=root_module['ns3::Object'])
    ## mcptt-counter.h (module 'psc'): ns3::psc::McpttCounter [class]
    module.add_class('McpttCounter', parent=root_module['ns3::Object'])
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachine [class]
    module.add_class('McpttEmergAlertMachine', parent=root_module['ns3::Object'])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic [class]
    module.add_class('McpttEmergAlertMachineBasic', parent=root_module['ns3::psc::McpttEmergAlertMachine'])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser [struct]
    module.add_class('EmergUser', outer_class=root_module['ns3::psc::McpttEmergAlertMachineBasic'])
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachineNull [class]
    module.add_class('McpttEmergAlertMachineNull', parent=root_module['ns3::psc::McpttEmergAlertMachine'])
    ## mcptt-entity-id.h (module 'psc'): ns3::psc::McpttEntityId [class]
    module.add_class('McpttEntityId', allow_subclassing=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgField [class]
    module.add_class('McpttFloorMsgField', parent=root_module['ns3::ObjectBase'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldDuration [class]
    module.add_class('McpttFloorMsgFieldDuration', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldGrantedPartyId [class]
    module.add_class('McpttFloorMsgFieldGrantedPartyId', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic [class]
    module.add_class('McpttFloorMsgFieldIndic', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPermToReq [class]
    module.add_class('McpttFloorMsgFieldPermToReq', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority [class]
    module.add_class('McpttFloorMsgFieldPriority', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo [class]
    module.add_class('McpttFloorMsgFieldQueuePositionInfo', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueueSize [class]
    module.add_class('McpttFloorMsgFieldQueueSize', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause [class]
    module.add_class('McpttFloorMsgFieldRejectCause', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum [class]
    module.add_class('McpttFloorMsgFieldSeqNum', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource [class]
    module.add_class('McpttFloorMsgFieldSource', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc [class]
    module.add_class('McpttFloorMsgFieldSsrc', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo [class]
    module.add_class('McpttFloorMsgFieldTrackInfo', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldType [class]
    module.add_class('McpttFloorMsgFieldType', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId [class]
    module.add_class('McpttFloorMsgFieldUserId', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-sink.h (module 'psc'): ns3::psc::McpttFloorMsgSink [class]
    module.add_class('McpttFloorMsgSink', allow_subclassing=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant [class]
    module.add_class('McpttFloorParticipant', parent=[root_module['ns3::Object'], root_module['ns3::psc::McpttFloorMsgSink']])
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )', 'ns3::psc::McpttFloorParticipant::StateChangeTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )*', 'ns3::psc::McpttFloorParticipant::StateChangeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )&', 'ns3::psc::McpttFloorParticipant::StateChangeTracedCallback&')
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipantNull [class]
    module.add_class('McpttFloorParticipantNull', parent=root_module['ns3::psc::McpttFloorParticipant'])
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttFloorQueue [class]
    module.add_class('McpttFloorQueue', parent=root_module['ns3::Object'])
    ## mcptt-helper.h (module 'psc'): ns3::psc::McpttHelper [class]
    module.add_class('McpttHelper', allow_subclassing=True)
    ## mcptt-media-sink.h (module 'psc'): ns3::psc::McpttMediaSink [class]
    module.add_class('McpttMediaSink', allow_subclassing=True)
    ## mcptt-media-src.h (module 'psc'): ns3::psc::McpttMediaSrc [class]
    module.add_class('McpttMediaSrc', parent=root_module['ns3::Object'])
    ## mcptt-msg.h (module 'psc'): ns3::psc::McpttMsg [class]
    module.add_class('McpttMsg', parent=root_module['ns3::Header'])
    ## mcptt-msg-stats.h (module 'psc'): ns3::psc::McpttMsgStats [class]
    module.add_class('McpttMsgStats', parent=root_module['ns3::Object'])
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipant [class]
    module.add_class('McpttOffNetworkFloorParticipant', parent=root_module['ns3::psc::McpttFloorParticipant'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantState [class]
    module.add_class('McpttOffNetworkFloorParticipantState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> >'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm [class]
    module.add_class('McpttOffNetworkFloorParticipantStateHasPerm', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm [class]
    module.add_class('McpttOffNetworkFloorParticipantStateNoPerm', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant [class]
    module.add_class('McpttOffNetworkFloorParticipantStatePendGrant', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendReq [class]
    module.add_class('McpttOffNetworkFloorParticipantStatePendReq', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateQueued [class]
    module.add_class('McpttOffNetworkFloorParticipantStateQueued', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateSilence [class]
    module.add_class('McpttOffNetworkFloorParticipantStateSilence', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateStartStop [class]
    module.add_class('McpttOffNetworkFloorParticipantStateStartStop', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClient [class]
    module.add_class('McpttOnNetworkCallMachineClient', parent=root_module['ns3::psc::McpttCallMachineGrp'])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientState [class]
    module.add_class('McpttOnNetworkCallMachineClientState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> >'])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS1 [class]
    module.add_class('McpttOnNetworkCallMachineClientStateS1', parent=root_module['ns3::psc::McpttOnNetworkCallMachineClientState'])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS2 [class]
    module.add_class('McpttOnNetworkCallMachineClientStateS2', parent=root_module['ns3::psc::McpttOnNetworkCallMachineClientState'])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS3 [class]
    module.add_class('McpttOnNetworkCallMachineClientStateS3', parent=root_module['ns3::psc::McpttOnNetworkCallMachineClientState'])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS4 [class]
    module.add_class('McpttOnNetworkCallMachineClientStateS4', parent=root_module['ns3::psc::McpttOnNetworkCallMachineClientState'])
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitrator [class]
    module.add_class('McpttOnNetworkFloorArbitrator', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )', 'ns3::psc::McpttOnNetworkFloorArbitrator::StateChangeTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )*', 'ns3::psc::McpttOnNetworkFloorArbitrator::StateChangeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )&', 'ns3::psc::McpttOnNetworkFloorArbitrator::StateChangeTracedCallback&')
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorState [class]
    module.add_class('McpttOnNetworkFloorArbitratorState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> >'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateIdle [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateIdle', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateInitialising', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateReleasing', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateRevoke', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateStartStop', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateTaken [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateTaken', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControl [class]
    module.add_class('McpttOnNetworkFloorDualControl', parent=[root_module['ns3::Object'], root_module['ns3::psc::McpttFloorMsgSink']])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlState [class]
    module.add_class('McpttOnNetworkFloorDualControlState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> >'])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateReleasing [class]
    module.add_class('McpttOnNetworkFloorDualControlStateReleasing', parent=root_module['ns3::psc::McpttOnNetworkFloorDualControlState'])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateStartStop [class]
    module.add_class('McpttOnNetworkFloorDualControlStateStartStop', parent=root_module['ns3::psc::McpttOnNetworkFloorDualControlState'])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateTaken [class]
    module.add_class('McpttOnNetworkFloorDualControlStateTaken', parent=root_module['ns3::psc::McpttOnNetworkFloorDualControlState'])
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipant [class]
    module.add_class('McpttOnNetworkFloorParticipant', parent=root_module['ns3::psc::McpttFloorParticipant'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantState [class]
    module.add_class('McpttOnNetworkFloorParticipantState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> >'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission [class]
    module.add_class('McpttOnNetworkFloorParticipantStateHasNoPermission', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission [class]
    module.add_class('McpttOnNetworkFloorParticipantStateHasPermission', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease [class]
    module.add_class('McpttOnNetworkFloorParticipantStatePendingRelease', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest [class]
    module.add_class('McpttOnNetworkFloorParticipantStatePendingRequest', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateQueued [class]
    module.add_class('McpttOnNetworkFloorParticipantStateQueued', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateReleasing [class]
    module.add_class('McpttOnNetworkFloorParticipantStateReleasing', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateStartStop [class]
    module.add_class('McpttOnNetworkFloorParticipantStateStartStop', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipant [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipant', parent=[root_module['ns3::Object'], root_module['ns3::psc::McpttFloorMsgSink']])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantState [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> >'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStatePendingRevoke', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStatePermitted', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateReleasing', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateStartStop', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-ptt-app.h (module 'psc'): ns3::psc::McpttPttApp [class]
    module.add_class('McpttPttApp', parent=[root_module['ns3::Application'], root_module['ns3::psc::McpttMediaSink']])
    ## mcptt-pusher.h (module 'psc'): ns3::psc::McpttPusher [class]
    module.add_class('McpttPusher', parent=root_module['ns3::Object'])
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): ns3::psc::McpttPusherOrchestratorInterface [class]
    module.add_class('McpttPusherOrchestratorInterface', parent=root_module['ns3::Object'])
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSessionCdf [class]
    module.add_class('McpttPusherOrchestratorSessionCdf', parent=root_module['ns3::psc::McpttPusherOrchestratorInterface'])
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSpurtCdf [class]
    module.add_class('McpttPusherOrchestratorSpurtCdf', parent=root_module['ns3::psc::McpttPusherOrchestratorInterface'])
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttQueuedUserInfo [class]
    module.add_class('McpttQueuedUserInfo', parent=root_module['ns3::ObjectBase'])
    ## mcptt-rtp-header.h (module 'psc'): ns3::psc::McpttRtpHeader [class]
    module.add_class('McpttRtpHeader', parent=root_module['ns3::Header'])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): ns3::psc::McpttSdpFmtpHeader [class]
    module.add_class('McpttSdpFmtpHeader', parent=root_module['ns3::Header'])
    ## mcptt-server-app.h (module 'psc'): ns3::psc::McpttServerApp [class]
    module.add_class('McpttServerApp', parent=root_module['ns3::Application'])
    ## mcptt-server-call.h (module 'psc'): ns3::psc::McpttServerCall [class]
    module.add_class('McpttServerCall', parent=root_module['ns3::Object'])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachine [class]
    module.add_class('McpttServerCallMachine', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )', 'ns3::psc::McpttServerCallMachine::StateChangeTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )*', 'ns3::psc::McpttServerCallMachine::StateChangeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )&', 'ns3::psc::McpttServerCallMachine::StateChangeTracedCallback&')
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedState [class]
    module.add_class('McpttServerCallMachineGroupPrearrangedState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> >'])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1 [class]
    module.add_class('McpttServerCallMachineGroupPrearrangedStateS1', parent=root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2 [class]
    module.add_class('McpttServerCallMachineGroupPrearrangedStateS2', parent=root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3 [class]
    module.add_class('McpttServerCallMachineGroupPrearrangedStateS3', parent=root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4 [class]
    module.add_class('McpttServerCallMachineGroupPrearrangedStateS4', parent=root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineGrp [class]
    module.add_class('McpttServerCallMachineGrp', parent=root_module['ns3::psc::McpttServerCallMachine'])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineNull [class]
    module.add_class('McpttServerCallMachineNull', parent=root_module['ns3::psc::McpttServerCallMachine'])
    ## mcptt-server-helper.h (module 'psc'): ns3::psc::McpttServerHelper [class]
    module.add_class('McpttServerHelper')
    ## mcptt-state-machine-stats.h (module 'psc'): ns3::psc::McpttStateMachineStats [class]
    module.add_class('McpttStateMachineStats', parent=root_module['ns3::Object'])
    ## mcptt-timer.h (module 'psc'): ns3::psc::McpttTimer [class]
    module.add_class('McpttTimer', parent=root_module['ns3::Object'])
    ## mcptt-trace-helper.h (module 'psc'): ns3::psc::McpttTraceHelper [class]
    module.add_class('McpttTraceHelper', parent=root_module['ns3::Object'])
    ## psc-application.h (module 'psc'): ns3::psc::PscApplication [class]
    module.add_class('PscApplication', parent=root_module['ns3::Application'])
    ## psc-application-client.h (module 'psc'): ns3::psc::PscApplicationClient [class]
    module.add_class('PscApplicationClient', parent=root_module['ns3::psc::PscApplication'])
    ## psc-application-configuration.h (module 'psc'): ns3::psc::PscApplicationConfiguration [class]
    module.add_class('PscApplicationConfiguration', parent=root_module['ns3::Object'])
    ## psc-application-helper.h (module 'psc'): ns3::psc::PscApplicationHelper [class]
    module.add_class('PscApplicationHelper', parent=root_module['ns3::Object'])
    ## psc-application-helper.h (module 'psc'): ns3::psc::PscApplicationHelper::TraceType_t [enumeration]
    module.add_enum('TraceType_t', ['TX', 'RX'], outer_class=root_module['ns3::psc::PscApplicationHelper'])
    ## psc-application-helper.h (module 'psc'): ns3::psc::PscApplicationHelper::LteNode_t [enumeration]
    module.add_enum('LteNode_t', ['CLIENT', 'SERVER', 'BOTH'], outer_class=root_module['ns3::psc::PscApplicationHelper'])
    ## psc-application-server.h (module 'psc'): ns3::psc::PscApplicationServer [class]
    module.add_class('PscApplicationServer', parent=root_module['ns3::psc::PscApplication'])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition [class]
    module.add_class('PscScenarioDefinition', parent=root_module['ns3::Object'])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::ApplicationInfo [struct]
    module.add_class('ApplicationInfo', outer_class=root_module['ns3::psc::PscScenarioDefinition'])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::AreaInfo [struct]
    module.add_class('AreaInfo', outer_class=root_module['ns3::psc::PscScenarioDefinition'])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::KeyEventInfo [struct]
    module.add_class('KeyEventInfo', outer_class=root_module['ns3::psc::PscScenarioDefinition'])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::NodeGroupInfo [struct]
    module.add_class('NodeGroupInfo', outer_class=root_module['ns3::psc::PscScenarioDefinition'])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::StructureInfo [struct]
    module.add_class('StructureInfo', outer_class=root_module['ns3::psc::PscScenarioDefinition'])
    typehandlers.add_type_alias('uint16_t', 'ns3::psc::PscScenarioDefinition::AreaId')
    typehandlers.add_type_alias('uint16_t*', 'ns3::psc::PscScenarioDefinition::AreaId*')
    typehandlers.add_type_alias('uint16_t&', 'ns3::psc::PscScenarioDefinition::AreaId&')
    typehandlers.add_type_alias('uint16_t', 'ns3::psc::PscScenarioDefinition::StructureId')
    typehandlers.add_type_alias('uint16_t*', 'ns3::psc::PscScenarioDefinition::StructureId*')
    typehandlers.add_type_alias('uint16_t&', 'ns3::psc::PscScenarioDefinition::StructureId&')
    typehandlers.add_type_alias('uint16_t', 'ns3::psc::PscScenarioDefinition::GroupId')
    typehandlers.add_type_alias('uint16_t*', 'ns3::psc::PscScenarioDefinition::GroupId*')
    typehandlers.add_type_alias('uint16_t&', 'ns3::psc::PscScenarioDefinition::GroupId&')
    typehandlers.add_type_alias('uint16_t', 'ns3::psc::PscScenarioDefinition::KeyEventId')
    typehandlers.add_type_alias('uint16_t*', 'ns3::psc::PscScenarioDefinition::KeyEventId*')
    typehandlers.add_type_alias('uint16_t&', 'ns3::psc::PscScenarioDefinition::KeyEventId&')
    typehandlers.add_type_alias('uint16_t', 'ns3::psc::PscScenarioDefinition::ApplicationId')
    typehandlers.add_type_alias('uint16_t*', 'ns3::psc::PscScenarioDefinition::ApplicationId*')
    typehandlers.add_type_alias('uint16_t&', 'ns3::psc::PscScenarioDefinition::ApplicationId&')
    ## psc-scenario-trace-helper.h (module 'psc'): ns3::psc::PscScenarioTraceHelper [class]
    module.add_class('PscScenarioTraceHelper', parent=root_module['ns3::Object'])
    ## psc-application.h (module 'psc'): ns3::psc::PscSequenceNumber [class]
    module.add_class('PscSequenceNumber')
    ## psc-video-streaming.h (module 'psc'): ns3::psc::PscVideoStreaming [class]
    module.add_class('PscVideoStreaming', parent=root_module['ns3::Application'])
    ## psc-video-streaming-distributions.h (module 'psc'): ns3::psc::PscVideoStreamingDistributions [class]
    module.add_class('PscVideoStreamingDistributions')
    ## uav-mobility-energy-model.h (module 'psc'): ns3::psc::UavMobilityEnergyModel [class]
    module.add_class('UavMobilityEnergyModel', parent=root_module['ns3::DeviceEnergyModel'])
    ## uav-mobility-energy-model.h (module 'psc'): ns3::psc::UavMobilityEnergyModel::State [enumeration]
    module.add_enum('State', ['ASCEND', 'DESCEND', 'HOVER', 'MOVE', 'STOP'], outer_class=root_module['ns3::psc::UavMobilityEnergyModel'])
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::psc::UavMobilityEnergyModel const > )', 'ns3::psc::UavMobilityEnergyModel::BasicCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::psc::UavMobilityEnergyModel const > )*', 'ns3::psc::UavMobilityEnergyModel::BasicCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::psc::UavMobilityEnergyModel const > )&', 'ns3::psc::UavMobilityEnergyModel::BasicCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector )', 'ns3::psc::UavMobilityEnergyModel::StateChangedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector )*', 'ns3::psc::UavMobilityEnergyModel::StateChangedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector )&', 'ns3::psc::UavMobilityEnergyModel::StateChangedCallback&')
    typehandlers.add_type_alias('void ( * ) ( double, double, ns3::Vector )', 'ns3::psc::UavMobilityEnergyModel::CurrentChangedCallback')
    typehandlers.add_type_alias('void ( * ) ( double, double, ns3::Vector )*', 'ns3::psc::UavMobilityEnergyModel::CurrentChangedCallback*')
    typehandlers.add_type_alias('void ( * ) ( double, double, ns3::Vector )&', 'ns3::psc::UavMobilityEnergyModel::CurrentChangedCallback&')
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::psc::UavMobilityEnergyModelHelper [class]
    module.add_class('UavMobilityEnergyModelHelper')
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient [struct]
    module.add_class('UdpGroupEchoClient')
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoServer [class]
    module.add_class('UdpGroupEchoServer', parent=root_module['ns3::Application'])
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoServer::Mode_t [enumeration]
    module.add_enum('Mode_t', ['INF_SESSION', 'NO_GROUP_SESSION', 'TIMEOUT_LIMITED'], outer_class=root_module['ns3::psc::UdpGroupEchoServer'])
    typehandlers.add_type_alias('ns3::psc::UdpGroupEchoServer::Mode_t', 'ns3::psc::UdpGroupEchoServer::Mode_t')
    typehandlers.add_type_alias('ns3::psc::UdpGroupEchoServer::Mode_t*', 'ns3::psc::UdpGroupEchoServer::Mode_t*')
    typehandlers.add_type_alias('ns3::psc::UdpGroupEchoServer::Mode_t&', 'ns3::psc::UdpGroupEchoServer::Mode_t&')
    ## udp-group-echo-helper.h (module 'psc'): ns3::psc::UdpGroupEchoServerHelper [class]
    module.add_class('UdpGroupEchoServerHelper')
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsg [class]
    module.add_class('McpttCallMsg', parent=root_module['ns3::psc::McpttMsg'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId [class]
    module.add_class('McpttCallMsgFieldGrpId', parent=root_module['ns3::psc::McpttCallMsgFieldType6'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName [class]
    module.add_class('McpttCallMsgFieldOrgName', parent=root_module['ns3::psc::McpttCallMsgFieldType6'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp [class]
    module.add_class('McpttCallMsgFieldSdp', parent=root_module['ns3::psc::McpttCallMsgFieldType6'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAccept [class]
    module.add_class('McpttCallMsgGrpAccept', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAnnoun [class]
    module.add_class('McpttCallMsgGrpAnnoun', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcast [class]
    module.add_class('McpttCallMsgGrpBroadcast', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcastEnd [class]
    module.add_class('McpttCallMsgGrpBroadcastEnd', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlert [class]
    module.add_class('McpttCallMsgGrpEmergAlert', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertAck [class]
    module.add_class('McpttCallMsgGrpEmergAlertAck', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancel [class]
    module.add_class('McpttCallMsgGrpEmergAlertCancel', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancelAck [class]
    module.add_class('McpttCallMsgGrpEmergAlertCancelAck', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergEnd [class]
    module.add_class('McpttCallMsgGrpEmergEnd', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpImmPerilEnd [class]
    module.add_class('McpttCallMsgGrpImmPerilEnd', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpProbe [class]
    module.add_class('McpttCallMsgGrpProbe', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAccept [class]
    module.add_class('McpttCallMsgPrivateAccept', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAcceptAck [class]
    module.add_class('McpttCallMsgPrivateAcceptAck', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancel [class]
    module.add_class('McpttCallMsgPrivateEmergCancel', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancelAck [class]
    module.add_class('McpttCallMsgPrivateEmergCancelAck', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReject [class]
    module.add_class('McpttCallMsgPrivateReject', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRelease [class]
    module.add_class('McpttCallMsgPrivateRelease', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReleaseAck [class]
    module.add_class('McpttCallMsgPrivateReleaseAck', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRinging [class]
    module.add_class('McpttCallMsgPrivateRinging', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateSetupReq [class]
    module.add_class('McpttCallMsgPrivateSetupReq', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsg [class]
    module.add_class('McpttFloorMsg', parent=root_module['ns3::psc::McpttMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgAck [class]
    module.add_class('McpttFloorMsgAck', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgDeny [class]
    module.add_class('McpttFloorMsgDeny', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId [class]
    module.add_class('McpttFloorMsgFieldQueuedUserId', parent=root_module['ns3::psc::McpttFloorMsgFieldUserId'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgGranted [class]
    module.add_class('McpttFloorMsgGranted', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgIdle [class]
    module.add_class('McpttFloorMsgIdle', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionInfo [class]
    module.add_class('McpttFloorMsgQueuePositionInfo', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionRequest [class]
    module.add_class('McpttFloorMsgQueuePositionRequest', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRelease [class]
    module.add_class('McpttFloorMsgRelease', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRequest [class]
    module.add_class('McpttFloorMsgRequest', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRevoke [class]
    module.add_class('McpttFloorMsgRevoke', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgTaken [class]
    module.add_class('McpttFloorMsgTaken', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg [class]
    module.add_class('McpttMediaMsg', parent=root_module['ns3::psc::McpttMsg'])
    ## mcptt-pusher-orchestrator.h (module 'psc'): ns3::psc::McpttPusherOrchestrator [class]
    module.add_class('McpttPusherOrchestrator', parent=root_module['ns3::psc::McpttPusherOrchestratorInterface'])
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::psc::McpttPusherOrchestratorContention [class]
    module.add_class('McpttPusherOrchestratorContention', parent=root_module['ns3::psc::McpttPusherOrchestratorInterface'])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearranged [class]
    module.add_class('McpttServerCallMachineGroupPrearranged', parent=root_module['ns3::psc::McpttServerCallMachineGrp'])
    module.add_container('std::list< ns3::psc::McpttQueuedUserInfo >', 'ns3::psc::McpttQueuedUserInfo', container_type='list')
    module.add_container('std::map< unsigned short, ns3::Ptr< ns3::psc::McpttCall > >', ('short unsigned int', 'ns3::Ptr< ns3::psc::McpttCall >'), container_type='map')
    module.add_container('std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 'ns3::Ptr< ns3::psc::McpttPusher >', container_type='vector')
    module.add_container('std::vector< std::pair< double, double > >', 'std::pair< double, double >', container_type='vector')
    module.add_container('std::map< unsigned short, ns3::psc::PscScenarioDefinition::AreaInfo >', ('short unsigned int', 'ns3::psc::PscScenarioDefinition::AreaInfo'), container_type='map')
    module.add_container('std::map< unsigned short, ns3::psc::PscScenarioDefinition::StructureInfo >', ('short unsigned int', 'ns3::psc::PscScenarioDefinition::StructureInfo'), container_type='map')
    module.add_container('std::map< unsigned short, ns3::psc::PscScenarioDefinition::NodeGroupInfo >', ('short unsigned int', 'ns3::psc::PscScenarioDefinition::NodeGroupInfo'), container_type='map')
    module.add_container('std::map< unsigned short, ns3::psc::PscScenarioDefinition::KeyEventInfo >', ('short unsigned int', 'ns3::psc::PscScenarioDefinition::KeyEventInfo'), container_type='map')
    module.add_container('std::map< unsigned short, ns3::psc::PscScenarioDefinition::ApplicationInfo >', ('short unsigned int', 'ns3::psc::PscScenarioDefinition::ApplicationInfo'), container_type='map')
    module.add_container('std::map< double, unsigned int >', ('double', 'unsigned int'), container_type='map')
    module.add_container('std::map< double, double >', ('double', 'double'), container_type='map')

def register_types_ns3_sip(module):
    root_module = module.get_root()
    
    ## sip-element.h (module 'sip'): ns3::sip::SipElement [class]
    module.add_class('SipElement', import_from_module='ns.sip', parent=root_module['ns3::Object'])
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TransactionState [enumeration]
    module.add_enum('TransactionState', ['TRANSACTION_IDLE', 'TRANSACTION_CALLING', 'TRANSACTION_TRYING', 'TRANSACTION_PROCEEDING', 'TRANSACTION_COMPLETED', 'TRANSACTION_CONFIRMED', 'TRANSACTION_TERMINATED', 'TRANSACTION_FAILED'], outer_class=root_module['ns3::sip::SipElement'], import_from_module='ns.sip')
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::DialogState [enumeration]
    module.add_enum('DialogState', ['DIALOG_UNINITIALIZED', 'DIALOG_TRYING', 'DIALOG_PROCEEDING', 'DIALOG_EARLY', 'DIALOG_CONFIRMED', 'DIALOG_TERMINATED'], outer_class=root_module['ns3::sip::SipElement'], import_from_module='ns.sip')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const & )', 'ns3::sip::SipElement::TxRxTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const & )*', 'ns3::sip::SipElement::TxRxTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const & )&', 'ns3::sip::SipElement::TxRxTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::DialogState )', 'ns3::sip::SipElement::DialogStateTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::DialogState )*', 'ns3::sip::SipElement::DialogStateTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::DialogState )&', 'ns3::sip::SipElement::DialogStateTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::TransactionState )', 'ns3::sip::SipElement::TransactionStateTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::TransactionState )*', 'ns3::sip::SipElement::TransactionStateTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::TransactionState )&', 'ns3::sip::SipElement::TransactionStateTracedCallback&')
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader [class]
    module.add_class('SipHeader', import_from_module='ns.sip', parent=root_module['ns3::Header'])
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipMessageType [enumeration]
    module.add_enum('SipMessageType', ['SIP_REQUEST', 'SIP_RESPONSE', 'SIP_INVALID'], outer_class=root_module['ns3::sip::SipHeader'], import_from_module='ns.sip')
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipMethod [enumeration]
    module.add_enum('SipMethod', ['INVITE', 'BYE', 'ACK', 'CANCEL', 'INVALID_METHOD'], outer_class=root_module['ns3::sip::SipHeader'], import_from_module='ns.sip')
    ## sip-proxy.h (module 'sip'): ns3::sip::SipProxy [class]
    module.add_class('SipProxy', import_from_module='ns.sip', parent=root_module['ns3::sip::SipElement'])
    ## sip-agent.h (module 'sip'): ns3::sip::SipAgent [class]
    module.add_class('SipAgent', import_from_module='ns.sip', parent=root_module['ns3::sip::SipElement'])

def register_methods(root_module):
    register_Ns3Address_methods(root_module, root_module['ns3::Address'])
    register_Ns3AllocationRetentionPriority_methods(root_module, root_module['ns3::AllocationRetentionPriority'])
    register_Ns3Angles_methods(root_module, root_module['ns3::Angles'])
    register_Ns3ApplicationContainer_methods(root_module, root_module['ns3::ApplicationContainer'])
    register_Ns3AttributeConstructionList_methods(root_module, root_module['ns3::AttributeConstructionList'])
    register_Ns3AttributeConstructionListItem_methods(root_module, root_module['ns3::AttributeConstructionList::Item'])
    register_Ns3BandInfo_methods(root_module, root_module['ns3::BandInfo'])
    register_Ns3Box_methods(root_module, root_module['ns3::Box'])
    register_Ns3Buffer_methods(root_module, root_module['ns3::Buffer'])
    register_Ns3BufferIterator_methods(root_module, root_module['ns3::Buffer::Iterator'])
    register_Ns3BufferSizeLevelBsr_methods(root_module, root_module['ns3::BufferSizeLevelBsr'])
    register_Ns3BuildBroadcastListElement_s_methods(root_module, root_module['ns3::BuildBroadcastListElement_s'])
    register_Ns3BuildDataListElement_s_methods(root_module, root_module['ns3::BuildDataListElement_s'])
    register_Ns3BuildRarListElement_s_methods(root_module, root_module['ns3::BuildRarListElement_s'])
    register_Ns3BuildingContainer_methods(root_module, root_module['ns3::BuildingContainer'])
    register_Ns3BwPart_s_methods(root_module, root_module['ns3::BwPart_s'])
    register_Ns3ByteTagIterator_methods(root_module, root_module['ns3::ByteTagIterator'])
    register_Ns3ByteTagIteratorItem_methods(root_module, root_module['ns3::ByteTagIterator::Item'])
    register_Ns3ByteTagList_methods(root_module, root_module['ns3::ByteTagList'])
    register_Ns3ByteTagListIterator_methods(root_module, root_module['ns3::ByteTagList::Iterator'])
    register_Ns3ByteTagListIteratorItem_methods(root_module, root_module['ns3::ByteTagList::Iterator::Item'])
    register_Ns3CallbackBase_methods(root_module, root_module['ns3::CallbackBase'])
    register_Ns3CqiConfig_s_methods(root_module, root_module['ns3::CqiConfig_s'])
    register_Ns3CqiListElement_s_methods(root_module, root_module['ns3::CqiListElement_s'])
    register_Ns3DataOutputCallback_methods(root_module, root_module['ns3::DataOutputCallback'])
    register_Ns3DataRate_methods(root_module, root_module['ns3::DataRate'])
    register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeAccessor >'])
    register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeChecker >'])
    register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeValue >'])
    register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, root_module['ns3::DefaultDeleter< ns3::CallbackImplBase >'])
    register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, root_module['ns3::DefaultDeleter< ns3::EventImpl >'])
    register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Hash::Implementation >'])
    register_Ns3DefaultDeleter__Ns3LteControlMessage_methods(root_module, root_module['ns3::DefaultDeleter< ns3::LteControlMessage >'])
    register_Ns3DefaultDeleter__Ns3LteHarqPhy_methods(root_module, root_module['ns3::DefaultDeleter< ns3::LteHarqPhy >'])
    register_Ns3DefaultDeleter__Ns3LteSlHarqPhy_methods(root_module, root_module['ns3::DefaultDeleter< ns3::LteSlHarqPhy >'])
    register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, root_module['ns3::DefaultDeleter< ns3::NixVector >'])
    register_Ns3DefaultDeleter__Ns3OutputStreamWrapper_methods(root_module, root_module['ns3::DefaultDeleter< ns3::OutputStreamWrapper >'])
    register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Packet >'])
    register_Ns3DefaultDeleter__Ns3SpectrumModel_methods(root_module, root_module['ns3::DefaultDeleter< ns3::SpectrumModel >'])
    register_Ns3DefaultDeleter__Ns3SpectrumSignalParameters_methods(root_module, root_module['ns3::DefaultDeleter< ns3::SpectrumSignalParameters >'])
    register_Ns3DefaultDeleter__Ns3SpectrumValue_methods(root_module, root_module['ns3::DefaultDeleter< ns3::SpectrumValue >'])
    register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::TraceSourceAccessor >'])
    register_Ns3DefaultDeleter__Ns3VendorSpecificValue_methods(root_module, root_module['ns3::DefaultDeleter< ns3::VendorSpecificValue >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttCallMachineGrpBasicState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBasicState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttCallMachineGrpBroadcastState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBroadcastState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttCallMachinePrivateState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttCallMachinePrivateState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttCallTypeMachinePrivateState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttCallTypeMachinePrivateState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOffNetworkFloorParticipantState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOffNetworkFloorParticipantState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkCallMachineClientState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOnNetworkCallMachineClientState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorArbitratorState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorArbitratorState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorDualControlState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorDualControlState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorParticipantState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorParticipantState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorTowardsParticipantState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorTowardsParticipantState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttServerCallMachineGroupPrearrangedState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttServerCallMachineGroupPrearrangedState >'])
    register_Ns3DeviceEnergyModelContainer_methods(root_module, root_module['ns3::DeviceEnergyModelContainer'])
    register_Ns3DeviceEnergyModelHelper_methods(root_module, root_module['ns3::DeviceEnergyModelHelper'])
    register_Ns3DlDciListElement_s_methods(root_module, root_module['ns3::DlDciListElement_s'])
    register_Ns3DlInfoListElement_s_methods(root_module, root_module['ns3::DlInfoListElement_s'])
    register_Ns3DlSchedulingCallbackInfo_methods(root_module, root_module['ns3::DlSchedulingCallbackInfo'])
    register_Ns3DrxConfig_s_methods(root_module, root_module['ns3::DrxConfig_s'])
    register_Ns3EnergySourceHelper_methods(root_module, root_module['ns3::EnergySourceHelper'])
    register_Ns3EpcEnbS1SapProvider_methods(root_module, root_module['ns3::EpcEnbS1SapProvider'])
    register_Ns3EpcEnbS1SapProviderBearerToBeSwitched_methods(root_module, root_module['ns3::EpcEnbS1SapProvider::BearerToBeSwitched'])
    register_Ns3EpcEnbS1SapProviderPathSwitchRequestParameters_methods(root_module, root_module['ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters'])
    register_Ns3EpcEnbS1SapUser_methods(root_module, root_module['ns3::EpcEnbS1SapUser'])
    register_Ns3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters_methods(root_module, root_module['ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters'])
    register_Ns3EpcEnbS1SapUserInitialContextSetupRequestParameters_methods(root_module, root_module['ns3::EpcEnbS1SapUser::InitialContextSetupRequestParameters'])
    register_Ns3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters_methods(root_module, root_module['ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters'])
    register_Ns3EpcX2Sap_methods(root_module, root_module['ns3::EpcX2Sap'])
    register_Ns3EpcX2SapCellInformationItem_methods(root_module, root_module['ns3::EpcX2Sap::CellInformationItem'])
    register_Ns3EpcX2SapCellMeasurementResultItem_methods(root_module, root_module['ns3::EpcX2Sap::CellMeasurementResultItem'])
    register_Ns3EpcX2SapCompositeAvailCapacity_methods(root_module, root_module['ns3::EpcX2Sap::CompositeAvailCapacity'])
    register_Ns3EpcX2SapErabAdmittedItem_methods(root_module, root_module['ns3::EpcX2Sap::ErabAdmittedItem'])
    register_Ns3EpcX2SapErabNotAdmittedItem_methods(root_module, root_module['ns3::EpcX2Sap::ErabNotAdmittedItem'])
    register_Ns3EpcX2SapErabToBeSetupItem_methods(root_module, root_module['ns3::EpcX2Sap::ErabToBeSetupItem'])
    register_Ns3EpcX2SapErabsSubjectToStatusTransferItem_methods(root_module, root_module['ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem'])
    register_Ns3EpcX2SapHandoverPreparationFailureParams_methods(root_module, root_module['ns3::EpcX2Sap::HandoverPreparationFailureParams'])
    register_Ns3EpcX2SapHandoverRequestAckParams_methods(root_module, root_module['ns3::EpcX2Sap::HandoverRequestAckParams'])
    register_Ns3EpcX2SapHandoverRequestParams_methods(root_module, root_module['ns3::EpcX2Sap::HandoverRequestParams'])
    register_Ns3EpcX2SapLoadInformationParams_methods(root_module, root_module['ns3::EpcX2Sap::LoadInformationParams'])
    register_Ns3EpcX2SapRelativeNarrowbandTxBand_methods(root_module, root_module['ns3::EpcX2Sap::RelativeNarrowbandTxBand'])
    register_Ns3EpcX2SapResourceStatusUpdateParams_methods(root_module, root_module['ns3::EpcX2Sap::ResourceStatusUpdateParams'])
    register_Ns3EpcX2SapSnStatusTransferParams_methods(root_module, root_module['ns3::EpcX2Sap::SnStatusTransferParams'])
    register_Ns3EpcX2SapUeContextReleaseParams_methods(root_module, root_module['ns3::EpcX2Sap::UeContextReleaseParams'])
    register_Ns3EpcX2SapUeDataParams_methods(root_module, root_module['ns3::EpcX2Sap::UeDataParams'])
    register_Ns3EpcX2SapUlHighInterferenceInformationItem_methods(root_module, root_module['ns3::EpcX2Sap::UlHighInterferenceInformationItem'])
    register_Ns3EpcX2SapProvider_methods(root_module, root_module['ns3::EpcX2SapProvider'])
    register_Ns3EpcX2SapUser_methods(root_module, root_module['ns3::EpcX2SapUser'])
    register_Ns3EutranMeasurementMapping_methods(root_module, root_module['ns3::EutranMeasurementMapping'])
    register_Ns3EventId_methods(root_module, root_module['ns3::EventId'])
    register_Ns3FfMacCschedSapProvider_methods(root_module, root_module['ns3::FfMacCschedSapProvider'])
    register_Ns3FfMacCschedSapProviderCschedCellConfigReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedDiscPoolConfigReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedDiscPoolConfigReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedDiscPoolReleaseReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedDiscPoolReleaseReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedLcConfigReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedLcReleaseReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedPoolConfigReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedPoolConfigReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedPoolReleaseReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedPoolReleaseReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedUeConfigReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters'])
    register_Ns3FfMacCschedSapProviderCschedUeReleaseReqParameters_methods(root_module, root_module['ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters'])
    register_Ns3FfMacCschedSapUser_methods(root_module, root_module['ns3::FfMacCschedSapUser'])
    register_Ns3FfMacCschedSapUserCschedCellConfigCnfParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters'])
    register_Ns3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters'])
    register_Ns3FfMacCschedSapUserCschedLcConfigCnfParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters'])
    register_Ns3FfMacCschedSapUserCschedLcReleaseCnfParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters'])
    register_Ns3FfMacCschedSapUserCschedUeConfigCnfParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters'])
    register_Ns3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters'])
    register_Ns3FfMacCschedSapUserCschedUeReleaseCnfParameters_methods(root_module, root_module['ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters'])
    register_Ns3FfMacSchedSapProvider_methods(root_module, root_module['ns3::FfMacSchedSapProvider'])
    register_Ns3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedDlMacBufferReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedDlRachInfoReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedDlTriggerReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedUlSrInfoReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters'])
    register_Ns3FfMacSchedSapProviderSchedUlTriggerReqParameters_methods(root_module, root_module['ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters'])
    register_Ns3FfMacSchedSapUser_methods(root_module, root_module['ns3::FfMacSchedSapUser'])
    register_Ns3FfMacSchedSapUserSchedDlConfigIndParameters_methods(root_module, root_module['ns3::FfMacSchedSapUser::SchedDlConfigIndParameters'])
    register_Ns3FfMacSchedSapUserSchedUlConfigIndParameters_methods(root_module, root_module['ns3::FfMacSchedSapUser::SchedUlConfigIndParameters'])
    register_Ns3GbrQosInformation_methods(root_module, root_module['ns3::GbrQosInformation'])
    register_Ns3HarqProcessInfoElement_t_methods(root_module, root_module['ns3::HarqProcessInfoElement_t'])
    register_Ns3Hasher_methods(root_module, root_module['ns3::Hasher'])
    register_Ns3HigherLayerSelected_s_methods(root_module, root_module['ns3::HigherLayerSelected_s'])
    register_Ns3ImsiLcidPair_t_methods(root_module, root_module['ns3::ImsiLcidPair_t'])
    register_Ns3Inet6SocketAddress_methods(root_module, root_module['ns3::Inet6SocketAddress'])
    register_Ns3InetSocketAddress_methods(root_module, root_module['ns3::InetSocketAddress'])
    register_Ns3IntToType__0_methods(root_module, root_module['ns3::IntToType< 0 >'])
    register_Ns3IntToType__1_methods(root_module, root_module['ns3::IntToType< 1 >'])
    register_Ns3IntToType__2_methods(root_module, root_module['ns3::IntToType< 2 >'])
    register_Ns3IntToType__3_methods(root_module, root_module['ns3::IntToType< 3 >'])
    register_Ns3IntToType__4_methods(root_module, root_module['ns3::IntToType< 4 >'])
    register_Ns3IntToType__5_methods(root_module, root_module['ns3::IntToType< 5 >'])
    register_Ns3IntToType__6_methods(root_module, root_module['ns3::IntToType< 6 >'])
    register_Ns3Ipv4Address_methods(root_module, root_module['ns3::Ipv4Address'])
    register_Ns3Ipv4AddressHash_methods(root_module, root_module['ns3::Ipv4AddressHash'])
    register_Ns3Ipv4Mask_methods(root_module, root_module['ns3::Ipv4Mask'])
    register_Ns3Ipv6Address_methods(root_module, root_module['ns3::Ipv6Address'])
    register_Ns3Ipv6AddressHash_methods(root_module, root_module['ns3::Ipv6AddressHash'])
    register_Ns3Ipv6Prefix_methods(root_module, root_module['ns3::Ipv6Prefix'])
    register_Ns3LogComponent_methods(root_module, root_module['ns3::LogComponent'])
    register_Ns3LogicalChannelConfigListElement_s_methods(root_module, root_module['ns3::LogicalChannelConfigListElement_s'])
    register_Ns3LteAnrSapProvider_methods(root_module, root_module['ns3::LteAnrSapProvider'])
    register_Ns3LteAnrSapUser_methods(root_module, root_module['ns3::LteAnrSapUser'])
    register_Ns3LteAsSapProvider_methods(root_module, root_module['ns3::LteAsSapProvider'])
    register_Ns3LteAsSapUser_methods(root_module, root_module['ns3::LteAsSapUser'])
    register_Ns3LteCcmMacSapProvider_methods(root_module, root_module['ns3::LteCcmMacSapProvider'])
    register_Ns3LteCcmRrcSapProvider_methods(root_module, root_module['ns3::LteCcmRrcSapProvider'])
    register_Ns3LteCcmRrcSapProviderLcsConfig_methods(root_module, root_module['ns3::LteCcmRrcSapProvider::LcsConfig'])
    register_Ns3LteCcmRrcSapUser_methods(root_module, root_module['ns3::LteCcmRrcSapUser'])
    register_Ns3LteEnbCmacSapProvider_methods(root_module, root_module['ns3::LteEnbCmacSapProvider'])
    register_Ns3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue_methods(root_module, root_module['ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue'])
    register_Ns3LteEnbCmacSapProviderLcInfo_methods(root_module, root_module['ns3::LteEnbCmacSapProvider::LcInfo'])
    register_Ns3LteEnbCmacSapProviderRachConfig_methods(root_module, root_module['ns3::LteEnbCmacSapProvider::RachConfig'])
    register_Ns3LteEnbCmacSapProviderUeConfig_methods(root_module, root_module['ns3::LteEnbCmacSapProvider::UeConfig'])
    register_Ns3LteEnbCmacSapUser_methods(root_module, root_module['ns3::LteEnbCmacSapUser'])
    register_Ns3LteEnbCmacSapUserUeConfig_methods(root_module, root_module['ns3::LteEnbCmacSapUser::UeConfig'])
    register_Ns3LteEnbCphySapProvider_methods(root_module, root_module['ns3::LteEnbCphySapProvider'])
    register_Ns3LteEnbCphySapUser_methods(root_module, root_module['ns3::LteEnbCphySapUser'])
    register_Ns3LteEnbPhySapProvider_methods(root_module, root_module['ns3::LteEnbPhySapProvider'])
    register_Ns3LteEnbPhySapUser_methods(root_module, root_module['ns3::LteEnbPhySapUser'])
    register_Ns3LteFfConverter_methods(root_module, root_module['ns3::LteFfConverter'])
    register_Ns3LteFfrRrcSapProvider_methods(root_module, root_module['ns3::LteFfrRrcSapProvider'])
    register_Ns3LteFfrRrcSapUser_methods(root_module, root_module['ns3::LteFfrRrcSapUser'])
    register_Ns3LteFlowId_t_methods(root_module, root_module['ns3::LteFlowId_t'])
    register_Ns3LteHandoverManagementSapProvider_methods(root_module, root_module['ns3::LteHandoverManagementSapProvider'])
    register_Ns3LteHandoverManagementSapUser_methods(root_module, root_module['ns3::LteHandoverManagementSapUser'])
    register_Ns3LteMacSapProvider_methods(root_module, root_module['ns3::LteMacSapProvider'])
    register_Ns3LteMacSapProviderReportBufferStatusParameters_methods(root_module, root_module['ns3::LteMacSapProvider::ReportBufferStatusParameters'])
    register_Ns3LteMacSapProviderTransmitPduParameters_methods(root_module, root_module['ns3::LteMacSapProvider::TransmitPduParameters'])
    register_Ns3LteMacSapUser_methods(root_module, root_module['ns3::LteMacSapUser'])
    register_Ns3LteMacSapUserReceivePduParameters_methods(root_module, root_module['ns3::LteMacSapUser::ReceivePduParameters'])
    register_Ns3LteMacSapUserTxOpportunityParameters_methods(root_module, root_module['ns3::LteMacSapUser::TxOpportunityParameters'])
    register_Ns3LteNistErrorModel_methods(root_module, root_module['ns3::LteNistErrorModel'])
    register_Ns3LtePc5SignallingHeaderSequenceNumber_methods(root_module, root_module['ns3::LtePc5SignallingHeaderSequenceNumber'])
    register_Ns3LtePdcpSapProvider_methods(root_module, root_module['ns3::LtePdcpSapProvider'])
    register_Ns3LtePdcpSapProviderTransmitPdcpSduParameters_methods(root_module, root_module['ns3::LtePdcpSapProvider::TransmitPdcpSduParameters'])
    register_Ns3LtePdcpSapUser_methods(root_module, root_module['ns3::LtePdcpSapUser'])
    register_Ns3LtePdcpSapUserReceivePdcpSduParameters_methods(root_module, root_module['ns3::LtePdcpSapUser::ReceivePdcpSduParameters'])
    register_Ns3LteRlcSapProvider_methods(root_module, root_module['ns3::LteRlcSapProvider'])
    register_Ns3LteRlcSapProviderTransmitPdcpPduParameters_methods(root_module, root_module['ns3::LteRlcSapProvider::TransmitPdcpPduParameters'])
    register_Ns3LteRlcSapUser_methods(root_module, root_module['ns3::LteRlcSapUser'])
    register_Ns3LteRrcSap_methods(root_module, root_module['ns3::LteRrcSap'])
    register_Ns3LteRrcSapAntennaInfoCommon_methods(root_module, root_module['ns3::LteRrcSap::AntennaInfoCommon'])
    register_Ns3LteRrcSapAntennaInfoDedicated_methods(root_module, root_module['ns3::LteRrcSap::AntennaInfoDedicated'])
    register_Ns3LteRrcSapAntennaInfoUl_methods(root_module, root_module['ns3::LteRrcSap::AntennaInfoUl'])
    register_Ns3LteRrcSapAsConfig_methods(root_module, root_module['ns3::LteRrcSap::AsConfig'])
    register_Ns3LteRrcSapBlackCellsToAddMod_methods(root_module, root_module['ns3::LteRrcSap::BlackCellsToAddMod'])
    register_Ns3LteRrcSapCarrierBandwidthEutra_methods(root_module, root_module['ns3::LteRrcSap::CarrierBandwidthEutra'])
    register_Ns3LteRrcSapCarrierFreqEutra_methods(root_module, root_module['ns3::LteRrcSap::CarrierFreqEutra'])
    register_Ns3LteRrcSapCellAccessRelatedInfo_methods(root_module, root_module['ns3::LteRrcSap::CellAccessRelatedInfo'])
    register_Ns3LteRrcSapCellIdentification_methods(root_module, root_module['ns3::LteRrcSap::CellIdentification'])
    register_Ns3LteRrcSapCellSelectionInfo_methods(root_module, root_module['ns3::LteRrcSap::CellSelectionInfo'])
    register_Ns3LteRrcSapCellsToAddMod_methods(root_module, root_module['ns3::LteRrcSap::CellsToAddMod'])
    register_Ns3LteRrcSapCgiInfo_methods(root_module, root_module['ns3::LteRrcSap::CgiInfo'])
    register_Ns3LteRrcSapDrbToAddMod_methods(root_module, root_module['ns3::LteRrcSap::DrbToAddMod'])
    register_Ns3LteRrcSapFreqInfo_methods(root_module, root_module['ns3::LteRrcSap::FreqInfo'])
    register_Ns3LteRrcSapHandoverPreparationInfo_methods(root_module, root_module['ns3::LteRrcSap::HandoverPreparationInfo'])
    register_Ns3LteRrcSapLogicalChannelConfig_methods(root_module, root_module['ns3::LteRrcSap::LogicalChannelConfig'])
    register_Ns3LteRrcSapMasterInformationBlock_methods(root_module, root_module['ns3::LteRrcSap::MasterInformationBlock'])
    register_Ns3LteRrcSapMasterInformationBlockSL_methods(root_module, root_module['ns3::LteRrcSap::MasterInformationBlockSL'])
    register_Ns3LteRrcSapMeasConfig_methods(root_module, root_module['ns3::LteRrcSap::MeasConfig'])
    register_Ns3LteRrcSapMeasGapConfig_methods(root_module, root_module['ns3::LteRrcSap::MeasGapConfig'])
    register_Ns3LteRrcSapMeasIdToAddMod_methods(root_module, root_module['ns3::LteRrcSap::MeasIdToAddMod'])
    register_Ns3LteRrcSapMeasObjectEutra_methods(root_module, root_module['ns3::LteRrcSap::MeasObjectEutra'])
    register_Ns3LteRrcSapMeasObjectToAddMod_methods(root_module, root_module['ns3::LteRrcSap::MeasObjectToAddMod'])
    register_Ns3LteRrcSapMeasResultBestNeighCell_methods(root_module, root_module['ns3::LteRrcSap::MeasResultBestNeighCell'])
    register_Ns3LteRrcSapMeasResultEutra_methods(root_module, root_module['ns3::LteRrcSap::MeasResultEutra'])
    register_Ns3LteRrcSapMeasResultPCell_methods(root_module, root_module['ns3::LteRrcSap::MeasResultPCell'])
    register_Ns3LteRrcSapMeasResultSCell_methods(root_module, root_module['ns3::LteRrcSap::MeasResultSCell'])
    register_Ns3LteRrcSapMeasResultServFreq_methods(root_module, root_module['ns3::LteRrcSap::MeasResultServFreq'])
    register_Ns3LteRrcSapMeasResults_methods(root_module, root_module['ns3::LteRrcSap::MeasResults'])
    register_Ns3LteRrcSapMeasurementReport_methods(root_module, root_module['ns3::LteRrcSap::MeasurementReport'])
    register_Ns3LteRrcSapMobilityControlInfo_methods(root_module, root_module['ns3::LteRrcSap::MobilityControlInfo'])
    register_Ns3LteRrcSapMobilityStateParameters_methods(root_module, root_module['ns3::LteRrcSap::MobilityStateParameters'])
    register_Ns3LteRrcSapNonCriticalExtensionConfiguration_methods(root_module, root_module['ns3::LteRrcSap::NonCriticalExtensionConfiguration'])
    register_Ns3LteRrcSapNonUlConfiguration_methods(root_module, root_module['ns3::LteRrcSap::NonUlConfiguration'])
    register_Ns3LteRrcSapPdschConfigCommon_methods(root_module, root_module['ns3::LteRrcSap::PdschConfigCommon'])
    register_Ns3LteRrcSapPdschConfigDedicated_methods(root_module, root_module['ns3::LteRrcSap::PdschConfigDedicated'])
    register_Ns3LteRrcSapPeriodicBsrTimer_methods(root_module, root_module['ns3::LteRrcSap::PeriodicBsrTimer'])
    register_Ns3LteRrcSapPhysCellIdRange_methods(root_module, root_module['ns3::LteRrcSap::PhysCellIdRange'])
    register_Ns3LteRrcSapPhysicalConfigDedicated_methods(root_module, root_module['ns3::LteRrcSap::PhysicalConfigDedicated'])
    register_Ns3LteRrcSapPhysicalConfigDedicatedSCell_methods(root_module, root_module['ns3::LteRrcSap::PhysicalConfigDedicatedSCell'])
    register_Ns3LteRrcSapPlmnIdentityInfo_methods(root_module, root_module['ns3::LteRrcSap::PlmnIdentityInfo'])
    register_Ns3LteRrcSapPlmnIdentityList_methods(root_module, root_module['ns3::LteRrcSap::PlmnIdentityList'])
    register_Ns3LteRrcSapPoolSelection_methods(root_module, root_module['ns3::LteRrcSap::PoolSelection'])
    register_Ns3LteRrcSapPoolSelectionRsrpBased_methods(root_module, root_module['ns3::LteRrcSap::PoolSelectionRsrpBased'])
    register_Ns3LteRrcSapPrachConfigSCell_methods(root_module, root_module['ns3::LteRrcSap::PrachConfigSCell'])
    register_Ns3LteRrcSapPreambleInfo_methods(root_module, root_module['ns3::LteRrcSap::PreambleInfo'])
    register_Ns3LteRrcSapPuschConfigDedicatedSCell_methods(root_module, root_module['ns3::LteRrcSap::PuschConfigDedicatedSCell'])
    register_Ns3LteRrcSapQuantityConfig_methods(root_module, root_module['ns3::LteRrcSap::QuantityConfig'])
    register_Ns3LteRrcSapRaSupervisionInfo_methods(root_module, root_module['ns3::LteRrcSap::RaSupervisionInfo'])
    register_Ns3LteRrcSapRachConfigCommon_methods(root_module, root_module['ns3::LteRrcSap::RachConfigCommon'])
    register_Ns3LteRrcSapRachConfigDedicated_methods(root_module, root_module['ns3::LteRrcSap::RachConfigDedicated'])
    register_Ns3LteRrcSapRadioResourceConfigCommon_methods(root_module, root_module['ns3::LteRrcSap::RadioResourceConfigCommon'])
    register_Ns3LteRrcSapRadioResourceConfigCommonSCell_methods(root_module, root_module['ns3::LteRrcSap::RadioResourceConfigCommonSCell'])
    register_Ns3LteRrcSapRadioResourceConfigCommonSib_methods(root_module, root_module['ns3::LteRrcSap::RadioResourceConfigCommonSib'])
    register_Ns3LteRrcSapRadioResourceConfigDedicated_methods(root_module, root_module['ns3::LteRrcSap::RadioResourceConfigDedicated'])
    register_Ns3LteRrcSapRadioResourceConfigDedicatedSCell_methods(root_module, root_module['ns3::LteRrcSap::RadioResourceConfigDedicatedSCell'])
    register_Ns3LteRrcSapReestabUeIdentity_methods(root_module, root_module['ns3::LteRrcSap::ReestabUeIdentity'])
    register_Ns3LteRrcSapReportConfigEutra_methods(root_module, root_module['ns3::LteRrcSap::ReportConfigEutra'])
    register_Ns3LteRrcSapReportConfigToAddMod_methods(root_module, root_module['ns3::LteRrcSap::ReportConfigToAddMod'])
    register_Ns3LteRrcSapRetxBsrTimer_methods(root_module, root_module['ns3::LteRrcSap::RetxBsrTimer'])
    register_Ns3LteRrcSapRlcConfig_methods(root_module, root_module['ns3::LteRrcSap::RlcConfig'])
    register_Ns3LteRrcSapRrcConnectionReconfiguration_methods(root_module, root_module['ns3::LteRrcSap::RrcConnectionReconfiguration'])
    register_Ns3LteRrcSapRrcConnectionReconfigurationCompleted_methods(root_module, root_module['ns3::LteRrcSap::RrcConnectionReconfigurationCompleted'])
    register_Ns3LteRrcSapRrcConnectionReestablishment_methods(root_module, root_module['ns3::LteRrcSap::RrcConnectionReestablishment'])
    register_Ns3LteRrcSapRrcConnectionReestablishmentComplete_methods(root_module, root_module['ns3::LteRrcSap::RrcConnectionReestablishmentComplete'])
    register_Ns3LteRrcSapRrcConnectionReestablishmentReject_methods(root_module, root_module['ns3::LteRrcSap::RrcConnectionReestablishmentReject'])
    register_Ns3LteRrcSapRrcConnectionReestablishmentRequest_methods(root_module, root_module['ns3::LteRrcSap::RrcConnectionReestablishmentRequest'])
    register_Ns3LteRrcSapRrcConnectionReject_methods(root_module, root_module['ns3::LteRrcSap::RrcConnectionReject'])
    register_Ns3LteRrcSapRrcConnectionRelease_methods(root_module, root_module['ns3::LteRrcSap::RrcConnectionRelease'])
    register_Ns3LteRrcSapRrcConnectionRequest_methods(root_module, root_module['ns3::LteRrcSap::RrcConnectionRequest'])
    register_Ns3LteRrcSapRrcConnectionSetup_methods(root_module, root_module['ns3::LteRrcSap::RrcConnectionSetup'])
    register_Ns3LteRrcSapRrcConnectionSetupCompleted_methods(root_module, root_module['ns3::LteRrcSap::RrcConnectionSetupCompleted'])
    register_Ns3LteRrcSapSCellToAddMod_methods(root_module, root_module['ns3::LteRrcSap::SCellToAddMod'])
    register_Ns3LteRrcSapSib18CommConfig_methods(root_module, root_module['ns3::LteRrcSap::Sib18CommConfig'])
    register_Ns3LteRrcSapSib19DiscConfig_methods(root_module, root_module['ns3::LteRrcSap::Sib19DiscConfig'])
    register_Ns3LteRrcSapSib19DiscConfigRelay_methods(root_module, root_module['ns3::LteRrcSap::Sib19DiscConfigRelay'])
    register_Ns3LteRrcSapSidelinkUeInformation_methods(root_module, root_module['ns3::LteRrcSap::SidelinkUeInformation'])
    register_Ns3LteRrcSapSlCarrierFreqInfoList_methods(root_module, root_module['ns3::LteRrcSap::SlCarrierFreqInfoList'])
    register_Ns3LteRrcSapSlCommConfig_methods(root_module, root_module['ns3::LteRrcSap::SlCommConfig'])
    register_Ns3LteRrcSapSlCommConfigScheduled_methods(root_module, root_module['ns3::LteRrcSap::SlCommConfigScheduled'])
    register_Ns3LteRrcSapSlCommConfigUeSelected_methods(root_module, root_module['ns3::LteRrcSap::SlCommConfigUeSelected'])
    register_Ns3LteRrcSapSlCommResourcePool_methods(root_module, root_module['ns3::LteRrcSap::SlCommResourcePool'])
    register_Ns3LteRrcSapSlCommResourcePoolTxParameters_methods(root_module, root_module['ns3::LteRrcSap::SlCommResourcePool::TxParameters'])
    register_Ns3LteRrcSapSlCommResourcePoolUeSelectedResourceConfig_methods(root_module, root_module['ns3::LteRrcSap::SlCommResourcePool::UeSelectedResourceConfig'])
    register_Ns3LteRrcSapSlCommRxPoolList_methods(root_module, root_module['ns3::LteRrcSap::SlCommRxPoolList'])
    register_Ns3LteRrcSapSlCommTxPoolList_methods(root_module, root_module['ns3::LteRrcSap::SlCommTxPoolList'])
    register_Ns3LteRrcSapSlCommTxPoolToAddMod_methods(root_module, root_module['ns3::LteRrcSap::SlCommTxPoolToAddMod'])
    register_Ns3LteRrcSapSlCommTxPoolToAddModList_methods(root_module, root_module['ns3::LteRrcSap::SlCommTxPoolToAddModList'])
    register_Ns3LteRrcSapSlCommTxResourceReq_methods(root_module, root_module['ns3::LteRrcSap::SlCommTxResourceReq'])
    register_Ns3LteRrcSapSlCommTxResourcesSetup_methods(root_module, root_module['ns3::LteRrcSap::SlCommTxResourcesSetup'])
    register_Ns3LteRrcSapSlCpLen_methods(root_module, root_module['ns3::LteRrcSap::SlCpLen'])
    register_Ns3LteRrcSapSlDestinationInfoList_methods(root_module, root_module['ns3::LteRrcSap::SlDestinationInfoList'])
    register_Ns3LteRrcSapSlDiscConfig_methods(root_module, root_module['ns3::LteRrcSap::SlDiscConfig'])
    register_Ns3LteRrcSapSlDiscConfigRelayUe_methods(root_module, root_module['ns3::LteRrcSap::SlDiscConfigRelayUe'])
    register_Ns3LteRrcSapSlDiscConfigRemoteUe_methods(root_module, root_module['ns3::LteRrcSap::SlDiscConfigRemoteUe'])
    register_Ns3LteRrcSapSlDiscConfigScheduled_methods(root_module, root_module['ns3::LteRrcSap::SlDiscConfigScheduled'])
    register_Ns3LteRrcSapSlDiscConfigUeSelected_methods(root_module, root_module['ns3::LteRrcSap::SlDiscConfigUeSelected'])
    register_Ns3LteRrcSapSlDiscResourcePool_methods(root_module, root_module['ns3::LteRrcSap::SlDiscResourcePool'])
    register_Ns3LteRrcSapSlDiscResourcePoolRxParameters_methods(root_module, root_module['ns3::LteRrcSap::SlDiscResourcePool::RxParameters'])
    register_Ns3LteRrcSapSlDiscResourcePoolRxParametersTddConfig_methods(root_module, root_module['ns3::LteRrcSap::SlDiscResourcePool::RxParameters::TddConfig'])
    register_Ns3LteRrcSapSlDiscResourcePoolTxParameters_methods(root_module, root_module['ns3::LteRrcSap::SlDiscResourcePool::TxParameters'])
    register_Ns3LteRrcSapSlDiscResourcePoolTxParametersUeSelectedResourceConfig_methods(root_module, root_module['ns3::LteRrcSap::SlDiscResourcePool::TxParameters::UeSelectedResourceConfig'])
    register_Ns3LteRrcSapSlDiscRxPoolList_methods(root_module, root_module['ns3::LteRrcSap::SlDiscRxPoolList'])
    register_Ns3LteRrcSapSlDiscTxPoolList_methods(root_module, root_module['ns3::LteRrcSap::SlDiscTxPoolList'])
    register_Ns3LteRrcSapSlDiscTxPoolToAddMod_methods(root_module, root_module['ns3::LteRrcSap::SlDiscTxPoolToAddMod'])
    register_Ns3LteRrcSapSlDiscTxPoolToAddModList_methods(root_module, root_module['ns3::LteRrcSap::SlDiscTxPoolToAddModList'])
    register_Ns3LteRrcSapSlDiscTxPowerInfo_methods(root_module, root_module['ns3::LteRrcSap::SlDiscTxPowerInfo'])
    register_Ns3LteRrcSapSlDiscTxPowerInfoList_methods(root_module, root_module['ns3::LteRrcSap::SlDiscTxPowerInfoList'])
    register_Ns3LteRrcSapSlDiscTxResourcesSetup_methods(root_module, root_module['ns3::LteRrcSap::SlDiscTxResourcesSetup'])
    register_Ns3LteRrcSapSlHoppingConfigComm_methods(root_module, root_module['ns3::LteRrcSap::SlHoppingConfigComm'])
    register_Ns3LteRrcSapSlHoppingConfigDisc_methods(root_module, root_module['ns3::LteRrcSap::SlHoppingConfigDisc'])
    register_Ns3LteRrcSapSlMacMainConfigSl_methods(root_module, root_module['ns3::LteRrcSap::SlMacMainConfigSl'])
    register_Ns3LteRrcSapSlOffsetIndicator_methods(root_module, root_module['ns3::LteRrcSap::SlOffsetIndicator'])
    register_Ns3LteRrcSapSlPeriodComm_methods(root_module, root_module['ns3::LteRrcSap::SlPeriodComm'])
    register_Ns3LteRrcSapSlPeriodDisc_methods(root_module, root_module['ns3::LteRrcSap::SlPeriodDisc'])
    register_Ns3LteRrcSapSlPreconfigCommPool_methods(root_module, root_module['ns3::LteRrcSap::SlPreconfigCommPool'])
    register_Ns3LteRrcSapSlPreconfigCommPoolList_methods(root_module, root_module['ns3::LteRrcSap::SlPreconfigCommPoolList'])
    register_Ns3LteRrcSapSlPreconfigDiscPool_methods(root_module, root_module['ns3::LteRrcSap::SlPreconfigDiscPool'])
    register_Ns3LteRrcSapSlPreconfigDiscPoolTxParameters_methods(root_module, root_module['ns3::LteRrcSap::SlPreconfigDiscPool::TxParameters'])
    register_Ns3LteRrcSapSlPreconfigDiscPoolList_methods(root_module, root_module['ns3::LteRrcSap::SlPreconfigDiscPoolList'])
    register_Ns3LteRrcSapSlPreconfigGeneral_methods(root_module, root_module['ns3::LteRrcSap::SlPreconfigGeneral'])
    register_Ns3LteRrcSapSlPreconfigRelay_methods(root_module, root_module['ns3::LteRrcSap::SlPreconfigRelay'])
    register_Ns3LteRrcSapSlPreconfigSync_methods(root_module, root_module['ns3::LteRrcSap::SlPreconfigSync'])
    register_Ns3LteRrcSapSlPreconfiguration_methods(root_module, root_module['ns3::LteRrcSap::SlPreconfiguration'])
    register_Ns3LteRrcSapSlReselectionInfoRelay_methods(root_module, root_module['ns3::LteRrcSap::SlReselectionInfoRelay'])
    register_Ns3LteRrcSapSlSyncConfigList_methods(root_module, root_module['ns3::LteRrcSap::SlSyncConfigList'])
    register_Ns3LteRrcSapSlTfIndexPair_methods(root_module, root_module['ns3::LteRrcSap::SlTfIndexPair'])
    register_Ns3LteRrcSapSlTfIndexPairList_methods(root_module, root_module['ns3::LteRrcSap::SlTfIndexPairList'])
    register_Ns3LteRrcSapSlTfResourceConfig_methods(root_module, root_module['ns3::LteRrcSap::SlTfResourceConfig'])
    register_Ns3LteRrcSapSlTrptSubset_methods(root_module, root_module['ns3::LteRrcSap::SlTrptSubset'])
    register_Ns3LteRrcSapSlTxParameters_methods(root_module, root_module['ns3::LteRrcSap::SlTxParameters'])
    register_Ns3LteRrcSapSlTxPoolToReleaseList_methods(root_module, root_module['ns3::LteRrcSap::SlTxPoolToReleaseList'])
    register_Ns3LteRrcSapSoundingRsUlConfigCommon_methods(root_module, root_module['ns3::LteRrcSap::SoundingRsUlConfigCommon'])
    register_Ns3LteRrcSapSoundingRsUlConfigDedicated_methods(root_module, root_module['ns3::LteRrcSap::SoundingRsUlConfigDedicated'])
    register_Ns3LteRrcSapSpecialSubframePatterns_methods(root_module, root_module['ns3::LteRrcSap::SpecialSubframePatterns'])
    register_Ns3LteRrcSapSpeedStatePars_methods(root_module, root_module['ns3::LteRrcSap::SpeedStatePars'])
    register_Ns3LteRrcSapSpeedStateScaleFactors_methods(root_module, root_module['ns3::LteRrcSap::SpeedStateScaleFactors'])
    register_Ns3LteRrcSapSrbToAddMod_methods(root_module, root_module['ns3::LteRrcSap::SrbToAddMod'])
    register_Ns3LteRrcSapSubframeAssignment_methods(root_module, root_module['ns3::LteRrcSap::SubframeAssignment'])
    register_Ns3LteRrcSapSubframeBitmapSl_methods(root_module, root_module['ns3::LteRrcSap::SubframeBitmapSl'])
    register_Ns3LteRrcSapSystemInformation_methods(root_module, root_module['ns3::LteRrcSap::SystemInformation'])
    register_Ns3LteRrcSapSystemInformationBlockType1_methods(root_module, root_module['ns3::LteRrcSap::SystemInformationBlockType1'])
    register_Ns3LteRrcSapSystemInformationBlockType18_methods(root_module, root_module['ns3::LteRrcSap::SystemInformationBlockType18'])
    register_Ns3LteRrcSapSystemInformationBlockType19_methods(root_module, root_module['ns3::LteRrcSap::SystemInformationBlockType19'])
    register_Ns3LteRrcSapSystemInformationBlockType2_methods(root_module, root_module['ns3::LteRrcSap::SystemInformationBlockType2'])
    register_Ns3LteRrcSapThresholdEutra_methods(root_module, root_module['ns3::LteRrcSap::ThresholdEutra'])
    register_Ns3LteRrcSapTxFailParam_methods(root_module, root_module['ns3::LteRrcSap::TxFailParam'])
    register_Ns3LteRrcSapTxProbability_methods(root_module, root_module['ns3::LteRrcSap::TxProbability'])
    register_Ns3LteRrcSapUlConfiguration_methods(root_module, root_module['ns3::LteRrcSap::UlConfiguration'])
    register_Ns3LteRrcSapUlPowerControlCommonSCell_methods(root_module, root_module['ns3::LteRrcSap::UlPowerControlCommonSCell'])
    register_Ns3LteRrcSapUlPowerControlDedicatedSCell_methods(root_module, root_module['ns3::LteRrcSap::UlPowerControlDedicatedSCell'])
    register_Ns3LteSlSyncParams_methods(root_module, root_module['ns3::LteSlSyncParams'])
    register_Ns3LteUeCcmRrcSapProvider_methods(root_module, root_module['ns3::LteUeCcmRrcSapProvider'])
    register_Ns3LteUeCcmRrcSapProviderLcsConfig_methods(root_module, root_module['ns3::LteUeCcmRrcSapProvider::LcsConfig'])
    register_Ns3LteUeCcmRrcSapUser_methods(root_module, root_module['ns3::LteUeCcmRrcSapUser'])
    register_Ns3LteUeCmacSapProvider_methods(root_module, root_module['ns3::LteUeCmacSapProvider'])
    register_Ns3LteUeCmacSapProviderLogicalChannelConfig_methods(root_module, root_module['ns3::LteUeCmacSapProvider::LogicalChannelConfig'])
    register_Ns3LteUeCmacSapProviderRachConfig_methods(root_module, root_module['ns3::LteUeCmacSapProvider::RachConfig'])
    register_Ns3LteUeCmacSapUser_methods(root_module, root_module['ns3::LteUeCmacSapUser'])
    register_Ns3LteUeConfig_t_methods(root_module, root_module['ns3::LteUeConfig_t'])
    register_Ns3LteUeCphySapProvider_methods(root_module, root_module['ns3::LteUeCphySapProvider'])
    register_Ns3LteUeCphySapUser_methods(root_module, root_module['ns3::LteUeCphySapUser'])
    register_Ns3LteUeCphySapUserUeMeasurementsElement_methods(root_module, root_module['ns3::LteUeCphySapUser::UeMeasurementsElement'])
    register_Ns3LteUeCphySapUserUeMeasurementsParameters_methods(root_module, root_module['ns3::LteUeCphySapUser::UeMeasurementsParameters'])
    register_Ns3LteUeCphySapUserUeSdRsrpMeasurementsElement_methods(root_module, root_module['ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement'])
    register_Ns3LteUeCphySapUserUeSdRsrpMeasurementsParameters_methods(root_module, root_module['ns3::LteUeCphySapUser::UeSdRsrpMeasurementsParameters'])
    register_Ns3LteUeCphySapUserUeSlssMeasurementsElement_methods(root_module, root_module['ns3::LteUeCphySapUser::UeSlssMeasurementsElement'])
    register_Ns3LteUeCphySapUserUeSlssMeasurementsParameters_methods(root_module, root_module['ns3::LteUeCphySapUser::UeSlssMeasurementsParameters'])
    register_Ns3LteUePhySapProvider_methods(root_module, root_module['ns3::LteUePhySapProvider'])
    register_Ns3LteUePhySapProviderTransmitSlPhySduParameters_methods(root_module, root_module['ns3::LteUePhySapProvider::TransmitSlPhySduParameters'])
    register_Ns3LteUePhySapUser_methods(root_module, root_module['ns3::LteUePhySapUser'])
    register_Ns3LteUeRrcSapProvider_methods(root_module, root_module['ns3::LteUeRrcSapProvider'])
    register_Ns3LteUeRrcSapProviderCompleteSetupParameters_methods(root_module, root_module['ns3::LteUeRrcSapProvider::CompleteSetupParameters'])
    register_Ns3LteUeRrcSapUser_methods(root_module, root_module['ns3::LteUeRrcSapUser'])
    register_Ns3LteUeRrcSapUserSetupParameters_methods(root_module, root_module['ns3::LteUeRrcSapUser::SetupParameters'])
    register_Ns3Mac48Address_methods(root_module, root_module['ns3::Mac48Address'])
    register_Ns3Mac64Address_methods(root_module, root_module['ns3::Mac64Address'])
    register_Ns3Mac8Address_methods(root_module, root_module['ns3::Mac8Address'])
    register_Ns3MacCeListElement_s_methods(root_module, root_module['ns3::MacCeListElement_s'])
    register_Ns3MacCeValue_u_methods(root_module, root_module['ns3::MacCeValue_u'])
    register_Ns3Names_methods(root_module, root_module['ns3::Names'])
    register_Ns3NetDeviceContainer_methods(root_module, root_module['ns3::NetDeviceContainer'])
    register_Ns3NodeContainer_methods(root_module, root_module['ns3::NodeContainer'])
    register_Ns3ObjectBase_methods(root_module, root_module['ns3::ObjectBase'])
    register_Ns3ObjectDeleter_methods(root_module, root_module['ns3::ObjectDeleter'])
    register_Ns3ObjectFactory_methods(root_module, root_module['ns3::ObjectFactory'])
    register_Ns3PacketMetadata_methods(root_module, root_module['ns3::PacketMetadata'])
    register_Ns3PacketMetadataItem_methods(root_module, root_module['ns3::PacketMetadata::Item'])
    register_Ns3PacketMetadataItemIterator_methods(root_module, root_module['ns3::PacketMetadata::ItemIterator'])
    register_Ns3PacketTagIterator_methods(root_module, root_module['ns3::PacketTagIterator'])
    register_Ns3PacketTagIteratorItem_methods(root_module, root_module['ns3::PacketTagIterator::Item'])
    register_Ns3PacketTagList_methods(root_module, root_module['ns3::PacketTagList'])
    register_Ns3PacketTagListTagData_methods(root_module, root_module['ns3::PacketTagList::TagData'])
    register_Ns3PagingInfoListElement_s_methods(root_module, root_module['ns3::PagingInfoListElement_s'])
    register_Ns3ParameterLogger_methods(root_module, root_module['ns3::ParameterLogger'])
    register_Ns3PhichListElement_s_methods(root_module, root_module['ns3::PhichListElement_s'])
    register_Ns3PhyReceptionStatParameters_methods(root_module, root_module['ns3::PhyReceptionStatParameters'])
    register_Ns3PhyTransmissionStatParameters_methods(root_module, root_module['ns3::PhyTransmissionStatParameters'])
    register_Ns3RachListElement_s_methods(root_module, root_module['ns3::RachListElement_s'])
    register_Ns3RadioBearerStatsConnector_methods(root_module, root_module['ns3::RadioBearerStatsConnector'])
    register_Ns3Rectangle_methods(root_module, root_module['ns3::Rectangle'])
    register_Ns3RlcPduListElement_s_methods(root_module, root_module['ns3::RlcPduListElement_s'])
    register_Ns3SbMeasResult_s_methods(root_module, root_module['ns3::SbMeasResult_s'])
    register_Ns3SciListElement_s_methods(root_module, root_module['ns3::SciListElement_s'])
    register_Ns3SiConfiguration_s_methods(root_module, root_module['ns3::SiConfiguration_s'])
    register_Ns3SiMessageListElement_s_methods(root_module, root_module['ns3::SiMessageListElement_s'])
    register_Ns3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_methods(root_module, root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
    register_Ns3Simulator_methods(root_module, root_module['ns3::Simulator'])
    register_Ns3SlCtrlPacketInfo_t_methods(root_module, root_module['ns3::SlCtrlPacketInfo_t'])
    register_Ns3SlDciListElement_s_methods(root_module, root_module['ns3::SlDciListElement_s'])
    register_Ns3SlDiscTbId_t_methods(root_module, root_module['ns3::SlDiscTbId_t'])
    register_Ns3SlDisctbInfo_t_methods(root_module, root_module['ns3::SlDisctbInfo_t'])
    register_Ns3SlPhyReceptionStatParameters_methods(root_module, root_module['ns3::SlPhyReceptionStatParameters'])
    register_Ns3SlPhyTransmissionStatParameters_methods(root_module, root_module['ns3::SlPhyTransmissionStatParameters'])
    register_Ns3SlRxPacketInfo_t_methods(root_module, root_module['ns3::SlRxPacketInfo_t'])
    register_Ns3SlTbId_t_methods(root_module, root_module['ns3::SlTbId_t'])
    register_Ns3SlUeMacStatParameters_methods(root_module, root_module['ns3::SlUeMacStatParameters'])
    register_Ns3SltbInfo_t_methods(root_module, root_module['ns3::SltbInfo_t'])
    register_Ns3SpsConfig_s_methods(root_module, root_module['ns3::SpsConfig_s'])
    register_Ns3SrConfig_s_methods(root_module, root_module['ns3::SrConfig_s'])
    register_Ns3SrListElement_s_methods(root_module, root_module['ns3::SrListElement_s'])
    register_Ns3StatisticalSummary_methods(root_module, root_module['ns3::StatisticalSummary'])
    register_Ns3Tag_methods(root_module, root_module['ns3::Tag'])
    register_Ns3TagBuffer_methods(root_module, root_module['ns3::TagBuffer'])
    register_Ns3TbErrorStats_t_methods(root_module, root_module['ns3::TbErrorStats_t'])
    register_Ns3TbId_t_methods(root_module, root_module['ns3::TbId_t'])
    register_Ns3Time_methods(root_module, root_module['ns3::Time'])
    register_Ns3TimeWithUnit_methods(root_module, root_module['ns3::TimeWithUnit'])
    register_Ns3Timer_methods(root_module, root_module['ns3::Timer'])
    register_Ns3TimerImpl_methods(root_module, root_module['ns3::TimerImpl'])
    register_Ns3TracedValue__Bool_methods(root_module, root_module['ns3::TracedValue< bool >'])
    register_Ns3TracedValue__Double_methods(root_module, root_module['ns3::TracedValue< double >'])
    register_Ns3TransmissionModesLayers_methods(root_module, root_module['ns3::TransmissionModesLayers'])
    register_Ns3TypeId_methods(root_module, root_module['ns3::TypeId'])
    register_Ns3TypeIdAttributeInformation_methods(root_module, root_module['ns3::TypeId::AttributeInformation'])
    register_Ns3TypeIdTraceSourceInformation_methods(root_module, root_module['ns3::TypeId::TraceSourceInformation'])
    register_Ns3UeCapabilities_s_methods(root_module, root_module['ns3::UeCapabilities_s'])
    register_Ns3UeSelected_s_methods(root_module, root_module['ns3::UeSelected_s'])
    register_Ns3UlCqi_s_methods(root_module, root_module['ns3::UlCqi_s'])
    register_Ns3UlDciListElement_s_methods(root_module, root_module['ns3::UlDciListElement_s'])
    register_Ns3UlGrant_s_methods(root_module, root_module['ns3::UlGrant_s'])
    register_Ns3UlInfoListElement_s_methods(root_module, root_module['ns3::UlInfoListElement_s'])
    register_Ns3Vector2D_methods(root_module, root_module['ns3::Vector2D'])
    register_Ns3Vector3D_methods(root_module, root_module['ns3::Vector3D'])
    register_Ns3VendorSpecificListElement_s_methods(root_module, root_module['ns3::VendorSpecificListElement_s'])
    register_Ns3Empty_methods(root_module, root_module['ns3::empty'])
    register_Ns3Int64x64_t_methods(root_module, root_module['ns3::int64x64_t'])
    register_Ns3TbInfo_t_methods(root_module, root_module['ns3::tbInfo_t'])
    register_Ns3Chunk_methods(root_module, root_module['ns3::Chunk'])
    register_Ns3EpsBearer_methods(root_module, root_module['ns3::EpsBearer'])
    register_Ns3Header_methods(root_module, root_module['ns3::Header'])
    register_Ns3LteCcmMacSapUser_methods(root_module, root_module['ns3::LteCcmMacSapUser'])
    register_Ns3LteEnbRrcSapProvider_methods(root_module, root_module['ns3::LteEnbRrcSapProvider'])
    register_Ns3LteEnbRrcSapProviderCompleteSetupUeParameters_methods(root_module, root_module['ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters'])
    register_Ns3LteEnbRrcSapUser_methods(root_module, root_module['ns3::LteEnbRrcSapUser'])
    register_Ns3LteEnbRrcSapUserSetupUeParameters_methods(root_module, root_module['ns3::LteEnbRrcSapUser::SetupUeParameters'])
    register_Ns3LteSlDiscHeader_methods(root_module, root_module['ns3::LteSlDiscHeader'])
    register_Ns3LteSlPc5SignallingMessageType_methods(root_module, root_module['ns3::LteSlPc5SignallingMessageType'])
    register_Ns3LteSlSciHeader_methods(root_module, root_module['ns3::LteSlSciHeader'])
    register_Ns3Object_methods(root_module, root_module['ns3::Object'])
    register_Ns3ObjectAggregateIterator_methods(root_module, root_module['ns3::Object::AggregateIterator'])
    register_Ns3PacketBurst_methods(root_module, root_module['ns3::PacketBurst'])
    register_Ns3PhasedArrayModel_methods(root_module, root_module['ns3::PhasedArrayModel'])
    register_Ns3PhasedArraySpectrumPropagationLossModel_methods(root_module, root_module['ns3::PhasedArraySpectrumPropagationLossModel'])
    register_Ns3PropagationDelayModel_methods(root_module, root_module['ns3::PropagationDelayModel'])
    register_Ns3PropagationLossModel_methods(root_module, root_module['ns3::PropagationLossModel'])
    register_Ns3RandomPropagationDelayModel_methods(root_module, root_module['ns3::RandomPropagationDelayModel'])
    register_Ns3RandomPropagationLossModel_methods(root_module, root_module['ns3::RandomPropagationLossModel'])
    register_Ns3RandomVariableStream_methods(root_module, root_module['ns3::RandomVariableStream'])
    register_Ns3RangePropagationLossModel_methods(root_module, root_module['ns3::RangePropagationLossModel'])
    register_Ns3RemoteUeInfoRequest_methods(root_module, root_module['ns3::RemoteUeInfoRequest'])
    register_Ns3RemoteUeInfoResponse_methods(root_module, root_module['ns3::RemoteUeInfoResponse'])
    register_Ns3SeqTsHeader_methods(root_module, root_module['ns3::SeqTsHeader'])
    register_Ns3SeqTsSizeHeader_methods(root_module, root_module['ns3::SeqTsSizeHeader'])
    register_Ns3SequentialRandomVariable_methods(root_module, root_module['ns3::SequentialRandomVariable'])
    register_Ns3SidelinkCommResourcePool_methods(root_module, root_module['ns3::SidelinkCommResourcePool'])
    register_Ns3SidelinkCommResourcePoolSidelinkTransmissionInfo_methods(root_module, root_module['ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo'])
    register_Ns3SidelinkCommResourcePoolSubframeInfo_methods(root_module, root_module['ns3::SidelinkCommResourcePool::SubframeInfo'])
    register_Ns3SidelinkDiscResourcePool_methods(root_module, root_module['ns3::SidelinkDiscResourcePool'])
    register_Ns3SidelinkDiscResourcePoolSidelinkTransmissionInfo_methods(root_module, root_module['ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo'])
    register_Ns3SidelinkDiscResourcePoolSubframeInfo_methods(root_module, root_module['ns3::SidelinkDiscResourcePool::SubframeInfo'])
    register_Ns3SidelinkRxCommResourcePool_methods(root_module, root_module['ns3::SidelinkRxCommResourcePool'])
    register_Ns3SidelinkRxDiscResourcePool_methods(root_module, root_module['ns3::SidelinkRxDiscResourcePool'])
    register_Ns3SidelinkTxCommResourcePool_methods(root_module, root_module['ns3::SidelinkTxCommResourcePool'])
    register_Ns3SidelinkTxDiscResourcePool_methods(root_module, root_module['ns3::SidelinkTxDiscResourcePool'])
    register_Ns3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
    register_Ns3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
    register_Ns3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
    register_Ns3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
    register_Ns3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::EpcTft, ns3::empty, ns3::DefaultDeleter<ns3::EpcTft> >'])
    register_Ns3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
    register_Ns3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >'])
    register_Ns3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::LteControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::LteControlMessage> >'])
    register_Ns3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::LteHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteHarqPhy> >'])
    register_Ns3SimpleRefCount__Ns3LteSlHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteSlHarqPhy__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::LteSlHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteSlHarqPhy> >'])
    register_Ns3SimpleRefCount__Ns3LteSlTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteSlTft__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::LteSlTft, ns3::empty, ns3::DefaultDeleter<ns3::LteSlTft> >'])
    register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
    register_Ns3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >'])
    register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
    register_Ns3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> >'])
    register_Ns3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> >'])
    register_Ns3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> >'])
    register_Ns3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
    register_Ns3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttCallMachineGrpBasicState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachineGrpBasicState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttCallMachineGrpBroadcastState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachineGrpBroadcastState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttCallMachinePrivateState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachinePrivateState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttCallTypeMachinePrivateState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallTypeMachinePrivateState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOffNetworkFloorParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOffNetworkFloorParticipantState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkCallMachineClientState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkCallMachineClientState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorArbitratorState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorArbitratorState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorDualControlState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorDualControlState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorParticipantState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorTowardsParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorTowardsParticipantState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttServerCallMachineGroupPrearrangedState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttServerCallMachineGroupPrearrangedState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> >'])
    register_Ns3Socket_methods(root_module, root_module['ns3::Socket'])
    register_Ns3SocketIpTosTag_methods(root_module, root_module['ns3::SocketIpTosTag'])
    register_Ns3SocketIpTtlTag_methods(root_module, root_module['ns3::SocketIpTtlTag'])
    register_Ns3SocketIpv6HopLimitTag_methods(root_module, root_module['ns3::SocketIpv6HopLimitTag'])
    register_Ns3SocketIpv6TclassTag_methods(root_module, root_module['ns3::SocketIpv6TclassTag'])
    register_Ns3SocketPriorityTag_methods(root_module, root_module['ns3::SocketPriorityTag'])
    register_Ns3SocketSetDontFragmentTag_methods(root_module, root_module['ns3::SocketSetDontFragmentTag'])
    register_Ns3SpectrumInterference_methods(root_module, root_module['ns3::SpectrumInterference'])
    register_Ns3SpectrumModel_methods(root_module, root_module['ns3::SpectrumModel'])
    register_Ns3SpectrumPhy_methods(root_module, root_module['ns3::SpectrumPhy'])
    register_Ns3SpectrumPropagationLossModel_methods(root_module, root_module['ns3::SpectrumPropagationLossModel'])
    register_Ns3SpectrumSignalParameters_methods(root_module, root_module['ns3::SpectrumSignalParameters'])
    register_Ns3SpectrumValue_methods(root_module, root_module['ns3::SpectrumValue'])
    register_Ns3ThreeLogDistancePropagationLossModel_methods(root_module, root_module['ns3::ThreeLogDistancePropagationLossModel'])
    register_Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::TraceSourceAccessor'])
    register_Ns3Trailer_methods(root_module, root_module['ns3::Trailer'])
    register_Ns3TriangularRandomVariable_methods(root_module, root_module['ns3::TriangularRandomVariable'])
    register_Ns3TwoRayGroundPropagationLossModel_methods(root_module, root_module['ns3::TwoRayGroundPropagationLossModel'])
    register_Ns3UeManager_methods(root_module, root_module['ns3::UeManager'])
    register_Ns3UniformRandomVariable_methods(root_module, root_module['ns3::UniformRandomVariable'])
    register_Ns3VendorSpecificValue_methods(root_module, root_module['ns3::VendorSpecificValue'])
    register_Ns3WeibullRandomVariable_methods(root_module, root_module['ns3::WeibullRandomVariable'])
    register_Ns3ZetaRandomVariable_methods(root_module, root_module['ns3::ZetaRandomVariable'])
    register_Ns3ZipfRandomVariable_methods(root_module, root_module['ns3::ZipfRandomVariable'])
    register_Ns3AntennaModel_methods(root_module, root_module['ns3::AntennaModel'])
    register_Ns3Application_methods(root_module, root_module['ns3::Application'])
    register_Ns3AttributeAccessor_methods(root_module, root_module['ns3::AttributeAccessor'])
    register_Ns3AttributeChecker_methods(root_module, root_module['ns3::AttributeChecker'])
    register_Ns3AttributeValue_methods(root_module, root_module['ns3::AttributeValue'])
    register_Ns3BooleanChecker_methods(root_module, root_module['ns3::BooleanChecker'])
    register_Ns3BooleanValue_methods(root_module, root_module['ns3::BooleanValue'])
    register_Ns3BoxChecker_methods(root_module, root_module['ns3::BoxChecker'])
    register_Ns3BoxValue_methods(root_module, root_module['ns3::BoxValue'])
    register_Ns3Building_methods(root_module, root_module['ns3::Building'])
    register_Ns3CallbackChecker_methods(root_module, root_module['ns3::CallbackChecker'])
    register_Ns3CallbackImplBase_methods(root_module, root_module['ns3::CallbackImplBase'])
    register_Ns3CallbackValue_methods(root_module, root_module['ns3::CallbackValue'])
    register_Ns3CcHelper_methods(root_module, root_module['ns3::CcHelper'])
    register_Ns3Channel_methods(root_module, root_module['ns3::Channel'])
    register_Ns3ComponentCarrier_methods(root_module, root_module['ns3::ComponentCarrier'])
    register_Ns3ComponentCarrierBaseStation_methods(root_module, root_module['ns3::ComponentCarrierBaseStation'])
    register_Ns3ComponentCarrierEnb_methods(root_module, root_module['ns3::ComponentCarrierEnb'])
    register_Ns3ComponentCarrierUe_methods(root_module, root_module['ns3::ComponentCarrierUe'])
    register_Ns3ConstantRandomVariable_methods(root_module, root_module['ns3::ConstantRandomVariable'])
    register_Ns3ConstantSpeedPropagationDelayModel_methods(root_module, root_module['ns3::ConstantSpeedPropagationDelayModel'])
    register_Ns3DataCalculator_methods(root_module, root_module['ns3::DataCalculator'])
    register_Ns3DataOutputInterface_methods(root_module, root_module['ns3::DataOutputInterface'])
    register_Ns3DataRateChecker_methods(root_module, root_module['ns3::DataRateChecker'])
    register_Ns3DataRateValue_methods(root_module, root_module['ns3::DataRateValue'])
    register_Ns3DeterministicRandomVariable_methods(root_module, root_module['ns3::DeterministicRandomVariable'])
    register_Ns3DeviceEnergyModel_methods(root_module, root_module['ns3::DeviceEnergyModel'])
    register_Ns3DirectCommunicationAccept_methods(root_module, root_module['ns3::DirectCommunicationAccept'])
    register_Ns3DirectCommunicationKeepalive_methods(root_module, root_module['ns3::DirectCommunicationKeepalive'])
    register_Ns3DirectCommunicationKeepaliveAck_methods(root_module, root_module['ns3::DirectCommunicationKeepaliveAck'])
    register_Ns3DirectCommunicationReject_methods(root_module, root_module['ns3::DirectCommunicationReject'])
    register_Ns3DirectCommunicationRelease_methods(root_module, root_module['ns3::DirectCommunicationRelease'])
    register_Ns3DirectCommunicationReleaseAccept_methods(root_module, root_module['ns3::DirectCommunicationReleaseAccept'])
    register_Ns3DirectCommunicationRequest_methods(root_module, root_module['ns3::DirectCommunicationRequest'])
    register_Ns3DirectRekeyingRequest_methods(root_module, root_module['ns3::DirectRekeyingRequest'])
    register_Ns3DirectRekeyingResponse_methods(root_module, root_module['ns3::DirectRekeyingResponse'])
    register_Ns3DirectRekeyingTrigger_methods(root_module, root_module['ns3::DirectRekeyingTrigger'])
    register_Ns3DirectSecurityModeCommand_methods(root_module, root_module['ns3::DirectSecurityModeCommand'])
    register_Ns3DirectSecurityModeComplete_methods(root_module, root_module['ns3::DirectSecurityModeComplete'])
    register_Ns3DirectSecurityModeReject_methods(root_module, root_module['ns3::DirectSecurityModeReject'])
    register_Ns3DoubleValue_methods(root_module, root_module['ns3::DoubleValue'])
    register_Ns3EmpiricalRandomVariable_methods(root_module, root_module['ns3::EmpiricalRandomVariable'])
    register_Ns3EmptyAttributeAccessor_methods(root_module, root_module['ns3::EmptyAttributeAccessor'])
    register_Ns3EmptyAttributeChecker_methods(root_module, root_module['ns3::EmptyAttributeChecker'])
    register_Ns3EmptyAttributeValue_methods(root_module, root_module['ns3::EmptyAttributeValue'])
    register_Ns3EnergyHarvester_methods(root_module, root_module['ns3::EnergyHarvester'])
    register_Ns3EnergySource_methods(root_module, root_module['ns3::EnergySource'])
    register_Ns3EnergySourceContainer_methods(root_module, root_module['ns3::EnergySourceContainer'])
    register_Ns3EnumChecker_methods(root_module, root_module['ns3::EnumChecker'])
    register_Ns3EnumValue_methods(root_module, root_module['ns3::EnumValue'])
    register_Ns3EpcTft_methods(root_module, root_module['ns3::EpcTft'])
    register_Ns3EpcTftPacketFilter_methods(root_module, root_module['ns3::EpcTft::PacketFilter'])
    register_Ns3ErlangRandomVariable_methods(root_module, root_module['ns3::ErlangRandomVariable'])
    register_Ns3EventImpl_methods(root_module, root_module['ns3::EventImpl'])
    register_Ns3ExponentialRandomVariable_methods(root_module, root_module['ns3::ExponentialRandomVariable'])
    register_Ns3FixedRssLossModel_methods(root_module, root_module['ns3::FixedRssLossModel'])
    register_Ns3FriisPropagationLossModel_methods(root_module, root_module['ns3::FriisPropagationLossModel'])
    register_Ns3GammaRandomVariable_methods(root_module, root_module['ns3::GammaRandomVariable'])
    register_Ns3IntegerValue_methods(root_module, root_module['ns3::IntegerValue'])
    register_Ns3Ipv4AddressChecker_methods(root_module, root_module['ns3::Ipv4AddressChecker'])
    register_Ns3Ipv4AddressValue_methods(root_module, root_module['ns3::Ipv4AddressValue'])
    register_Ns3Ipv4MaskChecker_methods(root_module, root_module['ns3::Ipv4MaskChecker'])
    register_Ns3Ipv4MaskValue_methods(root_module, root_module['ns3::Ipv4MaskValue'])
    register_Ns3Ipv6AddressChecker_methods(root_module, root_module['ns3::Ipv6AddressChecker'])
    register_Ns3Ipv6AddressValue_methods(root_module, root_module['ns3::Ipv6AddressValue'])
    register_Ns3Ipv6PrefixChecker_methods(root_module, root_module['ns3::Ipv6PrefixChecker'])
    register_Ns3Ipv6PrefixValue_methods(root_module, root_module['ns3::Ipv6PrefixValue'])
    register_Ns3LogDistancePropagationLossModel_methods(root_module, root_module['ns3::LogDistancePropagationLossModel'])
    register_Ns3LogNormalRandomVariable_methods(root_module, root_module['ns3::LogNormalRandomVariable'])
    register_Ns3LteAmc_methods(root_module, root_module['ns3::LteAmc'])
    register_Ns3LteAmcMcsPrbInfo_methods(root_module, root_module['ns3::LteAmc::McsPrbInfo'])
    register_Ns3LteControlMessage_methods(root_module, root_module['ns3::LteControlMessage'])
    register_Ns3LteEnbMac_methods(root_module, root_module['ns3::LteEnbMac'])
    register_Ns3LteEnbRrc_methods(root_module, root_module['ns3::LteEnbRrc'])
    register_Ns3LteHarqPhy_methods(root_module, root_module['ns3::LteHarqPhy'])
    register_Ns3LteHelper_methods(root_module, root_module['ns3::LteHelper'])
    register_Ns3LteInterference_methods(root_module, root_module['ns3::LteInterference'])
    register_Ns3LtePhy_methods(root_module, root_module['ns3::LtePhy'])
    register_Ns3LteRadioBearerInfo_methods(root_module, root_module['ns3::LteRadioBearerInfo'])
    register_Ns3LteRlc_methods(root_module, root_module['ns3::LteRlc'])
    register_Ns3LteRlcSm_methods(root_module, root_module['ns3::LteRlcSm'])
    register_Ns3LteSidelinkRadioBearerInfo_methods(root_module, root_module['ns3::LteSidelinkRadioBearerInfo'])
    register_Ns3LteSignalingRadioBearerInfo_methods(root_module, root_module['ns3::LteSignalingRadioBearerInfo'])
    register_Ns3LteSlEnbRrc_methods(root_module, root_module['ns3::LteSlEnbRrc'])
    register_Ns3LteSlHarqPhy_methods(root_module, root_module['ns3::LteSlHarqPhy'])
    register_Ns3LteSlInterference_methods(root_module, root_module['ns3::LteSlInterference'])
    register_Ns3LteSlO2oCommParams_methods(root_module, root_module['ns3::LteSlO2oCommParams'])
    register_Ns3LteSlO2oCommParamsLteSlPc5ContextId_methods(root_module, root_module['ns3::LteSlO2oCommParams::LteSlPc5ContextId'])
    register_Ns3LteSlTft_methods(root_module, root_module['ns3::LteSlTft'])
    register_Ns3LteSlUeRrc_methods(root_module, root_module['ns3::LteSlUeRrc'])
    register_Ns3LteSlUeRrcAppServiceInfo_methods(root_module, root_module['ns3::LteSlUeRrc::AppServiceInfo'])
    register_Ns3LteSlUeRrcRelayServiceInfo_methods(root_module, root_module['ns3::LteSlUeRrc::RelayServiceInfo'])
    register_Ns3LteSpectrumPhy_methods(root_module, root_module['ns3::LteSpectrumPhy'])
    register_Ns3LteStatsCalculator_methods(root_module, root_module['ns3::LteStatsCalculator'])
    register_Ns3LteUePhy_methods(root_module, root_module['ns3::LteUePhy'])
    register_Ns3LteUePowerControl_methods(root_module, root_module['ns3::LteUePowerControl'])
    register_Ns3LteUeRrc_methods(root_module, root_module['ns3::LteUeRrc'])
    register_Ns3LteUeRrcSlChangeOfSyncRefStatParameters_methods(root_module, root_module['ns3::LteUeRrc::SlChangeOfSyncRefStatParameters'])
    register_Ns3Mac48AddressChecker_methods(root_module, root_module['ns3::Mac48AddressChecker'])
    register_Ns3Mac48AddressValue_methods(root_module, root_module['ns3::Mac48AddressValue'])
    register_Ns3Mac64AddressChecker_methods(root_module, root_module['ns3::Mac64AddressChecker'])
    register_Ns3Mac64AddressValue_methods(root_module, root_module['ns3::Mac64AddressValue'])
    register_Ns3MacStatsCalculator_methods(root_module, root_module['ns3::MacStatsCalculator'])
    register_Ns3MatrixPropagationLossModel_methods(root_module, root_module['ns3::MatrixPropagationLossModel'])
    register_Ns3MibLteControlMessage_methods(root_module, root_module['ns3::MibLteControlMessage'])
    register_Ns3MinMaxAvgTotalCalculator__Unsigned_int_methods(root_module, root_module['ns3::MinMaxAvgTotalCalculator< unsigned int >'])
    register_Ns3MinMaxAvgTotalCalculator__Unsigned_long_methods(root_module, root_module['ns3::MinMaxAvgTotalCalculator< unsigned long >'])
    register_Ns3MobilityModel_methods(root_module, root_module['ns3::MobilityModel'])
    register_Ns3NakagamiPropagationLossModel_methods(root_module, root_module['ns3::NakagamiPropagationLossModel'])
    register_Ns3NetDevice_methods(root_module, root_module['ns3::NetDevice'])
    register_Ns3NixVector_methods(root_module, root_module['ns3::NixVector'])
    register_Ns3Node_methods(root_module, root_module['ns3::Node'])
    register_Ns3NormalRandomVariable_methods(root_module, root_module['ns3::NormalRandomVariable'])
    register_Ns3ObjectFactoryChecker_methods(root_module, root_module['ns3::ObjectFactoryChecker'])
    register_Ns3ObjectFactoryValue_methods(root_module, root_module['ns3::ObjectFactoryValue'])
    register_Ns3OutputStreamWrapper_methods(root_module, root_module['ns3::OutputStreamWrapper'])
    register_Ns3Packet_methods(root_module, root_module['ns3::Packet'])
    register_Ns3ParetoRandomVariable_methods(root_module, root_module['ns3::ParetoRandomVariable'])
    register_Ns3PhyRxStatsCalculator_methods(root_module, root_module['ns3::PhyRxStatsCalculator'])
    register_Ns3PhyStatsCalculator_methods(root_module, root_module['ns3::PhyStatsCalculator'])
    register_Ns3PhyTxStatsCalculator_methods(root_module, root_module['ns3::PhyTxStatsCalculator'])
    register_Ns3PointToPointNetDevice_methods(root_module, root_module['ns3::PointToPointNetDevice'])
    register_Ns3PointerChecker_methods(root_module, root_module['ns3::PointerChecker'])
    register_Ns3PointerValue_methods(root_module, root_module['ns3::PointerValue'])
    register_Ns3RachPreambleLteControlMessage_methods(root_module, root_module['ns3::RachPreambleLteControlMessage'])
    register_Ns3RadioBearerStatsCalculator_methods(root_module, root_module['ns3::RadioBearerStatsCalculator'])
    register_Ns3RarLteControlMessage_methods(root_module, root_module['ns3::RarLteControlMessage'])
    register_Ns3RarLteControlMessageRar_methods(root_module, root_module['ns3::RarLteControlMessage::Rar'])
    register_Ns3RectangleChecker_methods(root_module, root_module['ns3::RectangleChecker'])
    register_Ns3RectangleValue_methods(root_module, root_module['ns3::RectangleValue'])
    register_Ns3RrcStatsCalculator_methods(root_module, root_module['ns3::RrcStatsCalculator'])
    register_Ns3Sib1LteControlMessage_methods(root_module, root_module['ns3::Sib1LteControlMessage'])
    register_Ns3SimpleDeviceEnergyModel_methods(root_module, root_module['ns3::SimpleDeviceEnergyModel'])
    register_Ns3SlDciLteControlMessage_methods(root_module, root_module['ns3::SlDciLteControlMessage'])
    register_Ns3SpectrumChannel_methods(root_module, root_module['ns3::SpectrumChannel'])
    register_Ns3StringChecker_methods(root_module, root_module['ns3::StringChecker'])
    register_Ns3StringValue_methods(root_module, root_module['ns3::StringValue'])
    register_Ns3TimeValue_methods(root_module, root_module['ns3::TimeValue'])
    register_Ns3TypeIdChecker_methods(root_module, root_module['ns3::TypeIdChecker'])
    register_Ns3TypeIdValue_methods(root_module, root_module['ns3::TypeIdValue'])
    register_Ns3UintegerValue_methods(root_module, root_module['ns3::UintegerValue'])
    register_Ns3UlDciLteControlMessage_methods(root_module, root_module['ns3::UlDciLteControlMessage'])
    register_Ns3Vector2DChecker_methods(root_module, root_module['ns3::Vector2DChecker'])
    register_Ns3Vector2DValue_methods(root_module, root_module['ns3::Vector2DValue'])
    register_Ns3Vector3DChecker_methods(root_module, root_module['ns3::Vector3DChecker'])
    register_Ns3Vector3DValue_methods(root_module, root_module['ns3::Vector3DValue'])
    register_Ns3AddressChecker_methods(root_module, root_module['ns3::AddressChecker'])
    register_Ns3AddressValue_methods(root_module, root_module['ns3::AddressValue'])
    register_Ns3BsrLteControlMessage_methods(root_module, root_module['ns3::BsrLteControlMessage'])
    register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Bool_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Const_char___star___Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Const_ns3Time___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Const_ns3PscMcpttEntityId___amp___Const_ns3PscMcpttEntityId___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Double_Double_Ns3Vector3D_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3DlSchedulingCallbackInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::DlSchedulingCallbackInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3LteUeRrcSlChangeOfSyncRefStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::LteUeRrc::SlChangeOfSyncRefStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3PhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3PhyTransmissionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Application__gt___Unsigned_short_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3TypeId___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PacketBurst__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PscUavMobilityEnergyModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3LteSpectrumPhy__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::LteSpectrumPhy>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3LteUeRrc__gt___StdList__lt__ns3LteRrcSapSCellToAddMod__stdAllocator__lt__ns3LteRrcSapSCellToAddMod__gt____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::LteUeRrc>, std::list<ns3::LteRrcSap::SCellToAddMod, std::allocator<ns3::LteRrcSap::SCellToAddMod>>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3Address___amp___Const_ns3SipSipHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3SipSipHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3SipSipHeader___amp___Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3PscMcpttCall__gt___Ns3Ptr__lt__ns3PscMcpttCall__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3SlPhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::SlPhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Time_Unsigned_int_Unsigned_long_Unsigned_short_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Time, unsigned int, unsigned long, unsigned short, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Time_Unsigned_int_Unsigned_short_StdBasic_string__lt__char__gt___Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Time, unsigned int, unsigned short, std::basic_string<char>, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3PscUavMobilityEnergyModelState_Ns3PscUavMobilityEnergyModelState_Ns3Vector3D_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_StdBasic_string__lt__char__gt___Ns3SeqTsSizeHeader_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, std::basic_string<char>, ns3::SeqTsSizeHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_StdBasic_string__lt__char__gt___Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, std::basic_string<char>, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_int_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Ptr__lt__ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned int, unsigned int, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned int, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_int_Unsigned_short_Unsigned_char_Unsigned_short_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned int, unsigned int, unsigned short, unsigned char, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_short_Const_stdBasic_string__lt__char__gt_____amp___Const_char___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_short_Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_long_Unsigned_short_Bool_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned long, unsigned short, bool, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteRrcSapMeasurementReport_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::LteRrcSap::MeasurementReport, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteSlDiscHeader_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::LteSlDiscHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteUeRrcState_Ns3LteUeRrcState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::LteUeRrc::State, ns3::LteUeRrc::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3UeManagerState_Ns3UeManagerState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::UeManager::State, ns3::UeManager::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_StdBasic_string__lt__char__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_StdBasic_string__lt__char__gt___Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Const_stdVector__lt__int__stdAllocator__lt__int__gt____gt_____amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, const std::vector<int, std::allocator<int>> &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Ns3Ptr__lt__ns3SpectrumValue__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned char, unsigned int, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_int_Unsigned_int_Ns3SipSipElementDialogState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_int_Unsigned_int_Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_long_Unsigned_int_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned long, unsigned int, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Bool_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3LteUePhyState_Ns3LteUePhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3DlCqiLteControlMessage_methods(root_module, root_module['ns3::DlCqiLteControlMessage'])
    register_Ns3DlDciLteControlMessage_methods(root_module, root_module['ns3::DlDciLteControlMessage'])
    register_Ns3DlHarqFeedbackLteControlMessage_methods(root_module, root_module['ns3::DlHarqFeedbackLteControlMessage'])
    register_Ns3LteDataRadioBearerInfo_methods(root_module, root_module['ns3::LteDataRadioBearerInfo'])
    register_Ns3LteEnbPhy_methods(root_module, root_module['ns3::LteEnbPhy'])
    register_Ns3LteNetDevice_methods(root_module, root_module['ns3::LteNetDevice'])
    register_Ns3LteUeNetDevice_methods(root_module, root_module['ns3::LteUeNetDevice'])
    register_Ns3ConfigMatchContainer_methods(root_module, root_module['ns3::Config::MatchContainer'])
    register_Ns3HashImplementation_methods(root_module, root_module['ns3::Hash::Implementation'])
    register_Ns3HashFunctionFnv1a_methods(root_module, root_module['ns3::Hash::Function::Fnv1a'])
    register_Ns3HashFunctionHash32_methods(root_module, root_module['ns3::Hash::Function::Hash32'])
    register_Ns3HashFunctionHash64_methods(root_module, root_module['ns3::Hash::Function::Hash64'])
    register_Ns3HashFunctionMurmur3_methods(root_module, root_module['ns3::Hash::Function::Murmur3'])
    register_Ns3PscImsHelper_methods(root_module, root_module['ns3::psc::ImsHelper'])
    register_Ns3PscIntelHttpClient_methods(root_module, root_module['ns3::psc::IntelHttpClient'])
    register_Ns3PscIntelHttpClientHelper_methods(root_module, root_module['ns3::psc::IntelHttpClientHelper'])
    register_Ns3PscIntelHttpHeader_methods(root_module, root_module['ns3::psc::IntelHttpHeader'])
    register_Ns3PscIntelHttpServer_methods(root_module, root_module['ns3::psc::IntelHttpServer'])
    register_Ns3PscIntelHttpServerHelper_methods(root_module, root_module['ns3::psc::IntelHttpServerHelper'])
    register_Ns3PscMcpttCall_methods(root_module, root_module['ns3::psc::McpttCall'])
    register_Ns3PscMcpttCallHelper_methods(root_module, root_module['ns3::psc::McpttCallHelper'])
    register_Ns3PscMcpttCallMachine_methods(root_module, root_module['ns3::psc::McpttCallMachine'])
    register_Ns3PscMcpttCallMachineGrp_methods(root_module, root_module['ns3::psc::McpttCallMachineGrp'])
    register_Ns3PscMcpttCallMachineGrpBasic_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasic'])
    register_Ns3PscMcpttCallMachineGrpBasicState_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS1_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS1'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS2_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS2'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS3_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS3'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS4_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS4'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS5_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS5'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS6_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS6'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS7_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS7'])
    register_Ns3PscMcpttCallMachineGrpBroadcast_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcast'])
    register_Ns3PscMcpttCallMachineGrpBroadcastState_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcastState'])
    register_Ns3PscMcpttCallMachineGrpBroadcastStateB1_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcastStateB1'])
    register_Ns3PscMcpttCallMachineGrpBroadcastStateB2_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcastStateB2'])
    register_Ns3PscMcpttCallMachineGrpBroadcastStateB3_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcastStateB3'])
    register_Ns3PscMcpttCallMachineGrpBroadcastStateB4_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcastStateB4'])
    register_Ns3PscMcpttCallMachineNull_methods(root_module, root_module['ns3::psc::McpttCallMachineNull'])
    register_Ns3PscMcpttCallMachinePrivate_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivate'])
    register_Ns3PscMcpttCallMachinePrivateState_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateState'])
    register_Ns3PscMcpttCallMachinePrivateStateP0_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP0'])
    register_Ns3PscMcpttCallMachinePrivateStateP1_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP1'])
    register_Ns3PscMcpttCallMachinePrivateStateP2_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP2'])
    register_Ns3PscMcpttCallMachinePrivateStateP3_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP3'])
    register_Ns3PscMcpttCallMachinePrivateStateP4_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP4'])
    register_Ns3PscMcpttCallMachinePrivateStateP5_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP5'])
    register_Ns3PscMcpttCallMsgField_methods(root_module, root_module['ns3::psc::McpttCallMsgField'])
    register_Ns3PscMcpttCallMsgFieldCallId_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldCallId'])
    register_Ns3PscMcpttCallMsgFieldCallType_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldCallType'])
    register_Ns3PscMcpttCallMsgFieldCommMode_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldCommMode'])
    register_Ns3PscMcpttCallMsgFieldConfirmMode_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldConfirmMode'])
    register_Ns3PscMcpttCallMsgFieldLastChgTime_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldLastChgTime'])
    register_Ns3PscMcpttCallMsgFieldMsgType_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldMsgType'])
    register_Ns3PscMcpttCallMsgFieldProbeResp_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldProbeResp'])
    register_Ns3PscMcpttCallMsgFieldReason_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldReason'])
    register_Ns3PscMcpttCallMsgFieldRefreshInterval_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldRefreshInterval'])
    register_Ns3PscMcpttCallMsgFieldStartTime_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldStartTime'])
    register_Ns3PscMcpttCallMsgFieldType6_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldType6'])
    register_Ns3PscMcpttCallMsgFieldUserId_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldUserId'])
    register_Ns3PscMcpttCallMsgFieldUserLoc_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldUserLoc'])
    register_Ns3PscMcpttCallTypeMachine_methods(root_module, root_module['ns3::psc::McpttCallTypeMachine'])
    register_Ns3PscMcpttCallTypeMachineGrpBasic_methods(root_module, root_module['ns3::psc::McpttCallTypeMachineGrpBasic'])
    register_Ns3PscMcpttCallTypeMachinePrivate_methods(root_module, root_module['ns3::psc::McpttCallTypeMachinePrivate'])
    register_Ns3PscMcpttCallTypeMachinePrivateState_methods(root_module, root_module['ns3::psc::McpttCallTypeMachinePrivateState'])
    register_Ns3PscMcpttCallTypeMachinePrivateStateQ0_methods(root_module, root_module['ns3::psc::McpttCallTypeMachinePrivateStateQ0'])
    register_Ns3PscMcpttCallTypeMachinePrivateStateQ1_methods(root_module, root_module['ns3::psc::McpttCallTypeMachinePrivateStateQ1'])
    register_Ns3PscMcpttCallTypeMachinePrivateStateQ2_methods(root_module, root_module['ns3::psc::McpttCallTypeMachinePrivateStateQ2'])
    register_Ns3PscMcpttChannel_methods(root_module, root_module['ns3::psc::McpttChannel'])
    register_Ns3PscMcpttCounter_methods(root_module, root_module['ns3::psc::McpttCounter'])
    register_Ns3PscMcpttEmergAlertMachine_methods(root_module, root_module['ns3::psc::McpttEmergAlertMachine'])
    register_Ns3PscMcpttEmergAlertMachineBasic_methods(root_module, root_module['ns3::psc::McpttEmergAlertMachineBasic'])
    register_Ns3PscMcpttEmergAlertMachineBasicEmergUser_methods(root_module, root_module['ns3::psc::McpttEmergAlertMachineBasic::EmergUser'])
    register_Ns3PscMcpttEmergAlertMachineNull_methods(root_module, root_module['ns3::psc::McpttEmergAlertMachineNull'])
    register_Ns3PscMcpttEntityId_methods(root_module, root_module['ns3::psc::McpttEntityId'])
    register_Ns3PscMcpttFloorMsgField_methods(root_module, root_module['ns3::psc::McpttFloorMsgField'])
    register_Ns3PscMcpttFloorMsgFieldDuration_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldDuration'])
    register_Ns3PscMcpttFloorMsgFieldGrantedPartyId_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldGrantedPartyId'])
    register_Ns3PscMcpttFloorMsgFieldIndic_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldIndic'])
    register_Ns3PscMcpttFloorMsgFieldPermToReq_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldPermToReq'])
    register_Ns3PscMcpttFloorMsgFieldPriority_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldPriority'])
    register_Ns3PscMcpttFloorMsgFieldQueuePositionInfo_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldQueuePositionInfo'])
    register_Ns3PscMcpttFloorMsgFieldQueueSize_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldQueueSize'])
    register_Ns3PscMcpttFloorMsgFieldRejectCause_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldRejectCause'])
    register_Ns3PscMcpttFloorMsgFieldSeqNum_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldSeqNum'])
    register_Ns3PscMcpttFloorMsgFieldSource_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldSource'])
    register_Ns3PscMcpttFloorMsgFieldSsrc_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldSsrc'])
    register_Ns3PscMcpttFloorMsgFieldTrackInfo_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldTrackInfo'])
    register_Ns3PscMcpttFloorMsgFieldType_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldType'])
    register_Ns3PscMcpttFloorMsgFieldUserId_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldUserId'])
    register_Ns3PscMcpttFloorMsgSink_methods(root_module, root_module['ns3::psc::McpttFloorMsgSink'])
    register_Ns3PscMcpttFloorParticipant_methods(root_module, root_module['ns3::psc::McpttFloorParticipant'])
    register_Ns3PscMcpttFloorParticipantNull_methods(root_module, root_module['ns3::psc::McpttFloorParticipantNull'])
    register_Ns3PscMcpttFloorQueue_methods(root_module, root_module['ns3::psc::McpttFloorQueue'])
    register_Ns3PscMcpttHelper_methods(root_module, root_module['ns3::psc::McpttHelper'])
    register_Ns3PscMcpttMediaSink_methods(root_module, root_module['ns3::psc::McpttMediaSink'])
    register_Ns3PscMcpttMediaSrc_methods(root_module, root_module['ns3::psc::McpttMediaSrc'])
    register_Ns3PscMcpttMsg_methods(root_module, root_module['ns3::psc::McpttMsg'])
    register_Ns3PscMcpttMsgStats_methods(root_module, root_module['ns3::psc::McpttMsgStats'])
    register_Ns3PscMcpttOffNetworkFloorParticipant_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipant'])
    register_Ns3PscMcpttOffNetworkFloorParticipantState_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStateHasPerm_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStateNoPerm_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStatePendGrant_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStatePendReq_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStatePendReq'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStateQueued_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStateQueued'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStateSilence_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStateSilence'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStateStartStop_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStateStartStop'])
    register_Ns3PscMcpttOnNetworkCallMachineClient_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClient'])
    register_Ns3PscMcpttOnNetworkCallMachineClientState_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClientState'])
    register_Ns3PscMcpttOnNetworkCallMachineClientStateS1_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClientStateS1'])
    register_Ns3PscMcpttOnNetworkCallMachineClientStateS2_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClientStateS2'])
    register_Ns3PscMcpttOnNetworkCallMachineClientStateS3_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClientStateS3'])
    register_Ns3PscMcpttOnNetworkCallMachineClientStateS4_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClientStateS4'])
    register_Ns3PscMcpttOnNetworkFloorArbitrator_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitrator'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorState_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateIdle_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateIdle'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateInitialising_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateReleasing_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateRevoke_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateStartStop_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateTaken_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateTaken'])
    register_Ns3PscMcpttOnNetworkFloorDualControl_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorDualControl'])
    register_Ns3PscMcpttOnNetworkFloorDualControlState_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorDualControlState'])
    register_Ns3PscMcpttOnNetworkFloorDualControlStateReleasing_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorDualControlStateReleasing'])
    register_Ns3PscMcpttOnNetworkFloorDualControlStateStartStop_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorDualControlStateStartStop'])
    register_Ns3PscMcpttOnNetworkFloorDualControlStateTaken_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorDualControlStateTaken'])
    register_Ns3PscMcpttOnNetworkFloorParticipant_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipant'])
    register_Ns3PscMcpttOnNetworkFloorParticipantState_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStateHasNoPermission_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStateHasPermission_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStatePendingRelease_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStatePendingRequest_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStateQueued_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStateQueued'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStateReleasing_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStateReleasing'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStateStartStop_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStateStartStop'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipant_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipant'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantState_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStatePendingRevoke_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStatePermitted_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateReleasing_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateStartStop_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop'])
    register_Ns3PscMcpttPttApp_methods(root_module, root_module['ns3::psc::McpttPttApp'])
    register_Ns3PscMcpttPusher_methods(root_module, root_module['ns3::psc::McpttPusher'])
    register_Ns3PscMcpttPusherOrchestratorInterface_methods(root_module, root_module['ns3::psc::McpttPusherOrchestratorInterface'])
    register_Ns3PscMcpttPusherOrchestratorSessionCdf_methods(root_module, root_module['ns3::psc::McpttPusherOrchestratorSessionCdf'])
    register_Ns3PscMcpttPusherOrchestratorSpurtCdf_methods(root_module, root_module['ns3::psc::McpttPusherOrchestratorSpurtCdf'])
    register_Ns3PscMcpttQueuedUserInfo_methods(root_module, root_module['ns3::psc::McpttQueuedUserInfo'])
    register_Ns3PscMcpttRtpHeader_methods(root_module, root_module['ns3::psc::McpttRtpHeader'])
    register_Ns3PscMcpttSdpFmtpHeader_methods(root_module, root_module['ns3::psc::McpttSdpFmtpHeader'])
    register_Ns3PscMcpttServerApp_methods(root_module, root_module['ns3::psc::McpttServerApp'])
    register_Ns3PscMcpttServerCall_methods(root_module, root_module['ns3::psc::McpttServerCall'])
    register_Ns3PscMcpttServerCallMachine_methods(root_module, root_module['ns3::psc::McpttServerCallMachine'])
    register_Ns3PscMcpttServerCallMachineGroupPrearrangedState_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS1_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1'])
    register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS2_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2'])
    register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS3_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3'])
    register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS4_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4'])
    register_Ns3PscMcpttServerCallMachineGrp_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGrp'])
    register_Ns3PscMcpttServerCallMachineNull_methods(root_module, root_module['ns3::psc::McpttServerCallMachineNull'])
    register_Ns3PscMcpttServerHelper_methods(root_module, root_module['ns3::psc::McpttServerHelper'])
    register_Ns3PscMcpttStateMachineStats_methods(root_module, root_module['ns3::psc::McpttStateMachineStats'])
    register_Ns3PscMcpttTimer_methods(root_module, root_module['ns3::psc::McpttTimer'])
    register_Ns3PscMcpttTraceHelper_methods(root_module, root_module['ns3::psc::McpttTraceHelper'])
    register_Ns3PscPscApplication_methods(root_module, root_module['ns3::psc::PscApplication'])
    register_Ns3PscPscApplicationClient_methods(root_module, root_module['ns3::psc::PscApplicationClient'])
    register_Ns3PscPscApplicationConfiguration_methods(root_module, root_module['ns3::psc::PscApplicationConfiguration'])
    register_Ns3PscPscApplicationHelper_methods(root_module, root_module['ns3::psc::PscApplicationHelper'])
    register_Ns3PscPscApplicationServer_methods(root_module, root_module['ns3::psc::PscApplicationServer'])
    register_Ns3PscPscScenarioDefinition_methods(root_module, root_module['ns3::psc::PscScenarioDefinition'])
    register_Ns3PscPscScenarioDefinitionApplicationInfo_methods(root_module, root_module['ns3::psc::PscScenarioDefinition::ApplicationInfo'])
    register_Ns3PscPscScenarioDefinitionAreaInfo_methods(root_module, root_module['ns3::psc::PscScenarioDefinition::AreaInfo'])
    register_Ns3PscPscScenarioDefinitionKeyEventInfo_methods(root_module, root_module['ns3::psc::PscScenarioDefinition::KeyEventInfo'])
    register_Ns3PscPscScenarioDefinitionNodeGroupInfo_methods(root_module, root_module['ns3::psc::PscScenarioDefinition::NodeGroupInfo'])
    register_Ns3PscPscScenarioDefinitionStructureInfo_methods(root_module, root_module['ns3::psc::PscScenarioDefinition::StructureInfo'])
    register_Ns3PscPscScenarioTraceHelper_methods(root_module, root_module['ns3::psc::PscScenarioTraceHelper'])
    register_Ns3PscPscSequenceNumber_methods(root_module, root_module['ns3::psc::PscSequenceNumber'])
    register_Ns3PscPscVideoStreaming_methods(root_module, root_module['ns3::psc::PscVideoStreaming'])
    register_Ns3PscPscVideoStreamingDistributions_methods(root_module, root_module['ns3::psc::PscVideoStreamingDistributions'])
    register_Ns3PscUavMobilityEnergyModel_methods(root_module, root_module['ns3::psc::UavMobilityEnergyModel'])
    register_Ns3PscUavMobilityEnergyModelHelper_methods(root_module, root_module['ns3::psc::UavMobilityEnergyModelHelper'])
    register_Ns3PscUdpGroupEchoClient_methods(root_module, root_module['ns3::psc::UdpGroupEchoClient'])
    register_Ns3PscUdpGroupEchoServer_methods(root_module, root_module['ns3::psc::UdpGroupEchoServer'])
    register_Ns3PscUdpGroupEchoServerHelper_methods(root_module, root_module['ns3::psc::UdpGroupEchoServerHelper'])
    register_Ns3PscMcpttCallMsg_methods(root_module, root_module['ns3::psc::McpttCallMsg'])
    register_Ns3PscMcpttCallMsgFieldGrpId_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldGrpId'])
    register_Ns3PscMcpttCallMsgFieldOrgName_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldOrgName'])
    register_Ns3PscMcpttCallMsgFieldSdp_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldSdp'])
    register_Ns3PscMcpttCallMsgGrpAccept_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpAccept'])
    register_Ns3PscMcpttCallMsgGrpAnnoun_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpAnnoun'])
    register_Ns3PscMcpttCallMsgGrpBroadcast_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpBroadcast'])
    register_Ns3PscMcpttCallMsgGrpBroadcastEnd_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpBroadcastEnd'])
    register_Ns3PscMcpttCallMsgGrpEmergAlert_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpEmergAlert'])
    register_Ns3PscMcpttCallMsgGrpEmergAlertAck_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpEmergAlertAck'])
    register_Ns3PscMcpttCallMsgGrpEmergAlertCancel_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpEmergAlertCancel'])
    register_Ns3PscMcpttCallMsgGrpEmergAlertCancelAck_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpEmergAlertCancelAck'])
    register_Ns3PscMcpttCallMsgGrpEmergEnd_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpEmergEnd'])
    register_Ns3PscMcpttCallMsgGrpImmPerilEnd_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpImmPerilEnd'])
    register_Ns3PscMcpttCallMsgGrpProbe_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpProbe'])
    register_Ns3PscMcpttCallMsgPrivateAccept_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateAccept'])
    register_Ns3PscMcpttCallMsgPrivateAcceptAck_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateAcceptAck'])
    register_Ns3PscMcpttCallMsgPrivateEmergCancel_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateEmergCancel'])
    register_Ns3PscMcpttCallMsgPrivateEmergCancelAck_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateEmergCancelAck'])
    register_Ns3PscMcpttCallMsgPrivateReject_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateReject'])
    register_Ns3PscMcpttCallMsgPrivateRelease_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateRelease'])
    register_Ns3PscMcpttCallMsgPrivateReleaseAck_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateReleaseAck'])
    register_Ns3PscMcpttCallMsgPrivateRinging_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateRinging'])
    register_Ns3PscMcpttCallMsgPrivateSetupReq_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateSetupReq'])
    register_Ns3PscMcpttFloorMsg_methods(root_module, root_module['ns3::psc::McpttFloorMsg'])
    register_Ns3PscMcpttFloorMsgAck_methods(root_module, root_module['ns3::psc::McpttFloorMsgAck'])
    register_Ns3PscMcpttFloorMsgDeny_methods(root_module, root_module['ns3::psc::McpttFloorMsgDeny'])
    register_Ns3PscMcpttFloorMsgFieldQueuedUserId_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldQueuedUserId'])
    register_Ns3PscMcpttFloorMsgGranted_methods(root_module, root_module['ns3::psc::McpttFloorMsgGranted'])
    register_Ns3PscMcpttFloorMsgIdle_methods(root_module, root_module['ns3::psc::McpttFloorMsgIdle'])
    register_Ns3PscMcpttFloorMsgQueuePositionInfo_methods(root_module, root_module['ns3::psc::McpttFloorMsgQueuePositionInfo'])
    register_Ns3PscMcpttFloorMsgQueuePositionRequest_methods(root_module, root_module['ns3::psc::McpttFloorMsgQueuePositionRequest'])
    register_Ns3PscMcpttFloorMsgRelease_methods(root_module, root_module['ns3::psc::McpttFloorMsgRelease'])
    register_Ns3PscMcpttFloorMsgRequest_methods(root_module, root_module['ns3::psc::McpttFloorMsgRequest'])
    register_Ns3PscMcpttFloorMsgRevoke_methods(root_module, root_module['ns3::psc::McpttFloorMsgRevoke'])
    register_Ns3PscMcpttFloorMsgTaken_methods(root_module, root_module['ns3::psc::McpttFloorMsgTaken'])
    register_Ns3PscMcpttMediaMsg_methods(root_module, root_module['ns3::psc::McpttMediaMsg'])
    register_Ns3PscMcpttPusherOrchestrator_methods(root_module, root_module['ns3::psc::McpttPusherOrchestrator'])
    register_Ns3PscMcpttPusherOrchestratorContention_methods(root_module, root_module['ns3::psc::McpttPusherOrchestratorContention'])
    register_Ns3PscMcpttServerCallMachineGroupPrearranged_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearranged'])
    register_Ns3SipSipElement_methods(root_module, root_module['ns3::sip::SipElement'])
    register_Ns3SipSipHeader_methods(root_module, root_module['ns3::sip::SipHeader'])
    register_Ns3SipSipProxy_methods(root_module, root_module['ns3::sip::SipProxy'])
    register_Ns3SipSipAgent_methods(root_module, root_module['ns3::sip::SipAgent'])
    return

def register_Ns3Address_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    cls.add_output_stream_operator()
    ## address.h (module 'network'): ns3::Address::Address() [constructor]
    cls.add_constructor([])
    ## address.h (module 'network'): ns3::Address::Address(uint8_t type, uint8_t const * buffer, uint8_t len) [constructor]
    cls.add_constructor([param('uint8_t', 'type'), param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
    ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [constructor]
    cls.add_constructor([param('ns3::Address const &', 'address')])
    ## address.h (module 'network'): bool ns3::Address::CheckCompatible(uint8_t type, uint8_t len) const [member function]
    cls.add_method('CheckCompatible', 
                   'bool', 
                   [param('uint8_t', 'type'), param('uint8_t', 'len')], 
                   is_const=True)
    ## address.h (module 'network'): uint32_t ns3::Address::CopyAllFrom(uint8_t const * buffer, uint8_t len) [member function]
    cls.add_method('CopyAllFrom', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
    ## address.h (module 'network'): uint32_t ns3::Address::CopyAllTo(uint8_t * buffer, uint8_t len) const [member function]
    cls.add_method('CopyAllTo', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint8_t', 'len')], 
                   is_const=True)
    ## address.h (module 'network'): uint32_t ns3::Address::CopyFrom(uint8_t const * buffer, uint8_t len) [member function]
    cls.add_method('CopyFrom', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
    ## address.h (module 'network'): uint32_t ns3::Address::CopyTo(uint8_t * buffer) const [member function]
    cls.add_method('CopyTo', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer')], 
                   is_const=True)
    ## address.h (module 'network'): void ns3::Address::Deserialize(ns3::TagBuffer buffer) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'buffer')])
    ## address.h (module 'network'): uint8_t ns3::Address::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): uint32_t ns3::Address::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): bool ns3::Address::IsInvalid() const [member function]
    cls.add_method('IsInvalid', 
                   'bool', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): bool ns3::Address::IsMatchingType(uint8_t type) const [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('uint8_t', 'type')], 
                   is_const=True)
    ## address.h (module 'network'): static uint8_t ns3::Address::Register() [member function]
    cls.add_method('Register', 
                   'uint8_t', 
                   [], 
                   is_static=True)
    ## address.h (module 'network'): void ns3::Address::Serialize(ns3::TagBuffer buffer) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'buffer')], 
                   is_const=True)
    return

def register_Ns3AllocationRetentionPriority_methods(root_module, cls):
    ## eps-bearer.h (module 'lte'): ns3::AllocationRetentionPriority::AllocationRetentionPriority(ns3::AllocationRetentionPriority const & arg0) [constructor]
    cls.add_constructor([param('ns3::AllocationRetentionPriority const &', 'arg0')])
    ## eps-bearer.h (module 'lte'): ns3::AllocationRetentionPriority::AllocationRetentionPriority() [constructor]
    cls.add_constructor([])
    ## eps-bearer.h (module 'lte'): ns3::AllocationRetentionPriority::preemptionCapability [variable]
    cls.add_instance_attribute('preemptionCapability', 'bool', is_const=False)
    ## eps-bearer.h (module 'lte'): ns3::AllocationRetentionPriority::preemptionVulnerability [variable]
    cls.add_instance_attribute('preemptionVulnerability', 'bool', is_const=False)
    ## eps-bearer.h (module 'lte'): ns3::AllocationRetentionPriority::priorityLevel [variable]
    cls.add_instance_attribute('priorityLevel', 'uint8_t', is_const=False)
    return

def register_Ns3Angles_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## angles.h (module 'antenna'): ns3::Angles::Angles(ns3::Angles const & arg0) [constructor]
    cls.add_constructor([param('ns3::Angles const &', 'arg0')])
    ## angles.h (module 'antenna'): ns3::Angles::Angles(double azimuth, double inclination) [constructor]
    cls.add_constructor([param('double', 'azimuth'), param('double', 'inclination')])
    ## angles.h (module 'antenna'): ns3::Angles::Angles(ns3::Vector v) [constructor]
    cls.add_constructor([param('ns3::Vector', 'v')])
    ## angles.h (module 'antenna'): ns3::Angles::Angles(ns3::Vector v, ns3::Vector o) [constructor]
    cls.add_constructor([param('ns3::Vector', 'v'), param('ns3::Vector', 'o')])
    ## angles.h (module 'antenna'): double ns3::Angles::GetAzimuth() const [member function]
    cls.add_method('GetAzimuth', 
                   'double', 
                   [], 
                   is_const=True)
    ## angles.h (module 'antenna'): double ns3::Angles::GetInclination() const [member function]
    cls.add_method('GetInclination', 
                   'double', 
                   [], 
                   is_const=True)
    ## angles.h (module 'antenna'): void ns3::Angles::SetAzimuth(double azimuth) [member function]
    cls.add_method('SetAzimuth', 
                   'void', 
                   [param('double', 'azimuth')])
    ## angles.h (module 'antenna'): void ns3::Angles::SetInclination(double inclination) [member function]
    cls.add_method('SetInclination', 
                   'void', 
                   [param('double', 'inclination')])
    ## angles.h (module 'antenna'): ns3::Angles::m_printDeg [variable]
    cls.add_static_attribute('m_printDeg', 'bool', is_const=False)
    return

def register_Ns3ApplicationContainer_methods(root_module, cls):
    ## application-container.h (module 'network'): ns3::ApplicationContainer::ApplicationContainer(ns3::ApplicationContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::ApplicationContainer const &', 'arg0')])
    ## application-container.h (module 'network'): ns3::ApplicationContainer::ApplicationContainer() [constructor]
    cls.add_constructor([])
    ## application-container.h (module 'network'): ns3::ApplicationContainer::ApplicationContainer(ns3::Ptr<ns3::Application> application) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Application >', 'application')])
    ## application-container.h (module 'network'): ns3::ApplicationContainer::ApplicationContainer(std::string name) [constructor]
    cls.add_constructor([param('std::string', 'name')])
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::Add(ns3::ApplicationContainer other) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::ApplicationContainer', 'other')])
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::Add(ns3::Ptr<ns3::Application> application) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::Application >', 'application')])
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::Add(std::string name) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'name')])
    ## application-container.h (module 'network'): ns3::ApplicationContainer::Iterator ns3::ApplicationContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::ApplicationContainer::Iterator', 
                   [], 
                   is_const=True)
    ## application-container.h (module 'network'): ns3::ApplicationContainer::Iterator ns3::ApplicationContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::ApplicationContainer::Iterator', 
                   [], 
                   is_const=True)
    ## application-container.h (module 'network'): ns3::Ptr<ns3::Application> ns3::ApplicationContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::Application >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## application-container.h (module 'network'): uint32_t ns3::ApplicationContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::Start(ns3::Time start) [member function]
    cls.add_method('Start', 
                   'void', 
                   [param('ns3::Time', 'start')])
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::StartWithJitter(ns3::Time start, ns3::Ptr<ns3::RandomVariableStream> rv) [member function]
    cls.add_method('StartWithJitter', 
                   'void', 
                   [param('ns3::Time', 'start'), param('ns3::Ptr< ns3::RandomVariableStream >', 'rv')])
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::Stop(ns3::Time stop) [member function]
    cls.add_method('Stop', 
                   'void', 
                   [param('ns3::Time', 'stop')])
    return

def register_Ns3AttributeConstructionList_methods(root_module, cls):
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [constructor]
    cls.add_constructor([param('ns3::AttributeConstructionList const &', 'arg0')])
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList() [constructor]
    cls.add_constructor([])
    ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::Ptr< ns3::AttributeValue >', 'value')])
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::AttributeConstructionList::CIterator', 
                   [], 
                   is_const=True)
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::End() const [member function]
    cls.add_method('End', 
                   'ns3::AttributeConstructionList::CIterator', 
                   [], 
                   is_const=True)
    ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('Find', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True)
    return

def register_Ns3AttributeConstructionListItem_methods(root_module, cls):
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item() [constructor]
    cls.add_constructor([])
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [constructor]
    cls.add_constructor([param('ns3::AttributeConstructionList::Item const &', 'arg0')])
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::checker [variable]
    cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::value [variable]
    cls.add_instance_attribute('value', 'ns3::Ptr< ns3::AttributeValue >', is_const=False)
    return

def register_Ns3BandInfo_methods(root_module, cls):
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo::BandInfo() [constructor]
    cls.add_constructor([])
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo::BandInfo(ns3::BandInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::BandInfo const &', 'arg0')])
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo::fc [variable]
    cls.add_instance_attribute('fc', 'double', is_const=False)
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo::fh [variable]
    cls.add_instance_attribute('fh', 'double', is_const=False)
    ## spectrum-model.h (module 'spectrum'): ns3::BandInfo::fl [variable]
    cls.add_instance_attribute('fl', 'double', is_const=False)
    return

def register_Ns3Box_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## box.h (module 'mobility'): ns3::Box::Box(ns3::Box const & arg0) [constructor]
    cls.add_constructor([param('ns3::Box const &', 'arg0')])
    ## box.h (module 'mobility'): ns3::Box::Box(double _xMin, double _xMax, double _yMin, double _yMax, double _zMin, double _zMax) [constructor]
    cls.add_constructor([param('double', '_xMin'), param('double', '_xMax'), param('double', '_yMin'), param('double', '_yMax'), param('double', '_zMin'), param('double', '_zMax')])
    ## box.h (module 'mobility'): ns3::Box::Box() [constructor]
    cls.add_constructor([])
    ## box.h (module 'mobility'): ns3::Vector ns3::Box::CalculateIntersection(ns3::Vector const & current, ns3::Vector const & speed) const [member function]
    cls.add_method('CalculateIntersection', 
                   'ns3::Vector', 
                   [param('ns3::Vector const &', 'current'), param('ns3::Vector const &', 'speed')], 
                   is_const=True)
    ## box.h (module 'mobility'): ns3::Box::Side ns3::Box::GetClosestSide(ns3::Vector const & position) const [member function]
    cls.add_method('GetClosestSide', 
                   'ns3::Box::Side', 
                   [param('ns3::Vector const &', 'position')], 
                   is_const=True)
    ## box.h (module 'mobility'): bool ns3::Box::IsInside(ns3::Vector const & position) const [member function]
    cls.add_method('IsInside', 
                   'bool', 
                   [param('ns3::Vector const &', 'position')], 
                   is_const=True)
    ## box.h (module 'mobility'): bool ns3::Box::IsIntersect(ns3::Vector const & l1, ns3::Vector const & l2) const [member function]
    cls.add_method('IsIntersect', 
                   'bool', 
                   [param('ns3::Vector const &', 'l1'), param('ns3::Vector const &', 'l2')], 
                   is_const=True)
    ## box.h (module 'mobility'): ns3::Box::xMax [variable]
    cls.add_instance_attribute('xMax', 'double', is_const=False)
    ## box.h (module 'mobility'): ns3::Box::xMin [variable]
    cls.add_instance_attribute('xMin', 'double', is_const=False)
    ## box.h (module 'mobility'): ns3::Box::yMax [variable]
    cls.add_instance_attribute('yMax', 'double', is_const=False)
    ## box.h (module 'mobility'): ns3::Box::yMin [variable]
    cls.add_instance_attribute('yMin', 'double', is_const=False)
    ## box.h (module 'mobility'): ns3::Box::zMax [variable]
    cls.add_instance_attribute('zMax', 'double', is_const=False)
    ## box.h (module 'mobility'): ns3::Box::zMin [variable]
    cls.add_instance_attribute('zMin', 'double', is_const=False)
    return

def register_Ns3Buffer_methods(root_module, cls):
    ## buffer.h (module 'network'): ns3::Buffer::Buffer(ns3::Buffer const & o) [constructor]
    cls.add_constructor([param('ns3::Buffer const &', 'o')])
    ## buffer.h (module 'network'): ns3::Buffer::Buffer() [constructor]
    cls.add_constructor([])
    ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize) [constructor]
    cls.add_constructor([param('uint32_t', 'dataSize')])
    ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize, bool initialize) [constructor]
    cls.add_constructor([param('uint32_t', 'dataSize'), param('bool', 'initialize')])
    ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(uint32_t end) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(ns3::Buffer const & o) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('ns3::Buffer const &', 'o')])
    ## buffer.h (module 'network'): void ns3::Buffer::AddAtStart(uint32_t start) [member function]
    cls.add_method('AddAtStart', 
                   'void', 
                   [param('uint32_t', 'start')])
    ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::Buffer::Iterator', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): void ns3::Buffer::CopyData(std::ostream * os, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'void', 
                   [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::CopyData(uint8_t * buffer, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
                   is_const=True)
    ## buffer.h (module 'network'): ns3::Buffer ns3::Buffer::CreateFragment(uint32_t start, uint32_t length) const [member function]
    cls.add_method('CreateFragment', 
                   'ns3::Buffer', 
                   [param('uint32_t', 'start'), param('uint32_t', 'length')], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::End() const [member function]
    cls.add_method('End', 
                   'ns3::Buffer::Iterator', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): uint8_t const * ns3::Buffer::PeekData() const [member function]
    cls.add_method('PeekData', 
                   'uint8_t const *', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtEnd(uint32_t end) [member function]
    cls.add_method('RemoveAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtStart(uint32_t start) [member function]
    cls.add_method('RemoveAtStart', 
                   'void', 
                   [param('uint32_t', 'start')])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3BufferIterator_methods(root_module, cls):
    ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator(ns3::Buffer::Iterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::Buffer::Iterator const &', 'arg0')])
    ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator() [constructor]
    cls.add_constructor([])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size) [member function]
    cls.add_method('CalculateIpChecksum', 
                   'uint16_t', 
                   [param('uint16_t', 'size')])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size, uint32_t initialChecksum) [member function]
    cls.add_method('CalculateIpChecksum', 
                   'uint16_t', 
                   [param('uint16_t', 'size'), param('uint32_t', 'initialChecksum')])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetDistanceFrom(ns3::Buffer::Iterator const & o) const [member function]
    cls.add_method('GetDistanceFrom', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator const &', 'o')], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetRemainingSize() const [member function]
    cls.add_method('GetRemainingSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsEnd() const [member function]
    cls.add_method('IsEnd', 
                   'bool', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsStart() const [member function]
    cls.add_method('IsStart', 
                   'bool', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next() [member function]
    cls.add_method('Next', 
                   'void', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next(uint32_t delta) [member function]
    cls.add_method('Next', 
                   'void', 
                   [param('uint32_t', 'delta')])
    ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::PeekU8() [member function]
    cls.add_method('PeekU8', 
                   'uint8_t', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev() [member function]
    cls.add_method('Prev', 
                   'void', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev(uint32_t delta) [member function]
    cls.add_method('Prev', 
                   'void', 
                   [param('uint32_t', 'delta')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(uint8_t * buffer, uint32_t size) [member function]
    cls.add_method('Read', 
                   'void', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(ns3::Buffer::Iterator start, uint32_t size) [member function]
    cls.add_method('Read', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadLsbtohU16() [member function]
    cls.add_method('ReadLsbtohU16', 
                   'uint16_t', 
                   [])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadLsbtohU32() [member function]
    cls.add_method('ReadLsbtohU32', 
                   'uint32_t', 
                   [])
    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadLsbtohU64() [member function]
    cls.add_method('ReadLsbtohU64', 
                   'uint64_t', 
                   [])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadNtohU16() [member function]
    cls.add_method('ReadNtohU16', 
                   'uint16_t', 
                   [])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadNtohU32() [member function]
    cls.add_method('ReadNtohU32', 
                   'uint32_t', 
                   [])
    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadNtohU64() [member function]
    cls.add_method('ReadNtohU64', 
                   'uint64_t', 
                   [])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadU16() [member function]
    cls.add_method('ReadU16', 
                   'uint16_t', 
                   [])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadU32() [member function]
    cls.add_method('ReadU32', 
                   'uint32_t', 
                   [])
    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadU64() [member function]
    cls.add_method('ReadU64', 
                   'uint64_t', 
                   [])
    ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::ReadU8() [member function]
    cls.add_method('ReadU8', 
                   'uint8_t', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Write', 
                   'void', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
    cls.add_method('Write', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU16(uint16_t data) [member function]
    cls.add_method('WriteHtolsbU16', 
                   'void', 
                   [param('uint16_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU32(uint32_t data) [member function]
    cls.add_method('WriteHtolsbU32', 
                   'void', 
                   [param('uint32_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU64(uint64_t data) [member function]
    cls.add_method('WriteHtolsbU64', 
                   'void', 
                   [param('uint64_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU16(uint16_t data) [member function]
    cls.add_method('WriteHtonU16', 
                   'void', 
                   [param('uint16_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU32(uint32_t data) [member function]
    cls.add_method('WriteHtonU32', 
                   'void', 
                   [param('uint32_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU64(uint64_t data) [member function]
    cls.add_method('WriteHtonU64', 
                   'void', 
                   [param('uint64_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU16(uint16_t data) [member function]
    cls.add_method('WriteU16', 
                   'void', 
                   [param('uint16_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU32(uint32_t data) [member function]
    cls.add_method('WriteU32', 
                   'void', 
                   [param('uint32_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU64(uint64_t data) [member function]
    cls.add_method('WriteU64', 
                   'void', 
                   [param('uint64_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data) [member function]
    cls.add_method('WriteU8', 
                   'void', 
                   [param('uint8_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data, uint32_t len) [member function]
    cls.add_method('WriteU8', 
                   'void', 
                   [param('uint8_t', 'data'), param('uint32_t', 'len')])
    return

def register_Ns3BufferSizeLevelBsr_methods(root_module, cls):
    ## lte-common.h (module 'lte'): ns3::BufferSizeLevelBsr::BufferSizeLevelBsr() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::BufferSizeLevelBsr::BufferSizeLevelBsr(ns3::BufferSizeLevelBsr const & arg0) [constructor]
    cls.add_constructor([param('ns3::BufferSizeLevelBsr const &', 'arg0')])
    ## lte-common.h (module 'lte'): static uint32_t ns3::BufferSizeLevelBsr::BsrId2BufferSize(uint8_t val) [member function]
    cls.add_method('BsrId2BufferSize', 
                   'uint32_t', 
                   [param('uint8_t', 'val')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static uint8_t ns3::BufferSizeLevelBsr::BufferSize2BsrId(uint32_t val) [member function]
    cls.add_method('BufferSize2BsrId', 
                   'uint8_t', 
                   [param('uint32_t', 'val')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): ns3::BufferSizeLevelBsr::m_bufferSizeLevelBsr [variable]
    cls.add_static_attribute('m_bufferSizeLevelBsr', 'int [ 64 ]', is_const=False)
    return

def register_Ns3BuildBroadcastListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::BuildBroadcastListElement_s::BuildBroadcastListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::BuildBroadcastListElement_s::BuildBroadcastListElement_s(ns3::BuildBroadcastListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::BuildBroadcastListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::BuildBroadcastListElement_s::m_dci [variable]
    cls.add_instance_attribute('m_dci', 'ns3::DlDciListElement_s', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::BuildBroadcastListElement_s::m_index [variable]
    cls.add_instance_attribute('m_index', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::BuildBroadcastListElement_s::m_type [variable]
    cls.add_instance_attribute('m_type', 'ns3::BuildBroadcastListElement_s::Type_e', is_const=False)
    return

def register_Ns3BuildDataListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::BuildDataListElement_s::BuildDataListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::BuildDataListElement_s::BuildDataListElement_s(ns3::BuildDataListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::BuildDataListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::BuildDataListElement_s::m_ceBitmap [variable]
    cls.add_instance_attribute('m_ceBitmap', 'std::vector< ns3::CeBitmap_e >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::BuildDataListElement_s::m_dci [variable]
    cls.add_instance_attribute('m_dci', 'ns3::DlDciListElement_s', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::BuildDataListElement_s::m_rlcPduList [variable]
    cls.add_instance_attribute('m_rlcPduList', 'std::vector< std::vector< ns3::RlcPduListElement_s > >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::BuildDataListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3BuildRarListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::BuildRarListElement_s::BuildRarListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::BuildRarListElement_s::BuildRarListElement_s(ns3::BuildRarListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::BuildRarListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::BuildRarListElement_s::m_dci [variable]
    cls.add_instance_attribute('m_dci', 'ns3::DlDciListElement_s', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::BuildRarListElement_s::m_grant [variable]
    cls.add_instance_attribute('m_grant', 'ns3::UlGrant_s', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::BuildRarListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3BuildingContainer_methods(root_module, cls):
    ## building-container.h (module 'buildings'): ns3::BuildingContainer::BuildingContainer(ns3::BuildingContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::BuildingContainer const &', 'arg0')])
    ## building-container.h (module 'buildings'): ns3::BuildingContainer::BuildingContainer() [constructor]
    cls.add_constructor([])
    ## building-container.h (module 'buildings'): ns3::BuildingContainer::BuildingContainer(ns3::Ptr<ns3::Building> building) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Building >', 'building')])
    ## building-container.h (module 'buildings'): ns3::BuildingContainer::BuildingContainer(std::string buildingName) [constructor]
    cls.add_constructor([param('std::string', 'buildingName')])
    ## building-container.h (module 'buildings'): void ns3::BuildingContainer::Add(ns3::BuildingContainer other) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::BuildingContainer', 'other')])
    ## building-container.h (module 'buildings'): void ns3::BuildingContainer::Add(ns3::Ptr<ns3::Building> building) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::Building >', 'building')])
    ## building-container.h (module 'buildings'): void ns3::BuildingContainer::Add(std::string buildingName) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'buildingName')])
    ## building-container.h (module 'buildings'): ns3::BuildingContainer::Iterator ns3::BuildingContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::BuildingContainer::Iterator', 
                   [], 
                   is_const=True)
    ## building-container.h (module 'buildings'): void ns3::BuildingContainer::Create(uint32_t n) [member function]
    cls.add_method('Create', 
                   'void', 
                   [param('uint32_t', 'n')])
    ## building-container.h (module 'buildings'): ns3::BuildingContainer::Iterator ns3::BuildingContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::BuildingContainer::Iterator', 
                   [], 
                   is_const=True)
    ## building-container.h (module 'buildings'): ns3::Ptr<ns3::Building> ns3::BuildingContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::Building >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## building-container.h (module 'buildings'): static ns3::BuildingContainer ns3::BuildingContainer::GetGlobal() [member function]
    cls.add_method('GetGlobal', 
                   'ns3::BuildingContainer', 
                   [], 
                   is_static=True)
    ## building-container.h (module 'buildings'): uint32_t ns3::BuildingContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3BwPart_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::BwPart_s::BwPart_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::BwPart_s::BwPart_s(ns3::BwPart_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::BwPart_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::BwPart_s::m_bwPartIndex [variable]
    cls.add_instance_attribute('m_bwPartIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::BwPart_s::m_cqi [variable]
    cls.add_instance_attribute('m_cqi', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::BwPart_s::m_sb [variable]
    cls.add_instance_attribute('m_sb', 'uint8_t', is_const=False)
    return

def register_Ns3ByteTagIterator_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::ByteTagIterator::ByteTagIterator(ns3::ByteTagIterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::ByteTagIterator const &', 'arg0')])
    ## packet.h (module 'network'): bool ns3::ByteTagIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::ByteTagIterator::Item ns3::ByteTagIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::ByteTagIterator::Item', 
                   [])
    return

def register_Ns3ByteTagIteratorItem_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::ByteTagIterator::Item::Item(ns3::ByteTagIterator::Item const & arg0) [constructor]
    cls.add_constructor([param('ns3::ByteTagIterator::Item const &', 'arg0')])
    ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetEnd() const [member function]
    cls.add_method('GetEnd', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetStart() const [member function]
    cls.add_method('GetStart', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::ByteTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
    cls.add_method('GetTag', 
                   'void', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::TypeId ns3::ByteTagIterator::Item::GetTypeId() const [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    return

def register_Ns3ByteTagList_methods(root_module, cls):
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList() [constructor]
    cls.add_constructor([])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList(ns3::ByteTagList const & o) [constructor]
    cls.add_constructor([param('ns3::ByteTagList const &', 'o')])
    ## byte-tag-list.h (module 'network'): ns3::TagBuffer ns3::ByteTagList::Add(ns3::TypeId tid, uint32_t bufferSize, int32_t start, int32_t end) [member function]
    cls.add_method('Add', 
                   'ns3::TagBuffer', 
                   [param('ns3::TypeId', 'tid'), param('uint32_t', 'bufferSize'), param('int32_t', 'start'), param('int32_t', 'end')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Add(ns3::ByteTagList const & o) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::ByteTagList const &', 'o')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtEnd(int32_t appendOffset) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('int32_t', 'appendOffset')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtStart(int32_t prependOffset) [member function]
    cls.add_method('AddAtStart', 
                   'void', 
                   [param('int32_t', 'prependOffset')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Adjust(int32_t adjustment) [member function]
    cls.add_method('Adjust', 
                   'void', 
                   [param('int32_t', 'adjustment')])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator ns3::ByteTagList::Begin(int32_t offsetStart, int32_t offsetEnd) const [member function]
    cls.add_method('Begin', 
                   'ns3::ByteTagList::Iterator', 
                   [param('int32_t', 'offsetStart'), param('int32_t', 'offsetEnd')], 
                   is_const=True)
    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::RemoveAll() [member function]
    cls.add_method('RemoveAll', 
                   'void', 
                   [])
    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3ByteTagListIterator_methods(root_module, cls):
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Iterator(ns3::ByteTagList::Iterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::ByteTagList::Iterator const &', 'arg0')])
    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Iterator::GetOffsetStart() const [member function]
    cls.add_method('GetOffsetStart', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## byte-tag-list.h (module 'network'): bool ns3::ByteTagList::Iterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item ns3::ByteTagList::Iterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::ByteTagList::Iterator::Item', 
                   [])
    return

def register_Ns3ByteTagListIteratorItem_methods(root_module, cls):
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::ByteTagList::Iterator::Item const & arg0) [constructor]
    cls.add_constructor([param('ns3::ByteTagList::Iterator::Item const &', 'arg0')])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::TagBuffer buf) [constructor]
    cls.add_constructor([param('ns3::TagBuffer', 'buf')])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::buf [variable]
    cls.add_instance_attribute('buf', 'ns3::TagBuffer', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::end [variable]
    cls.add_instance_attribute('end', 'int32_t', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::size [variable]
    cls.add_instance_attribute('size', 'uint32_t', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::start [variable]
    cls.add_instance_attribute('start', 'int32_t', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::tid [variable]
    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
    return

def register_Ns3CallbackBase_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackBase const &', 'arg0')])
    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::Ptr<ns3::CallbackImplBase> ns3::CallbackBase::GetImpl() const [member function]
    cls.add_method('GetImpl', 
                   'ns3::Ptr< ns3::CallbackImplBase >', 
                   [], 
                   is_const=True)
    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::Ptr<ns3::CallbackImplBase> impl) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::CallbackImplBase >', 'impl')], 
                        visibility='protected')
    return

def register_Ns3CqiConfig_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::CqiConfig_s::CqiConfig_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::CqiConfig_s::CqiConfig_s(ns3::CqiConfig_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::CqiConfig_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::CqiConfig_s::m_action [variable]
    cls.add_instance_attribute('m_action', 'ns3::SetupRelease_e', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::CqiConfig_s::m_cqiSchedInterval [variable]
    cls.add_instance_attribute('m_cqiSchedInterval', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::CqiConfig_s::m_riSchedInterval [variable]
    cls.add_instance_attribute('m_riSchedInterval', 'uint8_t', is_const=False)
    return

def register_Ns3CqiListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::CqiListElement_s::CqiListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::CqiListElement_s::CqiListElement_s(ns3::CqiListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::CqiListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::CqiListElement_s::m_cqiType [variable]
    cls.add_instance_attribute('m_cqiType', 'ns3::CqiListElement_s::CqiType_e', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::CqiListElement_s::m_ri [variable]
    cls.add_instance_attribute('m_ri', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::CqiListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::CqiListElement_s::m_sbMeasResult [variable]
    cls.add_instance_attribute('m_sbMeasResult', 'ns3::SbMeasResult_s', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::CqiListElement_s::m_wbCqi [variable]
    cls.add_instance_attribute('m_wbCqi', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::CqiListElement_s::m_wbPmi [variable]
    cls.add_instance_attribute('m_wbPmi', 'uint8_t', is_const=False)
    return

def register_Ns3DataOutputCallback_methods(root_module, cls):
    ## data-output-interface.h (module 'stats'): ns3::DataOutputCallback::DataOutputCallback() [constructor]
    cls.add_constructor([])
    ## data-output-interface.h (module 'stats'): ns3::DataOutputCallback::DataOutputCallback(ns3::DataOutputCallback const & arg0) [constructor]
    cls.add_constructor([param('ns3::DataOutputCallback const &', 'arg0')])
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputSingleton(std::string key, std::string variable, int val) [member function]
    cls.add_method('OutputSingleton', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('int', 'val')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputSingleton(std::string key, std::string variable, uint32_t val) [member function]
    cls.add_method('OutputSingleton', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('uint32_t', 'val')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputSingleton(std::string key, std::string variable, double val) [member function]
    cls.add_method('OutputSingleton', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('double', 'val')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputSingleton(std::string key, std::string variable, std::string val) [member function]
    cls.add_method('OutputSingleton', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('std::string', 'val')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputSingleton(std::string key, std::string variable, ns3::Time val) [member function]
    cls.add_method('OutputSingleton', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('ns3::Time', 'val')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputCallback::OutputStatistic(std::string key, std::string variable, ns3::StatisticalSummary const * statSum) [member function]
    cls.add_method('OutputStatistic', 
                   'void', 
                   [param('std::string', 'key'), param('std::string', 'variable'), param('ns3::StatisticalSummary const *', 'statSum')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3DataRate_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_numeric_operator('*', root_module['ns3::DataRate'], root_module['ns3::DataRate'], param('double', 'right'))
    cls.add_binary_numeric_operator('*', root_module['ns3::DataRate'], root_module['ns3::DataRate'], param('uint64_t', 'right'))
    cls.add_inplace_numeric_operator('*=', param('double', 'right'))
    cls.add_inplace_numeric_operator('*=', param('uint64_t', 'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::DataRate'], root_module['ns3::DataRate'], param('ns3::DataRate', 'right'))
    cls.add_inplace_numeric_operator('+=', param('ns3::DataRate', 'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::DataRate'], root_module['ns3::DataRate'], param('ns3::DataRate', 'right'))
    cls.add_inplace_numeric_operator('-=', param('ns3::DataRate', 'right'))
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('<=')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('>')
    cls.add_binary_comparison_operator('>=')
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate(ns3::DataRate const & arg0) [constructor]
    cls.add_constructor([param('ns3::DataRate const &', 'arg0')])
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate() [constructor]
    cls.add_constructor([])
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate(uint64_t bps) [constructor]
    cls.add_constructor([param('uint64_t', 'bps')])
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate(std::string rate) [constructor]
    cls.add_constructor([param('std::string', 'rate')])
    ## data-rate.h (module 'network'): ns3::Time ns3::DataRate::CalculateBitsTxTime(uint32_t bits) const [member function]
    cls.add_method('CalculateBitsTxTime', 
                   'ns3::Time', 
                   [param('uint32_t', 'bits')], 
                   is_const=True)
    ## data-rate.h (module 'network'): ns3::Time ns3::DataRate::CalculateBytesTxTime(uint32_t bytes) const [member function]
    cls.add_method('CalculateBytesTxTime', 
                   'ns3::Time', 
                   [param('uint32_t', 'bytes')], 
                   is_const=True)
    ## data-rate.h (module 'network'): uint64_t ns3::DataRate::GetBitRate() const [member function]
    cls.add_method('GetBitRate', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeAccessor> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeAccessor > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeAccessor>::Delete(ns3::AttributeAccessor * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::AttributeAccessor *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeChecker> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeChecker > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeChecker>::Delete(ns3::AttributeChecker * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::AttributeChecker *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeValue> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeValue > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeValue>::Delete(ns3::AttributeValue * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::AttributeValue *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter(ns3::DefaultDeleter<ns3::CallbackImplBase> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::CallbackImplBase > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::CallbackImplBase>::Delete(ns3::CallbackImplBase * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::CallbackImplBase *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter(ns3::DefaultDeleter<ns3::EventImpl> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::EventImpl > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::EventImpl>::Delete(ns3::EventImpl * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::EventImpl *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter(ns3::DefaultDeleter<ns3::Hash::Implementation> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::Hash::Implementation > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Hash::Implementation>::Delete(ns3::Hash::Implementation * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::Hash::Implementation *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3LteControlMessage_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::LteControlMessage>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::LteControlMessage>::DefaultDeleter(ns3::DefaultDeleter<ns3::LteControlMessage> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::LteControlMessage > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::LteControlMessage>::Delete(ns3::LteControlMessage * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::LteControlMessage *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3LteHarqPhy_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::LteHarqPhy>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::LteHarqPhy>::DefaultDeleter(ns3::DefaultDeleter<ns3::LteHarqPhy> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::LteHarqPhy > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::LteHarqPhy>::Delete(ns3::LteHarqPhy * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::LteHarqPhy *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3LteSlHarqPhy_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::LteSlHarqPhy>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::LteSlHarqPhy>::DefaultDeleter(ns3::DefaultDeleter<ns3::LteSlHarqPhy> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::LteSlHarqPhy > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::LteSlHarqPhy>::Delete(ns3::LteSlHarqPhy * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::LteSlHarqPhy *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter(ns3::DefaultDeleter<ns3::NixVector> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::NixVector > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::NixVector>::Delete(ns3::NixVector * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::NixVector *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3OutputStreamWrapper_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::OutputStreamWrapper>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::OutputStreamWrapper>::DefaultDeleter(ns3::DefaultDeleter<ns3::OutputStreamWrapper> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::OutputStreamWrapper > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::OutputStreamWrapper>::Delete(ns3::OutputStreamWrapper * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::OutputStreamWrapper *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter(ns3::DefaultDeleter<ns3::Packet> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::Packet > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Packet>::Delete(ns3::Packet * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::Packet *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3SpectrumModel_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::SpectrumModel>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::SpectrumModel>::DefaultDeleter(ns3::DefaultDeleter<ns3::SpectrumModel> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::SpectrumModel > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::SpectrumModel>::Delete(ns3::SpectrumModel * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::SpectrumModel *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3SpectrumSignalParameters_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::SpectrumSignalParameters>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::SpectrumSignalParameters>::DefaultDeleter(ns3::DefaultDeleter<ns3::SpectrumSignalParameters> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::SpectrumSignalParameters > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::SpectrumSignalParameters>::Delete(ns3::SpectrumSignalParameters * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::SpectrumSignalParameters *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3SpectrumValue_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::SpectrumValue>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::SpectrumValue>::DefaultDeleter(ns3::DefaultDeleter<ns3::SpectrumValue> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::SpectrumValue > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::SpectrumValue>::Delete(ns3::SpectrumValue * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::SpectrumValue *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::TraceSourceAccessor> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::TraceSourceAccessor > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::TraceSourceAccessor>::Delete(ns3::TraceSourceAccessor * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::TraceSourceAccessor *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3VendorSpecificValue_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::VendorSpecificValue>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::VendorSpecificValue>::DefaultDeleter(ns3::DefaultDeleter<ns3::VendorSpecificValue> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::VendorSpecificValue > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::VendorSpecificValue>::Delete(ns3::VendorSpecificValue * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::VendorSpecificValue *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttCallMachineGrpBasicState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBasicState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>::Delete(ns3::psc::McpttCallMachineGrpBasicState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasicState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttCallMachineGrpBroadcastState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBroadcastState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>::Delete(ns3::psc::McpttCallMachineGrpBroadcastState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcastState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttCallMachinePrivateState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttCallMachinePrivateState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>::Delete(ns3::psc::McpttCallMachinePrivateState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivateState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttCallTypeMachinePrivateState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttCallTypeMachinePrivateState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>::Delete(ns3::psc::McpttCallTypeMachinePrivateState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivateState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOffNetworkFloorParticipantState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOffNetworkFloorParticipantState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>::Delete(ns3::psc::McpttOffNetworkFloorParticipantState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipantState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkCallMachineClientState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOnNetworkCallMachineClientState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>::Delete(ns3::psc::McpttOnNetworkCallMachineClientState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClientState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorArbitratorState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorArbitratorState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>::Delete(ns3::psc::McpttOnNetworkFloorArbitratorState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorArbitratorState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorDualControlState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorDualControlState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>::Delete(ns3::psc::McpttOnNetworkFloorDualControlState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControlState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorParticipantState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorParticipantState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>::Delete(ns3::psc::McpttOnNetworkFloorParticipantState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipantState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorTowardsParticipantState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorTowardsParticipantState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>::Delete(ns3::psc::McpttOnNetworkFloorTowardsParticipantState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorTowardsParticipantState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttServerCallMachineGroupPrearrangedState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttServerCallMachineGroupPrearrangedState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>::Delete(ns3::psc::McpttServerCallMachineGroupPrearrangedState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearrangedState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DeviceEnergyModelContainer_methods(root_module, cls):
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::DeviceEnergyModelContainer(ns3::DeviceEnergyModelContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::DeviceEnergyModelContainer const &', 'arg0')])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::DeviceEnergyModelContainer() [constructor]
    cls.add_constructor([])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::DeviceEnergyModelContainer(ns3::Ptr<ns3::DeviceEnergyModel> model) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::DeviceEnergyModel >', 'model')])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::DeviceEnergyModelContainer(std::string modelName) [constructor]
    cls.add_constructor([param('std::string', 'modelName')])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::DeviceEnergyModelContainer(ns3::DeviceEnergyModelContainer const & a, ns3::DeviceEnergyModelContainer const & b) [constructor]
    cls.add_constructor([param('ns3::DeviceEnergyModelContainer const &', 'a'), param('ns3::DeviceEnergyModelContainer const &', 'b')])
    ## device-energy-model-container.h (module 'energy'): void ns3::DeviceEnergyModelContainer::Add(ns3::DeviceEnergyModelContainer container) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::DeviceEnergyModelContainer', 'container')])
    ## device-energy-model-container.h (module 'energy'): void ns3::DeviceEnergyModelContainer::Add(ns3::Ptr<ns3::DeviceEnergyModel> model) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::DeviceEnergyModel >', 'model')])
    ## device-energy-model-container.h (module 'energy'): void ns3::DeviceEnergyModelContainer::Add(std::string modelName) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'modelName')])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::Iterator ns3::DeviceEnergyModelContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::DeviceEnergyModelContainer::Iterator', 
                   [], 
                   is_const=True)
    ## device-energy-model-container.h (module 'energy'): void ns3::DeviceEnergyModelContainer::Clear() [member function]
    cls.add_method('Clear', 
                   'void', 
                   [])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::Iterator ns3::DeviceEnergyModelContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::DeviceEnergyModelContainer::Iterator', 
                   [], 
                   is_const=True)
    ## device-energy-model-container.h (module 'energy'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::DeviceEnergyModelContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::DeviceEnergyModel >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## device-energy-model-container.h (module 'energy'): uint32_t ns3::DeviceEnergyModelContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3DeviceEnergyModelHelper_methods(root_module, cls):
    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelHelper::DeviceEnergyModelHelper() [constructor]
    cls.add_constructor([])
    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelHelper::DeviceEnergyModelHelper(ns3::DeviceEnergyModelHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::DeviceEnergyModelHelper const &', 'arg0')])
    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::NetDeviceContainer deviceContainer, ns3::EnergySourceContainer sourceContainer) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::NetDeviceContainer', 'deviceContainer'), param('ns3::EnergySourceContainer', 'sourceContainer')], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): void ns3::DeviceEnergyModelHelper::Set(std::string name, ns3::AttributeValue const & v) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'v')], 
                   is_pure_virtual=True, is_virtual=True)
    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::DeviceEnergyModelHelper::DoInstall(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
    cls.add_method('DoInstall', 
                   'ns3::Ptr< ns3::DeviceEnergyModel >', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
    return

def register_Ns3DlDciListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::DlDciListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::DlDciListElement_s(ns3::DlDciListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::DlDciListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_aggrLevel [variable]
    cls.add_instance_attribute('m_aggrLevel', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_cceIndex [variable]
    cls.add_instance_attribute('m_cceIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_dai [variable]
    cls.add_instance_attribute('m_dai', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_dlPowerOffset [variable]
    cls.add_instance_attribute('m_dlPowerOffset', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_format [variable]
    cls.add_instance_attribute('m_format', 'ns3::DlDciListElement_s::Format_e', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_harqProcess [variable]
    cls.add_instance_attribute('m_harqProcess', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_nGap [variable]
    cls.add_instance_attribute('m_nGap', 'ns3::DlDciListElement_s::Ngap_e', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_ndi [variable]
    cls.add_instance_attribute('m_ndi', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_pdcchOrder [variable]
    cls.add_instance_attribute('m_pdcchOrder', 'bool', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_pdcchPowerOffset [variable]
    cls.add_instance_attribute('m_pdcchPowerOffset', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_prachMaskIndex [variable]
    cls.add_instance_attribute('m_prachMaskIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_preambleIndex [variable]
    cls.add_instance_attribute('m_preambleIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_precodingInfo [variable]
    cls.add_instance_attribute('m_precodingInfo', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_rbBitmap [variable]
    cls.add_instance_attribute('m_rbBitmap', 'uint32_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_rbShift [variable]
    cls.add_instance_attribute('m_rbShift', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_resAlloc [variable]
    cls.add_instance_attribute('m_resAlloc', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_rv [variable]
    cls.add_instance_attribute('m_rv', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_spsRelease [variable]
    cls.add_instance_attribute('m_spsRelease', 'bool', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_tbSwap [variable]
    cls.add_instance_attribute('m_tbSwap', 'bool', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_tbsIdx [variable]
    cls.add_instance_attribute('m_tbsIdx', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_tbsSize [variable]
    cls.add_instance_attribute('m_tbsSize', 'std::vector< unsigned short >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_tpc [variable]
    cls.add_instance_attribute('m_tpc', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlDciListElement_s::m_vrbFormat [variable]
    cls.add_instance_attribute('m_vrbFormat', 'ns3::DlDciListElement_s::VrbFormat_e', is_const=False)
    return

def register_Ns3DlInfoListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::DlInfoListElement_s::DlInfoListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::DlInfoListElement_s::DlInfoListElement_s(ns3::DlInfoListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::DlInfoListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::DlInfoListElement_s::m_harqProcessId [variable]
    cls.add_instance_attribute('m_harqProcessId', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlInfoListElement_s::m_harqStatus [variable]
    cls.add_instance_attribute('m_harqStatus', 'std::vector< ns3::DlInfoListElement_s::HarqStatus_e >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DlInfoListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3DlSchedulingCallbackInfo_methods(root_module, cls):
    ## lte-common.h (module 'lte'): ns3::DlSchedulingCallbackInfo::DlSchedulingCallbackInfo() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::DlSchedulingCallbackInfo::DlSchedulingCallbackInfo(ns3::DlSchedulingCallbackInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::DlSchedulingCallbackInfo const &', 'arg0')])
    ## lte-common.h (module 'lte'): ns3::DlSchedulingCallbackInfo::componentCarrierId [variable]
    cls.add_instance_attribute('componentCarrierId', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::DlSchedulingCallbackInfo::frameNo [variable]
    cls.add_instance_attribute('frameNo', 'uint32_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::DlSchedulingCallbackInfo::mcsTb1 [variable]
    cls.add_instance_attribute('mcsTb1', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::DlSchedulingCallbackInfo::mcsTb2 [variable]
    cls.add_instance_attribute('mcsTb2', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::DlSchedulingCallbackInfo::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::DlSchedulingCallbackInfo::sizeTb1 [variable]
    cls.add_instance_attribute('sizeTb1', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::DlSchedulingCallbackInfo::sizeTb2 [variable]
    cls.add_instance_attribute('sizeTb2', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::DlSchedulingCallbackInfo::subframeNo [variable]
    cls.add_instance_attribute('subframeNo', 'uint32_t', is_const=False)
    return

def register_Ns3DrxConfig_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::DrxConfig_s::DrxConfig_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::DrxConfig_s::DrxConfig_s(ns3::DrxConfig_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::DrxConfig_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::DrxConfig_s::m_drxInactivityTimer [variable]
    cls.add_instance_attribute('m_drxInactivityTimer', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DrxConfig_s::m_drxRetransmissionTimer [variable]
    cls.add_instance_attribute('m_drxRetransmissionTimer', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DrxConfig_s::m_drxShortCycleTimer [variable]
    cls.add_instance_attribute('m_drxShortCycleTimer', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DrxConfig_s::m_longDrxCycle [variable]
    cls.add_instance_attribute('m_longDrxCycle', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DrxConfig_s::m_longDrxCycleStartOffset [variable]
    cls.add_instance_attribute('m_longDrxCycleStartOffset', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DrxConfig_s::m_onDurationTimer [variable]
    cls.add_instance_attribute('m_onDurationTimer', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::DrxConfig_s::m_shortDrxCycle [variable]
    cls.add_instance_attribute('m_shortDrxCycle', 'uint16_t', is_const=False)
    return

def register_Ns3EnergySourceHelper_methods(root_module, cls):
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceHelper::EnergySourceHelper() [constructor]
    cls.add_constructor([])
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceHelper::EnergySourceHelper(ns3::EnergySourceHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnergySourceHelper const &', 'arg0')])
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('Install', 
                   'ns3::EnergySourceContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::NodeContainer c) const [member function]
    cls.add_method('Install', 
                   'ns3::EnergySourceContainer', 
                   [param('ns3::NodeContainer', 'c')], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(std::string nodeName) const [member function]
    cls.add_method('Install', 
                   'ns3::EnergySourceContainer', 
                   [param('std::string', 'nodeName')], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::InstallAll() const [member function]
    cls.add_method('InstallAll', 
                   'ns3::EnergySourceContainer', 
                   [], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): void ns3::EnergySourceHelper::Set(std::string name, ns3::AttributeValue const & v) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'v')], 
                   is_pure_virtual=True, is_virtual=True)
    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::EnergySourceHelper::DoInstall(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('DoInstall', 
                   'ns3::Ptr< ns3::EnergySource >', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
    return

def register_Ns3EpcEnbS1SapProvider_methods(root_module, cls):
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::EpcEnbS1SapProvider() [constructor]
    cls.add_constructor([])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::EpcEnbS1SapProvider(ns3::EpcEnbS1SapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcEnbS1SapProvider const &', 'arg0')])
    ## epc-enb-s1-sap.h (module 'lte'): void ns3::EpcEnbS1SapProvider::DoSendReleaseIndication(uint64_t imsi, uint16_t rnti, uint8_t bearerId) [member function]
    cls.add_method('DoSendReleaseIndication', 
                   'void', 
                   [param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'bearerId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-enb-s1-sap.h (module 'lte'): void ns3::EpcEnbS1SapProvider::InitialUeMessage(uint64_t imsi, uint16_t rnti) [member function]
    cls.add_method('InitialUeMessage', 
                   'void', 
                   [param('uint64_t', 'imsi'), param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-enb-s1-sap.h (module 'lte'): void ns3::EpcEnbS1SapProvider::PathSwitchRequest(ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters params) [member function]
    cls.add_method('PathSwitchRequest', 
                   'void', 
                   [param('ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-enb-s1-sap.h (module 'lte'): void ns3::EpcEnbS1SapProvider::UeContextRelease(uint16_t rnti) [member function]
    cls.add_method('UeContextRelease', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3EpcEnbS1SapProviderBearerToBeSwitched_methods(root_module, cls):
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::BearerToBeSwitched::BearerToBeSwitched() [constructor]
    cls.add_constructor([])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::BearerToBeSwitched::BearerToBeSwitched(ns3::EpcEnbS1SapProvider::BearerToBeSwitched const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcEnbS1SapProvider::BearerToBeSwitched const &', 'arg0')])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::BearerToBeSwitched::epsBearerId [variable]
    cls.add_instance_attribute('epsBearerId', 'uint8_t', is_const=False)
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::BearerToBeSwitched::teid [variable]
    cls.add_instance_attribute('teid', 'uint32_t', is_const=False)
    return

def register_Ns3EpcEnbS1SapProviderPathSwitchRequestParameters_methods(root_module, cls):
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters::PathSwitchRequestParameters() [constructor]
    cls.add_constructor([])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters::PathSwitchRequestParameters(ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters const &', 'arg0')])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters::bearersToBeSwitched [variable]
    cls.add_instance_attribute('bearersToBeSwitched', 'std::list< ns3::EpcEnbS1SapProvider::BearerToBeSwitched >', is_const=False)
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters::cellId [variable]
    cls.add_instance_attribute('cellId', 'uint16_t', is_const=False)
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters::mmeUeS1Id [variable]
    cls.add_instance_attribute('mmeUeS1Id', 'uint32_t', is_const=False)
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    return

def register_Ns3EpcEnbS1SapUser_methods(root_module, cls):
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::EpcEnbS1SapUser() [constructor]
    cls.add_constructor([])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::EpcEnbS1SapUser(ns3::EpcEnbS1SapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcEnbS1SapUser const &', 'arg0')])
    ## epc-enb-s1-sap.h (module 'lte'): void ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequest(ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters params) [member function]
    cls.add_method('DataRadioBearerSetupRequest', 
                   'void', 
                   [param('ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-enb-s1-sap.h (module 'lte'): void ns3::EpcEnbS1SapUser::InitialContextSetupRequest(ns3::EpcEnbS1SapUser::InitialContextSetupRequestParameters params) [member function]
    cls.add_method('InitialContextSetupRequest', 
                   'void', 
                   [param('ns3::EpcEnbS1SapUser::InitialContextSetupRequestParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-enb-s1-sap.h (module 'lte'): void ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledge(ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters params) [member function]
    cls.add_method('PathSwitchRequestAcknowledge', 
                   'void', 
                   [param('ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters_methods(root_module, cls):
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters::DataRadioBearerSetupRequestParameters() [constructor]
    cls.add_constructor([])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters::DataRadioBearerSetupRequestParameters(ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters const &', 'arg0')])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters::bearer [variable]
    cls.add_instance_attribute('bearer', 'ns3::EpsBearer', is_const=False)
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters::bearerId [variable]
    cls.add_instance_attribute('bearerId', 'uint8_t', is_const=False)
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters::gtpTeid [variable]
    cls.add_instance_attribute('gtpTeid', 'uint32_t', is_const=False)
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters::transportLayerAddress [variable]
    cls.add_instance_attribute('transportLayerAddress', 'ns3::Ipv4Address', is_const=False)
    return

def register_Ns3EpcEnbS1SapUserInitialContextSetupRequestParameters_methods(root_module, cls):
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::InitialContextSetupRequestParameters::InitialContextSetupRequestParameters() [constructor]
    cls.add_constructor([])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::InitialContextSetupRequestParameters::InitialContextSetupRequestParameters(ns3::EpcEnbS1SapUser::InitialContextSetupRequestParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcEnbS1SapUser::InitialContextSetupRequestParameters const &', 'arg0')])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::InitialContextSetupRequestParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    return

def register_Ns3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters_methods(root_module, cls):
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters::PathSwitchRequestAcknowledgeParameters() [constructor]
    cls.add_constructor([])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters::PathSwitchRequestAcknowledgeParameters(ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters const &', 'arg0')])
    ## epc-enb-s1-sap.h (module 'lte'): ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    return

def register_Ns3EpcX2Sap_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::EpcX2Sap() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::EpcX2Sap(ns3::EpcX2Sap const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::m_maxPdcpSn [variable]
    cls.add_static_attribute('m_maxPdcpSn', 'uint16_t const', is_const=True)
    return

def register_Ns3EpcX2SapCellInformationItem_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellInformationItem::CellInformationItem() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellInformationItem::CellInformationItem(ns3::EpcX2Sap::CellInformationItem const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::CellInformationItem const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellInformationItem::relativeNarrowbandTxBand [variable]
    cls.add_instance_attribute('relativeNarrowbandTxBand', 'ns3::EpcX2Sap::RelativeNarrowbandTxBand', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellInformationItem::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellInformationItem::ulHighInterferenceInformationList [variable]
    cls.add_instance_attribute('ulHighInterferenceInformationList', 'std::vector< ns3::EpcX2Sap::UlHighInterferenceInformationItem >', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellInformationItem::ulInterferenceOverloadIndicationList [variable]
    cls.add_instance_attribute('ulInterferenceOverloadIndicationList', 'std::vector< ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem >', is_const=False)
    return

def register_Ns3EpcX2SapCellMeasurementResultItem_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::CellMeasurementResultItem() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::CellMeasurementResultItem(ns3::EpcX2Sap::CellMeasurementResultItem const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::CellMeasurementResultItem const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::dlCompositeAvailableCapacity [variable]
    cls.add_instance_attribute('dlCompositeAvailableCapacity', 'ns3::EpcX2Sap::CompositeAvailCapacity', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::dlGbrPrbUsage [variable]
    cls.add_instance_attribute('dlGbrPrbUsage', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::dlHardwareLoadIndicator [variable]
    cls.add_instance_attribute('dlHardwareLoadIndicator', 'ns3::EpcX2Sap::LoadIndicator', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::dlNonGbrPrbUsage [variable]
    cls.add_instance_attribute('dlNonGbrPrbUsage', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::dlS1TnlLoadIndicator [variable]
    cls.add_instance_attribute('dlS1TnlLoadIndicator', 'ns3::EpcX2Sap::LoadIndicator', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::dlTotalPrbUsage [variable]
    cls.add_instance_attribute('dlTotalPrbUsage', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::ulCompositeAvailableCapacity [variable]
    cls.add_instance_attribute('ulCompositeAvailableCapacity', 'ns3::EpcX2Sap::CompositeAvailCapacity', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::ulGbrPrbUsage [variable]
    cls.add_instance_attribute('ulGbrPrbUsage', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::ulHardwareLoadIndicator [variable]
    cls.add_instance_attribute('ulHardwareLoadIndicator', 'ns3::EpcX2Sap::LoadIndicator', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::ulNonGbrPrbUsage [variable]
    cls.add_instance_attribute('ulNonGbrPrbUsage', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::ulS1TnlLoadIndicator [variable]
    cls.add_instance_attribute('ulS1TnlLoadIndicator', 'ns3::EpcX2Sap::LoadIndicator', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CellMeasurementResultItem::ulTotalPrbUsage [variable]
    cls.add_instance_attribute('ulTotalPrbUsage', 'uint16_t', is_const=False)
    return

def register_Ns3EpcX2SapCompositeAvailCapacity_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CompositeAvailCapacity::CompositeAvailCapacity() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CompositeAvailCapacity::CompositeAvailCapacity(ns3::EpcX2Sap::CompositeAvailCapacity const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::CompositeAvailCapacity const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CompositeAvailCapacity::capacityValue [variable]
    cls.add_instance_attribute('capacityValue', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::CompositeAvailCapacity::cellCapacityClassValue [variable]
    cls.add_instance_attribute('cellCapacityClassValue', 'uint16_t', is_const=False)
    return

def register_Ns3EpcX2SapErabAdmittedItem_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabAdmittedItem::ErabAdmittedItem() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabAdmittedItem::ErabAdmittedItem(ns3::EpcX2Sap::ErabAdmittedItem const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::ErabAdmittedItem const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabAdmittedItem::dlGtpTeid [variable]
    cls.add_instance_attribute('dlGtpTeid', 'uint32_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabAdmittedItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabAdmittedItem::ulGtpTeid [variable]
    cls.add_instance_attribute('ulGtpTeid', 'uint32_t', is_const=False)
    return

def register_Ns3EpcX2SapErabNotAdmittedItem_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabNotAdmittedItem::ErabNotAdmittedItem() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabNotAdmittedItem::ErabNotAdmittedItem(ns3::EpcX2Sap::ErabNotAdmittedItem const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::ErabNotAdmittedItem const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabNotAdmittedItem::cause [variable]
    cls.add_instance_attribute('cause', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabNotAdmittedItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint16_t', is_const=False)
    return

def register_Ns3EpcX2SapErabToBeSetupItem_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabToBeSetupItem::ErabToBeSetupItem(ns3::EpcX2Sap::ErabToBeSetupItem const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::ErabToBeSetupItem const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabToBeSetupItem::ErabToBeSetupItem() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabToBeSetupItem::dlForwarding [variable]
    cls.add_instance_attribute('dlForwarding', 'bool', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabToBeSetupItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabToBeSetupItem::erabLevelQosParameters [variable]
    cls.add_instance_attribute('erabLevelQosParameters', 'ns3::EpsBearer', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabToBeSetupItem::gtpTeid [variable]
    cls.add_instance_attribute('gtpTeid', 'uint32_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabToBeSetupItem::transportLayerAddress [variable]
    cls.add_instance_attribute('transportLayerAddress', 'ns3::Ipv4Address', is_const=False)
    return

def register_Ns3EpcX2SapErabsSubjectToStatusTransferItem_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem::ErabsSubjectToStatusTransferItem() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem::ErabsSubjectToStatusTransferItem(ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem::dlHfn [variable]
    cls.add_instance_attribute('dlHfn', 'uint32_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem::dlPdcpSn [variable]
    cls.add_instance_attribute('dlPdcpSn', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem::erabId [variable]
    cls.add_instance_attribute('erabId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem::receiveStatusOfUlPdcpSdus [variable]
    cls.add_instance_attribute('receiveStatusOfUlPdcpSdus', 'std::bitset< 4096 >', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem::ulHfn [variable]
    cls.add_instance_attribute('ulHfn', 'uint32_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem::ulPdcpSn [variable]
    cls.add_instance_attribute('ulPdcpSn', 'uint16_t', is_const=False)
    return

def register_Ns3EpcX2SapHandoverPreparationFailureParams_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverPreparationFailureParams::HandoverPreparationFailureParams() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverPreparationFailureParams::HandoverPreparationFailureParams(ns3::EpcX2Sap::HandoverPreparationFailureParams const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::HandoverPreparationFailureParams const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverPreparationFailureParams::cause [variable]
    cls.add_instance_attribute('cause', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverPreparationFailureParams::criticalityDiagnostics [variable]
    cls.add_instance_attribute('criticalityDiagnostics', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverPreparationFailureParams::oldEnbUeX2apId [variable]
    cls.add_instance_attribute('oldEnbUeX2apId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverPreparationFailureParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverPreparationFailureParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3EpcX2SapHandoverRequestAckParams_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestAckParams::HandoverRequestAckParams() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestAckParams::HandoverRequestAckParams(ns3::EpcX2Sap::HandoverRequestAckParams const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::HandoverRequestAckParams const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestAckParams::admittedBearers [variable]
    cls.add_instance_attribute('admittedBearers', 'std::vector< ns3::EpcX2Sap::ErabAdmittedItem >', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestAckParams::newEnbUeX2apId [variable]
    cls.add_instance_attribute('newEnbUeX2apId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestAckParams::notAdmittedBearers [variable]
    cls.add_instance_attribute('notAdmittedBearers', 'std::vector< ns3::EpcX2Sap::ErabNotAdmittedItem >', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestAckParams::oldEnbUeX2apId [variable]
    cls.add_instance_attribute('oldEnbUeX2apId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestAckParams::rrcContext [variable]
    cls.add_instance_attribute('rrcContext', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestAckParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestAckParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3EpcX2SapHandoverRequestParams_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams::HandoverRequestParams() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams::HandoverRequestParams(ns3::EpcX2Sap::HandoverRequestParams const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::HandoverRequestParams const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams::bearers [variable]
    cls.add_instance_attribute('bearers', 'std::vector< ns3::EpcX2Sap::ErabToBeSetupItem >', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams::cause [variable]
    cls.add_instance_attribute('cause', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams::mmeUeS1apId [variable]
    cls.add_instance_attribute('mmeUeS1apId', 'uint32_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams::oldEnbUeX2apId [variable]
    cls.add_instance_attribute('oldEnbUeX2apId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams::rrcContext [variable]
    cls.add_instance_attribute('rrcContext', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams::ueAggregateMaxBitRateDownlink [variable]
    cls.add_instance_attribute('ueAggregateMaxBitRateDownlink', 'uint64_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::HandoverRequestParams::ueAggregateMaxBitRateUplink [variable]
    cls.add_instance_attribute('ueAggregateMaxBitRateUplink', 'uint64_t', is_const=False)
    return

def register_Ns3EpcX2SapLoadInformationParams_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::LoadInformationParams::LoadInformationParams() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::LoadInformationParams::LoadInformationParams(ns3::EpcX2Sap::LoadInformationParams const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::LoadInformationParams const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::LoadInformationParams::cellInformationList [variable]
    cls.add_instance_attribute('cellInformationList', 'std::vector< ns3::EpcX2Sap::CellInformationItem >', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::LoadInformationParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3EpcX2SapRelativeNarrowbandTxBand_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::RelativeNarrowbandTxBand::RelativeNarrowbandTxBand() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::RelativeNarrowbandTxBand::RelativeNarrowbandTxBand(ns3::EpcX2Sap::RelativeNarrowbandTxBand const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::RelativeNarrowbandTxBand const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::RelativeNarrowbandTxBand::antennaPorts [variable]
    cls.add_instance_attribute('antennaPorts', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::RelativeNarrowbandTxBand::pB [variable]
    cls.add_instance_attribute('pB', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::RelativeNarrowbandTxBand::pdcchInterferenceImpact [variable]
    cls.add_instance_attribute('pdcchInterferenceImpact', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::RelativeNarrowbandTxBand::rntpPerPrbList [variable]
    cls.add_instance_attribute('rntpPerPrbList', 'std::vector< bool >', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::RelativeNarrowbandTxBand::rntpThreshold [variable]
    cls.add_instance_attribute('rntpThreshold', 'int16_t', is_const=False)
    return

def register_Ns3EpcX2SapResourceStatusUpdateParams_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ResourceStatusUpdateParams::ResourceStatusUpdateParams() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ResourceStatusUpdateParams::ResourceStatusUpdateParams(ns3::EpcX2Sap::ResourceStatusUpdateParams const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::ResourceStatusUpdateParams const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ResourceStatusUpdateParams::cellMeasurementResultList [variable]
    cls.add_instance_attribute('cellMeasurementResultList', 'std::vector< ns3::EpcX2Sap::CellMeasurementResultItem >', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ResourceStatusUpdateParams::enb1MeasurementId [variable]
    cls.add_instance_attribute('enb1MeasurementId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ResourceStatusUpdateParams::enb2MeasurementId [variable]
    cls.add_instance_attribute('enb2MeasurementId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::ResourceStatusUpdateParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3EpcX2SapSnStatusTransferParams_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::SnStatusTransferParams::SnStatusTransferParams() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::SnStatusTransferParams::SnStatusTransferParams(ns3::EpcX2Sap::SnStatusTransferParams const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::SnStatusTransferParams const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::SnStatusTransferParams::erabsSubjectToStatusTransferList [variable]
    cls.add_instance_attribute('erabsSubjectToStatusTransferList', 'std::vector< ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem >', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::SnStatusTransferParams::newEnbUeX2apId [variable]
    cls.add_instance_attribute('newEnbUeX2apId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::SnStatusTransferParams::oldEnbUeX2apId [variable]
    cls.add_instance_attribute('oldEnbUeX2apId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::SnStatusTransferParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::SnStatusTransferParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3EpcX2SapUeContextReleaseParams_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeContextReleaseParams::UeContextReleaseParams() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeContextReleaseParams::UeContextReleaseParams(ns3::EpcX2Sap::UeContextReleaseParams const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::UeContextReleaseParams const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeContextReleaseParams::newEnbUeX2apId [variable]
    cls.add_instance_attribute('newEnbUeX2apId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeContextReleaseParams::oldEnbUeX2apId [variable]
    cls.add_instance_attribute('oldEnbUeX2apId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeContextReleaseParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeContextReleaseParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    return

def register_Ns3EpcX2SapUeDataParams_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeDataParams::UeDataParams() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeDataParams::UeDataParams(ns3::EpcX2Sap::UeDataParams const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::UeDataParams const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeDataParams::gtpTeid [variable]
    cls.add_instance_attribute('gtpTeid', 'uint32_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeDataParams::sourceCellId [variable]
    cls.add_instance_attribute('sourceCellId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeDataParams::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UeDataParams::ueData [variable]
    cls.add_instance_attribute('ueData', 'ns3::Ptr< ns3::Packet >', is_const=False)
    return

def register_Ns3EpcX2SapUlHighInterferenceInformationItem_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UlHighInterferenceInformationItem::UlHighInterferenceInformationItem() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UlHighInterferenceInformationItem::UlHighInterferenceInformationItem(ns3::EpcX2Sap::UlHighInterferenceInformationItem const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2Sap::UlHighInterferenceInformationItem const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UlHighInterferenceInformationItem::targetCellId [variable]
    cls.add_instance_attribute('targetCellId', 'uint16_t', is_const=False)
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2Sap::UlHighInterferenceInformationItem::ulHighInterferenceIndicationList [variable]
    cls.add_instance_attribute('ulHighInterferenceIndicationList', 'std::vector< bool >', is_const=False)
    return

def register_Ns3EpcX2SapProvider_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2SapProvider::EpcX2SapProvider() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2SapProvider::EpcX2SapProvider(ns3::EpcX2SapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2SapProvider const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapProvider::SendHandoverPreparationFailure(ns3::EpcX2Sap::HandoverPreparationFailureParams params) [member function]
    cls.add_method('SendHandoverPreparationFailure', 
                   'void', 
                   [param('ns3::EpcX2Sap::HandoverPreparationFailureParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapProvider::SendHandoverRequest(ns3::EpcX2Sap::HandoverRequestParams params) [member function]
    cls.add_method('SendHandoverRequest', 
                   'void', 
                   [param('ns3::EpcX2Sap::HandoverRequestParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapProvider::SendHandoverRequestAck(ns3::EpcX2Sap::HandoverRequestAckParams params) [member function]
    cls.add_method('SendHandoverRequestAck', 
                   'void', 
                   [param('ns3::EpcX2Sap::HandoverRequestAckParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapProvider::SendLoadInformation(ns3::EpcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('SendLoadInformation', 
                   'void', 
                   [param('ns3::EpcX2Sap::LoadInformationParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapProvider::SendResourceStatusUpdate(ns3::EpcX2Sap::ResourceStatusUpdateParams params) [member function]
    cls.add_method('SendResourceStatusUpdate', 
                   'void', 
                   [param('ns3::EpcX2Sap::ResourceStatusUpdateParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapProvider::SendSnStatusTransfer(ns3::EpcX2Sap::SnStatusTransferParams params) [member function]
    cls.add_method('SendSnStatusTransfer', 
                   'void', 
                   [param('ns3::EpcX2Sap::SnStatusTransferParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapProvider::SendUeContextRelease(ns3::EpcX2Sap::UeContextReleaseParams params) [member function]
    cls.add_method('SendUeContextRelease', 
                   'void', 
                   [param('ns3::EpcX2Sap::UeContextReleaseParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapProvider::SendUeData(ns3::EpcX2Sap::UeDataParams params) [member function]
    cls.add_method('SendUeData', 
                   'void', 
                   [param('ns3::EpcX2Sap::UeDataParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3EpcX2SapUser_methods(root_module, cls):
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2SapUser::EpcX2SapUser() [constructor]
    cls.add_constructor([])
    ## epc-x2-sap.h (module 'lte'): ns3::EpcX2SapUser::EpcX2SapUser(ns3::EpcX2SapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcX2SapUser const &', 'arg0')])
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapUser::RecvHandoverPreparationFailure(ns3::EpcX2Sap::HandoverPreparationFailureParams params) [member function]
    cls.add_method('RecvHandoverPreparationFailure', 
                   'void', 
                   [param('ns3::EpcX2Sap::HandoverPreparationFailureParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapUser::RecvHandoverRequest(ns3::EpcX2Sap::HandoverRequestParams params) [member function]
    cls.add_method('RecvHandoverRequest', 
                   'void', 
                   [param('ns3::EpcX2Sap::HandoverRequestParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapUser::RecvHandoverRequestAck(ns3::EpcX2Sap::HandoverRequestAckParams params) [member function]
    cls.add_method('RecvHandoverRequestAck', 
                   'void', 
                   [param('ns3::EpcX2Sap::HandoverRequestAckParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapUser::RecvLoadInformation(ns3::EpcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('RecvLoadInformation', 
                   'void', 
                   [param('ns3::EpcX2Sap::LoadInformationParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapUser::RecvResourceStatusUpdate(ns3::EpcX2Sap::ResourceStatusUpdateParams params) [member function]
    cls.add_method('RecvResourceStatusUpdate', 
                   'void', 
                   [param('ns3::EpcX2Sap::ResourceStatusUpdateParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapUser::RecvSnStatusTransfer(ns3::EpcX2Sap::SnStatusTransferParams params) [member function]
    cls.add_method('RecvSnStatusTransfer', 
                   'void', 
                   [param('ns3::EpcX2Sap::SnStatusTransferParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapUser::RecvUeContextRelease(ns3::EpcX2Sap::UeContextReleaseParams params) [member function]
    cls.add_method('RecvUeContextRelease', 
                   'void', 
                   [param('ns3::EpcX2Sap::UeContextReleaseParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## epc-x2-sap.h (module 'lte'): void ns3::EpcX2SapUser::RecvUeData(ns3::EpcX2Sap::UeDataParams params) [member function]
    cls.add_method('RecvUeData', 
                   'void', 
                   [param('ns3::EpcX2Sap::UeDataParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3EutranMeasurementMapping_methods(root_module, cls):
    ## lte-common.h (module 'lte'): ns3::EutranMeasurementMapping::EutranMeasurementMapping() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::EutranMeasurementMapping::EutranMeasurementMapping(ns3::EutranMeasurementMapping const & arg0) [constructor]
    cls.add_constructor([param('ns3::EutranMeasurementMapping const &', 'arg0')])
    ## lte-common.h (module 'lte'): static int8_t ns3::EutranMeasurementMapping::ActualA3Offset2IeValue(double a3OffsetDb) [member function]
    cls.add_method('ActualA3Offset2IeValue', 
                   'int8_t', 
                   [param('double', 'a3OffsetDb')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static uint8_t ns3::EutranMeasurementMapping::ActualHysteresis2IeValue(double hysteresisDb) [member function]
    cls.add_method('ActualHysteresis2IeValue', 
                   'uint8_t', 
                   [param('double', 'hysteresisDb')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static uint8_t ns3::EutranMeasurementMapping::Db2RsrqRange(double db) [member function]
    cls.add_method('Db2RsrqRange', 
                   'uint8_t', 
                   [param('double', 'db')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static uint8_t ns3::EutranMeasurementMapping::Dbm2RsrpRange(double dbm) [member function]
    cls.add_method('Dbm2RsrpRange', 
                   'uint8_t', 
                   [param('double', 'dbm')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static double ns3::EutranMeasurementMapping::IeValue2ActualA3Offset(int8_t a3OffsetIeValue) [member function]
    cls.add_method('IeValue2ActualA3Offset', 
                   'double', 
                   [param('int8_t', 'a3OffsetIeValue')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static double ns3::EutranMeasurementMapping::IeValue2ActualHysteresis(uint8_t hysteresisIeValue) [member function]
    cls.add_method('IeValue2ActualHysteresis', 
                   'double', 
                   [param('uint8_t', 'hysteresisIeValue')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static double ns3::EutranMeasurementMapping::IeValue2ActualQQualMin(int8_t qQualMinIeValue) [member function]
    cls.add_method('IeValue2ActualQQualMin', 
                   'double', 
                   [param('int8_t', 'qQualMinIeValue')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static double ns3::EutranMeasurementMapping::IeValue2ActualQRxLevMin(int8_t qRxLevMinIeValue) [member function]
    cls.add_method('IeValue2ActualQRxLevMin', 
                   'double', 
                   [param('int8_t', 'qRxLevMinIeValue')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static double ns3::EutranMeasurementMapping::QuantizeRsrp(double v) [member function]
    cls.add_method('QuantizeRsrp', 
                   'double', 
                   [param('double', 'v')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static double ns3::EutranMeasurementMapping::QuantizeRsrq(double v) [member function]
    cls.add_method('QuantizeRsrq', 
                   'double', 
                   [param('double', 'v')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static double ns3::EutranMeasurementMapping::RsrpRange2Dbm(uint8_t range) [member function]
    cls.add_method('RsrpRange2Dbm', 
                   'double', 
                   [param('uint8_t', 'range')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static double ns3::EutranMeasurementMapping::RsrqRange2Db(uint8_t range) [member function]
    cls.add_method('RsrqRange2Db', 
                   'double', 
                   [param('uint8_t', 'range')], 
                   is_static=True)
    return

def register_Ns3EventId_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::EventId const & arg0) [constructor]
    cls.add_constructor([param('ns3::EventId const &', 'arg0')])
    ## event-id.h (module 'core'): ns3::EventId::EventId() [constructor]
    cls.add_constructor([])
    ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::Ptr<ns3::EventImpl> const & impl, uint64_t ts, uint32_t context, uint32_t uid) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::EventImpl > const &', 'impl'), param('uint64_t', 'ts'), param('uint32_t', 'context'), param('uint32_t', 'uid')])
    ## event-id.h (module 'core'): void ns3::EventId::Cancel() [member function]
    cls.add_method('Cancel', 
                   'void', 
                   [])
    ## event-id.h (module 'core'): uint32_t ns3::EventId::GetContext() const [member function]
    cls.add_method('GetContext', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): uint64_t ns3::EventId::GetTs() const [member function]
    cls.add_method('GetTs', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): uint32_t ns3::EventId::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): bool ns3::EventId::IsExpired() const [member function]
    cls.add_method('IsExpired', 
                   'bool', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): bool ns3::EventId::IsRunning() const [member function]
    cls.add_method('IsRunning', 
                   'bool', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): ns3::EventImpl * ns3::EventId::PeekEventImpl() const [member function]
    cls.add_method('PeekEventImpl', 
                   'ns3::EventImpl *', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): void ns3::EventId::Remove() [member function]
    cls.add_method('Remove', 
                   'void', 
                   [])
    return

def register_Ns3FfMacCschedSapProvider_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::FfMacCschedSapProvider() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::FfMacCschedSapProvider(ns3::FfMacCschedSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapProvider::CschedCellConfigReq(ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters const & params) [member function]
    cls.add_method('CschedCellConfigReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapProvider::CschedDiscPoolConfigReq(ns3::FfMacCschedSapProvider::CschedDiscPoolConfigReqParameters const & params) [member function]
    cls.add_method('CschedDiscPoolConfigReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedDiscPoolConfigReqParameters const &', 'params')], 
                   is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapProvider::CschedDiscPoolReleaseReq(ns3::FfMacCschedSapProvider::CschedDiscPoolReleaseReqParameters const & params) [member function]
    cls.add_method('CschedDiscPoolReleaseReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedDiscPoolReleaseReqParameters const &', 'params')], 
                   is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapProvider::CschedLcConfigReq(ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters const & params) [member function]
    cls.add_method('CschedLcConfigReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapProvider::CschedLcReleaseReq(ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters const & params) [member function]
    cls.add_method('CschedLcReleaseReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapProvider::CschedPoolConfigReq(ns3::FfMacCschedSapProvider::CschedPoolConfigReqParameters const & params) [member function]
    cls.add_method('CschedPoolConfigReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedPoolConfigReqParameters const &', 'params')], 
                   is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapProvider::CschedPoolReleaseReq(ns3::FfMacCschedSapProvider::CschedPoolReleaseReqParameters const & params) [member function]
    cls.add_method('CschedPoolReleaseReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedPoolReleaseReqParameters const &', 'params')], 
                   is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapProvider::CschedUeConfigReq(ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters const & params) [member function]
    cls.add_method('CschedUeConfigReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapProvider::CschedUeReleaseReq(ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters const & params) [member function]
    cls.add_method('CschedUeReleaseReq', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3FfMacCschedSapProviderCschedCellConfigReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::CschedCellConfigReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::CschedCellConfigReqParameters(ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_antennaPortsCount [variable]
    cls.add_instance_attribute('m_antennaPortsCount', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_deltaPucchShift [variable]
    cls.add_instance_attribute('m_deltaPucchShift', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_dlBandwidth [variable]
    cls.add_instance_attribute('m_dlBandwidth', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_dlCyclicPrefixLength [variable]
    cls.add_instance_attribute('m_dlCyclicPrefixLength', 'ns3::NormalExtended_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_duplexMode [variable]
    cls.add_instance_attribute('m_duplexMode', 'ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::DuplexMode_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_enable64Qam [variable]
    cls.add_instance_attribute('m_enable64Qam', 'ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::Enable64Qam_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_hoppingMode [variable]
    cls.add_instance_attribute('m_hoppingMode', 'ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::HoppingMode_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_initialNrOfPdcchOfdmSymbols [variable]
    cls.add_instance_attribute('m_initialNrOfPdcchOfdmSymbols', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_macContentionResolutionTimer [variable]
    cls.add_instance_attribute('m_macContentionResolutionTimer', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_maxHarqMsg3Tx [variable]
    cls.add_instance_attribute('m_maxHarqMsg3Tx', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_mbsfnSubframeConfigRfOffset [variable]
    cls.add_instance_attribute('m_mbsfnSubframeConfigRfOffset', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_mbsfnSubframeConfigRfPeriod [variable]
    cls.add_instance_attribute('m_mbsfnSubframeConfigRfPeriod', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_mbsfnSubframeConfigSfAllocation [variable]
    cls.add_instance_attribute('m_mbsfnSubframeConfigSfAllocation', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_n1PucchAn [variable]
    cls.add_instance_attribute('m_n1PucchAn', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_nSb [variable]
    cls.add_instance_attribute('m_nSb', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_ncsAn [variable]
    cls.add_instance_attribute('m_ncsAn', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_nrbCqi [variable]
    cls.add_instance_attribute('m_nrbCqi', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_phichDuration [variable]
    cls.add_instance_attribute('m_phichDuration', 'ns3::NormalExtended_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_phichResource [variable]
    cls.add_instance_attribute('m_phichResource', 'ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::PhichResource_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_prachConfigurationIndex [variable]
    cls.add_instance_attribute('m_prachConfigurationIndex', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_prachFreqOffset [variable]
    cls.add_instance_attribute('m_prachFreqOffset', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_puschHoppingOffset [variable]
    cls.add_instance_attribute('m_puschHoppingOffset', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_raResponseWindowSize [variable]
    cls.add_instance_attribute('m_raResponseWindowSize', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_siConfiguration [variable]
    cls.add_instance_attribute('m_siConfiguration', 'ns3::SiConfiguration_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_specialSubframePatterns [variable]
    cls.add_instance_attribute('m_specialSubframePatterns', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_srsBandwidthConfiguration [variable]
    cls.add_instance_attribute('m_srsBandwidthConfiguration', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_srsMaxUpPts [variable]
    cls.add_instance_attribute('m_srsMaxUpPts', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_srsSubframeConfiguration [variable]
    cls.add_instance_attribute('m_srsSubframeConfiguration', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_srsSubframeOffset [variable]
    cls.add_instance_attribute('m_srsSubframeOffset', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_subframeAssignment [variable]
    cls.add_instance_attribute('m_subframeAssignment', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_ulBandwidth [variable]
    cls.add_instance_attribute('m_ulBandwidth', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_ulCyclicPrefixLength [variable]
    cls.add_instance_attribute('m_ulCyclicPrefixLength', 'ns3::NormalExtended_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedDiscPoolConfigReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedDiscPoolConfigReqParameters::CschedDiscPoolConfigReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedDiscPoolConfigReqParameters::CschedDiscPoolConfigReqParameters(ns3::FfMacCschedSapProvider::CschedDiscPoolConfigReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedDiscPoolConfigReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedDiscPoolConfigReqParameters::m_discTxResourceReq [variable]
    cls.add_instance_attribute('m_discTxResourceReq', 'uint32_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedDiscPoolConfigReqParameters::m_pool [variable]
    cls.add_instance_attribute('m_pool', 'ns3::Ptr< ns3::SidelinkDiscResourcePool >', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedDiscPoolReleaseReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedDiscPoolReleaseReqParameters::CschedDiscPoolReleaseReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedDiscPoolReleaseReqParameters::CschedDiscPoolReleaseReqParameters(ns3::FfMacCschedSapProvider::CschedDiscPoolReleaseReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedDiscPoolReleaseReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedDiscPoolReleaseReqParameters::m_discTxResourceReq [variable]
    cls.add_instance_attribute('m_discTxResourceReq', 'uint32_t', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedLcConfigReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::CschedLcConfigReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::CschedLcConfigReqParameters(ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::m_logicalChannelConfigList [variable]
    cls.add_instance_attribute('m_logicalChannelConfigList', 'std::vector< ns3::LogicalChannelConfigListElement_s >', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::m_reconfigureFlag [variable]
    cls.add_instance_attribute('m_reconfigureFlag', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedLcReleaseReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters::CschedLcReleaseReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters::CschedLcReleaseReqParameters(ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedPoolConfigReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedPoolConfigReqParameters::CschedPoolConfigReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedPoolConfigReqParameters::CschedPoolConfigReqParameters(ns3::FfMacCschedSapProvider::CschedPoolConfigReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedPoolConfigReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedPoolConfigReqParameters::m_group [variable]
    cls.add_instance_attribute('m_group', 'uint32_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedPoolConfigReqParameters::m_pool [variable]
    cls.add_instance_attribute('m_pool', 'ns3::Ptr< ns3::SidelinkCommResourcePool >', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedPoolReleaseReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedPoolReleaseReqParameters::CschedPoolReleaseReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedPoolReleaseReqParameters::CschedPoolReleaseReqParameters(ns3::FfMacCschedSapProvider::CschedPoolReleaseReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedPoolReleaseReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedPoolReleaseReqParameters::m_group [variable]
    cls.add_instance_attribute('m_group', 'uint32_t', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedUeConfigReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::CschedUeConfigReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::CschedUeConfigReqParameters(ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ackNackRepetitionFactor [variable]
    cls.add_instance_attribute('m_ackNackRepetitionFactor', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ackNackSrsSimultaneousTransmission [variable]
    cls.add_instance_attribute('m_ackNackSrsSimultaneousTransmission', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_aperiodicCqiRepMode [variable]
    cls.add_instance_attribute('m_aperiodicCqiRepMode', 'ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::RepMode_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_betaOffsetAckIndex [variable]
    cls.add_instance_attribute('m_betaOffsetAckIndex', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_betaOffsetCqiIndex [variable]
    cls.add_instance_attribute('m_betaOffsetCqiIndex', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_betaOffsetRiIndex [variable]
    cls.add_instance_attribute('m_betaOffsetRiIndex', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_cqiConfig [variable]
    cls.add_instance_attribute('m_cqiConfig', 'ns3::CqiConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_cqiConfigPresent [variable]
    cls.add_instance_attribute('m_cqiConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_drxConfig [variable]
    cls.add_instance_attribute('m_drxConfig', 'ns3::DrxConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_drxConfigPresent [variable]
    cls.add_instance_attribute('m_drxConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_maxHarqTx [variable]
    cls.add_instance_attribute('m_maxHarqTx', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_measGapConfigPattern [variable]
    cls.add_instance_attribute('m_measGapConfigPattern', 'ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::MeasGapConfigPattern_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_measGapConfigSubframeOffset [variable]
    cls.add_instance_attribute('m_measGapConfigSubframeOffset', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_reconfigureFlag [variable]
    cls.add_instance_attribute('m_reconfigureFlag', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_simultaneousAckNackAndCqi [variable]
    cls.add_instance_attribute('m_simultaneousAckNackAndCqi', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_slDestinations [variable]
    cls.add_instance_attribute('m_slDestinations', 'std::vector< unsigned int >', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_spsConfig [variable]
    cls.add_instance_attribute('m_spsConfig', 'ns3::SpsConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_spsConfigPresent [variable]
    cls.add_instance_attribute('m_spsConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_srConfig [variable]
    cls.add_instance_attribute('m_srConfig', 'ns3::SrConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_srConfigPresent [variable]
    cls.add_instance_attribute('m_srConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_tddAckNackFeedbackMode [variable]
    cls.add_instance_attribute('m_tddAckNackFeedbackMode', 'ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::FeedbackMode_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_timeAlignmentTimer [variable]
    cls.add_instance_attribute('m_timeAlignmentTimer', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_transmissionMode [variable]
    cls.add_instance_attribute('m_transmissionMode', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ttiBundling [variable]
    cls.add_instance_attribute('m_ttiBundling', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ueAggregatedMaximumBitrateDl [variable]
    cls.add_instance_attribute('m_ueAggregatedMaximumBitrateDl', 'uint64_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ueAggregatedMaximumBitrateUl [variable]
    cls.add_instance_attribute('m_ueAggregatedMaximumBitrateUl', 'uint64_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ueCapabilities [variable]
    cls.add_instance_attribute('m_ueCapabilities', 'ns3::UeCapabilities_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_ueTransmitAntennaSelection [variable]
    cls.add_instance_attribute('m_ueTransmitAntennaSelection', 'ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::OpenClosedLoop_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapProviderCschedUeReleaseReqParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters::CschedUeReleaseReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters::CschedUeReleaseReqParameters(ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUser_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::FfMacCschedSapUser() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::FfMacCschedSapUser(ns3::FfMacCschedSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapUser::CschedCellConfigCnf(ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters const & params) [member function]
    cls.add_method('CschedCellConfigCnf', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapUser::CschedCellConfigUpdateInd(ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters const & params) [member function]
    cls.add_method('CschedCellConfigUpdateInd', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapUser::CschedLcConfigCnf(ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters const & params) [member function]
    cls.add_method('CschedLcConfigCnf', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapUser::CschedLcReleaseCnf(ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters const & params) [member function]
    cls.add_method('CschedLcReleaseCnf', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapUser::CschedUeConfigCnf(ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters const & params) [member function]
    cls.add_method('CschedUeConfigCnf', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapUser::CschedUeConfigUpdateInd(ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters const & params) [member function]
    cls.add_method('CschedUeConfigUpdateInd', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-csched-sap.h (module 'lte'): void ns3::FfMacCschedSapUser::CschedUeReleaseCnf(ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters const & params) [member function]
    cls.add_method('CschedUeReleaseCnf', 
                   'void', 
                   [param('ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3FfMacCschedSapUserCschedCellConfigCnfParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters::CschedCellConfigCnfParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters::CschedCellConfigCnfParameters(ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters::m_result [variable]
    cls.add_instance_attribute('m_result', 'ns3::Result_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters::CschedCellConfigUpdateIndParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters::CschedCellConfigUpdateIndParameters(ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters::m_prbUtilizationDl [variable]
    cls.add_instance_attribute('m_prbUtilizationDl', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters::m_prbUtilizationUl [variable]
    cls.add_instance_attribute('m_prbUtilizationUl', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedLcConfigCnfParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::CschedLcConfigCnfParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::CschedLcConfigCnfParameters(ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::m_result [variable]
    cls.add_instance_attribute('m_result', 'ns3::Result_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedLcReleaseCnfParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::CschedLcReleaseCnfParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::CschedLcReleaseCnfParameters(ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::m_result [variable]
    cls.add_instance_attribute('m_result', 'ns3::Result_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedUeConfigCnfParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters::CschedUeConfigCnfParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters::CschedUeConfigCnfParameters(ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters::m_result [variable]
    cls.add_instance_attribute('m_result', 'ns3::Result_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::CschedUeConfigUpdateIndParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::CschedUeConfigUpdateIndParameters(ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_cqiConfig [variable]
    cls.add_instance_attribute('m_cqiConfig', 'ns3::CqiConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_cqiConfigPresent [variable]
    cls.add_instance_attribute('m_cqiConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_spsConfig [variable]
    cls.add_instance_attribute('m_spsConfig', 'ns3::SpsConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_spsConfigPresent [variable]
    cls.add_instance_attribute('m_spsConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_srConfig [variable]
    cls.add_instance_attribute('m_srConfig', 'ns3::SrConfig_s', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_srConfigPresent [variable]
    cls.add_instance_attribute('m_srConfigPresent', 'bool', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_transmissionMode [variable]
    cls.add_instance_attribute('m_transmissionMode', 'uint8_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacCschedSapUserCschedUeReleaseCnfParameters_methods(root_module, cls):
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters::CschedUeReleaseCnfParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters::CschedUeReleaseCnfParameters(ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters const &', 'arg0')])
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters::m_result [variable]
    cls.add_instance_attribute('m_result', 'ns3::Result_e', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-csched-sap.h (module 'lte'): ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProvider_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::FfMacSchedSapProvider() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::FfMacSchedSapProvider(ns3::FfMacSchedSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapProvider::SchedDlCqiInfoReq(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params) [member function]
    cls.add_method('SchedDlCqiInfoReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapProvider::SchedDlMacBufferReq(ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters const & params) [member function]
    cls.add_method('SchedDlMacBufferReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapProvider::SchedDlPagingBufferReq(ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters const & params) [member function]
    cls.add_method('SchedDlPagingBufferReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapProvider::SchedDlRachInfoReq(ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters const & params) [member function]
    cls.add_method('SchedDlRachInfoReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapProvider::SchedDlRlcBufferReq(ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters const & params) [member function]
    cls.add_method('SchedDlRlcBufferReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapProvider::SchedDlTriggerReq(ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters const & params) [member function]
    cls.add_method('SchedDlTriggerReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapProvider::SchedUlCqiInfoReq(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params) [member function]
    cls.add_method('SchedUlCqiInfoReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReq(ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters const & params) [member function]
    cls.add_method('SchedUlMacCtrlInfoReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReq(ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters const & params) [member function]
    cls.add_method('SchedUlNoiseInterferenceReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapProvider::SchedUlSrInfoReq(ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters const & params) [member function]
    cls.add_method('SchedUlSrInfoReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapProvider::SchedUlTriggerReq(ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters const & params) [member function]
    cls.add_method('SchedUlTriggerReq', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters::SchedDlCqiInfoReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters::SchedDlCqiInfoReqParameters(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters::m_cqiList [variable]
    cls.add_instance_attribute('m_cqiList', 'std::vector< ns3::CqiListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedDlMacBufferReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters::SchedDlMacBufferReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters::SchedDlMacBufferReqParameters(ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters::m_ceBitmap [variable]
    cls.add_instance_attribute('m_ceBitmap', 'ns3::CeBitmap_e', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters::SchedDlPagingBufferReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters::SchedDlPagingBufferReqParameters(ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters::m_pagingInfoList [variable]
    cls.add_instance_attribute('m_pagingInfoList', 'std::vector< ns3::PagingInfoListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedDlRachInfoReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters::SchedDlRachInfoReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters::SchedDlRachInfoReqParameters(ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters::m_rachList [variable]
    cls.add_instance_attribute('m_rachList', 'std::vector< ns3::RachListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::SchedDlRlcBufferReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::SchedDlRlcBufferReqParameters(ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'uint8_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rlcRetransmissionHolDelay [variable]
    cls.add_instance_attribute('m_rlcRetransmissionHolDelay', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rlcRetransmissionQueueSize [variable]
    cls.add_instance_attribute('m_rlcRetransmissionQueueSize', 'uint32_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rlcStatusPduSize [variable]
    cls.add_instance_attribute('m_rlcStatusPduSize', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rlcTransmissionQueueHolDelay [variable]
    cls.add_instance_attribute('m_rlcTransmissionQueueHolDelay', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rlcTransmissionQueueSize [variable]
    cls.add_instance_attribute('m_rlcTransmissionQueueSize', 'uint32_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedDlTriggerReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters::SchedDlTriggerReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters::SchedDlTriggerReqParameters(ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters::m_dlInfoList [variable]
    cls.add_instance_attribute('m_dlInfoList', 'std::vector< ns3::DlInfoListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters::SchedUlCqiInfoReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters::SchedUlCqiInfoReqParameters(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters::m_ulCqi [variable]
    cls.add_instance_attribute('m_ulCqi', 'ns3::UlCqi_s', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters::SchedUlMacCtrlInfoReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters::SchedUlMacCtrlInfoReqParameters(ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters::m_macCeList [variable]
    cls.add_instance_attribute('m_macCeList', 'std::vector< ns3::MacCeListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::SchedUlNoiseInterferenceReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::SchedUlNoiseInterferenceReqParameters(ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::m_rip [variable]
    cls.add_instance_attribute('m_rip', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::m_tnp [variable]
    cls.add_instance_attribute('m_tnp', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedUlSrInfoReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters::SchedUlSrInfoReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters::SchedUlSrInfoReqParameters(ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters::m_srList [variable]
    cls.add_instance_attribute('m_srList', 'std::vector< ns3::SrListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapProviderSchedUlTriggerReqParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters::SchedUlTriggerReqParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters::SchedUlTriggerReqParameters(ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters::m_sfnSf [variable]
    cls.add_instance_attribute('m_sfnSf', 'uint16_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters::m_ulInfoList [variable]
    cls.add_instance_attribute('m_ulInfoList', 'std::vector< ns3::UlInfoListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapUser_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::FfMacSchedSapUser() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::FfMacSchedSapUser(ns3::FfMacSchedSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapUser const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapUser::SchedDlConfigInd(ns3::FfMacSchedSapUser::SchedDlConfigIndParameters const & params) [member function]
    cls.add_method('SchedDlConfigInd', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser::SchedDlConfigIndParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## ff-mac-sched-sap.h (module 'lte'): void ns3::FfMacSchedSapUser::SchedUlConfigInd(ns3::FfMacSchedSapUser::SchedUlConfigIndParameters const & params) [member function]
    cls.add_method('SchedUlConfigInd', 
                   'void', 
                   [param('ns3::FfMacSchedSapUser::SchedUlConfigIndParameters const &', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3FfMacSchedSapUserSchedDlConfigIndParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::SchedDlConfigIndParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::SchedDlConfigIndParameters(ns3::FfMacSchedSapUser::SchedDlConfigIndParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapUser::SchedDlConfigIndParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::m_buildBroadcastList [variable]
    cls.add_instance_attribute('m_buildBroadcastList', 'std::vector< ns3::BuildBroadcastListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::m_buildDataList [variable]
    cls.add_instance_attribute('m_buildDataList', 'std::vector< ns3::BuildDataListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::m_buildRarList [variable]
    cls.add_instance_attribute('m_buildRarList', 'std::vector< ns3::BuildRarListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::m_nrOfPdcchOfdmSymbols [variable]
    cls.add_instance_attribute('m_nrOfPdcchOfdmSymbols', 'uint8_t', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedDlConfigIndParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3FfMacSchedSapUserSchedUlConfigIndParameters_methods(root_module, cls):
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters::SchedUlConfigIndParameters() [constructor]
    cls.add_constructor([])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters::SchedUlConfigIndParameters(ns3::FfMacSchedSapUser::SchedUlConfigIndParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::FfMacSchedSapUser::SchedUlConfigIndParameters const &', 'arg0')])
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters::m_dciList [variable]
    cls.add_instance_attribute('m_dciList', 'std::vector< ns3::UlDciListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters::m_phichList [variable]
    cls.add_instance_attribute('m_phichList', 'std::vector< ns3::PhichListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters::m_sldciList [variable]
    cls.add_instance_attribute('m_sldciList', 'std::vector< ns3::SlDciListElement_s >', is_const=False)
    ## ff-mac-sched-sap.h (module 'lte'): ns3::FfMacSchedSapUser::SchedUlConfigIndParameters::m_vendorSpecificList [variable]
    cls.add_instance_attribute('m_vendorSpecificList', 'std::vector< ns3::VendorSpecificListElement_s >', is_const=False)
    return

def register_Ns3GbrQosInformation_methods(root_module, cls):
    ## eps-bearer.h (module 'lte'): ns3::GbrQosInformation::GbrQosInformation(ns3::GbrQosInformation const & arg0) [constructor]
    cls.add_constructor([param('ns3::GbrQosInformation const &', 'arg0')])
    ## eps-bearer.h (module 'lte'): ns3::GbrQosInformation::GbrQosInformation() [constructor]
    cls.add_constructor([])
    ## eps-bearer.h (module 'lte'): ns3::GbrQosInformation::gbrDl [variable]
    cls.add_instance_attribute('gbrDl', 'uint64_t', is_const=False)
    ## eps-bearer.h (module 'lte'): ns3::GbrQosInformation::gbrUl [variable]
    cls.add_instance_attribute('gbrUl', 'uint64_t', is_const=False)
    ## eps-bearer.h (module 'lte'): ns3::GbrQosInformation::mbrDl [variable]
    cls.add_instance_attribute('mbrDl', 'uint64_t', is_const=False)
    ## eps-bearer.h (module 'lte'): ns3::GbrQosInformation::mbrUl [variable]
    cls.add_instance_attribute('mbrUl', 'uint64_t', is_const=False)
    return

def register_Ns3HarqProcessInfoElement_t_methods(root_module, cls):
    ## lte-harq-phy.h (module 'lte'): ns3::HarqProcessInfoElement_t::HarqProcessInfoElement_t() [constructor]
    cls.add_constructor([])
    ## lte-harq-phy.h (module 'lte'): ns3::HarqProcessInfoElement_t::HarqProcessInfoElement_t(ns3::HarqProcessInfoElement_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::HarqProcessInfoElement_t const &', 'arg0')])
    ## lte-harq-phy.h (module 'lte'): ns3::HarqProcessInfoElement_t::m_codeBits [variable]
    cls.add_instance_attribute('m_codeBits', 'uint16_t', is_const=False)
    ## lte-harq-phy.h (module 'lte'): ns3::HarqProcessInfoElement_t::m_infoBits [variable]
    cls.add_instance_attribute('m_infoBits', 'uint16_t', is_const=False)
    ## lte-harq-phy.h (module 'lte'): ns3::HarqProcessInfoElement_t::m_mi [variable]
    cls.add_instance_attribute('m_mi', 'double', is_const=False)
    ## lte-harq-phy.h (module 'lte'): ns3::HarqProcessInfoElement_t::m_rv [variable]
    cls.add_instance_attribute('m_rv', 'uint8_t', is_const=False)
    ## lte-harq-phy.h (module 'lte'): ns3::HarqProcessInfoElement_t::m_sinr [variable]
    cls.add_instance_attribute('m_sinr', 'double', is_const=False)
    return

def register_Ns3Hasher_methods(root_module, cls):
    ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hasher const &', 'arg0')])
    ## hash.h (module 'core'): ns3::Hasher::Hasher() [constructor]
    cls.add_constructor([])
    ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Ptr<ns3::Hash::Implementation> hp) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Hash::Implementation >', 'hp')])
    ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')])
    ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(std::string const s) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('std::string const', 's')])
    ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')])
    ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(std::string const s) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('std::string const', 's')])
    ## hash.h (module 'core'): ns3::Hasher & ns3::Hasher::clear() [member function]
    cls.add_method('clear', 
                   'ns3::Hasher &', 
                   [])
    return

def register_Ns3HigherLayerSelected_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::HigherLayerSelected_s::HigherLayerSelected_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::HigherLayerSelected_s::HigherLayerSelected_s(ns3::HigherLayerSelected_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::HigherLayerSelected_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::HigherLayerSelected_s::m_sbCqi [variable]
    cls.add_instance_attribute('m_sbCqi', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::HigherLayerSelected_s::m_sbPmi [variable]
    cls.add_instance_attribute('m_sbPmi', 'uint8_t', is_const=False)
    return

def register_Ns3ImsiLcidPair_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## lte-common.h (module 'lte'): ns3::ImsiLcidPair_t::ImsiLcidPair_t(ns3::ImsiLcidPair_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::ImsiLcidPair_t const &', 'arg0')])
    ## lte-common.h (module 'lte'): ns3::ImsiLcidPair_t::ImsiLcidPair_t() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::ImsiLcidPair_t::ImsiLcidPair_t(uint64_t const a, uint8_t const b) [constructor]
    cls.add_constructor([param('uint64_t const', 'a'), param('uint8_t const', 'b')])
    ## lte-common.h (module 'lte'): ns3::ImsiLcidPair_t::m_imsi [variable]
    cls.add_instance_attribute('m_imsi', 'uint64_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::ImsiLcidPair_t::m_lcId [variable]
    cls.add_instance_attribute('m_lcId', 'uint8_t', is_const=False)
    return

def register_Ns3Inet6SocketAddress_methods(root_module, cls):
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Inet6SocketAddress const & arg0) [constructor]
    cls.add_constructor([param('ns3::Inet6SocketAddress const &', 'arg0')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Ipv6Address ipv6, uint16_t port) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address', 'ipv6'), param('uint16_t', 'port')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Ipv6Address ipv6) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address', 'ipv6')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(uint16_t port) [constructor]
    cls.add_constructor([param('uint16_t', 'port')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(char const * ipv6, uint16_t port) [constructor]
    cls.add_constructor([param('char const *', 'ipv6'), param('uint16_t', 'port')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(char const * ipv6) [constructor]
    cls.add_constructor([param('char const *', 'ipv6')])
    ## inet6-socket-address.h (module 'network'): static ns3::Inet6SocketAddress ns3::Inet6SocketAddress::ConvertFrom(ns3::Address const & addr) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Inet6SocketAddress', 
                   [param('ns3::Address const &', 'addr')], 
                   is_static=True)
    ## inet6-socket-address.h (module 'network'): ns3::Ipv6Address ns3::Inet6SocketAddress::GetIpv6() const [member function]
    cls.add_method('GetIpv6', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_const=True)
    ## inet6-socket-address.h (module 'network'): uint16_t ns3::Inet6SocketAddress::GetPort() const [member function]
    cls.add_method('GetPort', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## inet6-socket-address.h (module 'network'): static bool ns3::Inet6SocketAddress::IsMatchingType(ns3::Address const & addr) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'addr')], 
                   is_static=True)
    ## inet6-socket-address.h (module 'network'): void ns3::Inet6SocketAddress::SetIpv6(ns3::Ipv6Address ipv6) [member function]
    cls.add_method('SetIpv6', 
                   'void', 
                   [param('ns3::Ipv6Address', 'ipv6')])
    ## inet6-socket-address.h (module 'network'): void ns3::Inet6SocketAddress::SetPort(uint16_t port) [member function]
    cls.add_method('SetPort', 
                   'void', 
                   [param('uint16_t', 'port')])
    return

def register_Ns3InetSocketAddress_methods(root_module, cls):
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::InetSocketAddress const & arg0) [constructor]
    cls.add_constructor([param('ns3::InetSocketAddress const &', 'arg0')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::Ipv4Address ipv4, uint16_t port) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address', 'ipv4'), param('uint16_t', 'port')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::Ipv4Address ipv4) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address', 'ipv4')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(uint16_t port) [constructor]
    cls.add_constructor([param('uint16_t', 'port')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(char const * ipv4, uint16_t port) [constructor]
    cls.add_constructor([param('char const *', 'ipv4'), param('uint16_t', 'port')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(char const * ipv4) [constructor]
    cls.add_constructor([param('char const *', 'ipv4')])
    ## inet-socket-address.h (module 'network'): static ns3::InetSocketAddress ns3::InetSocketAddress::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::InetSocketAddress', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## inet-socket-address.h (module 'network'): ns3::Ipv4Address ns3::InetSocketAddress::GetIpv4() const [member function]
    cls.add_method('GetIpv4', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## inet-socket-address.h (module 'network'): uint16_t ns3::InetSocketAddress::GetPort() const [member function]
    cls.add_method('GetPort', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## inet-socket-address.h (module 'network'): uint8_t ns3::InetSocketAddress::GetTos() const [member function]
    cls.add_method('GetTos', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## inet-socket-address.h (module 'network'): static bool ns3::InetSocketAddress::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetIpv4(ns3::Ipv4Address address) [member function]
    cls.add_method('SetIpv4', 
                   'void', 
                   [param('ns3::Ipv4Address', 'address')])
    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetPort(uint16_t port) [member function]
    cls.add_method('SetPort', 
                   'void', 
                   [param('uint16_t', 'port')])
    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetTos(uint8_t tos) [member function]
    cls.add_method('SetTos', 
                   'void', 
                   [param('uint8_t', 'tos')])
    return

def register_Ns3IntToType__0_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<0>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<0>::IntToType(ns3::IntToType<0> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 0 > const &', 'arg0')])
    return

def register_Ns3IntToType__1_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<1>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<1>::IntToType(ns3::IntToType<1> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 1 > const &', 'arg0')])
    return

def register_Ns3IntToType__2_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<2>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<2>::IntToType(ns3::IntToType<2> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 2 > const &', 'arg0')])
    return

def register_Ns3IntToType__3_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<3>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<3>::IntToType(ns3::IntToType<3> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 3 > const &', 'arg0')])
    return

def register_Ns3IntToType__4_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<4>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<4>::IntToType(ns3::IntToType<4> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 4 > const &', 'arg0')])
    return

def register_Ns3IntToType__5_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<5>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<5>::IntToType(ns3::IntToType<5> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 5 > const &', 'arg0')])
    return

def register_Ns3IntToType__6_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<6>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<6>::IntToType(ns3::IntToType<6> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 6 > const &', 'arg0')])
    return

def register_Ns3Ipv4Address_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(uint32_t address) [constructor]
    cls.add_constructor([param('uint32_t', 'address')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(char const * address) [constructor]
    cls.add_constructor([param('char const *', 'address')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4Address::CombineMask(ns3::Ipv4Mask const & mask) const [member function]
    cls.add_method('CombineMask', 
                   'ns3::Ipv4Address', 
                   [param('ns3::Ipv4Mask const &', 'mask')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Ipv4Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::Deserialize(uint8_t const * buf) [member function]
    cls.add_method('Deserialize', 
                   'ns3::Ipv4Address', 
                   [param('uint8_t const *', 'buf')], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Address::Get() const [member function]
    cls.add_method('Get', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetAny() [member function]
    cls.add_method('GetAny', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetBroadcast() [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4Address::GetSubnetDirectedBroadcast(ns3::Ipv4Mask const & mask) const [member function]
    cls.add_method('GetSubnetDirectedBroadcast', 
                   'ns3::Ipv4Address', 
                   [param('ns3::Ipv4Mask const &', 'mask')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsAny() const [member function]
    cls.add_method('IsAny', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsInitialized() const [member function]
    cls.add_method('IsInitialized', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsLocalMulticast() const [member function]
    cls.add_method('IsLocalMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsLocalhost() const [member function]
    cls.add_method('IsLocalhost', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static bool ns3::Ipv4Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsSubnetDirectedBroadcast(ns3::Ipv4Mask const & mask) const [member function]
    cls.add_method('IsSubnetDirectedBroadcast', 
                   'bool', 
                   [param('ns3::Ipv4Mask const &', 'mask')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Serialize(uint8_t * buf) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Set(uint32_t address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint32_t', 'address')])
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Set(char const * address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('char const *', 'address')])
    return

def register_Ns3Ipv4AddressHash_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash::Ipv4AddressHash() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash::Ipv4AddressHash(ns3::Ipv4AddressHash const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4AddressHash const &', 'arg0')])
    ## ipv4-address.h (module 'network'): size_t ns3::Ipv4AddressHash::operator()(ns3::Ipv4Address const & x) const [member operator]
    cls.add_method('operator()', 
                   'size_t', 
                   [param('ns3::Ipv4Address const &', 'x')], 
                   custom_name='__call__', is_const=True)
    return

def register_Ns3Ipv4Mask_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4Mask const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(uint32_t mask) [constructor]
    cls.add_constructor([param('uint32_t', 'mask')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(char const * mask) [constructor]
    cls.add_constructor([param('char const *', 'mask')])
    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Mask::Get() const [member function]
    cls.add_method('Get', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Mask::GetInverse() const [member function]
    cls.add_method('GetInverse', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetOnes() [member function]
    cls.add_method('GetOnes', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): uint16_t ns3::Ipv4Mask::GetPrefixLength() const [member function]
    cls.add_method('GetPrefixLength', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Mask::IsMatch(ns3::Ipv4Address a, ns3::Ipv4Address b) const [member function]
    cls.add_method('IsMatch', 
                   'bool', 
                   [param('ns3::Ipv4Address', 'a'), param('ns3::Ipv4Address', 'b')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Mask::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Mask::Set(uint32_t mask) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint32_t', 'mask')])
    return

def register_Ns3Ipv6Address_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(char const * address) [constructor]
    cls.add_constructor([param('char const *', 'address')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(uint8_t * address) [constructor]
    cls.add_constructor([param('uint8_t *', 'address')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address const &', 'addr')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const * addr) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address const *', 'addr')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
    cls.add_method('CombinePrefix', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Ipv6Prefix const &', 'prefix')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::Deserialize(uint8_t const * buf) [member function]
    cls.add_method('Deserialize', 
                   'ns3::Ipv6Address', 
                   [param('uint8_t const *', 'buf')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllHostsMulticast() [member function]
    cls.add_method('GetAllHostsMulticast', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllNodesMulticast() [member function]
    cls.add_method('GetAllNodesMulticast', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllRoutersMulticast() [member function]
    cls.add_method('GetAllRoutersMulticast', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAny() [member function]
    cls.add_method('GetAny', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::GetBytes(uint8_t * buf) const [member function]
    cls.add_method('GetBytes', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv6Address::GetIpv4MappedAddress() const [member function]
    cls.add_method('GetIpv4MappedAddress', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetOnes() [member function]
    cls.add_method('GetOnes', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
    cls.add_method('HasPrefix', 
                   'bool', 
                   [param('ns3::Ipv6Prefix const &', 'prefix')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAllNodesMulticast() const [member function]
    cls.add_method('IsAllNodesMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAllRoutersMulticast() const [member function]
    cls.add_method('IsAllRoutersMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAny() const [member function]
    cls.add_method('IsAny', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsDocumentation() const [member function]
    cls.add_method('IsDocumentation', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsInitialized() const [member function]
    cls.add_method('IsInitialized', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsIpv4MappedAddress() const [member function]
    cls.add_method('IsIpv4MappedAddress', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLinkLocal() const [member function]
    cls.add_method('IsLinkLocal', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLinkLocalMulticast() const [member function]
    cls.add_method('IsLinkLocalMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLocalhost() const [member function]
    cls.add_method('IsLocalhost', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static bool ns3::Ipv6Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsSolicitedMulticast() const [member function]
    cls.add_method('IsSolicitedMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Prefix prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Address', 'addr'), param('ns3::Ipv6Prefix', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac16Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac16Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac48Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac48Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac64Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac64Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac8Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac8Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac16Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac16Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac48Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac48Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac64Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac64Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac8Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac8Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeIpv4MappedAddress(ns3::Ipv4Address addr) [member function]
    cls.add_method('MakeIpv4MappedAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Ipv4Address', 'addr')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeSolicitedAddress(ns3::Ipv6Address addr) [member function]
    cls.add_method('MakeSolicitedAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Ipv6Address', 'addr')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Serialize(uint8_t * buf) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Set(char const * address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('char const *', 'address')])
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Set(uint8_t * address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint8_t *', 'address')])
    return

def register_Ns3Ipv6AddressHash_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash::Ipv6AddressHash() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash::Ipv6AddressHash(ns3::Ipv6AddressHash const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv6AddressHash const &', 'arg0')])
    ## ipv6-address.h (module 'network'): size_t ns3::Ipv6AddressHash::operator()(ns3::Ipv6Address const & x) const [member operator]
    cls.add_method('operator()', 
                   'size_t', 
                   [param('ns3::Ipv6Address const &', 'x')], 
                   custom_name='__call__', is_const=True)
    return

def register_Ns3Ipv6Prefix_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix) [constructor]
    cls.add_constructor([param('uint8_t *', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix) [constructor]
    cls.add_constructor([param('char const *', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
    cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
    cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t prefix) [constructor]
    cls.add_constructor([param('uint8_t', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [constructor]
    cls.add_constructor([param('ns3::Ipv6Prefix const &', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const * prefix) [constructor]
    cls.add_constructor([param('ns3::Ipv6Prefix const *', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Prefix::ConvertToIpv6Address() const [member function]
    cls.add_method('ConvertToIpv6Address', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::GetBytes(uint8_t * buf) const [member function]
    cls.add_method('GetBytes', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
    cls.add_method('GetMinimumPrefixLength', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetOnes() [member function]
    cls.add_method('GetOnes', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetPrefixLength() const [member function]
    cls.add_method('GetPrefixLength', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Prefix::IsMatch(ns3::Ipv6Address a, ns3::Ipv6Address b) const [member function]
    cls.add_method('IsMatch', 
                   'bool', 
                   [param('ns3::Ipv6Address', 'a'), param('ns3::Ipv6Address', 'b')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
    cls.add_method('SetPrefixLength', 
                   'void', 
                   [param('uint8_t', 'prefixLength')])
    return

def register_Ns3LogComponent_methods(root_module, cls):
    ## log.h (module 'core'): ns3::LogComponent::LogComponent(ns3::LogComponent const & arg0) [constructor]
    cls.add_constructor([param('ns3::LogComponent const &', 'arg0')])
    ## log.h (module 'core'): ns3::LogComponent::LogComponent(std::string const & name, std::string const & file, ns3::LogLevel const mask=::ns3::LogLevel::LOG_NONE) [constructor]
    cls.add_constructor([param('std::string const &', 'name'), param('std::string const &', 'file'), param('ns3::LogLevel const', 'mask', default_value='::ns3::LogLevel::LOG_NONE')])
    ## log.h (module 'core'): void ns3::LogComponent::Disable(ns3::LogLevel const level) [member function]
    cls.add_method('Disable', 
                   'void', 
                   [param('ns3::LogLevel const', 'level')])
    ## log.h (module 'core'): void ns3::LogComponent::Enable(ns3::LogLevel const level) [member function]
    cls.add_method('Enable', 
                   'void', 
                   [param('ns3::LogLevel const', 'level')])
    ## log.h (module 'core'): std::string ns3::LogComponent::File() const [member function]
    cls.add_method('File', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## log.h (module 'core'): static ns3::LogComponent::ComponentList * ns3::LogComponent::GetComponentList() [member function]
    cls.add_method('GetComponentList', 
                   'ns3::LogComponent::ComponentList *', 
                   [], 
                   is_static=True)
    ## log.h (module 'core'): static std::string ns3::LogComponent::GetLevelLabel(ns3::LogLevel const level) [member function]
    cls.add_method('GetLevelLabel', 
                   'std::string', 
                   [param('ns3::LogLevel const', 'level')], 
                   is_static=True)
    ## log.h (module 'core'): bool ns3::LogComponent::IsEnabled(ns3::LogLevel const level) const [member function]
    cls.add_method('IsEnabled', 
                   'bool', 
                   [param('ns3::LogLevel const', 'level')], 
                   is_const=True)
    ## log.h (module 'core'): bool ns3::LogComponent::IsNoneEnabled() const [member function]
    cls.add_method('IsNoneEnabled', 
                   'bool', 
                   [], 
                   is_const=True)
    ## log.h (module 'core'): char const * ns3::LogComponent::Name() const [member function]
    cls.add_method('Name', 
                   'char const *', 
                   [], 
                   is_const=True)
    ## log.h (module 'core'): void ns3::LogComponent::SetMask(ns3::LogLevel const level) [member function]
    cls.add_method('SetMask', 
                   'void', 
                   [param('ns3::LogLevel const', 'level')])
    return

def register_Ns3LogicalChannelConfigListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::LogicalChannelConfigListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::LogicalChannelConfigListElement_s(ns3::LogicalChannelConfigListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::LogicalChannelConfigListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::m_direction [variable]
    cls.add_instance_attribute('m_direction', 'ns3::LogicalChannelConfigListElement_s::Direction_e', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::m_eRabGuaranteedBitrateDl [variable]
    cls.add_instance_attribute('m_eRabGuaranteedBitrateDl', 'uint64_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::m_eRabGuaranteedBitrateUl [variable]
    cls.add_instance_attribute('m_eRabGuaranteedBitrateUl', 'uint64_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::m_eRabMaximulBitrateDl [variable]
    cls.add_instance_attribute('m_eRabMaximulBitrateDl', 'uint64_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::m_eRabMaximulBitrateUl [variable]
    cls.add_instance_attribute('m_eRabMaximulBitrateUl', 'uint64_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::m_logicalChannelGroup [variable]
    cls.add_instance_attribute('m_logicalChannelGroup', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::m_qci [variable]
    cls.add_instance_attribute('m_qci', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::LogicalChannelConfigListElement_s::m_qosBearerType [variable]
    cls.add_instance_attribute('m_qosBearerType', 'ns3::LogicalChannelConfigListElement_s::QosBearerType_e', is_const=False)
    return

def register_Ns3LteAnrSapProvider_methods(root_module, cls):
    ## lte-anr-sap.h (module 'lte'): ns3::LteAnrSapProvider::LteAnrSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-anr-sap.h (module 'lte'): ns3::LteAnrSapProvider::LteAnrSapProvider(ns3::LteAnrSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteAnrSapProvider const &', 'arg0')])
    ## lte-anr-sap.h (module 'lte'): void ns3::LteAnrSapProvider::AddNeighbourRelation(uint16_t cellId) [member function]
    cls.add_method('AddNeighbourRelation', 
                   'void', 
                   [param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-anr-sap.h (module 'lte'): bool ns3::LteAnrSapProvider::GetNoHo(uint16_t cellId) const [member function]
    cls.add_method('GetNoHo', 
                   'bool', 
                   [param('uint16_t', 'cellId')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## lte-anr-sap.h (module 'lte'): bool ns3::LteAnrSapProvider::GetNoRemove(uint16_t cellId) const [member function]
    cls.add_method('GetNoRemove', 
                   'bool', 
                   [param('uint16_t', 'cellId')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## lte-anr-sap.h (module 'lte'): bool ns3::LteAnrSapProvider::GetNoX2(uint16_t cellId) const [member function]
    cls.add_method('GetNoX2', 
                   'bool', 
                   [param('uint16_t', 'cellId')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## lte-anr-sap.h (module 'lte'): void ns3::LteAnrSapProvider::ReportUeMeas(ns3::LteRrcSap::MeasResults measResults) [member function]
    cls.add_method('ReportUeMeas', 
                   'void', 
                   [param('ns3::LteRrcSap::MeasResults', 'measResults')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteAnrSapUser_methods(root_module, cls):
    ## lte-anr-sap.h (module 'lte'): ns3::LteAnrSapUser::LteAnrSapUser() [constructor]
    cls.add_constructor([])
    ## lte-anr-sap.h (module 'lte'): ns3::LteAnrSapUser::LteAnrSapUser(ns3::LteAnrSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteAnrSapUser const &', 'arg0')])
    ## lte-anr-sap.h (module 'lte'): uint8_t ns3::LteAnrSapUser::AddUeMeasReportConfigForAnr(ns3::LteRrcSap::ReportConfigEutra reportConfig) [member function]
    cls.add_method('AddUeMeasReportConfigForAnr', 
                   'uint8_t', 
                   [param('ns3::LteRrcSap::ReportConfigEutra', 'reportConfig')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteAsSapProvider_methods(root_module, cls):
    ## lte-as-sap.h (module 'lte'): ns3::LteAsSapProvider::LteAsSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-as-sap.h (module 'lte'): ns3::LteAsSapProvider::LteAsSapProvider(ns3::LteAsSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteAsSapProvider const &', 'arg0')])
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapProvider::ActivateSidelinkRadioBearer(uint32_t group, bool tx, bool rx) [member function]
    cls.add_method('ActivateSidelinkRadioBearer', 
                   'void', 
                   [param('uint32_t', 'group'), param('bool', 'tx'), param('bool', 'rx')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapProvider::Connect() [member function]
    cls.add_method('Connect', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapProvider::DeactivateSidelinkRadioBearer(uint32_t group) [member function]
    cls.add_method('DeactivateSidelinkRadioBearer', 
                   'void', 
                   [param('uint32_t', 'group')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapProvider::Disconnect() [member function]
    cls.add_method('Disconnect', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapProvider::ForceCampedOnEnb(uint16_t cellId, uint32_t dlEarfcn) [member function]
    cls.add_method('ForceCampedOnEnb', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint32_t', 'dlEarfcn')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapProvider::SendData(ns3::Ptr<ns3::Packet> packet, uint8_t bid) [member function]
    cls.add_method('SendData', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'bid')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapProvider::SendDataToGroup(ns3::Ptr<ns3::Packet> packet, uint32_t group) [member function]
    cls.add_method('SendDataToGroup', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint32_t', 'group')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapProvider::SetCsgWhiteList(uint32_t csgId) [member function]
    cls.add_method('SetCsgWhiteList', 
                   'void', 
                   [param('uint32_t', 'csgId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapProvider::StartCellSelection(uint32_t dlEarfcn) [member function]
    cls.add_method('StartCellSelection', 
                   'void', 
                   [param('uint32_t', 'dlEarfcn')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteAsSapUser_methods(root_module, cls):
    ## lte-as-sap.h (module 'lte'): ns3::LteAsSapUser::LteAsSapUser() [constructor]
    cls.add_constructor([])
    ## lte-as-sap.h (module 'lte'): ns3::LteAsSapUser::LteAsSapUser(ns3::LteAsSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteAsSapUser const &', 'arg0')])
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapUser::NotifyConnectionFailed() [member function]
    cls.add_method('NotifyConnectionFailed', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapUser::NotifyConnectionReleased() [member function]
    cls.add_method('NotifyConnectionReleased', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapUser::NotifyConnectionSuccessful() [member function]
    cls.add_method('NotifyConnectionSuccessful', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapUser::NotifySidelinkRadioBearerActivated(uint32_t group) [member function]
    cls.add_method('NotifySidelinkRadioBearerActivated', 
                   'void', 
                   [param('uint32_t', 'group')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-as-sap.h (module 'lte'): void ns3::LteAsSapUser::RecvData(ns3::Ptr<ns3::Packet> packet) [member function]
    cls.add_method('RecvData', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteCcmMacSapProvider_methods(root_module, cls):
    ## lte-ccm-mac-sap.h (module 'lte'): ns3::LteCcmMacSapProvider::LteCcmMacSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-ccm-mac-sap.h (module 'lte'): ns3::LteCcmMacSapProvider::LteCcmMacSapProvider(ns3::LteCcmMacSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteCcmMacSapProvider const &', 'arg0')])
    ## lte-ccm-mac-sap.h (module 'lte'): void ns3::LteCcmMacSapProvider::ReportMacCeToScheduler(ns3::MacCeListElement_s bsr) [member function]
    cls.add_method('ReportMacCeToScheduler', 
                   'void', 
                   [param('ns3::MacCeListElement_s', 'bsr')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-mac-sap.h (module 'lte'): void ns3::LteCcmMacSapProvider::ReportSrToScheduler(uint16_t rnti) [member function]
    cls.add_method('ReportSrToScheduler', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteCcmRrcSapProvider_methods(root_module, cls):
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapProvider::LteCcmRrcSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapProvider::LteCcmRrcSapProvider(ns3::LteCcmRrcSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteCcmRrcSapProvider const &', 'arg0')])
    ## lte-ccm-rrc-sap.h (module 'lte'): void ns3::LteCcmRrcSapProvider::AddLc(ns3::LteEnbCmacSapProvider::LcInfo lcInfo, ns3::LteMacSapUser * msu) [member function]
    cls.add_method('AddLc', 
                   'void', 
                   [param('ns3::LteEnbCmacSapProvider::LcInfo', 'lcInfo'), param('ns3::LteMacSapUser *', 'msu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-rrc-sap.h (module 'lte'): void ns3::LteCcmRrcSapProvider::AddUe(uint16_t rnti, uint8_t state) [member function]
    cls.add_method('AddUe', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'state')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteMacSapUser * ns3::LteCcmRrcSapProvider::ConfigureSignalBearer(ns3::LteEnbCmacSapProvider::LcInfo lcInfo, ns3::LteMacSapUser * rlcMacSapUser) [member function]
    cls.add_method('ConfigureSignalBearer', 
                   'ns3::LteMacSapUser *', 
                   [param('ns3::LteEnbCmacSapProvider::LcInfo', 'lcInfo'), param('ns3::LteMacSapUser *', 'rlcMacSapUser')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-rrc-sap.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::LteCcmRrcSapProvider::ReleaseDataRadioBearer(uint16_t rnti, uint8_t lcid) [member function]
    cls.add_method('ReleaseDataRadioBearer', 
                   'std::vector< unsigned char >', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'lcid')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-rrc-sap.h (module 'lte'): void ns3::LteCcmRrcSapProvider::RemoveUe(uint16_t rnti) [member function]
    cls.add_method('RemoveUe', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-rrc-sap.h (module 'lte'): void ns3::LteCcmRrcSapProvider::ReportUeMeas(uint16_t rnti, ns3::LteRrcSap::MeasResults measResults) [member function]
    cls.add_method('ReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::MeasResults', 'measResults')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-rrc-sap.h (module 'lte'): std::vector<ns3::LteCcmRrcSapProvider::LcsConfig, std::allocator<ns3::LteCcmRrcSapProvider::LcsConfig>> ns3::LteCcmRrcSapProvider::SetupDataRadioBearer(ns3::EpsBearer bearer, uint8_t bearerId, uint16_t rnti, uint8_t lcid, uint8_t lcGroup, ns3::LteMacSapUser * msu) [member function]
    cls.add_method('SetupDataRadioBearer', 
                   'std::vector< ns3::LteCcmRrcSapProvider::LcsConfig >', 
                   [param('ns3::EpsBearer', 'bearer'), param('uint8_t', 'bearerId'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid'), param('uint8_t', 'lcGroup'), param('ns3::LteMacSapUser *', 'msu')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteCcmRrcSapProviderLcsConfig_methods(root_module, cls):
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapProvider::LcsConfig::LcsConfig() [constructor]
    cls.add_constructor([])
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapProvider::LcsConfig::LcsConfig(ns3::LteCcmRrcSapProvider::LcsConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteCcmRrcSapProvider::LcsConfig const &', 'arg0')])
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapProvider::LcsConfig::componentCarrierId [variable]
    cls.add_instance_attribute('componentCarrierId', 'uint16_t', is_const=False)
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapProvider::LcsConfig::lc [variable]
    cls.add_instance_attribute('lc', 'ns3::LteEnbCmacSapProvider::LcInfo', is_const=False)
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapProvider::LcsConfig::msu [variable]
    cls.add_instance_attribute('msu', 'ns3::LteMacSapUser *', is_const=False)
    return

def register_Ns3LteCcmRrcSapUser_methods(root_module, cls):
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapUser::LteCcmRrcSapUser() [constructor]
    cls.add_constructor([])
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::LteCcmRrcSapUser::LteCcmRrcSapUser(ns3::LteCcmRrcSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteCcmRrcSapUser const &', 'arg0')])
    ## lte-ccm-rrc-sap.h (module 'lte'): void ns3::LteCcmRrcSapUser::AddLcs(std::vector<ns3::LteRrcSap::LogicalChannelConfig, std::allocator<ns3::LteRrcSap::LogicalChannelConfig>> lcConfig) [member function]
    cls.add_method('AddLcs', 
                   'void', 
                   [param('std::vector< ns3::LteRrcSap::LogicalChannelConfig >', 'lcConfig')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-rrc-sap.h (module 'lte'): uint8_t ns3::LteCcmRrcSapUser::AddUeMeasReportConfigForComponentCarrier(ns3::LteRrcSap::ReportConfigEutra reportConfig) [member function]
    cls.add_method('AddUeMeasReportConfigForComponentCarrier', 
                   'uint8_t', 
                   [param('ns3::LteRrcSap::ReportConfigEutra', 'reportConfig')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-rrc-sap.h (module 'lte'): ns3::Ptr<ns3::UeManager> ns3::LteCcmRrcSapUser::GetUeManager(uint16_t rnti) [member function]
    cls.add_method('GetUeManager', 
                   'ns3::Ptr< ns3::UeManager >', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-rrc-sap.h (module 'lte'): void ns3::LteCcmRrcSapUser::ReleaseLcs(uint16_t rnti, uint8_t lcid) [member function]
    cls.add_method('ReleaseLcs', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'lcid')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-rrc-sap.h (module 'lte'): void ns3::LteCcmRrcSapUser::SetNumberOfComponentCarriers(uint16_t noOfComponentCarriers) [member function]
    cls.add_method('SetNumberOfComponentCarriers', 
                   'void', 
                   [param('uint16_t', 'noOfComponentCarriers')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-rrc-sap.h (module 'lte'): void ns3::LteCcmRrcSapUser::TriggerComponentCarrier(uint16_t rnti, uint16_t targetCellId) [member function]
    cls.add_method('TriggerComponentCarrier', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint16_t', 'targetCellId')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteEnbCmacSapProvider_methods(root_module, cls):
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LteEnbCmacSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LteEnbCmacSapProvider(ns3::LteEnbCmacSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbCmacSapProvider const &', 'arg0')])
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapProvider::AddLc(ns3::LteEnbCmacSapProvider::LcInfo lcinfo, ns3::LteMacSapUser * msu) [member function]
    cls.add_method('AddLc', 
                   'void', 
                   [param('ns3::LteEnbCmacSapProvider::LcInfo', 'lcinfo'), param('ns3::LteMacSapUser *', 'msu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapProvider::AddPool(uint32_t group, ns3::Ptr<ns3::SidelinkCommResourcePool> pool) [member function]
    cls.add_method('AddPool', 
                   'void', 
                   [param('uint32_t', 'group'), param('ns3::Ptr< ns3::SidelinkCommResourcePool >', 'pool')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapProvider::AddPool(uint8_t resReq, ns3::Ptr<ns3::SidelinkDiscResourcePool> pool) [member function]
    cls.add_method('AddPool', 
                   'void', 
                   [param('uint8_t', 'resReq'), param('ns3::Ptr< ns3::SidelinkDiscResourcePool >', 'pool')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapProvider::AddUe(uint16_t rnti) [member function]
    cls.add_method('AddUe', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue ns3::LteEnbCmacSapProvider::AllocateNcRaPreamble(uint16_t rnti) [member function]
    cls.add_method('AllocateNcRaPreamble', 
                   'ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapProvider::ConfigureMac(uint16_t ulBandwidth, uint16_t dlBandwidth) [member function]
    cls.add_method('ConfigureMac', 
                   'void', 
                   [param('uint16_t', 'ulBandwidth'), param('uint16_t', 'dlBandwidth')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::RachConfig ns3::LteEnbCmacSapProvider::GetRachConfig() [member function]
    cls.add_method('GetRachConfig', 
                   'ns3::LteEnbCmacSapProvider::RachConfig', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapProvider::ReconfigureLc(ns3::LteEnbCmacSapProvider::LcInfo lcinfo) [member function]
    cls.add_method('ReconfigureLc', 
                   'void', 
                   [param('ns3::LteEnbCmacSapProvider::LcInfo', 'lcinfo')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapProvider::ReleaseLc(uint16_t rnti, uint8_t lcid) [member function]
    cls.add_method('ReleaseLc', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'lcid')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapProvider::RemoveDiscPool(uint8_t resReq) [member function]
    cls.add_method('RemoveDiscPool', 
                   'void', 
                   [param('uint8_t', 'resReq')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapProvider::RemovePool(uint32_t group) [member function]
    cls.add_method('RemovePool', 
                   'void', 
                   [param('uint32_t', 'group')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapProvider::RemoveUe(uint16_t rnti) [member function]
    cls.add_method('RemoveUe', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapProvider::UeUpdateConfigurationReq(ns3::LteEnbCmacSapProvider::UeConfig params) [member function]
    cls.add_method('UeUpdateConfigurationReq', 
                   'void', 
                   [param('ns3::LteEnbCmacSapProvider::UeConfig', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue_methods(root_module, cls):
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue::AllocateNcRaPreambleReturnValue() [constructor]
    cls.add_constructor([])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue::AllocateNcRaPreambleReturnValue(ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue const &', 'arg0')])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue::raPrachMaskIndex [variable]
    cls.add_instance_attribute('raPrachMaskIndex', 'uint8_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue::raPreambleId [variable]
    cls.add_instance_attribute('raPreambleId', 'uint8_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue::valid [variable]
    cls.add_instance_attribute('valid', 'bool', is_const=False)
    return

def register_Ns3LteEnbCmacSapProviderLcInfo_methods(root_module, cls):
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo::LcInfo() [constructor]
    cls.add_constructor([])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo::LcInfo(ns3::LteEnbCmacSapProvider::LcInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbCmacSapProvider::LcInfo const &', 'arg0')])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo::gbrDl [variable]
    cls.add_instance_attribute('gbrDl', 'uint64_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo::gbrUl [variable]
    cls.add_instance_attribute('gbrUl', 'uint64_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo::isGbr [variable]
    cls.add_instance_attribute('isGbr', 'bool', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo::lcGroup [variable]
    cls.add_instance_attribute('lcGroup', 'uint8_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo::lcId [variable]
    cls.add_instance_attribute('lcId', 'uint8_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo::mbrDl [variable]
    cls.add_instance_attribute('mbrDl', 'uint64_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo::mbrUl [variable]
    cls.add_instance_attribute('mbrUl', 'uint64_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo::qci [variable]
    cls.add_instance_attribute('qci', 'uint8_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::LcInfo::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    return

def register_Ns3LteEnbCmacSapProviderRachConfig_methods(root_module, cls):
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::RachConfig::RachConfig() [constructor]
    cls.add_constructor([])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::RachConfig::RachConfig(ns3::LteEnbCmacSapProvider::RachConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbCmacSapProvider::RachConfig const &', 'arg0')])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::RachConfig::connEstFailCount [variable]
    cls.add_instance_attribute('connEstFailCount', 'uint8_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::RachConfig::numberOfRaPreambles [variable]
    cls.add_instance_attribute('numberOfRaPreambles', 'uint8_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::RachConfig::preambleTransMax [variable]
    cls.add_instance_attribute('preambleTransMax', 'uint8_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::RachConfig::raResponseWindowSize [variable]
    cls.add_instance_attribute('raResponseWindowSize', 'uint8_t', is_const=False)
    return

def register_Ns3LteEnbCmacSapProviderUeConfig_methods(root_module, cls):
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::UeConfig::UeConfig() [constructor]
    cls.add_constructor([])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::UeConfig::UeConfig(ns3::LteEnbCmacSapProvider::UeConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbCmacSapProvider::UeConfig const &', 'arg0')])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::UeConfig::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::UeConfig::m_slDestinations [variable]
    cls.add_instance_attribute('m_slDestinations', 'std::vector< unsigned int >', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapProvider::UeConfig::m_transmissionMode [variable]
    cls.add_instance_attribute('m_transmissionMode', 'uint8_t', is_const=False)
    return

def register_Ns3LteEnbCmacSapUser_methods(root_module, cls):
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapUser::LteEnbCmacSapUser() [constructor]
    cls.add_constructor([])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapUser::LteEnbCmacSapUser(ns3::LteEnbCmacSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbCmacSapUser const &', 'arg0')])
    ## lte-enb-cmac-sap.h (module 'lte'): uint16_t ns3::LteEnbCmacSapUser::AllocateTemporaryCellRnti() [member function]
    cls.add_method('AllocateTemporaryCellRnti', 
                   'uint16_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): bool ns3::LteEnbCmacSapUser::IsRandomAccessCompleted(uint16_t rnti) [member function]
    cls.add_method('IsRandomAccessCompleted', 
                   'bool', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapUser::NotifyLcConfigResult(uint16_t rnti, uint8_t lcid, bool success) [member function]
    cls.add_method('NotifyLcConfigResult', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'lcid'), param('bool', 'success')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cmac-sap.h (module 'lte'): void ns3::LteEnbCmacSapUser::RrcConfigurationUpdateInd(ns3::LteEnbCmacSapUser::UeConfig params) [member function]
    cls.add_method('RrcConfigurationUpdateInd', 
                   'void', 
                   [param('ns3::LteEnbCmacSapUser::UeConfig', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteEnbCmacSapUserUeConfig_methods(root_module, cls):
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapUser::UeConfig::UeConfig() [constructor]
    cls.add_constructor([])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapUser::UeConfig::UeConfig(ns3::LteEnbCmacSapUser::UeConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbCmacSapUser::UeConfig const &', 'arg0')])
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapUser::UeConfig::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## lte-enb-cmac-sap.h (module 'lte'): ns3::LteEnbCmacSapUser::UeConfig::m_transmissionMode [variable]
    cls.add_instance_attribute('m_transmissionMode', 'uint8_t', is_const=False)
    return

def register_Ns3LteEnbCphySapProvider_methods(root_module, cls):
    ## lte-enb-cphy-sap.h (module 'lte'): ns3::LteEnbCphySapProvider::LteEnbCphySapProvider() [constructor]
    cls.add_constructor([])
    ## lte-enb-cphy-sap.h (module 'lte'): ns3::LteEnbCphySapProvider::LteEnbCphySapProvider(ns3::LteEnbCphySapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbCphySapProvider const &', 'arg0')])
    ## lte-enb-cphy-sap.h (module 'lte'): void ns3::LteEnbCphySapProvider::AddUe(uint16_t rnti) [member function]
    cls.add_method('AddUe', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cphy-sap.h (module 'lte'): int8_t ns3::LteEnbCphySapProvider::GetReferenceSignalPower() [member function]
    cls.add_method('GetReferenceSignalPower', 
                   'int8_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cphy-sap.h (module 'lte'): void ns3::LteEnbCphySapProvider::RemoveUe(uint16_t rnti) [member function]
    cls.add_method('RemoveUe', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cphy-sap.h (module 'lte'): void ns3::LteEnbCphySapProvider::SetBandwidth(uint16_t ulBandwidth, uint16_t dlBandwidth) [member function]
    cls.add_method('SetBandwidth', 
                   'void', 
                   [param('uint16_t', 'ulBandwidth'), param('uint16_t', 'dlBandwidth')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cphy-sap.h (module 'lte'): void ns3::LteEnbCphySapProvider::SetCellId(uint16_t cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cphy-sap.h (module 'lte'): void ns3::LteEnbCphySapProvider::SetEarfcn(uint32_t ulEarfcn, uint32_t dlEarfcn) [member function]
    cls.add_method('SetEarfcn', 
                   'void', 
                   [param('uint32_t', 'ulEarfcn'), param('uint32_t', 'dlEarfcn')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cphy-sap.h (module 'lte'): void ns3::LteEnbCphySapProvider::SetMasterInformationBlock(ns3::LteRrcSap::MasterInformationBlock mib) [member function]
    cls.add_method('SetMasterInformationBlock', 
                   'void', 
                   [param('ns3::LteRrcSap::MasterInformationBlock', 'mib')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cphy-sap.h (module 'lte'): void ns3::LteEnbCphySapProvider::SetPa(uint16_t rnti, double pa) [member function]
    cls.add_method('SetPa', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('double', 'pa')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cphy-sap.h (module 'lte'): void ns3::LteEnbCphySapProvider::SetSrsConfigurationIndex(uint16_t rnti, uint16_t srsCi) [member function]
    cls.add_method('SetSrsConfigurationIndex', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint16_t', 'srsCi')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cphy-sap.h (module 'lte'): void ns3::LteEnbCphySapProvider::SetSystemInformationBlockType1(ns3::LteRrcSap::SystemInformationBlockType1 sib1) [member function]
    cls.add_method('SetSystemInformationBlockType1', 
                   'void', 
                   [param('ns3::LteRrcSap::SystemInformationBlockType1', 'sib1')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-cphy-sap.h (module 'lte'): void ns3::LteEnbCphySapProvider::SetTransmissionMode(uint16_t rnti, uint8_t txMode) [member function]
    cls.add_method('SetTransmissionMode', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'txMode')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteEnbCphySapUser_methods(root_module, cls):
    ## lte-enb-cphy-sap.h (module 'lte'): ns3::LteEnbCphySapUser::LteEnbCphySapUser() [constructor]
    cls.add_constructor([])
    ## lte-enb-cphy-sap.h (module 'lte'): ns3::LteEnbCphySapUser::LteEnbCphySapUser(ns3::LteEnbCphySapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbCphySapUser const &', 'arg0')])
    return

def register_Ns3LteEnbPhySapProvider_methods(root_module, cls):
    ## lte-enb-phy-sap.h (module 'lte'): ns3::LteEnbPhySapProvider::LteEnbPhySapProvider() [constructor]
    cls.add_constructor([])
    ## lte-enb-phy-sap.h (module 'lte'): ns3::LteEnbPhySapProvider::LteEnbPhySapProvider(ns3::LteEnbPhySapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbPhySapProvider const &', 'arg0')])
    ## lte-enb-phy-sap.h (module 'lte'): uint8_t ns3::LteEnbPhySapProvider::GetMacChTtiDelay() [member function]
    cls.add_method('GetMacChTtiDelay', 
                   'uint8_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-phy-sap.h (module 'lte'): void ns3::LteEnbPhySapProvider::SendLteControlMessage(ns3::Ptr<ns3::LteControlMessage> msg) [member function]
    cls.add_method('SendLteControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteControlMessage >', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-phy-sap.h (module 'lte'): void ns3::LteEnbPhySapProvider::SendMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('SendMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteEnbPhySapUser_methods(root_module, cls):
    ## lte-enb-phy-sap.h (module 'lte'): ns3::LteEnbPhySapUser::LteEnbPhySapUser() [constructor]
    cls.add_constructor([])
    ## lte-enb-phy-sap.h (module 'lte'): ns3::LteEnbPhySapUser::LteEnbPhySapUser(ns3::LteEnbPhySapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbPhySapUser const &', 'arg0')])
    ## lte-enb-phy-sap.h (module 'lte'): void ns3::LteEnbPhySapUser::DlInfoListElementHarqFeeback(ns3::DlInfoListElement_s params) [member function]
    cls.add_method('DlInfoListElementHarqFeeback', 
                   'void', 
                   [param('ns3::DlInfoListElement_s', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-phy-sap.h (module 'lte'): void ns3::LteEnbPhySapUser::ReceiveLteControlMessage(ns3::Ptr<ns3::LteControlMessage> msg) [member function]
    cls.add_method('ReceiveLteControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteControlMessage >', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-phy-sap.h (module 'lte'): void ns3::LteEnbPhySapUser::ReceivePhyPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('ReceivePhyPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-phy-sap.h (module 'lte'): void ns3::LteEnbPhySapUser::ReceiveRachPreamble(uint32_t prachId) [member function]
    cls.add_method('ReceiveRachPreamble', 
                   'void', 
                   [param('uint32_t', 'prachId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-phy-sap.h (module 'lte'): void ns3::LteEnbPhySapUser::SubframeIndication(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('SubframeIndication', 
                   'void', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-phy-sap.h (module 'lte'): void ns3::LteEnbPhySapUser::UlCqiReport(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters ulcqi) [member function]
    cls.add_method('UlCqiReport', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters', 'ulcqi')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-enb-phy-sap.h (module 'lte'): void ns3::LteEnbPhySapUser::UlInfoListElementHarqFeeback(ns3::UlInfoListElement_s params) [member function]
    cls.add_method('UlInfoListElementHarqFeeback', 
                   'void', 
                   [param('ns3::UlInfoListElement_s', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteFfConverter_methods(root_module, cls):
    ## lte-common.h (module 'lte'): ns3::LteFfConverter::LteFfConverter() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::LteFfConverter::LteFfConverter(ns3::LteFfConverter const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteFfConverter const &', 'arg0')])
    ## lte-common.h (module 'lte'): static uint16_t ns3::LteFfConverter::double2fpS11dot3(double val) [member function]
    cls.add_method('double2fpS11dot3', 
                   'uint16_t', 
                   [param('double', 'val')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static double ns3::LteFfConverter::fpS11dot3toDouble(uint16_t val) [member function]
    cls.add_method('fpS11dot3toDouble', 
                   'double', 
                   [param('uint16_t', 'val')], 
                   is_static=True)
    ## lte-common.h (module 'lte'): static double ns3::LteFfConverter::getMinFpS11dot3Value() [member function]
    cls.add_method('getMinFpS11dot3Value', 
                   'double', 
                   [], 
                   is_static=True)
    return

def register_Ns3LteFfrRrcSapProvider_methods(root_module, cls):
    ## lte-ffr-rrc-sap.h (module 'lte'): ns3::LteFfrRrcSapProvider::LteFfrRrcSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-ffr-rrc-sap.h (module 'lte'): ns3::LteFfrRrcSapProvider::LteFfrRrcSapProvider(ns3::LteFfrRrcSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteFfrRrcSapProvider const &', 'arg0')])
    ## lte-ffr-rrc-sap.h (module 'lte'): void ns3::LteFfrRrcSapProvider::RecvLoadInformation(ns3::EpcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('RecvLoadInformation', 
                   'void', 
                   [param('ns3::EpcX2Sap::LoadInformationParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ffr-rrc-sap.h (module 'lte'): void ns3::LteFfrRrcSapProvider::ReportUeMeas(uint16_t rnti, ns3::LteRrcSap::MeasResults measResults) [member function]
    cls.add_method('ReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::MeasResults', 'measResults')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ffr-rrc-sap.h (module 'lte'): void ns3::LteFfrRrcSapProvider::SetBandwidth(uint8_t ulBandwidth, uint8_t dlBandwidth) [member function]
    cls.add_method('SetBandwidth', 
                   'void', 
                   [param('uint8_t', 'ulBandwidth'), param('uint8_t', 'dlBandwidth')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ffr-rrc-sap.h (module 'lte'): void ns3::LteFfrRrcSapProvider::SetCellId(uint16_t cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteFfrRrcSapUser_methods(root_module, cls):
    ## lte-ffr-rrc-sap.h (module 'lte'): ns3::LteFfrRrcSapUser::LteFfrRrcSapUser() [constructor]
    cls.add_constructor([])
    ## lte-ffr-rrc-sap.h (module 'lte'): ns3::LteFfrRrcSapUser::LteFfrRrcSapUser(ns3::LteFfrRrcSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteFfrRrcSapUser const &', 'arg0')])
    ## lte-ffr-rrc-sap.h (module 'lte'): uint8_t ns3::LteFfrRrcSapUser::AddUeMeasReportConfigForFfr(ns3::LteRrcSap::ReportConfigEutra reportConfig) [member function]
    cls.add_method('AddUeMeasReportConfigForFfr', 
                   'uint8_t', 
                   [param('ns3::LteRrcSap::ReportConfigEutra', 'reportConfig')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ffr-rrc-sap.h (module 'lte'): void ns3::LteFfrRrcSapUser::SendLoadInformation(ns3::EpcX2Sap::LoadInformationParams params) [member function]
    cls.add_method('SendLoadInformation', 
                   'void', 
                   [param('ns3::EpcX2Sap::LoadInformationParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ffr-rrc-sap.h (module 'lte'): void ns3::LteFfrRrcSapUser::SetPdschConfigDedicated(uint16_t rnti, ns3::LteRrcSap::PdschConfigDedicated pdschConfigDedicated) [member function]
    cls.add_method('SetPdschConfigDedicated', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::PdschConfigDedicated', 'pdschConfigDedicated')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteFlowId_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## lte-common.h (module 'lte'): ns3::LteFlowId_t::LteFlowId_t(ns3::LteFlowId_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteFlowId_t const &', 'arg0')])
    ## lte-common.h (module 'lte'): ns3::LteFlowId_t::LteFlowId_t() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::LteFlowId_t::LteFlowId_t(uint16_t const a, uint8_t const b) [constructor]
    cls.add_constructor([param('uint16_t const', 'a'), param('uint8_t const', 'b')])
    ## lte-common.h (module 'lte'): ns3::LteFlowId_t::m_lcId [variable]
    cls.add_instance_attribute('m_lcId', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::LteFlowId_t::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3LteHandoverManagementSapProvider_methods(root_module, cls):
    ## lte-handover-management-sap.h (module 'lte'): ns3::LteHandoverManagementSapProvider::LteHandoverManagementSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-handover-management-sap.h (module 'lte'): ns3::LteHandoverManagementSapProvider::LteHandoverManagementSapProvider(ns3::LteHandoverManagementSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteHandoverManagementSapProvider const &', 'arg0')])
    ## lte-handover-management-sap.h (module 'lte'): void ns3::LteHandoverManagementSapProvider::ReportUeMeas(uint16_t rnti, ns3::LteRrcSap::MeasResults measResults) [member function]
    cls.add_method('ReportUeMeas', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::MeasResults', 'measResults')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteHandoverManagementSapUser_methods(root_module, cls):
    ## lte-handover-management-sap.h (module 'lte'): ns3::LteHandoverManagementSapUser::LteHandoverManagementSapUser() [constructor]
    cls.add_constructor([])
    ## lte-handover-management-sap.h (module 'lte'): ns3::LteHandoverManagementSapUser::LteHandoverManagementSapUser(ns3::LteHandoverManagementSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteHandoverManagementSapUser const &', 'arg0')])
    ## lte-handover-management-sap.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::LteHandoverManagementSapUser::AddUeMeasReportConfigForHandover(ns3::LteRrcSap::ReportConfigEutra reportConfig) [member function]
    cls.add_method('AddUeMeasReportConfigForHandover', 
                   'std::vector< unsigned char >', 
                   [param('ns3::LteRrcSap::ReportConfigEutra', 'reportConfig')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-handover-management-sap.h (module 'lte'): void ns3::LteHandoverManagementSapUser::TriggerHandover(uint16_t rnti, uint16_t targetCellId) [member function]
    cls.add_method('TriggerHandover', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint16_t', 'targetCellId')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteMacSapProvider_methods(root_module, cls):
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::LteMacSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::LteMacSapProvider(ns3::LteMacSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteMacSapProvider const &', 'arg0')])
    ## lte-mac-sap.h (module 'lte'): void ns3::LteMacSapProvider::ReportBufferStatus(ns3::LteMacSapProvider::ReportBufferStatusParameters params) [member function]
    cls.add_method('ReportBufferStatus', 
                   'void', 
                   [param('ns3::LteMacSapProvider::ReportBufferStatusParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-mac-sap.h (module 'lte'): void ns3::LteMacSapProvider::TransmitPdu(ns3::LteMacSapProvider::TransmitPduParameters params) [member function]
    cls.add_method('TransmitPdu', 
                   'void', 
                   [param('ns3::LteMacSapProvider::TransmitPduParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteMacSapProviderReportBufferStatusParameters_methods(root_module, cls):
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters::ReportBufferStatusParameters() [constructor]
    cls.add_constructor([])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters::ReportBufferStatusParameters(ns3::LteMacSapProvider::ReportBufferStatusParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteMacSapProvider::ReportBufferStatusParameters const &', 'arg0')])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters::dstL2Id [variable]
    cls.add_instance_attribute('dstL2Id', 'uint32_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters::retxQueueHolDelay [variable]
    cls.add_instance_attribute('retxQueueHolDelay', 'uint16_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters::retxQueueSize [variable]
    cls.add_instance_attribute('retxQueueSize', 'uint32_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters::srcL2Id [variable]
    cls.add_instance_attribute('srcL2Id', 'uint32_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters::statusPduSize [variable]
    cls.add_instance_attribute('statusPduSize', 'uint16_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters::txQueueHolDelay [variable]
    cls.add_instance_attribute('txQueueHolDelay', 'uint16_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::ReportBufferStatusParameters::txQueueSize [variable]
    cls.add_instance_attribute('txQueueSize', 'uint32_t', is_const=False)
    return

def register_Ns3LteMacSapProviderTransmitPduParameters_methods(root_module, cls):
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::TransmitPduParameters() [constructor]
    cls.add_constructor([])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::TransmitPduParameters(ns3::LteMacSapProvider::TransmitPduParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteMacSapProvider::TransmitPduParameters const &', 'arg0')])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::componentCarrierId [variable]
    cls.add_instance_attribute('componentCarrierId', 'uint8_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::discMsg [variable]
    cls.add_instance_attribute('discMsg', 'bool', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::dstL2Id [variable]
    cls.add_instance_attribute('dstL2Id', 'uint32_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::harqProcessId [variable]
    cls.add_instance_attribute('harqProcessId', 'uint8_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::layer [variable]
    cls.add_instance_attribute('layer', 'uint8_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::mibslMsg [variable]
    cls.add_instance_attribute('mibslMsg', 'bool', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::pdu [variable]
    cls.add_instance_attribute('pdu', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapProvider::TransmitPduParameters::srcL2Id [variable]
    cls.add_instance_attribute('srcL2Id', 'uint32_t', is_const=False)
    return

def register_Ns3LteMacSapUser_methods(root_module, cls):
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::LteMacSapUser() [constructor]
    cls.add_constructor([])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::LteMacSapUser(ns3::LteMacSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteMacSapUser const &', 'arg0')])
    ## lte-mac-sap.h (module 'lte'): void ns3::LteMacSapUser::NotifyHarqDeliveryFailure() [member function]
    cls.add_method('NotifyHarqDeliveryFailure', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-mac-sap.h (module 'lte'): void ns3::LteMacSapUser::NotifyTxOpportunity(ns3::LteMacSapUser::TxOpportunityParameters params) [member function]
    cls.add_method('NotifyTxOpportunity', 
                   'void', 
                   [param('ns3::LteMacSapUser::TxOpportunityParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-mac-sap.h (module 'lte'): void ns3::LteMacSapUser::ReceivePdu(ns3::LteMacSapUser::ReceivePduParameters params) [member function]
    cls.add_method('ReceivePdu', 
                   'void', 
                   [param('ns3::LteMacSapUser::ReceivePduParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteMacSapUserReceivePduParameters_methods(root_module, cls):
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::ReceivePduParameters::ReceivePduParameters(ns3::LteMacSapUser::ReceivePduParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteMacSapUser::ReceivePduParameters const &', 'arg0')])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::ReceivePduParameters::ReceivePduParameters() [constructor]
    cls.add_constructor([])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::ReceivePduParameters::ReceivePduParameters(ns3::Ptr<ns3::Packet> const & p, uint16_t rnti, uint8_t lcid) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Packet > const &', 'p'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid')])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::ReceivePduParameters::dstL2Id [variable]
    cls.add_instance_attribute('dstL2Id', 'uint32_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::ReceivePduParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::ReceivePduParameters::p [variable]
    cls.add_instance_attribute('p', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::ReceivePduParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::ReceivePduParameters::srcL2Id [variable]
    cls.add_instance_attribute('srcL2Id', 'uint32_t', is_const=False)
    return

def register_Ns3LteMacSapUserTxOpportunityParameters_methods(root_module, cls):
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters::TxOpportunityParameters(ns3::LteMacSapUser::TxOpportunityParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteMacSapUser::TxOpportunityParameters const &', 'arg0')])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters::TxOpportunityParameters(uint32_t bytes, uint8_t layer, uint8_t harqId, uint8_t ccId, uint16_t rnti, uint8_t lcId) [constructor]
    cls.add_constructor([param('uint32_t', 'bytes'), param('uint8_t', 'layer'), param('uint8_t', 'harqId'), param('uint8_t', 'ccId'), param('uint16_t', 'rnti'), param('uint8_t', 'lcId')])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters::TxOpportunityParameters() [constructor]
    cls.add_constructor([])
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters::bytes [variable]
    cls.add_instance_attribute('bytes', 'uint32_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters::componentCarrierId [variable]
    cls.add_instance_attribute('componentCarrierId', 'uint8_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters::dstL2Id [variable]
    cls.add_instance_attribute('dstL2Id', 'uint32_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters::harqId [variable]
    cls.add_instance_attribute('harqId', 'uint8_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters::layer [variable]
    cls.add_instance_attribute('layer', 'uint8_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    ## lte-mac-sap.h (module 'lte'): ns3::LteMacSapUser::TxOpportunityParameters::srcL2Id [variable]
    cls.add_instance_attribute('srcL2Id', 'uint32_t', is_const=False)
    return

def register_Ns3LteNistErrorModel_methods(root_module, cls):
    ## lte-nist-error-model.h (module 'lte'): ns3::LteNistErrorModel::LteNistErrorModel() [constructor]
    cls.add_constructor([])
    ## lte-nist-error-model.h (module 'lte'): ns3::LteNistErrorModel::LteNistErrorModel(ns3::LteNistErrorModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteNistErrorModel const &', 'arg0')])
    ## lte-nist-error-model.h (module 'lte'): static ns3::TbErrorStats_t ns3::LteNistErrorModel::GetPsbchBler(ns3::LteNistErrorModel::LteFadingModel fadingChannel, ns3::LteNistErrorModel::LteTxMode txmode, double sinr) [member function]
    cls.add_method('GetPsbchBler', 
                   'ns3::TbErrorStats_t', 
                   [param('ns3::LteNistErrorModel::LteFadingModel', 'fadingChannel'), param('ns3::LteNistErrorModel::LteTxMode', 'txmode'), param('double', 'sinr')], 
                   is_static=True)
    ## lte-nist-error-model.h (module 'lte'): static ns3::TbErrorStats_t ns3::LteNistErrorModel::GetPscchBler(ns3::LteNistErrorModel::LteFadingModel fadingChannel, ns3::LteNistErrorModel::LteTxMode txmode, double sinr) [member function]
    cls.add_method('GetPscchBler', 
                   'ns3::TbErrorStats_t', 
                   [param('ns3::LteNistErrorModel::LteFadingModel', 'fadingChannel'), param('ns3::LteNistErrorModel::LteTxMode', 'txmode'), param('double', 'sinr')], 
                   is_static=True)
    ## lte-nist-error-model.h (module 'lte'): static ns3::TbErrorStats_t ns3::LteNistErrorModel::GetPsdchBler(ns3::LteNistErrorModel::LteFadingModel fadingChannel, ns3::LteNistErrorModel::LteTxMode txmode, double sinr, ns3::HarqProcessInfoList_t harqHistory) [member function]
    cls.add_method('GetPsdchBler', 
                   'ns3::TbErrorStats_t', 
                   [param('ns3::LteNistErrorModel::LteFadingModel', 'fadingChannel'), param('ns3::LteNistErrorModel::LteTxMode', 'txmode'), param('double', 'sinr'), param('std::vector< ns3::HarqProcessInfoElement_t >', 'harqHistory')], 
                   is_static=True)
    ## lte-nist-error-model.h (module 'lte'): static ns3::TbErrorStats_t ns3::LteNistErrorModel::GetPsschBler(ns3::LteNistErrorModel::LteFadingModel fadingChannel, ns3::LteNistErrorModel::LteTxMode txmode, uint16_t mcs, double sinr, ns3::HarqProcessInfoList_t harqHistory) [member function]
    cls.add_method('GetPsschBler', 
                   'ns3::TbErrorStats_t', 
                   [param('ns3::LteNistErrorModel::LteFadingModel', 'fadingChannel'), param('ns3::LteNistErrorModel::LteTxMode', 'txmode'), param('uint16_t', 'mcs'), param('double', 'sinr'), param('std::vector< ns3::HarqProcessInfoElement_t >', 'harqHistory')], 
                   is_static=True)
    ## lte-nist-error-model.h (module 'lte'): static double ns3::LteNistErrorModel::GetPsschSinrFromBler(ns3::LteNistErrorModel::LteFadingModel fadingChannel, ns3::LteNistErrorModel::LteTxMode txmode, uint16_t mcs, uint8_t harq, double bler) [member function]
    cls.add_method('GetPsschSinrFromBler', 
                   'double', 
                   [param('ns3::LteNistErrorModel::LteFadingModel', 'fadingChannel'), param('ns3::LteNistErrorModel::LteTxMode', 'txmode'), param('uint16_t', 'mcs'), param('uint8_t', 'harq'), param('double', 'bler')], 
                   is_static=True)
    ## lte-nist-error-model.h (module 'lte'): static ns3::TbErrorStats_t ns3::LteNistErrorModel::GetPuschBler(ns3::LteNistErrorModel::LteFadingModel fadingChannel, ns3::LteNistErrorModel::LteTxMode txmode, uint16_t mcs, double sinr, ns3::HarqProcessInfoList_t harqHistory) [member function]
    cls.add_method('GetPuschBler', 
                   'ns3::TbErrorStats_t', 
                   [param('ns3::LteNistErrorModel::LteFadingModel', 'fadingChannel'), param('ns3::LteNistErrorModel::LteTxMode', 'txmode'), param('uint16_t', 'mcs'), param('double', 'sinr'), param('std::vector< ns3::HarqProcessInfoElement_t >', 'harqHistory')], 
                   is_static=True)
    return

def register_Ns3LtePc5SignallingHeaderSequenceNumber_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::LtePc5SignallingHeaderSequenceNumber::LtePc5SignallingHeaderSequenceNumber() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::LtePc5SignallingHeaderSequenceNumber::LtePc5SignallingHeaderSequenceNumber(ns3::LtePc5SignallingHeaderSequenceNumber const & arg0) [constructor]
    cls.add_constructor([param('ns3::LtePc5SignallingHeaderSequenceNumber const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static uint64_t ns3::LtePc5SignallingHeaderSequenceNumber::GenerateSeqNum() [member function]
    cls.add_method('GenerateSeqNum', 
                   'uint64_t', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::LtePc5SignallingHeaderSequenceNumber::s_seqNum [variable]
    cls.add_static_attribute('s_seqNum', 'uint64_t', is_const=False)
    return

def register_Ns3LtePdcpSapProvider_methods(root_module, cls):
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider::LtePdcpSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider::LtePdcpSapProvider(ns3::LtePdcpSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LtePdcpSapProvider const &', 'arg0')])
    ## lte-pdcp-sap.h (module 'lte'): void ns3::LtePdcpSapProvider::TransmitPdcpSdu(ns3::LtePdcpSapProvider::TransmitPdcpSduParameters params) [member function]
    cls.add_method('TransmitPdcpSdu', 
                   'void', 
                   [param('ns3::LtePdcpSapProvider::TransmitPdcpSduParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LtePdcpSapProviderTransmitPdcpSduParameters_methods(root_module, cls):
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider::TransmitPdcpSduParameters::TransmitPdcpSduParameters() [constructor]
    cls.add_constructor([])
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider::TransmitPdcpSduParameters::TransmitPdcpSduParameters(ns3::LtePdcpSapProvider::TransmitPdcpSduParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LtePdcpSapProvider::TransmitPdcpSduParameters const &', 'arg0')])
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider::TransmitPdcpSduParameters::dstL2Id [variable]
    cls.add_instance_attribute('dstL2Id', 'uint32_t', is_const=False)
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider::TransmitPdcpSduParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider::TransmitPdcpSduParameters::pdcpSdu [variable]
    cls.add_instance_attribute('pdcpSdu', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider::TransmitPdcpSduParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider::TransmitPdcpSduParameters::sduType [variable]
    cls.add_instance_attribute('sduType', 'uint8_t', is_const=False)
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapProvider::TransmitPdcpSduParameters::srcL2Id [variable]
    cls.add_instance_attribute('srcL2Id', 'uint32_t', is_const=False)
    return

def register_Ns3LtePdcpSapUser_methods(root_module, cls):
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::LtePdcpSapUser() [constructor]
    cls.add_constructor([])
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::LtePdcpSapUser(ns3::LtePdcpSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LtePdcpSapUser const &', 'arg0')])
    ## lte-pdcp-sap.h (module 'lte'): void ns3::LtePdcpSapUser::ReceivePdcpSdu(ns3::LtePdcpSapUser::ReceivePdcpSduParameters params) [member function]
    cls.add_method('ReceivePdcpSdu', 
                   'void', 
                   [param('ns3::LtePdcpSapUser::ReceivePdcpSduParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LtePdcpSapUserReceivePdcpSduParameters_methods(root_module, cls):
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::ReceivePdcpSduParameters::ReceivePdcpSduParameters() [constructor]
    cls.add_constructor([])
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::ReceivePdcpSduParameters::ReceivePdcpSduParameters(ns3::LtePdcpSapUser::ReceivePdcpSduParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LtePdcpSapUser::ReceivePdcpSduParameters const &', 'arg0')])
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::ReceivePdcpSduParameters::dstL2Id [variable]
    cls.add_instance_attribute('dstL2Id', 'uint32_t', is_const=False)
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::ReceivePdcpSduParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::ReceivePdcpSduParameters::pdcpSdu [variable]
    cls.add_instance_attribute('pdcpSdu', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::ReceivePdcpSduParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::ReceivePdcpSduParameters::sduType [variable]
    cls.add_instance_attribute('sduType', 'uint8_t', is_const=False)
    ## lte-pdcp-sap.h (module 'lte'): ns3::LtePdcpSapUser::ReceivePdcpSduParameters::srcL2Id [variable]
    cls.add_instance_attribute('srcL2Id', 'uint32_t', is_const=False)
    return

def register_Ns3LteRlcSapProvider_methods(root_module, cls):
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapProvider::LteRlcSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapProvider::LteRlcSapProvider(ns3::LteRlcSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRlcSapProvider const &', 'arg0')])
    ## lte-rlc-sap.h (module 'lte'): void ns3::LteRlcSapProvider::TransmitPdcpPdu(ns3::LteRlcSapProvider::TransmitPdcpPduParameters params) [member function]
    cls.add_method('TransmitPdcpPdu', 
                   'void', 
                   [param('ns3::LteRlcSapProvider::TransmitPdcpPduParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteRlcSapProviderTransmitPdcpPduParameters_methods(root_module, cls):
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapProvider::TransmitPdcpPduParameters::TransmitPdcpPduParameters() [constructor]
    cls.add_constructor([])
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapProvider::TransmitPdcpPduParameters::TransmitPdcpPduParameters(ns3::LteRlcSapProvider::TransmitPdcpPduParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRlcSapProvider::TransmitPdcpPduParameters const &', 'arg0')])
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapProvider::TransmitPdcpPduParameters::dstL2Id [variable]
    cls.add_instance_attribute('dstL2Id', 'uint32_t', is_const=False)
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapProvider::TransmitPdcpPduParameters::lcid [variable]
    cls.add_instance_attribute('lcid', 'uint8_t', is_const=False)
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapProvider::TransmitPdcpPduParameters::pdcpPdu [variable]
    cls.add_instance_attribute('pdcpPdu', 'ns3::Ptr< ns3::Packet >', is_const=False)
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapProvider::TransmitPdcpPduParameters::rnti [variable]
    cls.add_instance_attribute('rnti', 'uint16_t', is_const=False)
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapProvider::TransmitPdcpPduParameters::srcL2Id [variable]
    cls.add_instance_attribute('srcL2Id', 'uint32_t', is_const=False)
    return

def register_Ns3LteRlcSapUser_methods(root_module, cls):
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapUser::LteRlcSapUser() [constructor]
    cls.add_constructor([])
    ## lte-rlc-sap.h (module 'lte'): ns3::LteRlcSapUser::LteRlcSapUser(ns3::LteRlcSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRlcSapUser const &', 'arg0')])
    ## lte-rlc-sap.h (module 'lte'): void ns3::LteRlcSapUser::ReceivePdcpPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('ReceivePdcpPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteRrcSap_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::LteRrcSap() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::LteRrcSap(ns3::LteRrcSap const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): static double ns3::LteRrcSap::AlphaAsDouble(ns3::LteRrcSap::SlTxParameters param) [member function]
    cls.add_method('AlphaAsDouble', 
                   'double', 
                   [param('ns3::LteRrcSap::SlTxParameters', 'param')], 
                   is_static=True)
    ## lte-rrc-sap.h (module 'lte'): static double ns3::LteRrcSap::ConvertPdschConfigDedicated2Double(ns3::LteRrcSap::PdschConfigDedicated pdschConfigDedicated) [member function]
    cls.add_method('ConvertPdschConfigDedicated2Double', 
                   'double', 
                   [param('ns3::LteRrcSap::PdschConfigDedicated', 'pdschConfigDedicated')], 
                   is_static=True)
    ## lte-rrc-sap.h (module 'lte'): static uint32_t ns3::LteRrcSap::DiscPeriodAsInt(ns3::LteRrcSap::SlPeriodDisc period) [member function]
    cls.add_method('DiscPeriodAsInt', 
                   'uint32_t', 
                   [param('ns3::LteRrcSap::SlPeriodDisc', 'period')], 
                   is_static=True)
    ## lte-rrc-sap.h (module 'lte'): static ns3::LteRrcSap::SlPeriodComm ns3::LteRrcSap::PeriodAsEnum(uint32_t periodLength) [member function]
    cls.add_method('PeriodAsEnum', 
                   'ns3::LteRrcSap::SlPeriodComm', 
                   [param('uint32_t', 'periodLength')], 
                   is_static=True)
    ## lte-rrc-sap.h (module 'lte'): static uint32_t ns3::LteRrcSap::PeriodAsInt(ns3::LteRrcSap::SlPeriodComm period) [member function]
    cls.add_method('PeriodAsInt', 
                   'uint32_t', 
                   [param('ns3::LteRrcSap::SlPeriodComm', 'period')], 
                   is_static=True)
    ## lte-rrc-sap.h (module 'lte'): static uint32_t ns3::LteRrcSap::RsrpValueDbm(uint32_t rsrp) [member function]
    cls.add_method('RsrpValueDbm', 
                   'uint32_t', 
                   [param('uint32_t', 'rsrp')], 
                   is_static=True)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MaxReportCells [variable]
    cls.add_static_attribute('MaxReportCells', 'uint8_t const', is_const=True)
    return

def register_Ns3LteRrcSapAntennaInfoCommon_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoCommon::AntennaInfoCommon() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoCommon::AntennaInfoCommon(ns3::LteRrcSap::AntennaInfoCommon const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::AntennaInfoCommon const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoCommon::antennaPortsCount [variable]
    cls.add_instance_attribute('antennaPortsCount', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapAntennaInfoDedicated_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoDedicated::AntennaInfoDedicated() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoDedicated::AntennaInfoDedicated(ns3::LteRrcSap::AntennaInfoDedicated const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::AntennaInfoDedicated const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoDedicated::transmissionMode [variable]
    cls.add_instance_attribute('transmissionMode', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapAntennaInfoUl_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoUl::AntennaInfoUl() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoUl::AntennaInfoUl(ns3::LteRrcSap::AntennaInfoUl const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::AntennaInfoUl const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AntennaInfoUl::transmissionMode [variable]
    cls.add_instance_attribute('transmissionMode', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapAsConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AsConfig::AsConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AsConfig::AsConfig(ns3::LteRrcSap::AsConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::AsConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AsConfig::sourceDlCarrierFreq [variable]
    cls.add_instance_attribute('sourceDlCarrierFreq', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AsConfig::sourceMasterInformationBlock [variable]
    cls.add_instance_attribute('sourceMasterInformationBlock', 'ns3::LteRrcSap::MasterInformationBlock', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AsConfig::sourceMeasConfig [variable]
    cls.add_instance_attribute('sourceMeasConfig', 'ns3::LteRrcSap::MeasConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AsConfig::sourceRadioResourceConfig [variable]
    cls.add_instance_attribute('sourceRadioResourceConfig', 'ns3::LteRrcSap::RadioResourceConfigDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AsConfig::sourceSystemInformationBlockType1 [variable]
    cls.add_instance_attribute('sourceSystemInformationBlockType1', 'ns3::LteRrcSap::SystemInformationBlockType1', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AsConfig::sourceSystemInformationBlockType2 [variable]
    cls.add_instance_attribute('sourceSystemInformationBlockType2', 'ns3::LteRrcSap::SystemInformationBlockType2', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::AsConfig::sourceUeIdentity [variable]
    cls.add_instance_attribute('sourceUeIdentity', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapBlackCellsToAddMod_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::BlackCellsToAddMod::BlackCellsToAddMod() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::BlackCellsToAddMod::BlackCellsToAddMod(ns3::LteRrcSap::BlackCellsToAddMod const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::BlackCellsToAddMod const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::BlackCellsToAddMod::cellIndex [variable]
    cls.add_instance_attribute('cellIndex', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::BlackCellsToAddMod::physCellIdRange [variable]
    cls.add_instance_attribute('physCellIdRange', 'ns3::LteRrcSap::PhysCellIdRange', is_const=False)
    return

def register_Ns3LteRrcSapCarrierBandwidthEutra_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CarrierBandwidthEutra::CarrierBandwidthEutra() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CarrierBandwidthEutra::CarrierBandwidthEutra(ns3::LteRrcSap::CarrierBandwidthEutra const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::CarrierBandwidthEutra const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CarrierBandwidthEutra::dlBandwidth [variable]
    cls.add_instance_attribute('dlBandwidth', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CarrierBandwidthEutra::ulBandwidth [variable]
    cls.add_instance_attribute('ulBandwidth', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapCarrierFreqEutra_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CarrierFreqEutra::CarrierFreqEutra() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CarrierFreqEutra::CarrierFreqEutra(ns3::LteRrcSap::CarrierFreqEutra const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::CarrierFreqEutra const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CarrierFreqEutra::dlCarrierFreq [variable]
    cls.add_instance_attribute('dlCarrierFreq', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CarrierFreqEutra::ulCarrierFreq [variable]
    cls.add_instance_attribute('ulCarrierFreq', 'uint32_t', is_const=False)
    return

def register_Ns3LteRrcSapCellAccessRelatedInfo_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellAccessRelatedInfo::CellAccessRelatedInfo() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellAccessRelatedInfo::CellAccessRelatedInfo(ns3::LteRrcSap::CellAccessRelatedInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::CellAccessRelatedInfo const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellAccessRelatedInfo::cellIdentity [variable]
    cls.add_instance_attribute('cellIdentity', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellAccessRelatedInfo::csgIdentity [variable]
    cls.add_instance_attribute('csgIdentity', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellAccessRelatedInfo::csgIndication [variable]
    cls.add_instance_attribute('csgIndication', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellAccessRelatedInfo::plmnIdentityInfo [variable]
    cls.add_instance_attribute('plmnIdentityInfo', 'ns3::LteRrcSap::PlmnIdentityInfo', is_const=False)
    return

def register_Ns3LteRrcSapCellIdentification_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellIdentification::CellIdentification() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellIdentification::CellIdentification(ns3::LteRrcSap::CellIdentification const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::CellIdentification const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellIdentification::dlCarrierFreq [variable]
    cls.add_instance_attribute('dlCarrierFreq', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellIdentification::physCellId [variable]
    cls.add_instance_attribute('physCellId', 'uint32_t', is_const=False)
    return

def register_Ns3LteRrcSapCellSelectionInfo_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellSelectionInfo::CellSelectionInfo() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellSelectionInfo::CellSelectionInfo(ns3::LteRrcSap::CellSelectionInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::CellSelectionInfo const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellSelectionInfo::qQualMin [variable]
    cls.add_instance_attribute('qQualMin', 'int8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellSelectionInfo::qRxLevMin [variable]
    cls.add_instance_attribute('qRxLevMin', 'int8_t', is_const=False)
    return

def register_Ns3LteRrcSapCellsToAddMod_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellsToAddMod::CellsToAddMod() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellsToAddMod::CellsToAddMod(ns3::LteRrcSap::CellsToAddMod const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::CellsToAddMod const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellsToAddMod::cellIndex [variable]
    cls.add_instance_attribute('cellIndex', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellsToAddMod::cellIndividualOffset [variable]
    cls.add_instance_attribute('cellIndividualOffset', 'int8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CellsToAddMod::physCellId [variable]
    cls.add_instance_attribute('physCellId', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapCgiInfo_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CgiInfo::CgiInfo() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CgiInfo::CgiInfo(ns3::LteRrcSap::CgiInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::CgiInfo const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CgiInfo::cellIdentity [variable]
    cls.add_instance_attribute('cellIdentity', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CgiInfo::plmnIdentity [variable]
    cls.add_instance_attribute('plmnIdentity', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CgiInfo::plmnIdentityList [variable]
    cls.add_instance_attribute('plmnIdentityList', 'std::list< unsigned int >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::CgiInfo::trackingAreaCode [variable]
    cls.add_instance_attribute('trackingAreaCode', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapDrbToAddMod_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::DrbToAddMod::DrbToAddMod() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::DrbToAddMod::DrbToAddMod(ns3::LteRrcSap::DrbToAddMod const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::DrbToAddMod const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::DrbToAddMod::drbIdentity [variable]
    cls.add_instance_attribute('drbIdentity', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::DrbToAddMod::epsBearerIdentity [variable]
    cls.add_instance_attribute('epsBearerIdentity', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::DrbToAddMod::logicalChannelConfig [variable]
    cls.add_instance_attribute('logicalChannelConfig', 'ns3::LteRrcSap::LogicalChannelConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::DrbToAddMod::logicalChannelIdentity [variable]
    cls.add_instance_attribute('logicalChannelIdentity', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::DrbToAddMod::rlcConfig [variable]
    cls.add_instance_attribute('rlcConfig', 'ns3::LteRrcSap::RlcConfig', is_const=False)
    return

def register_Ns3LteRrcSapFreqInfo_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::FreqInfo::FreqInfo() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::FreqInfo::FreqInfo(ns3::LteRrcSap::FreqInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::FreqInfo const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::FreqInfo::ulBandwidth [variable]
    cls.add_instance_attribute('ulBandwidth', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::FreqInfo::ulCarrierFreq [variable]
    cls.add_instance_attribute('ulCarrierFreq', 'uint32_t', is_const=False)
    return

def register_Ns3LteRrcSapHandoverPreparationInfo_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::HandoverPreparationInfo::HandoverPreparationInfo() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::HandoverPreparationInfo::HandoverPreparationInfo(ns3::LteRrcSap::HandoverPreparationInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::HandoverPreparationInfo const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::HandoverPreparationInfo::asConfig [variable]
    cls.add_instance_attribute('asConfig', 'ns3::LteRrcSap::AsConfig', is_const=False)
    return

def register_Ns3LteRrcSapLogicalChannelConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::LogicalChannelConfig::LogicalChannelConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::LogicalChannelConfig::LogicalChannelConfig(ns3::LteRrcSap::LogicalChannelConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::LogicalChannelConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::LogicalChannelConfig::bucketSizeDurationMs [variable]
    cls.add_instance_attribute('bucketSizeDurationMs', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::LogicalChannelConfig::logicalChannelGroup [variable]
    cls.add_instance_attribute('logicalChannelGroup', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::LogicalChannelConfig::prioritizedBitRateKbps [variable]
    cls.add_instance_attribute('prioritizedBitRateKbps', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::LogicalChannelConfig::priority [variable]
    cls.add_instance_attribute('priority', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapMasterInformationBlock_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlock::MasterInformationBlock() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlock::MasterInformationBlock(ns3::LteRrcSap::MasterInformationBlock const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MasterInformationBlock const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlock::dlBandwidth [variable]
    cls.add_instance_attribute('dlBandwidth', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlock::systemFrameNumber [variable]
    cls.add_instance_attribute('systemFrameNumber', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapMasterInformationBlockSL_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlockSL::MasterInformationBlockSL() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlockSL::MasterInformationBlockSL(ns3::LteRrcSap::MasterInformationBlockSL const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MasterInformationBlockSL const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlockSL::directFrameNo [variable]
    cls.add_instance_attribute('directFrameNo', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlockSL::directSubframeNo [variable]
    cls.add_instance_attribute('directSubframeNo', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlockSL::inCoverage [variable]
    cls.add_instance_attribute('inCoverage', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlockSL::slBandwidth [variable]
    cls.add_instance_attribute('slBandwidth', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapMeasConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::MeasConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::MeasConfig(ns3::LteRrcSap::MeasConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::haveMeasGapConfig [variable]
    cls.add_instance_attribute('haveMeasGapConfig', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::haveQuantityConfig [variable]
    cls.add_instance_attribute('haveQuantityConfig', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::haveSmeasure [variable]
    cls.add_instance_attribute('haveSmeasure', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::haveSpeedStatePars [variable]
    cls.add_instance_attribute('haveSpeedStatePars', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::measGapConfig [variable]
    cls.add_instance_attribute('measGapConfig', 'ns3::LteRrcSap::MeasGapConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::measIdToAddModList [variable]
    cls.add_instance_attribute('measIdToAddModList', 'std::list< ns3::LteRrcSap::MeasIdToAddMod >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::measIdToRemoveList [variable]
    cls.add_instance_attribute('measIdToRemoveList', 'std::list< unsigned char >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::measObjectToAddModList [variable]
    cls.add_instance_attribute('measObjectToAddModList', 'std::list< ns3::LteRrcSap::MeasObjectToAddMod >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::measObjectToRemoveList [variable]
    cls.add_instance_attribute('measObjectToRemoveList', 'std::list< unsigned char >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::quantityConfig [variable]
    cls.add_instance_attribute('quantityConfig', 'ns3::LteRrcSap::QuantityConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::reportConfigToAddModList [variable]
    cls.add_instance_attribute('reportConfigToAddModList', 'std::list< ns3::LteRrcSap::ReportConfigToAddMod >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::reportConfigToRemoveList [variable]
    cls.add_instance_attribute('reportConfigToRemoveList', 'std::list< unsigned char >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::sMeasure [variable]
    cls.add_instance_attribute('sMeasure', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasConfig::speedStatePars [variable]
    cls.add_instance_attribute('speedStatePars', 'ns3::LteRrcSap::SpeedStatePars', is_const=False)
    return

def register_Ns3LteRrcSapMeasGapConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasGapConfig::MeasGapConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasGapConfig::MeasGapConfig(ns3::LteRrcSap::MeasGapConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasGapConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasGapConfig::gapOffsetChoice [variable]
    cls.add_instance_attribute('gapOffsetChoice', 'ns3::LteRrcSap::MeasGapConfig::gap', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasGapConfig::gapOffsetValue [variable]
    cls.add_instance_attribute('gapOffsetValue', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasGapConfig::type [variable]
    cls.add_instance_attribute('type', 'ns3::LteRrcSap::MeasGapConfig::action', is_const=False)
    return

def register_Ns3LteRrcSapMeasIdToAddMod_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasIdToAddMod::MeasIdToAddMod() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasIdToAddMod::MeasIdToAddMod(ns3::LteRrcSap::MeasIdToAddMod const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasIdToAddMod const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasIdToAddMod::measId [variable]
    cls.add_instance_attribute('measId', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasIdToAddMod::measObjectId [variable]
    cls.add_instance_attribute('measObjectId', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasIdToAddMod::reportConfigId [variable]
    cls.add_instance_attribute('reportConfigId', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapMeasObjectEutra_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::MeasObjectEutra() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::MeasObjectEutra(ns3::LteRrcSap::MeasObjectEutra const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasObjectEutra const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::allowedMeasBandwidth [variable]
    cls.add_instance_attribute('allowedMeasBandwidth', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::blackCellsToAddModList [variable]
    cls.add_instance_attribute('blackCellsToAddModList', 'std::list< ns3::LteRrcSap::BlackCellsToAddMod >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::blackCellsToRemoveList [variable]
    cls.add_instance_attribute('blackCellsToRemoveList', 'std::list< unsigned char >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::carrierFreq [variable]
    cls.add_instance_attribute('carrierFreq', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::cellForWhichToReportCGI [variable]
    cls.add_instance_attribute('cellForWhichToReportCGI', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::cellsToAddModList [variable]
    cls.add_instance_attribute('cellsToAddModList', 'std::list< ns3::LteRrcSap::CellsToAddMod >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::cellsToRemoveList [variable]
    cls.add_instance_attribute('cellsToRemoveList', 'std::list< unsigned char >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::haveCellForWhichToReportCGI [variable]
    cls.add_instance_attribute('haveCellForWhichToReportCGI', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::neighCellConfig [variable]
    cls.add_instance_attribute('neighCellConfig', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::offsetFreq [variable]
    cls.add_instance_attribute('offsetFreq', 'int8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectEutra::presenceAntennaPort1 [variable]
    cls.add_instance_attribute('presenceAntennaPort1', 'bool', is_const=False)
    return

def register_Ns3LteRrcSapMeasObjectToAddMod_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectToAddMod::MeasObjectToAddMod() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectToAddMod::MeasObjectToAddMod(ns3::LteRrcSap::MeasObjectToAddMod const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasObjectToAddMod const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectToAddMod::measObjectEutra [variable]
    cls.add_instance_attribute('measObjectEutra', 'ns3::LteRrcSap::MeasObjectEutra', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasObjectToAddMod::measObjectId [variable]
    cls.add_instance_attribute('measObjectId', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapMeasResultBestNeighCell_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultBestNeighCell::MeasResultBestNeighCell() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultBestNeighCell::MeasResultBestNeighCell(ns3::LteRrcSap::MeasResultBestNeighCell const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasResultBestNeighCell const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultBestNeighCell::physCellId [variable]
    cls.add_instance_attribute('physCellId', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultBestNeighCell::rsrpResult [variable]
    cls.add_instance_attribute('rsrpResult', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultBestNeighCell::rsrqResult [variable]
    cls.add_instance_attribute('rsrqResult', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapMeasResultEutra_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultEutra::MeasResultEutra() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultEutra::MeasResultEutra(ns3::LteRrcSap::MeasResultEutra const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasResultEutra const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultEutra::cgiInfo [variable]
    cls.add_instance_attribute('cgiInfo', 'ns3::LteRrcSap::CgiInfo', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultEutra::haveCgiInfo [variable]
    cls.add_instance_attribute('haveCgiInfo', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultEutra::haveRsrpResult [variable]
    cls.add_instance_attribute('haveRsrpResult', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultEutra::haveRsrqResult [variable]
    cls.add_instance_attribute('haveRsrqResult', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultEutra::physCellId [variable]
    cls.add_instance_attribute('physCellId', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultEutra::rsrpResult [variable]
    cls.add_instance_attribute('rsrpResult', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultEutra::rsrqResult [variable]
    cls.add_instance_attribute('rsrqResult', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapMeasResultPCell_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultPCell::MeasResultPCell() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultPCell::MeasResultPCell(ns3::LteRrcSap::MeasResultPCell const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasResultPCell const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultPCell::rsrpResult [variable]
    cls.add_instance_attribute('rsrpResult', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultPCell::rsrqResult [variable]
    cls.add_instance_attribute('rsrqResult', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapMeasResultSCell_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultSCell::MeasResultSCell() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultSCell::MeasResultSCell(ns3::LteRrcSap::MeasResultSCell const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasResultSCell const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultSCell::rsrpResult [variable]
    cls.add_instance_attribute('rsrpResult', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultSCell::rsrqResult [variable]
    cls.add_instance_attribute('rsrqResult', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapMeasResultServFreq_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultServFreq::MeasResultServFreq() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultServFreq::MeasResultServFreq(ns3::LteRrcSap::MeasResultServFreq const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasResultServFreq const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultServFreq::haveMeasResultBestNeighCell [variable]
    cls.add_instance_attribute('haveMeasResultBestNeighCell', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultServFreq::haveMeasResultSCell [variable]
    cls.add_instance_attribute('haveMeasResultSCell', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultServFreq::measResultBestNeighCell [variable]
    cls.add_instance_attribute('measResultBestNeighCell', 'ns3::LteRrcSap::MeasResultBestNeighCell', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultServFreq::measResultSCell [variable]
    cls.add_instance_attribute('measResultSCell', 'ns3::LteRrcSap::MeasResultSCell', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResultServFreq::servFreqId [variable]
    cls.add_instance_attribute('servFreqId', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapMeasResults_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResults::MeasResults() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResults::MeasResults(ns3::LteRrcSap::MeasResults const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasResults const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResults::haveMeasResultNeighCells [variable]
    cls.add_instance_attribute('haveMeasResultNeighCells', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResults::haveMeasResultServFreqList [variable]
    cls.add_instance_attribute('haveMeasResultServFreqList', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResults::measId [variable]
    cls.add_instance_attribute('measId', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResults::measResultListEutra [variable]
    cls.add_instance_attribute('measResultListEutra', 'std::list< ns3::LteRrcSap::MeasResultEutra >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResults::measResultPCell [variable]
    cls.add_instance_attribute('measResultPCell', 'ns3::LteRrcSap::MeasResultPCell', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasResults::measResultServFreqList [variable]
    cls.add_instance_attribute('measResultServFreqList', 'std::list< ns3::LteRrcSap::MeasResultServFreq >', is_const=False)
    return

def register_Ns3LteRrcSapMeasurementReport_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasurementReport::MeasurementReport() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasurementReport::MeasurementReport(ns3::LteRrcSap::MeasurementReport const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MeasurementReport const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MeasurementReport::measResults [variable]
    cls.add_instance_attribute('measResults', 'ns3::LteRrcSap::MeasResults', is_const=False)
    return

def register_Ns3LteRrcSapMobilityControlInfo_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo::MobilityControlInfo() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo::MobilityControlInfo(ns3::LteRrcSap::MobilityControlInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MobilityControlInfo const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo::carrierBandwidth [variable]
    cls.add_instance_attribute('carrierBandwidth', 'ns3::LteRrcSap::CarrierBandwidthEutra', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo::carrierFreq [variable]
    cls.add_instance_attribute('carrierFreq', 'ns3::LteRrcSap::CarrierFreqEutra', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo::haveCarrierBandwidth [variable]
    cls.add_instance_attribute('haveCarrierBandwidth', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo::haveCarrierFreq [variable]
    cls.add_instance_attribute('haveCarrierFreq', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo::haveRachConfigDedicated [variable]
    cls.add_instance_attribute('haveRachConfigDedicated', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo::newUeIdentity [variable]
    cls.add_instance_attribute('newUeIdentity', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo::rachConfigDedicated [variable]
    cls.add_instance_attribute('rachConfigDedicated', 'ns3::LteRrcSap::RachConfigDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo::radioResourceConfigCommon [variable]
    cls.add_instance_attribute('radioResourceConfigCommon', 'ns3::LteRrcSap::RadioResourceConfigCommon', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityControlInfo::targetPhysCellId [variable]
    cls.add_instance_attribute('targetPhysCellId', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapMobilityStateParameters_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityStateParameters::MobilityStateParameters() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityStateParameters::MobilityStateParameters(ns3::LteRrcSap::MobilityStateParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::MobilityStateParameters const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityStateParameters::nCellChangeHigh [variable]
    cls.add_instance_attribute('nCellChangeHigh', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityStateParameters::nCellChangeMedium [variable]
    cls.add_instance_attribute('nCellChangeMedium', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityStateParameters::tEvaluation [variable]
    cls.add_instance_attribute('tEvaluation', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::MobilityStateParameters::tHystNormal [variable]
    cls.add_instance_attribute('tHystNormal', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapNonCriticalExtensionConfiguration_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::NonCriticalExtensionConfiguration::NonCriticalExtensionConfiguration() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::NonCriticalExtensionConfiguration::NonCriticalExtensionConfiguration(ns3::LteRrcSap::NonCriticalExtensionConfiguration const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::NonCriticalExtensionConfiguration const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::NonCriticalExtensionConfiguration::sCellToAddModList [variable]
    cls.add_instance_attribute('sCellToAddModList', 'std::list< ns3::LteRrcSap::SCellToAddMod >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::NonCriticalExtensionConfiguration::sCellToReleaseList [variable]
    cls.add_instance_attribute('sCellToReleaseList', 'std::list< unsigned char >', is_const=False)
    return

def register_Ns3LteRrcSapNonUlConfiguration_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::NonUlConfiguration::NonUlConfiguration() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::NonUlConfiguration::NonUlConfiguration(ns3::LteRrcSap::NonUlConfiguration const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::NonUlConfiguration const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::NonUlConfiguration::antennaInfoCommon [variable]
    cls.add_instance_attribute('antennaInfoCommon', 'ns3::LteRrcSap::AntennaInfoCommon', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::NonUlConfiguration::dlBandwidth [variable]
    cls.add_instance_attribute('dlBandwidth', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::NonUlConfiguration::pdschConfigCommon [variable]
    cls.add_instance_attribute('pdschConfigCommon', 'ns3::LteRrcSap::PdschConfigCommon', is_const=False)
    return

def register_Ns3LteRrcSapPdschConfigCommon_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PdschConfigCommon::PdschConfigCommon() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PdschConfigCommon::PdschConfigCommon(ns3::LteRrcSap::PdschConfigCommon const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PdschConfigCommon const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PdschConfigCommon::pb [variable]
    cls.add_instance_attribute('pb', 'int8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PdschConfigCommon::referenceSignalPower [variable]
    cls.add_instance_attribute('referenceSignalPower', 'int8_t', is_const=False)
    return

def register_Ns3LteRrcSapPdschConfigDedicated_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PdschConfigDedicated::PdschConfigDedicated() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PdschConfigDedicated::PdschConfigDedicated(ns3::LteRrcSap::PdschConfigDedicated const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PdschConfigDedicated const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PdschConfigDedicated::pa [variable]
    cls.add_instance_attribute('pa', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapPeriodicBsrTimer_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PeriodicBsrTimer::PeriodicBsrTimer() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PeriodicBsrTimer::PeriodicBsrTimer(ns3::LteRrcSap::PeriodicBsrTimer const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PeriodicBsrTimer const &', 'arg0')])
    return

def register_Ns3LteRrcSapPhysCellIdRange_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysCellIdRange::PhysCellIdRange() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysCellIdRange::PhysCellIdRange(ns3::LteRrcSap::PhysCellIdRange const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PhysCellIdRange const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysCellIdRange::haveRange [variable]
    cls.add_instance_attribute('haveRange', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysCellIdRange::range [variable]
    cls.add_instance_attribute('range', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysCellIdRange::start [variable]
    cls.add_instance_attribute('start', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapPhysicalConfigDedicated_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicated::PhysicalConfigDedicated() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicated::PhysicalConfigDedicated(ns3::LteRrcSap::PhysicalConfigDedicated const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PhysicalConfigDedicated const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicated::antennaInfo [variable]
    cls.add_instance_attribute('antennaInfo', 'ns3::LteRrcSap::AntennaInfoDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicated::haveAntennaInfoDedicated [variable]
    cls.add_instance_attribute('haveAntennaInfoDedicated', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicated::havePdschConfigDedicated [variable]
    cls.add_instance_attribute('havePdschConfigDedicated', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicated::haveSoundingRsUlConfigDedicated [variable]
    cls.add_instance_attribute('haveSoundingRsUlConfigDedicated', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicated::pdschConfigDedicated [variable]
    cls.add_instance_attribute('pdschConfigDedicated', 'ns3::LteRrcSap::PdschConfigDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicated::soundingRsUlConfigDedicated [variable]
    cls.add_instance_attribute('soundingRsUlConfigDedicated', 'ns3::LteRrcSap::SoundingRsUlConfigDedicated', is_const=False)
    return

def register_Ns3LteRrcSapPhysicalConfigDedicatedSCell_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::PhysicalConfigDedicatedSCell() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::PhysicalConfigDedicatedSCell(ns3::LteRrcSap::PhysicalConfigDedicatedSCell const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PhysicalConfigDedicatedSCell const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::antennaInfo [variable]
    cls.add_instance_attribute('antennaInfo', 'ns3::LteRrcSap::AntennaInfoDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::antennaInfoUl [variable]
    cls.add_instance_attribute('antennaInfoUl', 'ns3::LteRrcSap::AntennaInfoDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::crossCarrierSchedulingConfig [variable]
    cls.add_instance_attribute('crossCarrierSchedulingConfig', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::haveAntennaInfoDedicated [variable]
    cls.add_instance_attribute('haveAntennaInfoDedicated', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::haveAntennaInfoUlDedicated [variable]
    cls.add_instance_attribute('haveAntennaInfoUlDedicated', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::haveNonUlConfiguration [variable]
    cls.add_instance_attribute('haveNonUlConfiguration', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::havePdschConfigDedicated [variable]
    cls.add_instance_attribute('havePdschConfigDedicated', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::haveSoundingRsUlConfigDedicated [variable]
    cls.add_instance_attribute('haveSoundingRsUlConfigDedicated', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::haveUlConfiguration [variable]
    cls.add_instance_attribute('haveUlConfiguration', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::pdschConfigDedicated [variable]
    cls.add_instance_attribute('pdschConfigDedicated', 'ns3::LteRrcSap::PdschConfigDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::pushConfigDedicatedSCell [variable]
    cls.add_instance_attribute('pushConfigDedicatedSCell', 'ns3::LteRrcSap::PuschConfigDedicatedSCell', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::soundingRsUlConfigDedicated [variable]
    cls.add_instance_attribute('soundingRsUlConfigDedicated', 'ns3::LteRrcSap::SoundingRsUlConfigDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PhysicalConfigDedicatedSCell::ulPowerControlDedicatedSCell [variable]
    cls.add_instance_attribute('ulPowerControlDedicatedSCell', 'ns3::LteRrcSap::UlPowerControlDedicatedSCell', is_const=False)
    return

def register_Ns3LteRrcSapPlmnIdentityInfo_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PlmnIdentityInfo::PlmnIdentityInfo() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PlmnIdentityInfo::PlmnIdentityInfo(ns3::LteRrcSap::PlmnIdentityInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PlmnIdentityInfo const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PlmnIdentityInfo::plmnIdentity [variable]
    cls.add_instance_attribute('plmnIdentity', 'uint32_t', is_const=False)
    return

def register_Ns3LteRrcSapPlmnIdentityList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PlmnIdentityList::PlmnIdentityList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PlmnIdentityList::PlmnIdentityList(ns3::LteRrcSap::PlmnIdentityList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PlmnIdentityList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PlmnIdentityList::nbPlmn [variable]
    cls.add_instance_attribute('nbPlmn', 'int', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PlmnIdentityList::plmnIdentityInfo [variable]
    cls.add_instance_attribute('plmnIdentityInfo', 'ns3::LteRrcSap::PlmnIdentityInfo [ 6 ]', is_const=False)
    return

def register_Ns3LteRrcSapPoolSelection_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PoolSelection::PoolSelection() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PoolSelection::PoolSelection(ns3::LteRrcSap::PoolSelection const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PoolSelection const &', 'arg0')])
    return

def register_Ns3LteRrcSapPoolSelectionRsrpBased_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PoolSelectionRsrpBased::PoolSelectionRsrpBased() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PoolSelectionRsrpBased::PoolSelectionRsrpBased(ns3::LteRrcSap::PoolSelectionRsrpBased const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PoolSelectionRsrpBased const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PoolSelectionRsrpBased::threshHigh [variable]
    cls.add_instance_attribute('threshHigh', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PoolSelectionRsrpBased::threshLow [variable]
    cls.add_instance_attribute('threshLow', 'uint32_t', is_const=False)
    return

def register_Ns3LteRrcSapPrachConfigSCell_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PrachConfigSCell::PrachConfigSCell() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PrachConfigSCell::PrachConfigSCell(ns3::LteRrcSap::PrachConfigSCell const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PrachConfigSCell const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PrachConfigSCell::index [variable]
    cls.add_instance_attribute('index', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapPreambleInfo_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PreambleInfo::PreambleInfo() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PreambleInfo::PreambleInfo(ns3::LteRrcSap::PreambleInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PreambleInfo const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PreambleInfo::numberOfRaPreambles [variable]
    cls.add_instance_attribute('numberOfRaPreambles', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapPuschConfigDedicatedSCell_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PuschConfigDedicatedSCell::PuschConfigDedicatedSCell() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PuschConfigDedicatedSCell::PuschConfigDedicatedSCell(ns3::LteRrcSap::PuschConfigDedicatedSCell const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::PuschConfigDedicatedSCell const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::PuschConfigDedicatedSCell::nPuschIdentity [variable]
    cls.add_instance_attribute('nPuschIdentity', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapQuantityConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::QuantityConfig::QuantityConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::QuantityConfig::QuantityConfig(ns3::LteRrcSap::QuantityConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::QuantityConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::QuantityConfig::filterCoefficientRSRP [variable]
    cls.add_instance_attribute('filterCoefficientRSRP', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::QuantityConfig::filterCoefficientRSRQ [variable]
    cls.add_instance_attribute('filterCoefficientRSRQ', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapRaSupervisionInfo_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RaSupervisionInfo::RaSupervisionInfo() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RaSupervisionInfo::RaSupervisionInfo(ns3::LteRrcSap::RaSupervisionInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RaSupervisionInfo const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RaSupervisionInfo::preambleTransMax [variable]
    cls.add_instance_attribute('preambleTransMax', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RaSupervisionInfo::raResponseWindowSize [variable]
    cls.add_instance_attribute('raResponseWindowSize', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapRachConfigCommon_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RachConfigCommon::RachConfigCommon() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RachConfigCommon::RachConfigCommon(ns3::LteRrcSap::RachConfigCommon const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RachConfigCommon const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RachConfigCommon::preambleInfo [variable]
    cls.add_instance_attribute('preambleInfo', 'ns3::LteRrcSap::PreambleInfo', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RachConfigCommon::raSupervisionInfo [variable]
    cls.add_instance_attribute('raSupervisionInfo', 'ns3::LteRrcSap::RaSupervisionInfo', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RachConfigCommon::txFailParam [variable]
    cls.add_instance_attribute('txFailParam', 'ns3::LteRrcSap::TxFailParam', is_const=False)
    return

def register_Ns3LteRrcSapRachConfigDedicated_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RachConfigDedicated::RachConfigDedicated() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RachConfigDedicated::RachConfigDedicated(ns3::LteRrcSap::RachConfigDedicated const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RachConfigDedicated const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RachConfigDedicated::raPrachMaskIndex [variable]
    cls.add_instance_attribute('raPrachMaskIndex', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RachConfigDedicated::raPreambleIndex [variable]
    cls.add_instance_attribute('raPreambleIndex', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapRadioResourceConfigCommon_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommon::RadioResourceConfigCommon() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommon::RadioResourceConfigCommon(ns3::LteRrcSap::RadioResourceConfigCommon const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RadioResourceConfigCommon const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommon::rachConfigCommon [variable]
    cls.add_instance_attribute('rachConfigCommon', 'ns3::LteRrcSap::RachConfigCommon', is_const=False)
    return

def register_Ns3LteRrcSapRadioResourceConfigCommonSCell_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSCell::RadioResourceConfigCommonSCell() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSCell::RadioResourceConfigCommonSCell(ns3::LteRrcSap::RadioResourceConfigCommonSCell const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RadioResourceConfigCommonSCell const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSCell::haveNonUlConfiguration [variable]
    cls.add_instance_attribute('haveNonUlConfiguration', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSCell::haveUlConfiguration [variable]
    cls.add_instance_attribute('haveUlConfiguration', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSCell::nonUlConfiguration [variable]
    cls.add_instance_attribute('nonUlConfiguration', 'ns3::LteRrcSap::NonUlConfiguration', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSCell::ulConfiguration [variable]
    cls.add_instance_attribute('ulConfiguration', 'ns3::LteRrcSap::UlConfiguration', is_const=False)
    return

def register_Ns3LteRrcSapRadioResourceConfigCommonSib_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSib::RadioResourceConfigCommonSib() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSib::RadioResourceConfigCommonSib(ns3::LteRrcSap::RadioResourceConfigCommonSib const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RadioResourceConfigCommonSib const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSib::pdschConfigCommon [variable]
    cls.add_instance_attribute('pdschConfigCommon', 'ns3::LteRrcSap::PdschConfigCommon', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigCommonSib::rachConfigCommon [variable]
    cls.add_instance_attribute('rachConfigCommon', 'ns3::LteRrcSap::RachConfigCommon', is_const=False)
    return

def register_Ns3LteRrcSapRadioResourceConfigDedicated_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicated::RadioResourceConfigDedicated() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicated::RadioResourceConfigDedicated(ns3::LteRrcSap::RadioResourceConfigDedicated const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RadioResourceConfigDedicated const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicated::drbToAddModList [variable]
    cls.add_instance_attribute('drbToAddModList', 'std::list< ns3::LteRrcSap::DrbToAddMod >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicated::drbToReleaseList [variable]
    cls.add_instance_attribute('drbToReleaseList', 'std::list< unsigned char >', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicated::havePhysicalConfigDedicated [variable]
    cls.add_instance_attribute('havePhysicalConfigDedicated', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicated::physicalConfigDedicated [variable]
    cls.add_instance_attribute('physicalConfigDedicated', 'ns3::LteRrcSap::PhysicalConfigDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicated::srbToAddModList [variable]
    cls.add_instance_attribute('srbToAddModList', 'std::list< ns3::LteRrcSap::SrbToAddMod >', is_const=False)
    return

def register_Ns3LteRrcSapRadioResourceConfigDedicatedSCell_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicatedSCell::RadioResourceConfigDedicatedSCell() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicatedSCell::RadioResourceConfigDedicatedSCell(ns3::LteRrcSap::RadioResourceConfigDedicatedSCell const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RadioResourceConfigDedicatedSCell const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicatedSCell::physicalConfigDedicatedSCell [variable]
    cls.add_instance_attribute('physicalConfigDedicatedSCell', 'ns3::LteRrcSap::PhysicalConfigDedicatedSCell', is_const=False)
    return

def register_Ns3LteRrcSapReestabUeIdentity_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReestabUeIdentity::ReestabUeIdentity() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReestabUeIdentity::ReestabUeIdentity(ns3::LteRrcSap::ReestabUeIdentity const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::ReestabUeIdentity const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReestabUeIdentity::cRnti [variable]
    cls.add_instance_attribute('cRnti', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReestabUeIdentity::physCellId [variable]
    cls.add_instance_attribute('physCellId', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapReportConfigEutra_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::ReportConfigEutra(ns3::LteRrcSap::ReportConfigEutra const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::ReportConfigEutra const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::ReportConfigEutra() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::a3Offset [variable]
    cls.add_instance_attribute('a3Offset', 'int8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::hysteresis [variable]
    cls.add_instance_attribute('hysteresis', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::maxReportCells [variable]
    cls.add_instance_attribute('maxReportCells', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::purpose [variable]
    cls.add_instance_attribute('purpose', 'ns3::LteRrcSap::ReportConfigEutra::report', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::reportAmount [variable]
    cls.add_instance_attribute('reportAmount', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::reportOnLeave [variable]
    cls.add_instance_attribute('reportOnLeave', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::threshold1 [variable]
    cls.add_instance_attribute('threshold1', 'ns3::LteRrcSap::ThresholdEutra', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::threshold2 [variable]
    cls.add_instance_attribute('threshold2', 'ns3::LteRrcSap::ThresholdEutra', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigEutra::timeToTrigger [variable]
    cls.add_instance_attribute('timeToTrigger', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapReportConfigToAddMod_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigToAddMod::ReportConfigToAddMod() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigToAddMod::ReportConfigToAddMod(ns3::LteRrcSap::ReportConfigToAddMod const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::ReportConfigToAddMod const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigToAddMod::reportConfigEutra [variable]
    cls.add_instance_attribute('reportConfigEutra', 'ns3::LteRrcSap::ReportConfigEutra', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ReportConfigToAddMod::reportConfigId [variable]
    cls.add_instance_attribute('reportConfigId', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapRetxBsrTimer_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RetxBsrTimer::RetxBsrTimer() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RetxBsrTimer::RetxBsrTimer(ns3::LteRrcSap::RetxBsrTimer const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RetxBsrTimer const &', 'arg0')])
    return

def register_Ns3LteRrcSapRlcConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RlcConfig::RlcConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RlcConfig::RlcConfig(ns3::LteRrcSap::RlcConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RlcConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RlcConfig::choice [variable]
    cls.add_instance_attribute('choice', 'ns3::LteRrcSap::RlcConfig::direction', is_const=False)
    return

def register_Ns3LteRrcSapRrcConnectionReconfiguration_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::RrcConnectionReconfiguration() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::RrcConnectionReconfiguration(ns3::LteRrcSap::RrcConnectionReconfiguration const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RrcConnectionReconfiguration const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::haveMeasConfig [variable]
    cls.add_instance_attribute('haveMeasConfig', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::haveMobilityControlInfo [variable]
    cls.add_instance_attribute('haveMobilityControlInfo', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::haveNonCriticalExtension [variable]
    cls.add_instance_attribute('haveNonCriticalExtension', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::haveRadioResourceConfigDedicated [variable]
    cls.add_instance_attribute('haveRadioResourceConfigDedicated', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::haveSlCommConfig [variable]
    cls.add_instance_attribute('haveSlCommConfig', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::haveSlDiscConfig [variable]
    cls.add_instance_attribute('haveSlDiscConfig', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::measConfig [variable]
    cls.add_instance_attribute('measConfig', 'ns3::LteRrcSap::MeasConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::mobilityControlInfo [variable]
    cls.add_instance_attribute('mobilityControlInfo', 'ns3::LteRrcSap::MobilityControlInfo', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::nonCriticalExtension [variable]
    cls.add_instance_attribute('nonCriticalExtension', 'ns3::LteRrcSap::NonCriticalExtensionConfiguration', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::radioResourceConfigDedicated [variable]
    cls.add_instance_attribute('radioResourceConfigDedicated', 'ns3::LteRrcSap::RadioResourceConfigDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::slCommConfig [variable]
    cls.add_instance_attribute('slCommConfig', 'ns3::LteRrcSap::SlCommConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration::slDiscConfig [variable]
    cls.add_instance_attribute('slDiscConfig', 'ns3::LteRrcSap::SlDiscConfig', is_const=False)
    return

def register_Ns3LteRrcSapRrcConnectionReconfigurationCompleted_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfigurationCompleted::RrcConnectionReconfigurationCompleted() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfigurationCompleted::RrcConnectionReconfigurationCompleted(ns3::LteRrcSap::RrcConnectionReconfigurationCompleted const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RrcConnectionReconfigurationCompleted const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfigurationCompleted::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapRrcConnectionReestablishment_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishment::RrcConnectionReestablishment() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishment::RrcConnectionReestablishment(ns3::LteRrcSap::RrcConnectionReestablishment const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RrcConnectionReestablishment const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishment::radioResourceConfigDedicated [variable]
    cls.add_instance_attribute('radioResourceConfigDedicated', 'ns3::LteRrcSap::RadioResourceConfigDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishment::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapRrcConnectionReestablishmentComplete_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentComplete::RrcConnectionReestablishmentComplete() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentComplete::RrcConnectionReestablishmentComplete(ns3::LteRrcSap::RrcConnectionReestablishmentComplete const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RrcConnectionReestablishmentComplete const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentComplete::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapRrcConnectionReestablishmentReject_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentReject::RrcConnectionReestablishmentReject() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentReject::RrcConnectionReestablishmentReject(ns3::LteRrcSap::RrcConnectionReestablishmentReject const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RrcConnectionReestablishmentReject const &', 'arg0')])
    return

def register_Ns3LteRrcSapRrcConnectionReestablishmentRequest_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentRequest::RrcConnectionReestablishmentRequest() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentRequest::RrcConnectionReestablishmentRequest(ns3::LteRrcSap::RrcConnectionReestablishmentRequest const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RrcConnectionReestablishmentRequest const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentRequest::reestablishmentCause [variable]
    cls.add_instance_attribute('reestablishmentCause', 'ns3::LteRrcSap::ReestablishmentCause', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReestablishmentRequest::ueIdentity [variable]
    cls.add_instance_attribute('ueIdentity', 'ns3::LteRrcSap::ReestabUeIdentity', is_const=False)
    return

def register_Ns3LteRrcSapRrcConnectionReject_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReject::RrcConnectionReject() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReject::RrcConnectionReject(ns3::LteRrcSap::RrcConnectionReject const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RrcConnectionReject const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReject::waitTime [variable]
    cls.add_instance_attribute('waitTime', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapRrcConnectionRelease_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionRelease::RrcConnectionRelease() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionRelease::RrcConnectionRelease(ns3::LteRrcSap::RrcConnectionRelease const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RrcConnectionRelease const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionRelease::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapRrcConnectionRequest_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionRequest::RrcConnectionRequest() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionRequest::RrcConnectionRequest(ns3::LteRrcSap::RrcConnectionRequest const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RrcConnectionRequest const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionRequest::ueIdentity [variable]
    cls.add_instance_attribute('ueIdentity', 'uint64_t', is_const=False)
    return

def register_Ns3LteRrcSapRrcConnectionSetup_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionSetup::RrcConnectionSetup() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionSetup::RrcConnectionSetup(ns3::LteRrcSap::RrcConnectionSetup const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RrcConnectionSetup const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionSetup::radioResourceConfigDedicated [variable]
    cls.add_instance_attribute('radioResourceConfigDedicated', 'ns3::LteRrcSap::RadioResourceConfigDedicated', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionSetup::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapRrcConnectionSetupCompleted_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionSetupCompleted::RrcConnectionSetupCompleted() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionSetupCompleted::RrcConnectionSetupCompleted(ns3::LteRrcSap::RrcConnectionSetupCompleted const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::RrcConnectionSetupCompleted const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionSetupCompleted::rrcTransactionIdentifier [variable]
    cls.add_instance_attribute('rrcTransactionIdentifier', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapSCellToAddMod_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SCellToAddMod::SCellToAddMod() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SCellToAddMod::SCellToAddMod(ns3::LteRrcSap::SCellToAddMod const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SCellToAddMod const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SCellToAddMod::cellIdentification [variable]
    cls.add_instance_attribute('cellIdentification', 'ns3::LteRrcSap::CellIdentification', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SCellToAddMod::haveRadioResourceConfigDedicatedSCell [variable]
    cls.add_instance_attribute('haveRadioResourceConfigDedicatedSCell', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SCellToAddMod::radioResourceConfigCommonSCell [variable]
    cls.add_instance_attribute('radioResourceConfigCommonSCell', 'ns3::LteRrcSap::RadioResourceConfigCommonSCell', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SCellToAddMod::radioResourceConfigDedicatedSCell [variable]
    cls.add_instance_attribute('radioResourceConfigDedicatedSCell', 'ns3::LteRrcSap::RadioResourceConfigDedicatedSCell', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SCellToAddMod::sCellIndex [variable]
    cls.add_instance_attribute('sCellIndex', 'uint32_t', is_const=False)
    return

def register_Ns3LteRrcSapSib18CommConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib18CommConfig::Sib18CommConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib18CommConfig::Sib18CommConfig(ns3::LteRrcSap::Sib18CommConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::Sib18CommConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib18CommConfig::commRxPool [variable]
    cls.add_instance_attribute('commRxPool', 'ns3::LteRrcSap::SlCommRxPoolList', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib18CommConfig::commSyncConfig [variable]
    cls.add_instance_attribute('commSyncConfig', 'ns3::LteRrcSap::SlSyncConfigList', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib18CommConfig::commTxPoolExceptional [variable]
    cls.add_instance_attribute('commTxPoolExceptional', 'ns3::LteRrcSap::SlCommTxPoolList', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib18CommConfig::commTxPoolNormalCommon [variable]
    cls.add_instance_attribute('commTxPoolNormalCommon', 'ns3::LteRrcSap::SlCommTxPoolList', is_const=False)
    return

def register_Ns3LteRrcSapSib19DiscConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfig::Sib19DiscConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfig::Sib19DiscConfig(ns3::LteRrcSap::Sib19DiscConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::Sib19DiscConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfig::discRxPool [variable]
    cls.add_instance_attribute('discRxPool', 'ns3::LteRrcSap::SlDiscRxPoolList', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfig::discSyncConfig [variable]
    cls.add_instance_attribute('discSyncConfig', 'ns3::LteRrcSap::SlSyncConfigList', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfig::discTxPoolCommon [variable]
    cls.add_instance_attribute('discTxPoolCommon', 'ns3::LteRrcSap::SlDiscTxPoolList', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfig::discTxPowerInfo [variable]
    cls.add_instance_attribute('discTxPowerInfo', 'ns3::LteRrcSap::SlDiscTxPowerInfoList', is_const=False)
    return

def register_Ns3LteRrcSapSib19DiscConfigRelay_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfigRelay::Sib19DiscConfigRelay() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfigRelay::Sib19DiscConfigRelay(ns3::LteRrcSap::Sib19DiscConfigRelay const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::Sib19DiscConfigRelay const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfigRelay::haveRelayUeConfig [variable]
    cls.add_instance_attribute('haveRelayUeConfig', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfigRelay::haveRemoteUeConfig [variable]
    cls.add_instance_attribute('haveRemoteUeConfig', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfigRelay::relayUeConfig [variable]
    cls.add_instance_attribute('relayUeConfig', 'ns3::LteRrcSap::SlDiscConfigRelayUe', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::Sib19DiscConfigRelay::remoteUeConfig [variable]
    cls.add_instance_attribute('remoteUeConfig', 'ns3::LteRrcSap::SlDiscConfigRemoteUe', is_const=False)
    return

def register_Ns3LteRrcSapSidelinkUeInformation_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SidelinkUeInformation::SidelinkUeInformation() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SidelinkUeInformation::SidelinkUeInformation(ns3::LteRrcSap::SidelinkUeInformation const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SidelinkUeInformation const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SidelinkUeInformation::commRxInterestedFreq [variable]
    cls.add_instance_attribute('commRxInterestedFreq', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SidelinkUeInformation::discRxInterest [variable]
    cls.add_instance_attribute('discRxInterest', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SidelinkUeInformation::discTxResourceReq [variable]
    cls.add_instance_attribute('discTxResourceReq', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SidelinkUeInformation::haveCommRxInterestedFreq [variable]
    cls.add_instance_attribute('haveCommRxInterestedFreq', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SidelinkUeInformation::haveCommTxResourceReq [variable]
    cls.add_instance_attribute('haveCommTxResourceReq', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SidelinkUeInformation::haveDiscRxInterest [variable]
    cls.add_instance_attribute('haveDiscRxInterest', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SidelinkUeInformation::haveDiscTxResourceReq [variable]
    cls.add_instance_attribute('haveDiscTxResourceReq', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SidelinkUeInformation::slCommTxResourceReq [variable]
    cls.add_instance_attribute('slCommTxResourceReq', 'ns3::LteRrcSap::SlCommTxResourceReq', is_const=False)
    return

def register_Ns3LteRrcSapSlCarrierFreqInfoList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCarrierFreqInfoList::SlCarrierFreqInfoList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCarrierFreqInfoList::SlCarrierFreqInfoList(ns3::LteRrcSap::SlCarrierFreqInfoList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCarrierFreqInfoList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCarrierFreqInfoList::carrierFreq [variable]
    cls.add_instance_attribute('carrierFreq', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCarrierFreqInfoList::plmnIdentityList [variable]
    cls.add_instance_attribute('plmnIdentityList', 'ns3::LteRrcSap::PlmnIdentityList', is_const=False)
    return

def register_Ns3LteRrcSapSlCommConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfig::SlCommConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfig::SlCommConfig(ns3::LteRrcSap::SlCommConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfig::setup [variable]
    cls.add_instance_attribute('setup', 'ns3::LteRrcSap::SlCommTxResourcesSetup', is_const=False)
    return

def register_Ns3LteRrcSapSlCommConfigScheduled_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigScheduled::SlCommConfigScheduled() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigScheduled::SlCommConfigScheduled(ns3::LteRrcSap::SlCommConfigScheduled const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommConfigScheduled const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigScheduled::commTxConfig [variable]
    cls.add_instance_attribute('commTxConfig', 'ns3::LteRrcSap::SlCommResourcePool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigScheduled::crnti [variable]
    cls.add_instance_attribute('crnti', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigScheduled::haveMcs [variable]
    cls.add_instance_attribute('haveMcs', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigScheduled::macMainConfig [variable]
    cls.add_instance_attribute('macMainConfig', 'ns3::LteRrcSap::SlMacMainConfigSl', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigScheduled::mcs [variable]
    cls.add_instance_attribute('mcs', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapSlCommConfigUeSelected_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigUeSelected::SlCommConfigUeSelected() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigUeSelected::SlCommConfigUeSelected(ns3::LteRrcSap::SlCommConfigUeSelected const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommConfigUeSelected const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigUeSelected::havePoolToAdd [variable]
    cls.add_instance_attribute('havePoolToAdd', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigUeSelected::havePoolToRelease [variable]
    cls.add_instance_attribute('havePoolToRelease', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigUeSelected::poolToAddModList [variable]
    cls.add_instance_attribute('poolToAddModList', 'ns3::LteRrcSap::SlCommTxPoolToAddModList', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommConfigUeSelected::poolToRelease [variable]
    cls.add_instance_attribute('poolToRelease', 'ns3::LteRrcSap::SlTxPoolToReleaseList', is_const=False)
    return

def register_Ns3LteRrcSapSlCommResourcePool_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::SlCommResourcePool() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::SlCommResourcePool(ns3::LteRrcSap::SlCommResourcePool const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommResourcePool const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::dataCpLen [variable]
    cls.add_instance_attribute('dataCpLen', 'ns3::LteRrcSap::SlCpLen', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::dataHoppingConfig [variable]
    cls.add_instance_attribute('dataHoppingConfig', 'ns3::LteRrcSap::SlHoppingConfigComm', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::haveTxParameters [variable]
    cls.add_instance_attribute('haveTxParameters', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::haveUeSelectedResourceConfig [variable]
    cls.add_instance_attribute('haveUeSelectedResourceConfig', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::scCpLen [variable]
    cls.add_instance_attribute('scCpLen', 'ns3::LteRrcSap::SlCpLen', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::scPeriod [variable]
    cls.add_instance_attribute('scPeriod', 'ns3::LteRrcSap::SlPeriodComm', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::scTfResourceConfig [variable]
    cls.add_instance_attribute('scTfResourceConfig', 'ns3::LteRrcSap::SlTfResourceConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::txParameters [variable]
    cls.add_instance_attribute('txParameters', 'ns3::LteRrcSap::SlCommResourcePool::TxParameters', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::ueSelectedResourceConfig [variable]
    cls.add_instance_attribute('ueSelectedResourceConfig', 'ns3::LteRrcSap::SlCommResourcePool::UeSelectedResourceConfig', is_const=False)
    return

def register_Ns3LteRrcSapSlCommResourcePoolTxParameters_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::TxParameters::TxParameters() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::TxParameters::TxParameters(ns3::LteRrcSap::SlCommResourcePool::TxParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommResourcePool::TxParameters const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::TxParameters::dataTxParameters [variable]
    cls.add_instance_attribute('dataTxParameters', 'ns3::LteRrcSap::SlTxParameters', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::TxParameters::scTxParameters [variable]
    cls.add_instance_attribute('scTxParameters', 'ns3::LteRrcSap::SlTxParameters', is_const=False)
    return

def register_Ns3LteRrcSapSlCommResourcePoolUeSelectedResourceConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::UeSelectedResourceConfig::UeSelectedResourceConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::UeSelectedResourceConfig::UeSelectedResourceConfig(ns3::LteRrcSap::SlCommResourcePool::UeSelectedResourceConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommResourcePool::UeSelectedResourceConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::UeSelectedResourceConfig::dataTfResourceConfig [variable]
    cls.add_instance_attribute('dataTfResourceConfig', 'ns3::LteRrcSap::SlTfResourceConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::UeSelectedResourceConfig::haveTrptSubset [variable]
    cls.add_instance_attribute('haveTrptSubset', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommResourcePool::UeSelectedResourceConfig::trptSubset [variable]
    cls.add_instance_attribute('trptSubset', 'ns3::LteRrcSap::SlTrptSubset', is_const=False)
    return

def register_Ns3LteRrcSapSlCommRxPoolList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommRxPoolList::SlCommRxPoolList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommRxPoolList::SlCommRxPoolList(ns3::LteRrcSap::SlCommRxPoolList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommRxPoolList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommRxPoolList::nbPools [variable]
    cls.add_instance_attribute('nbPools', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommRxPoolList::pools [variable]
    cls.add_instance_attribute('pools', 'ns3::LteRrcSap::SlCommResourcePool [ 16 ]', is_const=False)
    return

def register_Ns3LteRrcSapSlCommTxPoolList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolList::SlCommTxPoolList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolList::SlCommTxPoolList(ns3::LteRrcSap::SlCommTxPoolList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommTxPoolList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolList::nbPools [variable]
    cls.add_instance_attribute('nbPools', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolList::pools [variable]
    cls.add_instance_attribute('pools', 'ns3::LteRrcSap::SlCommResourcePool [ 4 ]', is_const=False)
    return

def register_Ns3LteRrcSapSlCommTxPoolToAddMod_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolToAddMod::SlCommTxPoolToAddMod() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolToAddMod::SlCommTxPoolToAddMod(ns3::LteRrcSap::SlCommTxPoolToAddMod const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommTxPoolToAddMod const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolToAddMod::pool [variable]
    cls.add_instance_attribute('pool', 'ns3::LteRrcSap::SlCommResourcePool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolToAddMod::poolIdentity [variable]
    cls.add_instance_attribute('poolIdentity', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapSlCommTxPoolToAddModList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolToAddModList::SlCommTxPoolToAddModList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolToAddModList::SlCommTxPoolToAddModList(ns3::LteRrcSap::SlCommTxPoolToAddModList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommTxPoolToAddModList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolToAddModList::nbPools [variable]
    cls.add_instance_attribute('nbPools', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxPoolToAddModList::pools [variable]
    cls.add_instance_attribute('pools', 'ns3::LteRrcSap::SlCommTxPoolToAddMod [ 4 ]', is_const=False)
    return

def register_Ns3LteRrcSapSlCommTxResourceReq_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxResourceReq::SlCommTxResourceReq() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxResourceReq::SlCommTxResourceReq(ns3::LteRrcSap::SlCommTxResourceReq const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommTxResourceReq const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxResourceReq::carrierFreq [variable]
    cls.add_instance_attribute('carrierFreq', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxResourceReq::slDestinationInfoList [variable]
    cls.add_instance_attribute('slDestinationInfoList', 'ns3::LteRrcSap::SlDestinationInfoList', is_const=False)
    return

def register_Ns3LteRrcSapSlCommTxResourcesSetup_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxResourcesSetup::SlCommTxResourcesSetup() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxResourcesSetup::SlCommTxResourcesSetup(ns3::LteRrcSap::SlCommTxResourcesSetup const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCommTxResourcesSetup const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxResourcesSetup::scheduled [variable]
    cls.add_instance_attribute('scheduled', 'ns3::LteRrcSap::SlCommConfigScheduled', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCommTxResourcesSetup::ueSelected [variable]
    cls.add_instance_attribute('ueSelected', 'ns3::LteRrcSap::SlCommConfigUeSelected', is_const=False)
    return

def register_Ns3LteRrcSapSlCpLen_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCpLen::SlCpLen() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlCpLen::SlCpLen(ns3::LteRrcSap::SlCpLen const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlCpLen const &', 'arg0')])
    return

def register_Ns3LteRrcSapSlDestinationInfoList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDestinationInfoList::SlDestinationInfoList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDestinationInfoList::SlDestinationInfoList(ns3::LteRrcSap::SlDestinationInfoList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDestinationInfoList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDestinationInfoList::SlDestinationIdentity [variable]
    cls.add_instance_attribute('SlDestinationIdentity', 'uint32_t [ 16 ]', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDestinationInfoList::nbDestinations [variable]
    cls.add_instance_attribute('nbDestinations', 'int', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfig::SlDiscConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfig::SlDiscConfig(ns3::LteRrcSap::SlDiscConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfig::setup [variable]
    cls.add_instance_attribute('setup', 'ns3::LteRrcSap::SlDiscTxResourcesSetup', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscConfigRelayUe_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRelayUe::SlDiscConfigRelayUe() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRelayUe::SlDiscConfigRelayUe(ns3::LteRrcSap::SlDiscConfigRelayUe const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscConfigRelayUe const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRelayUe::hystMax [variable]
    cls.add_instance_attribute('hystMax', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRelayUe::hystMin [variable]
    cls.add_instance_attribute('hystMin', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRelayUe::threshHigh [variable]
    cls.add_instance_attribute('threshHigh', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRelayUe::threshLow [variable]
    cls.add_instance_attribute('threshLow', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscConfigRemoteUe_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRemoteUe::SlDiscConfigRemoteUe() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRemoteUe::SlDiscConfigRemoteUe(ns3::LteRrcSap::SlDiscConfigRemoteUe const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscConfigRemoteUe const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRemoteUe::haveReselectionInfoIc [variable]
    cls.add_instance_attribute('haveReselectionInfoIc', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRemoteUe::hystMax [variable]
    cls.add_instance_attribute('hystMax', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRemoteUe::reselectionInfoIc [variable]
    cls.add_instance_attribute('reselectionInfoIc', 'ns3::LteRrcSap::SlReselectionInfoRelay', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigRemoteUe::threshHigh [variable]
    cls.add_instance_attribute('threshHigh', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscConfigScheduled_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigScheduled::SlDiscConfigScheduled() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigScheduled::SlDiscConfigScheduled(ns3::LteRrcSap::SlDiscConfigScheduled const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscConfigScheduled const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigScheduled::discHoppingConfigDisc [variable]
    cls.add_instance_attribute('discHoppingConfigDisc', 'ns3::LteRrcSap::SlHoppingConfigDisc', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigScheduled::discTfIndexList [variable]
    cls.add_instance_attribute('discTfIndexList', 'ns3::LteRrcSap::SlTfIndexPairList', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigScheduled::discTxConfig [variable]
    cls.add_instance_attribute('discTxConfig', 'ns3::LteRrcSap::SlDiscResourcePool', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscConfigUeSelected_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigUeSelected::SlDiscConfigUeSelected() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigUeSelected::SlDiscConfigUeSelected(ns3::LteRrcSap::SlDiscConfigUeSelected const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscConfigUeSelected const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigUeSelected::havePoolToAdd [variable]
    cls.add_instance_attribute('havePoolToAdd', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigUeSelected::havePoolToRelease [variable]
    cls.add_instance_attribute('havePoolToRelease', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigUeSelected::poolToAddModList [variable]
    cls.add_instance_attribute('poolToAddModList', 'ns3::LteRrcSap::SlDiscTxPoolToAddModList', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscConfigUeSelected::poolToRelease [variable]
    cls.add_instance_attribute('poolToRelease', 'ns3::LteRrcSap::SlTxPoolToReleaseList', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscResourcePool_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::SlDiscResourcePool() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::SlDiscResourcePool(ns3::LteRrcSap::SlDiscResourcePool const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscResourcePool const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::cpLen [variable]
    cls.add_instance_attribute('cpLen', 'ns3::LteRrcSap::SlCpLen', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::discPeriod [variable]
    cls.add_instance_attribute('discPeriod', 'ns3::LteRrcSap::SlPeriodDisc', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::haveRxParameters [variable]
    cls.add_instance_attribute('haveRxParameters', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::haveTxParameters [variable]
    cls.add_instance_attribute('haveTxParameters', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::numRepetition [variable]
    cls.add_instance_attribute('numRepetition', 'int32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::numRetx [variable]
    cls.add_instance_attribute('numRetx', 'int8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::rxParameters [variable]
    cls.add_instance_attribute('rxParameters', 'ns3::LteRrcSap::SlDiscResourcePool::RxParameters', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::tfResourceConfig [variable]
    cls.add_instance_attribute('tfResourceConfig', 'ns3::LteRrcSap::SlTfResourceConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::txParameters [variable]
    cls.add_instance_attribute('txParameters', 'ns3::LteRrcSap::SlDiscResourcePool::TxParameters', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscResourcePoolRxParameters_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::RxParameters::RxParameters() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::RxParameters::RxParameters(ns3::LteRrcSap::SlDiscResourcePool::RxParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscResourcePool::RxParameters const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::RxParameters::syncConfigIndex [variable]
    cls.add_instance_attribute('syncConfigIndex', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::RxParameters::tddConfig [variable]
    cls.add_instance_attribute('tddConfig', 'ns3::LteRrcSap::SlDiscResourcePool::RxParameters::TddConfig', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscResourcePoolRxParametersTddConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::RxParameters::TddConfig::TddConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::RxParameters::TddConfig::TddConfig(ns3::LteRrcSap::SlDiscResourcePool::RxParameters::TddConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscResourcePool::RxParameters::TddConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::RxParameters::TddConfig::specialSubframePatterns [variable]
    cls.add_instance_attribute('specialSubframePatterns', 'ns3::LteRrcSap::SpecialSubframePatterns', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::RxParameters::TddConfig::subframeAssignment [variable]
    cls.add_instance_attribute('subframeAssignment', 'ns3::LteRrcSap::SubframeAssignment', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscResourcePoolTxParameters_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters::TxParameters() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters::TxParameters(ns3::LteRrcSap::SlDiscResourcePool::TxParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscResourcePool::TxParameters const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters::txParametersGeneral [variable]
    cls.add_instance_attribute('txParametersGeneral', 'ns3::LteRrcSap::SlTxParameters', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters::ueSelectedResourceConfig [variable]
    cls.add_instance_attribute('ueSelectedResourceConfig', 'ns3::LteRrcSap::SlDiscResourcePool::TxParameters::UeSelectedResourceConfig', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscResourcePoolTxParametersUeSelectedResourceConfig_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters::UeSelectedResourceConfig::UeSelectedResourceConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters::UeSelectedResourceConfig::UeSelectedResourceConfig(ns3::LteRrcSap::SlDiscResourcePool::TxParameters::UeSelectedResourceConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscResourcePool::TxParameters::UeSelectedResourceConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters::UeSelectedResourceConfig::havePoolSelectionRsrpBased [variable]
    cls.add_instance_attribute('havePoolSelectionRsrpBased', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters::UeSelectedResourceConfig::poolSelection [variable]
    cls.add_instance_attribute('poolSelection', 'ns3::LteRrcSap::PoolSelection', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters::UeSelectedResourceConfig::poolSelectionRsrpBased [variable]
    cls.add_instance_attribute('poolSelectionRsrpBased', 'ns3::LteRrcSap::PoolSelectionRsrpBased', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscResourcePool::TxParameters::UeSelectedResourceConfig::txProbability [variable]
    cls.add_instance_attribute('txProbability', 'ns3::LteRrcSap::TxProbability', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscRxPoolList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscRxPoolList::SlDiscRxPoolList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscRxPoolList::SlDiscRxPoolList(ns3::LteRrcSap::SlDiscRxPoolList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscRxPoolList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscRxPoolList::nbPools [variable]
    cls.add_instance_attribute('nbPools', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscRxPoolList::pools [variable]
    cls.add_instance_attribute('pools', 'ns3::LteRrcSap::SlDiscResourcePool [ 16 ]', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscTxPoolList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolList::SlDiscTxPoolList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolList::SlDiscTxPoolList(ns3::LteRrcSap::SlDiscTxPoolList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscTxPoolList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolList::nbPools [variable]
    cls.add_instance_attribute('nbPools', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolList::pools [variable]
    cls.add_instance_attribute('pools', 'ns3::LteRrcSap::SlDiscResourcePool [ 4 ]', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscTxPoolToAddMod_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolToAddMod::SlDiscTxPoolToAddMod() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolToAddMod::SlDiscTxPoolToAddMod(ns3::LteRrcSap::SlDiscTxPoolToAddMod const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscTxPoolToAddMod const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolToAddMod::pool [variable]
    cls.add_instance_attribute('pool', 'ns3::LteRrcSap::SlDiscResourcePool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolToAddMod::poolIdentity [variable]
    cls.add_instance_attribute('poolIdentity', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscTxPoolToAddModList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolToAddModList::SlDiscTxPoolToAddModList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolToAddModList::SlDiscTxPoolToAddModList(ns3::LteRrcSap::SlDiscTxPoolToAddModList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscTxPoolToAddModList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolToAddModList::nbPools [variable]
    cls.add_instance_attribute('nbPools', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPoolToAddModList::pools [variable]
    cls.add_instance_attribute('pools', 'ns3::LteRrcSap::SlDiscTxPoolToAddMod [ 4 ]', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscTxPowerInfo_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPowerInfo::SlDiscTxPowerInfo() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPowerInfo::SlDiscTxPowerInfo(ns3::LteRrcSap::SlDiscTxPowerInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscTxPowerInfo const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPowerInfo::discMaxTxPower [variable]
    cls.add_instance_attribute('discMaxTxPower', 'uint32_t', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscTxPowerInfoList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPowerInfoList::SlDiscTxPowerInfoList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPowerInfoList::SlDiscTxPowerInfoList(ns3::LteRrcSap::SlDiscTxPowerInfoList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscTxPowerInfoList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPowerInfoList::nbPowerInfo [variable]
    cls.add_instance_attribute('nbPowerInfo', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxPowerInfoList::power [variable]
    cls.add_instance_attribute('power', 'ns3::LteRrcSap::SlDiscTxPowerInfo [ 3 ]', is_const=False)
    return

def register_Ns3LteRrcSapSlDiscTxResourcesSetup_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxResourcesSetup::SlDiscTxResourcesSetup() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxResourcesSetup::SlDiscTxResourcesSetup(ns3::LteRrcSap::SlDiscTxResourcesSetup const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlDiscTxResourcesSetup const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxResourcesSetup::scheduled [variable]
    cls.add_instance_attribute('scheduled', 'ns3::LteRrcSap::SlDiscConfigScheduled', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlDiscTxResourcesSetup::ueSelected [variable]
    cls.add_instance_attribute('ueSelected', 'ns3::LteRrcSap::SlDiscConfigUeSelected', is_const=False)
    return

def register_Ns3LteRrcSapSlHoppingConfigComm_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigComm::SlHoppingConfigComm() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigComm::SlHoppingConfigComm(ns3::LteRrcSap::SlHoppingConfigComm const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlHoppingConfigComm const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigComm::hoppingInfo [variable]
    cls.add_instance_attribute('hoppingInfo', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigComm::hoppingParameter [variable]
    cls.add_instance_attribute('hoppingParameter', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigComm::rbOffset [variable]
    cls.add_instance_attribute('rbOffset', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapSlHoppingConfigDisc_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigDisc::SlHoppingConfigDisc() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigDisc::SlHoppingConfigDisc(ns3::LteRrcSap::SlHoppingConfigDisc const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlHoppingConfigDisc const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigDisc::a [variable]
    cls.add_instance_attribute('a', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigDisc::b [variable]
    cls.add_instance_attribute('b', 'uint32_t', is_const=False)
    return

def register_Ns3LteRrcSapSlMacMainConfigSl_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlMacMainConfigSl::SlMacMainConfigSl() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlMacMainConfigSl::SlMacMainConfigSl(ns3::LteRrcSap::SlMacMainConfigSl const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlMacMainConfigSl const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlMacMainConfigSl::periodicBsrTimer [variable]
    cls.add_instance_attribute('periodicBsrTimer', 'ns3::LteRrcSap::PeriodicBsrTimer', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlMacMainConfigSl::retxBsrTimer [variable]
    cls.add_instance_attribute('retxBsrTimer', 'ns3::LteRrcSap::RetxBsrTimer', is_const=False)
    return

def register_Ns3LteRrcSapSlOffsetIndicator_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlOffsetIndicator::SlOffsetIndicator() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlOffsetIndicator::SlOffsetIndicator(ns3::LteRrcSap::SlOffsetIndicator const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlOffsetIndicator const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlOffsetIndicator::offset [variable]
    cls.add_instance_attribute('offset', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapSlPeriodComm_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPeriodComm::SlPeriodComm() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPeriodComm::SlPeriodComm(ns3::LteRrcSap::SlPeriodComm const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlPeriodComm const &', 'arg0')])
    return

def register_Ns3LteRrcSapSlPeriodDisc_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPeriodDisc::SlPeriodDisc() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPeriodDisc::SlPeriodDisc(ns3::LteRrcSap::SlPeriodDisc const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlPeriodDisc const &', 'arg0')])
    return

def register_Ns3LteRrcSapSlPreconfigCommPool_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool::SlPreconfigCommPool() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool::SlPreconfigCommPool(ns3::LteRrcSap::SlPreconfigCommPool const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlPreconfigCommPool const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool::dataCpLen [variable]
    cls.add_instance_attribute('dataCpLen', 'ns3::LteRrcSap::SlCpLen', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool::dataHoppingConfig [variable]
    cls.add_instance_attribute('dataHoppingConfig', 'ns3::LteRrcSap::SlHoppingConfigComm', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool::dataTfResourceConfig [variable]
    cls.add_instance_attribute('dataTfResourceConfig', 'ns3::LteRrcSap::SlTfResourceConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool::dataTxParameters [variable]
    cls.add_instance_attribute('dataTxParameters', 'ns3::LteRrcSap::SlTxParameters', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool::scCpLen [variable]
    cls.add_instance_attribute('scCpLen', 'ns3::LteRrcSap::SlCpLen', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool::scPeriod [variable]
    cls.add_instance_attribute('scPeriod', 'ns3::LteRrcSap::SlPeriodComm', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool::scTfResourceConfig [variable]
    cls.add_instance_attribute('scTfResourceConfig', 'ns3::LteRrcSap::SlTfResourceConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool::scTxParameters [variable]
    cls.add_instance_attribute('scTxParameters', 'ns3::LteRrcSap::SlTxParameters', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPool::trptSubset [variable]
    cls.add_instance_attribute('trptSubset', 'ns3::LteRrcSap::SlTrptSubset', is_const=False)
    return

def register_Ns3LteRrcSapSlPreconfigCommPoolList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPoolList::SlPreconfigCommPoolList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPoolList::SlPreconfigCommPoolList(ns3::LteRrcSap::SlPreconfigCommPoolList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlPreconfigCommPoolList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPoolList::nbPools [variable]
    cls.add_instance_attribute('nbPools', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigCommPoolList::pools [variable]
    cls.add_instance_attribute('pools', 'ns3::LteRrcSap::SlPreconfigCommPool [ 4 ]', is_const=False)
    return

def register_Ns3LteRrcSapSlPreconfigDiscPool_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::SlPreconfigDiscPool() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::SlPreconfigDiscPool(ns3::LteRrcSap::SlPreconfigDiscPool const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlPreconfigDiscPool const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::cpLen [variable]
    cls.add_instance_attribute('cpLen', 'ns3::LteRrcSap::SlCpLen', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::discPeriod [variable]
    cls.add_instance_attribute('discPeriod', 'ns3::LteRrcSap::SlPeriodDisc', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::numRepetition [variable]
    cls.add_instance_attribute('numRepetition', 'int32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::numRetx [variable]
    cls.add_instance_attribute('numRetx', 'int8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::tfResourceConfig [variable]
    cls.add_instance_attribute('tfResourceConfig', 'ns3::LteRrcSap::SlTfResourceConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::txParameters [variable]
    cls.add_instance_attribute('txParameters', 'ns3::LteRrcSap::SlPreconfigDiscPool::TxParameters', is_const=False)
    return

def register_Ns3LteRrcSapSlPreconfigDiscPoolTxParameters_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::TxParameters::TxParameters() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::TxParameters::TxParameters(ns3::LteRrcSap::SlPreconfigDiscPool::TxParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlPreconfigDiscPool::TxParameters const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::TxParameters::txParametersGeneral [variable]
    cls.add_instance_attribute('txParametersGeneral', 'ns3::LteRrcSap::SlTxParameters', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPool::TxParameters::txProbability [variable]
    cls.add_instance_attribute('txProbability', 'ns3::LteRrcSap::TxProbability', is_const=False)
    return

def register_Ns3LteRrcSapSlPreconfigDiscPoolList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPoolList::SlPreconfigDiscPoolList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPoolList::SlPreconfigDiscPoolList(ns3::LteRrcSap::SlPreconfigDiscPoolList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlPreconfigDiscPoolList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPoolList::nbPools [variable]
    cls.add_instance_attribute('nbPools', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigDiscPoolList::pools [variable]
    cls.add_instance_attribute('pools', 'ns3::LteRrcSap::SlPreconfigDiscPool [ 4 ]', is_const=False)
    return

def register_Ns3LteRrcSapSlPreconfigGeneral_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigGeneral::SlPreconfigGeneral() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigGeneral::SlPreconfigGeneral(ns3::LteRrcSap::SlPreconfigGeneral const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlPreconfigGeneral const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigGeneral::carrierFreq [variable]
    cls.add_instance_attribute('carrierFreq', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigGeneral::slBandwidth [variable]
    cls.add_instance_attribute('slBandwidth', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapSlPreconfigRelay_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigRelay::SlPreconfigRelay() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigRelay::SlPreconfigRelay(ns3::LteRrcSap::SlPreconfigRelay const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlPreconfigRelay const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigRelay::haveReselectionInfoOoc [variable]
    cls.add_instance_attribute('haveReselectionInfoOoc', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigRelay::reselectionInfoOoc [variable]
    cls.add_instance_attribute('reselectionInfoOoc', 'ns3::LteRrcSap::SlReselectionInfoRelay', is_const=False)
    return

def register_Ns3LteRrcSapSlPreconfigSync_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigSync::SlPreconfigSync() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigSync::SlPreconfigSync(ns3::LteRrcSap::SlPreconfigSync const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlPreconfigSync const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigSync::filterCoefficient [variable]
    cls.add_instance_attribute('filterCoefficient', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigSync::syncCPLen [variable]
    cls.add_instance_attribute('syncCPLen', 'ns3::LteRrcSap::SlCpLen', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigSync::syncOffsetIndicator1 [variable]
    cls.add_instance_attribute('syncOffsetIndicator1', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigSync::syncOffsetIndicator2 [variable]
    cls.add_instance_attribute('syncOffsetIndicator2', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigSync::syncRefDiffHyst [variable]
    cls.add_instance_attribute('syncRefDiffHyst', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigSync::syncRefMinHyst [variable]
    cls.add_instance_attribute('syncRefMinHyst', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfigSync::syncTxThreshOoC [variable]
    cls.add_instance_attribute('syncTxThreshOoC', 'int16_t', is_const=False)
    return

def register_Ns3LteRrcSapSlPreconfiguration_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfiguration::SlPreconfiguration() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfiguration::SlPreconfiguration(ns3::LteRrcSap::SlPreconfiguration const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlPreconfiguration const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfiguration::preconfigComm [variable]
    cls.add_instance_attribute('preconfigComm', 'ns3::LteRrcSap::SlPreconfigCommPoolList', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfiguration::preconfigDisc [variable]
    cls.add_instance_attribute('preconfigDisc', 'ns3::LteRrcSap::SlPreconfigDiscPoolList', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfiguration::preconfigGeneral [variable]
    cls.add_instance_attribute('preconfigGeneral', 'ns3::LteRrcSap::SlPreconfigGeneral', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfiguration::preconfigRelay [variable]
    cls.add_instance_attribute('preconfigRelay', 'ns3::LteRrcSap::SlPreconfigRelay', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlPreconfiguration::preconfigSync [variable]
    cls.add_instance_attribute('preconfigSync', 'ns3::LteRrcSap::SlPreconfigSync', is_const=False)
    return

def register_Ns3LteRrcSapSlReselectionInfoRelay_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlReselectionInfoRelay::SlReselectionInfoRelay() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlReselectionInfoRelay::SlReselectionInfoRelay(ns3::LteRrcSap::SlReselectionInfoRelay const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlReselectionInfoRelay const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlReselectionInfoRelay::filterCoefficient [variable]
    cls.add_instance_attribute('filterCoefficient', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlReselectionInfoRelay::minHyst [variable]
    cls.add_instance_attribute('minHyst', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlReselectionInfoRelay::qRxLevMin [variable]
    cls.add_instance_attribute('qRxLevMin', 'int16_t', is_const=False)
    return

def register_Ns3LteRrcSapSlSyncConfigList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlSyncConfigList::SlSyncConfigList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlSyncConfigList::SlSyncConfigList(ns3::LteRrcSap::SlSyncConfigList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlSyncConfigList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlSyncConfigList::nbConfig [variable]
    cls.add_instance_attribute('nbConfig', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapSlTfIndexPair_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfIndexPair::SlTfIndexPair() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfIndexPair::SlTfIndexPair(ns3::LteRrcSap::SlTfIndexPair const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlTfIndexPair const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfIndexPair::discPrbIndex [variable]
    cls.add_instance_attribute('discPrbIndex', 'uint32_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfIndexPair::discSfIndex [variable]
    cls.add_instance_attribute('discSfIndex', 'uint32_t', is_const=False)
    return

def register_Ns3LteRrcSapSlTfIndexPairList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfIndexPairList::SlTfIndexPairList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfIndexPairList::SlTfIndexPairList(ns3::LteRrcSap::SlTfIndexPairList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlTfIndexPairList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfIndexPairList::nbPair [variable]
    cls.add_instance_attribute('nbPair', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfIndexPairList::pair [variable]
    cls.add_instance_attribute('pair', 'ns3::LteRrcSap::SlTfIndexPair [ 64 ]', is_const=False)
    return

def register_Ns3LteRrcSapSlTfResourceConfig_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfResourceConfig::SlTfResourceConfig() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfResourceConfig::SlTfResourceConfig(ns3::LteRrcSap::SlTfResourceConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlTfResourceConfig const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfResourceConfig::offsetIndicator [variable]
    cls.add_instance_attribute('offsetIndicator', 'ns3::LteRrcSap::SlOffsetIndicator', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfResourceConfig::prbEnd [variable]
    cls.add_instance_attribute('prbEnd', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfResourceConfig::prbNum [variable]
    cls.add_instance_attribute('prbNum', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfResourceConfig::prbStart [variable]
    cls.add_instance_attribute('prbStart', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTfResourceConfig::subframeBitmap [variable]
    cls.add_instance_attribute('subframeBitmap', 'ns3::LteRrcSap::SubframeBitmapSl', is_const=False)
    return

def register_Ns3LteRrcSapSlTrptSubset_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTrptSubset::SlTrptSubset() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTrptSubset::SlTrptSubset(ns3::LteRrcSap::SlTrptSubset const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlTrptSubset const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTrptSubset::subset [variable]
    cls.add_instance_attribute('subset', 'std::bitset< 3 >', is_const=False)
    return

def register_Ns3LteRrcSapSlTxParameters_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTxParameters::SlTxParameters() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTxParameters::SlTxParameters(ns3::LteRrcSap::SlTxParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlTxParameters const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTxParameters::p0 [variable]
    cls.add_instance_attribute('p0', 'int16_t', is_const=False)
    return

def register_Ns3LteRrcSapSlTxPoolToReleaseList_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTxPoolToReleaseList::SlTxPoolToReleaseList() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTxPoolToReleaseList::SlTxPoolToReleaseList(ns3::LteRrcSap::SlTxPoolToReleaseList const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SlTxPoolToReleaseList const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTxPoolToReleaseList::nbPools [variable]
    cls.add_instance_attribute('nbPools', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SlTxPoolToReleaseList::poolIdentities [variable]
    cls.add_instance_attribute('poolIdentities', 'uint8_t [ 4 ]', is_const=False)
    return

def register_Ns3LteRrcSapSoundingRsUlConfigCommon_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigCommon::SoundingRsUlConfigCommon() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigCommon::SoundingRsUlConfigCommon(ns3::LteRrcSap::SoundingRsUlConfigCommon const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SoundingRsUlConfigCommon const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigCommon::srsBandwidthConfig [variable]
    cls.add_instance_attribute('srsBandwidthConfig', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigCommon::srsSubframeConfig [variable]
    cls.add_instance_attribute('srsSubframeConfig', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigCommon::type [variable]
    cls.add_instance_attribute('type', 'ns3::LteRrcSap::SoundingRsUlConfigCommon::action', is_const=False)
    return

def register_Ns3LteRrcSapSoundingRsUlConfigDedicated_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigDedicated::SoundingRsUlConfigDedicated() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigDedicated::SoundingRsUlConfigDedicated(ns3::LteRrcSap::SoundingRsUlConfigDedicated const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SoundingRsUlConfigDedicated const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigDedicated::srsBandwidth [variable]
    cls.add_instance_attribute('srsBandwidth', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigDedicated::srsConfigIndex [variable]
    cls.add_instance_attribute('srsConfigIndex', 'uint16_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SoundingRsUlConfigDedicated::type [variable]
    cls.add_instance_attribute('type', 'ns3::LteRrcSap::SoundingRsUlConfigDedicated::action', is_const=False)
    return

def register_Ns3LteRrcSapSpecialSubframePatterns_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpecialSubframePatterns::SpecialSubframePatterns() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpecialSubframePatterns::SpecialSubframePatterns(ns3::LteRrcSap::SpecialSubframePatterns const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SpecialSubframePatterns const &', 'arg0')])
    return

def register_Ns3LteRrcSapSpeedStatePars_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStatePars::SpeedStatePars() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStatePars::SpeedStatePars(ns3::LteRrcSap::SpeedStatePars const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SpeedStatePars const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStatePars::mobilityStateParameters [variable]
    cls.add_instance_attribute('mobilityStateParameters', 'ns3::LteRrcSap::MobilityStateParameters', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStatePars::timeToTriggerSf [variable]
    cls.add_instance_attribute('timeToTriggerSf', 'ns3::LteRrcSap::SpeedStateScaleFactors', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStatePars::type [variable]
    cls.add_instance_attribute('type', 'ns3::LteRrcSap::SpeedStatePars::action', is_const=False)
    return

def register_Ns3LteRrcSapSpeedStateScaleFactors_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStateScaleFactors::SpeedStateScaleFactors() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStateScaleFactors::SpeedStateScaleFactors(ns3::LteRrcSap::SpeedStateScaleFactors const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SpeedStateScaleFactors const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStateScaleFactors::sfHigh [variable]
    cls.add_instance_attribute('sfHigh', 'uint8_t', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SpeedStateScaleFactors::sfMedium [variable]
    cls.add_instance_attribute('sfMedium', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapSrbToAddMod_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SrbToAddMod::SrbToAddMod() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SrbToAddMod::SrbToAddMod(ns3::LteRrcSap::SrbToAddMod const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SrbToAddMod const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SrbToAddMod::logicalChannelConfig [variable]
    cls.add_instance_attribute('logicalChannelConfig', 'ns3::LteRrcSap::LogicalChannelConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SrbToAddMod::srbIdentity [variable]
    cls.add_instance_attribute('srbIdentity', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapSubframeAssignment_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SubframeAssignment::SubframeAssignment() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SubframeAssignment::SubframeAssignment(ns3::LteRrcSap::SubframeAssignment const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SubframeAssignment const &', 'arg0')])
    return

def register_Ns3LteRrcSapSubframeBitmapSl_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SubframeBitmapSl::SubframeBitmapSl() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SubframeBitmapSl::SubframeBitmapSl(ns3::LteRrcSap::SubframeBitmapSl const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SubframeBitmapSl const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SubframeBitmapSl::bitmap [variable]
    cls.add_instance_attribute('bitmap', 'std::bitset< 40 >', is_const=False)
    return

def register_Ns3LteRrcSapSystemInformation_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformation::SystemInformation() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformation::SystemInformation(ns3::LteRrcSap::SystemInformation const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SystemInformation const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformation::haveSib18 [variable]
    cls.add_instance_attribute('haveSib18', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformation::haveSib19 [variable]
    cls.add_instance_attribute('haveSib19', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformation::haveSib2 [variable]
    cls.add_instance_attribute('haveSib2', 'bool', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformation::sib18 [variable]
    cls.add_instance_attribute('sib18', 'ns3::LteRrcSap::SystemInformationBlockType18', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformation::sib19 [variable]
    cls.add_instance_attribute('sib19', 'ns3::LteRrcSap::SystemInformationBlockType19', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformation::sib2 [variable]
    cls.add_instance_attribute('sib2', 'ns3::LteRrcSap::SystemInformationBlockType2', is_const=False)
    return

def register_Ns3LteRrcSapSystemInformationBlockType1_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType1::SystemInformationBlockType1() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType1::SystemInformationBlockType1(ns3::LteRrcSap::SystemInformationBlockType1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SystemInformationBlockType1 const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType1::cellAccessRelatedInfo [variable]
    cls.add_instance_attribute('cellAccessRelatedInfo', 'ns3::LteRrcSap::CellAccessRelatedInfo', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType1::cellSelectionInfo [variable]
    cls.add_instance_attribute('cellSelectionInfo', 'ns3::LteRrcSap::CellSelectionInfo', is_const=False)
    return

def register_Ns3LteRrcSapSystemInformationBlockType18_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType18::SystemInformationBlockType18() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType18::SystemInformationBlockType18(ns3::LteRrcSap::SystemInformationBlockType18 const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SystemInformationBlockType18 const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType18::commConfig [variable]
    cls.add_instance_attribute('commConfig', 'ns3::LteRrcSap::Sib18CommConfig', is_const=False)
    return

def register_Ns3LteRrcSapSystemInformationBlockType19_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType19::SystemInformationBlockType19() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType19::SystemInformationBlockType19(ns3::LteRrcSap::SystemInformationBlockType19 const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SystemInformationBlockType19 const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType19::discConfig [variable]
    cls.add_instance_attribute('discConfig', 'ns3::LteRrcSap::Sib19DiscConfig', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType19::discConfigRelay [variable]
    cls.add_instance_attribute('discConfigRelay', 'ns3::LteRrcSap::Sib19DiscConfigRelay', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType19::discInterFreqList [variable]
    cls.add_instance_attribute('discInterFreqList', 'ns3::LteRrcSap::SlCarrierFreqInfoList', is_const=False)
    return

def register_Ns3LteRrcSapSystemInformationBlockType2_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType2::SystemInformationBlockType2() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType2::SystemInformationBlockType2(ns3::LteRrcSap::SystemInformationBlockType2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::SystemInformationBlockType2 const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType2::freqInfo [variable]
    cls.add_instance_attribute('freqInfo', 'ns3::LteRrcSap::FreqInfo', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType2::radioResourceConfigCommon [variable]
    cls.add_instance_attribute('radioResourceConfigCommon', 'ns3::LteRrcSap::RadioResourceConfigCommonSib', is_const=False)
    return

def register_Ns3LteRrcSapThresholdEutra_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ThresholdEutra::ThresholdEutra() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ThresholdEutra::ThresholdEutra(ns3::LteRrcSap::ThresholdEutra const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::ThresholdEutra const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::ThresholdEutra::range [variable]
    cls.add_instance_attribute('range', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapTxFailParam_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::TxFailParam::TxFailParam() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::TxFailParam::TxFailParam(ns3::LteRrcSap::TxFailParam const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::TxFailParam const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::TxFailParam::connEstFailCount [variable]
    cls.add_instance_attribute('connEstFailCount', 'uint8_t', is_const=False)
    return

def register_Ns3LteRrcSapTxProbability_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::TxProbability::TxProbability() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::TxProbability::TxProbability(ns3::LteRrcSap::TxProbability const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::TxProbability const &', 'arg0')])
    return

def register_Ns3LteRrcSapUlConfiguration_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlConfiguration::UlConfiguration() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlConfiguration::UlConfiguration(ns3::LteRrcSap::UlConfiguration const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::UlConfiguration const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlConfiguration::prachConfigSCell [variable]
    cls.add_instance_attribute('prachConfigSCell', 'ns3::LteRrcSap::PrachConfigSCell', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlConfiguration::soundingRsUlConfigCommon [variable]
    cls.add_instance_attribute('soundingRsUlConfigCommon', 'ns3::LteRrcSap::SoundingRsUlConfigCommon', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlConfiguration::ulFreqInfo [variable]
    cls.add_instance_attribute('ulFreqInfo', 'ns3::LteRrcSap::FreqInfo', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlConfiguration::ulPowerControlCommonSCell [variable]
    cls.add_instance_attribute('ulPowerControlCommonSCell', 'ns3::LteRrcSap::UlPowerControlCommonSCell', is_const=False)
    return

def register_Ns3LteRrcSapUlPowerControlCommonSCell_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlPowerControlCommonSCell::UlPowerControlCommonSCell() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlPowerControlCommonSCell::UlPowerControlCommonSCell(ns3::LteRrcSap::UlPowerControlCommonSCell const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::UlPowerControlCommonSCell const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlPowerControlCommonSCell::alpha [variable]
    cls.add_instance_attribute('alpha', 'uint16_t', is_const=False)
    return

def register_Ns3LteRrcSapUlPowerControlDedicatedSCell_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlPowerControlDedicatedSCell::UlPowerControlDedicatedSCell() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlPowerControlDedicatedSCell::UlPowerControlDedicatedSCell(ns3::LteRrcSap::UlPowerControlDedicatedSCell const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRrcSap::UlPowerControlDedicatedSCell const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::UlPowerControlDedicatedSCell::pSrsOffset [variable]
    cls.add_instance_attribute('pSrsOffset', 'uint16_t', is_const=False)
    return

def register_Ns3LteSlSyncParams_methods(root_module, cls):
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteSlSyncParams::LteSlSyncParams() [constructor]
    cls.add_constructor([])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteSlSyncParams::LteSlSyncParams(ns3::LteSlSyncParams const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlSyncParams const &', 'arg0')])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteSlSyncParams::newSubframe [variable]
    cls.add_instance_attribute('newSubframe', 'ns3::SidelinkCommResourcePool::SubframeInfo', is_const=False)
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteSlSyncParams::offset [variable]
    cls.add_instance_attribute('offset', 'uint16_t', is_const=False)
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteSlSyncParams::rxSubframe [variable]
    cls.add_instance_attribute('rxSubframe', 'ns3::SidelinkCommResourcePool::SubframeInfo', is_const=False)
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteSlSyncParams::slssid [variable]
    cls.add_instance_attribute('slssid', 'uint16_t', is_const=False)
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteSlSyncParams::syncRefMib [variable]
    cls.add_instance_attribute('syncRefMib', 'ns3::LteRrcSap::MasterInformationBlockSL', is_const=False)
    return

def register_Ns3LteUeCcmRrcSapProvider_methods(root_module, cls):
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapProvider::LteUeCcmRrcSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapProvider::LteUeCcmRrcSapProvider(ns3::LteUeCcmRrcSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCcmRrcSapProvider const &', 'arg0')])
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): std::vector<ns3::LteUeCcmRrcSapProvider::LcsConfig, std::allocator<ns3::LteUeCcmRrcSapProvider::LcsConfig>> ns3::LteUeCcmRrcSapProvider::AddLc(uint8_t lcId, ns3::LteUeCmacSapProvider::LogicalChannelConfig lcConfig, ns3::LteMacSapUser * msu) [member function]
    cls.add_method('AddLc', 
                   'std::vector< ns3::LteUeCcmRrcSapProvider::LcsConfig >', 
                   [param('uint8_t', 'lcId'), param('ns3::LteUeCmacSapProvider::LogicalChannelConfig', 'lcConfig'), param('ns3::LteMacSapUser *', 'msu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): std::vector<ns3::LteUeCcmRrcSapProvider::LcsConfig, std::allocator<ns3::LteUeCcmRrcSapProvider::LcsConfig>> ns3::LteUeCcmRrcSapProvider::AddSlLc(uint8_t slLcId, uint32_t srcL2Id, uint32_t dstL2Id, ns3::LteUeCmacSapProvider::LogicalChannelConfig slLcConfig, ns3::LteMacSapUser * msu) [member function]
    cls.add_method('AddSlLc', 
                   'std::vector< ns3::LteUeCcmRrcSapProvider::LcsConfig >', 
                   [param('uint8_t', 'slLcId'), param('uint32_t', 'srcL2Id'), param('uint32_t', 'dstL2Id'), param('ns3::LteUeCmacSapProvider::LogicalChannelConfig', 'slLcConfig'), param('ns3::LteMacSapUser *', 'msu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteMacSapUser * ns3::LteUeCcmRrcSapProvider::ConfigureSignalBearer(uint8_t lcid, ns3::LteUeCmacSapProvider::LogicalChannelConfig lcConfig, ns3::LteMacSapUser * msu) [member function]
    cls.add_method('ConfigureSignalBearer', 
                   'ns3::LteMacSapUser *', 
                   [param('uint8_t', 'lcid'), param('ns3::LteUeCmacSapProvider::LogicalChannelConfig', 'lcConfig'), param('ns3::LteMacSapUser *', 'msu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): void ns3::LteUeCcmRrcSapProvider::NotifyConnectionReconfigurationMsg() [member function]
    cls.add_method('NotifyConnectionReconfigurationMsg', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): std::vector<unsigned short, std::allocator<unsigned short>> ns3::LteUeCcmRrcSapProvider::RemoveLc(uint8_t lcid) [member function]
    cls.add_method('RemoveLc', 
                   'std::vector< unsigned short >', 
                   [param('uint8_t', 'lcid')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): void ns3::LteUeCcmRrcSapProvider::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteUeCcmRrcSapProviderLcsConfig_methods(root_module, cls):
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapProvider::LcsConfig::LcsConfig() [constructor]
    cls.add_constructor([])
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapProvider::LcsConfig::LcsConfig(ns3::LteUeCcmRrcSapProvider::LcsConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCcmRrcSapProvider::LcsConfig const &', 'arg0')])
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapProvider::LcsConfig::componentCarrierId [variable]
    cls.add_instance_attribute('componentCarrierId', 'uint8_t', is_const=False)
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapProvider::LcsConfig::lcConfig [variable]
    cls.add_instance_attribute('lcConfig', 'ns3::LteUeCmacSapProvider::LogicalChannelConfig', is_const=False)
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapProvider::LcsConfig::msu [variable]
    cls.add_instance_attribute('msu', 'ns3::LteMacSapUser *', is_const=False)
    return

def register_Ns3LteUeCcmRrcSapUser_methods(root_module, cls):
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapUser::LteUeCcmRrcSapUser() [constructor]
    cls.add_constructor([])
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): ns3::LteUeCcmRrcSapUser::LteUeCcmRrcSapUser(ns3::LteUeCcmRrcSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCcmRrcSapUser const &', 'arg0')])
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): void ns3::LteUeCcmRrcSapUser::ComponentCarrierEnabling(std::vector<unsigned char, std::allocator<unsigned char>> componentCarrierList) [member function]
    cls.add_method('ComponentCarrierEnabling', 
                   'void', 
                   [param('std::vector< unsigned char >', 'componentCarrierList')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-ccm-rrc-sap.h (module 'lte'): void ns3::LteUeCcmRrcSapUser::SetNumberOfComponentCarriers(uint16_t noOfComponentCarriers) [member function]
    cls.add_method('SetNumberOfComponentCarriers', 
                   'void', 
                   [param('uint16_t', 'noOfComponentCarriers')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteUeCmacSapProvider_methods(root_module, cls):
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::LteUeCmacSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::LteUeCmacSapProvider(ns3::LteUeCmacSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCmacSapProvider const &', 'arg0')])
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::AddLc(uint8_t lcId, ns3::LteUeCmacSapProvider::LogicalChannelConfig lcConfig, ns3::LteMacSapUser * msu) [member function]
    cls.add_method('AddLc', 
                   'void', 
                   [param('uint8_t', 'lcId'), param('ns3::LteUeCmacSapProvider::LogicalChannelConfig', 'lcConfig'), param('ns3::LteMacSapUser *', 'msu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::AddSlCommTxPool(uint32_t dstL2Id, ns3::Ptr<ns3::SidelinkTxCommResourcePool> pool) [member function]
    cls.add_method('AddSlCommTxPool', 
                   'void', 
                   [param('uint32_t', 'dstL2Id'), param('ns3::Ptr< ns3::SidelinkTxCommResourcePool >', 'pool')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::AddSlDestination(uint32_t destination) [member function]
    cls.add_method('AddSlDestination', 
                   'void', 
                   [param('uint32_t', 'destination')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::AddSlLc(uint8_t lcId, uint32_t srcL2Id, uint32_t dstL2Id, ns3::LteUeCmacSapProvider::LogicalChannelConfig lcConfig, ns3::LteMacSapUser * msu) [member function]
    cls.add_method('AddSlLc', 
                   'void', 
                   [param('uint8_t', 'lcId'), param('uint32_t', 'srcL2Id'), param('uint32_t', 'dstL2Id'), param('ns3::LteUeCmacSapProvider::LogicalChannelConfig', 'lcConfig'), param('ns3::LteMacSapUser *', 'msu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::ConfigureRach(ns3::LteUeCmacSapProvider::RachConfig rc) [member function]
    cls.add_method('ConfigureRach', 
                   'void', 
                   [param('ns3::LteUeCmacSapProvider::RachConfig', 'rc')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::NotifyConnectionSuccessful() [member function]
    cls.add_method('NotifyConnectionSuccessful', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::RemoveLc(uint8_t lcId) [member function]
    cls.add_method('RemoveLc', 
                   'void', 
                   [param('uint8_t', 'lcId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::RemoveSlCommTxPool(uint32_t dstL2Id) [member function]
    cls.add_method('RemoveSlCommTxPool', 
                   'void', 
                   [param('uint32_t', 'dstL2Id')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::RemoveSlDestination(uint32_t destination) [member function]
    cls.add_method('RemoveSlDestination', 
                   'void', 
                   [param('uint32_t', 'destination')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::RemoveSlDiscTxPool() [member function]
    cls.add_method('RemoveSlDiscTxPool', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::RemoveSlLc(uint8_t lcId, uint32_t srcL2Id, uint32_t dstL2Id) [member function]
    cls.add_method('RemoveSlLc', 
                   'void', 
                   [param('uint8_t', 'lcId'), param('uint32_t', 'srcL2Id'), param('uint32_t', 'dstL2Id')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::SetImsi(uint64_t imsi) [member function]
    cls.add_method('SetImsi', 
                   'void', 
                   [param('uint64_t', 'imsi')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::SetRnti(uint16_t rnti) [member function]
    cls.add_method('SetRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::SetSlCommRxPools(std::list<ns3::Ptr<ns3::SidelinkRxCommResourcePool>, std::allocator<ns3::Ptr<ns3::SidelinkRxCommResourcePool>>> pools) [member function]
    cls.add_method('SetSlCommRxPools', 
                   'void', 
                   [param('std::list< ns3::Ptr< ns3::SidelinkRxCommResourcePool > >', 'pools')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::SetSlDiscRxPools(std::list<ns3::Ptr<ns3::SidelinkRxDiscResourcePool>, std::allocator<ns3::Ptr<ns3::SidelinkRxDiscResourcePool>>> pools) [member function]
    cls.add_method('SetSlDiscRxPools', 
                   'void', 
                   [param('std::list< ns3::Ptr< ns3::SidelinkRxDiscResourcePool > >', 'pools')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::SetSlDiscTxPool(ns3::Ptr<ns3::SidelinkTxDiscResourcePool> pool) [member function]
    cls.add_method('SetSlDiscTxPool', 
                   'void', 
                   [param('ns3::Ptr< ns3::SidelinkTxDiscResourcePool >', 'pool')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::StartContentionBasedRandomAccessProcedure() [member function]
    cls.add_method('StartContentionBasedRandomAccessProcedure', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapProvider::StartNonContentionBasedRandomAccessProcedure(uint16_t rnti, uint8_t rapId, uint8_t prachMask) [member function]
    cls.add_method('StartNonContentionBasedRandomAccessProcedure', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'rapId'), param('uint8_t', 'prachMask')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteUeCmacSapProviderLogicalChannelConfig_methods(root_module, cls):
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::LogicalChannelConfig::LogicalChannelConfig() [constructor]
    cls.add_constructor([])
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::LogicalChannelConfig::LogicalChannelConfig(ns3::LteUeCmacSapProvider::LogicalChannelConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCmacSapProvider::LogicalChannelConfig const &', 'arg0')])
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::LogicalChannelConfig::bucketSizeDurationMs [variable]
    cls.add_instance_attribute('bucketSizeDurationMs', 'uint16_t', is_const=False)
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::LogicalChannelConfig::logicalChannelGroup [variable]
    cls.add_instance_attribute('logicalChannelGroup', 'uint8_t', is_const=False)
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::LogicalChannelConfig::prioritizedBitRateKbps [variable]
    cls.add_instance_attribute('prioritizedBitRateKbps', 'uint16_t', is_const=False)
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::LogicalChannelConfig::priority [variable]
    cls.add_instance_attribute('priority', 'uint8_t', is_const=False)
    return

def register_Ns3LteUeCmacSapProviderRachConfig_methods(root_module, cls):
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::RachConfig::RachConfig() [constructor]
    cls.add_constructor([])
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::RachConfig::RachConfig(ns3::LteUeCmacSapProvider::RachConfig const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCmacSapProvider::RachConfig const &', 'arg0')])
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::RachConfig::connEstFailCount [variable]
    cls.add_instance_attribute('connEstFailCount', 'uint8_t', is_const=False)
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::RachConfig::numberOfRaPreambles [variable]
    cls.add_instance_attribute('numberOfRaPreambles', 'uint8_t', is_const=False)
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::RachConfig::preambleTransMax [variable]
    cls.add_instance_attribute('preambleTransMax', 'uint8_t', is_const=False)
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapProvider::RachConfig::raResponseWindowSize [variable]
    cls.add_instance_attribute('raResponseWindowSize', 'uint8_t', is_const=False)
    return

def register_Ns3LteUeCmacSapUser_methods(root_module, cls):
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapUser::LteUeCmacSapUser() [constructor]
    cls.add_constructor([])
    ## lte-ue-cmac-sap.h (module 'lte'): ns3::LteUeCmacSapUser::LteUeCmacSapUser(ns3::LteUeCmacSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCmacSapUser const &', 'arg0')])
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapUser::NotifyDiscoveryReception(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('NotifyDiscoveryReception', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapUser::NotifyMacHasNoSlDataToSend() [member function]
    cls.add_method('NotifyMacHasNoSlDataToSend', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapUser::NotifyMacHasSlDataToSend() [member function]
    cls.add_method('NotifyMacHasSlDataToSend', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapUser::NotifyRandomAccessFailed() [member function]
    cls.add_method('NotifyRandomAccessFailed', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapUser::NotifyRandomAccessSuccessful() [member function]
    cls.add_method('NotifyRandomAccessSuccessful', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapUser::NotifySidelinkReception(uint8_t lcId, uint32_t srcL2Id, uint32_t dstL2Id) [member function]
    cls.add_method('NotifySidelinkReception', 
                   'void', 
                   [param('uint8_t', 'lcId'), param('uint32_t', 'srcL2Id'), param('uint32_t', 'dstL2Id')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cmac-sap.h (module 'lte'): void ns3::LteUeCmacSapUser::SetTemporaryCellRnti(uint16_t rnti) [member function]
    cls.add_method('SetTemporaryCellRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteUeConfig_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## lte-common.h (module 'lte'): ns3::LteUeConfig_t::LteUeConfig_t(ns3::LteUeConfig_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeConfig_t const &', 'arg0')])
    ## lte-common.h (module 'lte'): ns3::LteUeConfig_t::LteUeConfig_t() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::LteUeConfig_t::m_reconfigureFlag [variable]
    cls.add_instance_attribute('m_reconfigureFlag', 'bool', is_const=False)
    ## lte-common.h (module 'lte'): ns3::LteUeConfig_t::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::LteUeConfig_t::m_srsConfigurationIndex [variable]
    cls.add_instance_attribute('m_srsConfigurationIndex', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::LteUeConfig_t::m_transmissionMode [variable]
    cls.add_instance_attribute('m_transmissionMode', 'uint8_t', is_const=False)
    return

def register_Ns3LteUeCphySapProvider_methods(root_module, cls):
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapProvider::LteUeCphySapProvider() [constructor]
    cls.add_constructor([])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapProvider::LteUeCphySapProvider(ns3::LteUeCphySapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCphySapProvider const &', 'arg0')])
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::AddSlDestination(uint32_t destination) [member function]
    cls.add_method('AddSlDestination', 
                   'void', 
                   [param('uint32_t', 'destination')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::ConfigureReferenceSignalPower(int8_t referenceSignalPower) [member function]
    cls.add_method('ConfigureReferenceSignalPower', 
                   'void', 
                   [param('int8_t', 'referenceSignalPower')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::ConfigureUplink(uint32_t ulEarfcn, uint16_t ulBandwidth) [member function]
    cls.add_method('ConfigureUplink', 
                   'void', 
                   [param('uint32_t', 'ulEarfcn'), param('uint16_t', 'ulBandwidth')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::DisableUeSdRsrpMeasurements() [member function]
    cls.add_method('DisableUeSdRsrpMeasurements', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::EnableUeSdRsrpMeasurements() [member function]
    cls.add_method('EnableUeSdRsrpMeasurements', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): uint16_t ns3::LteUeCphySapProvider::GetCellId() [member function]
    cls.add_method('GetCellId', 
                   'uint16_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): uint32_t ns3::LteUeCphySapProvider::GetDlEarfcn() [member function]
    cls.add_method('GetDlEarfcn', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::RemoveSlCommTxPool() [member function]
    cls.add_method('RemoveSlCommTxPool', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::RemoveSlDestination(uint32_t destination) [member function]
    cls.add_method('RemoveSlDestination', 
                   'void', 
                   [param('uint32_t', 'destination')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::ResetPhyAfterRlf() [member function]
    cls.add_method('ResetPhyAfterRlf', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::ResetRlfParams() [member function]
    cls.add_method('ResetRlfParams', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SetDlBandwidth(uint16_t dlBandwidth) [member function]
    cls.add_method('SetDlBandwidth', 
                   'void', 
                   [param('uint16_t', 'dlBandwidth')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SetImsi(uint64_t imsi) [member function]
    cls.add_method('SetImsi', 
                   'void', 
                   [param('uint64_t', 'imsi')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SetPa(double pa) [member function]
    cls.add_method('SetPa', 
                   'void', 
                   [param('double', 'pa')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SetRnti(uint16_t rnti) [member function]
    cls.add_method('SetRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SetRsrpFilterCoefficient(uint8_t rsrpFilterCoefficient) [member function]
    cls.add_method('SetRsrpFilterCoefficient', 
                   'void', 
                   [param('uint8_t', 'rsrpFilterCoefficient')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SetSlCommRxPools(std::list<ns3::Ptr<ns3::SidelinkRxCommResourcePool>, std::allocator<ns3::Ptr<ns3::SidelinkRxCommResourcePool>>> pools) [member function]
    cls.add_method('SetSlCommRxPools', 
                   'void', 
                   [param('std::list< ns3::Ptr< ns3::SidelinkRxCommResourcePool > >', 'pools')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SetSlCommTxPool(ns3::Ptr<ns3::SidelinkTxCommResourcePool> pool) [member function]
    cls.add_method('SetSlCommTxPool', 
                   'void', 
                   [param('ns3::Ptr< ns3::SidelinkTxCommResourcePool >', 'pool')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SetSlDiscRxPools(std::list<ns3::Ptr<ns3::SidelinkRxDiscResourcePool>, std::allocator<ns3::Ptr<ns3::SidelinkRxDiscResourcePool>>> pools) [member function]
    cls.add_method('SetSlDiscRxPools', 
                   'void', 
                   [param('std::list< ns3::Ptr< ns3::SidelinkRxDiscResourcePool > >', 'pools')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SetSlssId(uint64_t slssid) [member function]
    cls.add_method('SetSlssId', 
                   'void', 
                   [param('uint64_t', 'slssid')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SetSrsConfigurationIndex(uint16_t srcCi) [member function]
    cls.add_method('SetSrsConfigurationIndex', 
                   'void', 
                   [param('uint16_t', 'srcCi')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SetTransmissionMode(uint8_t txMode) [member function]
    cls.add_method('SetTransmissionMode', 
                   'void', 
                   [param('uint8_t', 'txMode')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::StartCellSearch(uint32_t dlEarfcn) [member function]
    cls.add_method('StartCellSearch', 
                   'void', 
                   [param('uint32_t', 'dlEarfcn')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::StartInSnycDetection() [member function]
    cls.add_method('StartInSnycDetection', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SynchronizeToSyncRef(ns3::LteSlSyncParams synchParams) [member function]
    cls.add_method('SynchronizeToSyncRef', 
                   'void', 
                   [param('ns3::LteSlSyncParams', 'synchParams')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SynchronizeWithEnb(uint16_t cellId) [member function]
    cls.add_method('SynchronizeWithEnb', 
                   'void', 
                   [param('uint16_t', 'cellId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapProvider::SynchronizeWithEnb(uint16_t cellId, uint32_t dlEarfcn) [member function]
    cls.add_method('SynchronizeWithEnb', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint32_t', 'dlEarfcn')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteUeCphySapUser_methods(root_module, cls):
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::LteUeCphySapUser() [constructor]
    cls.add_constructor([])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::LteUeCphySapUser(ns3::LteUeCphySapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCphySapUser const &', 'arg0')])
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapUser::NotifyInSync() [member function]
    cls.add_method('NotifyInSync', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapUser::NotifyOutOfSync() [member function]
    cls.add_method('NotifyOutOfSync', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapUser::ReceiveMibSL(ns3::Ptr<ns3::Packet> p, uint16_t slssid) [member function]
    cls.add_method('ReceiveMibSL', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint16_t', 'slssid')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapUser::RecvMasterInformationBlock(uint16_t cellId, ns3::LteRrcSap::MasterInformationBlock mib) [member function]
    cls.add_method('RecvMasterInformationBlock', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('ns3::LteRrcSap::MasterInformationBlock', 'mib')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapUser::RecvSystemInformationBlockType1(uint16_t cellId, ns3::LteRrcSap::SystemInformationBlockType1 sib1) [member function]
    cls.add_method('RecvSystemInformationBlockType1', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('ns3::LteRrcSap::SystemInformationBlockType1', 'sib1')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapUser::ReportChangeOfSyncRef(ns3::LteSlSyncParams params) [member function]
    cls.add_method('ReportChangeOfSyncRef', 
                   'void', 
                   [param('ns3::LteSlSyncParams', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapUser::ReportSlssMeasurements(ns3::LteUeCphySapUser::UeSlssMeasurementsParameters params, uint64_t slssid, uint16_t offset) [member function]
    cls.add_method('ReportSlssMeasurements', 
                   'void', 
                   [param('ns3::LteUeCphySapUser::UeSlssMeasurementsParameters', 'params'), param('uint64_t', 'slssid'), param('uint16_t', 'offset')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapUser::ReportSubframeIndication(uint16_t frameNo, uint16_t subFrameNo) [member function]
    cls.add_method('ReportSubframeIndication', 
                   'void', 
                   [param('uint16_t', 'frameNo'), param('uint16_t', 'subFrameNo')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapUser::ReportUeMeasurements(ns3::LteUeCphySapUser::UeMeasurementsParameters params) [member function]
    cls.add_method('ReportUeMeasurements', 
                   'void', 
                   [param('ns3::LteUeCphySapUser::UeMeasurementsParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapUser::ReportUeSdRsrpMeasurements(ns3::LteUeCphySapUser::UeSdRsrpMeasurementsParameters params) [member function]
    cls.add_method('ReportUeSdRsrpMeasurements', 
                   'void', 
                   [param('ns3::LteUeCphySapUser::UeSdRsrpMeasurementsParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-cphy-sap.h (module 'lte'): void ns3::LteUeCphySapUser::ResetSyncIndicationCounter() [member function]
    cls.add_method('ResetSyncIndicationCounter', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteUeCphySapUserUeMeasurementsElement_methods(root_module, cls):
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeMeasurementsElement::UeMeasurementsElement() [constructor]
    cls.add_constructor([])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeMeasurementsElement::UeMeasurementsElement(ns3::LteUeCphySapUser::UeMeasurementsElement const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCphySapUser::UeMeasurementsElement const &', 'arg0')])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeMeasurementsElement::m_cellId [variable]
    cls.add_instance_attribute('m_cellId', 'uint16_t', is_const=False)
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeMeasurementsElement::m_rsrp [variable]
    cls.add_instance_attribute('m_rsrp', 'double', is_const=False)
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeMeasurementsElement::m_rsrq [variable]
    cls.add_instance_attribute('m_rsrq', 'double', is_const=False)
    return

def register_Ns3LteUeCphySapUserUeMeasurementsParameters_methods(root_module, cls):
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeMeasurementsParameters::UeMeasurementsParameters() [constructor]
    cls.add_constructor([])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeMeasurementsParameters::UeMeasurementsParameters(ns3::LteUeCphySapUser::UeMeasurementsParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCphySapUser::UeMeasurementsParameters const &', 'arg0')])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeMeasurementsParameters::m_componentCarrierId [variable]
    cls.add_instance_attribute('m_componentCarrierId', 'uint8_t', is_const=False)
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeMeasurementsParameters::m_ueMeasurementsList [variable]
    cls.add_instance_attribute('m_ueMeasurementsList', 'std::vector< ns3::LteUeCphySapUser::UeMeasurementsElement >', is_const=False)
    return

def register_Ns3LteUeCphySapUserUeSdRsrpMeasurementsElement_methods(root_module, cls):
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement::UeSdRsrpMeasurementsElement() [constructor]
    cls.add_constructor([])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement::UeSdRsrpMeasurementsElement(ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement const &', 'arg0')])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement::m_relayId [variable]
    cls.add_instance_attribute('m_relayId', 'uint64_t', is_const=False)
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement::m_sdRsrp [variable]
    cls.add_instance_attribute('m_sdRsrp', 'double', is_const=False)
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement::m_serviceCode [variable]
    cls.add_instance_attribute('m_serviceCode', 'uint32_t', is_const=False)
    return

def register_Ns3LteUeCphySapUserUeSdRsrpMeasurementsParameters_methods(root_module, cls):
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSdRsrpMeasurementsParameters::UeSdRsrpMeasurementsParameters() [constructor]
    cls.add_constructor([])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSdRsrpMeasurementsParameters::UeSdRsrpMeasurementsParameters(ns3::LteUeCphySapUser::UeSdRsrpMeasurementsParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCphySapUser::UeSdRsrpMeasurementsParameters const &', 'arg0')])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSdRsrpMeasurementsParameters::m_ueSdRsrpMeasurementsList [variable]
    cls.add_instance_attribute('m_ueSdRsrpMeasurementsList', 'std::vector< ns3::LteUeCphySapUser::UeSdRsrpMeasurementsElement >', is_const=False)
    return

def register_Ns3LteUeCphySapUserUeSlssMeasurementsElement_methods(root_module, cls):
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSlssMeasurementsElement::UeSlssMeasurementsElement() [constructor]
    cls.add_constructor([])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSlssMeasurementsElement::UeSlssMeasurementsElement(ns3::LteUeCphySapUser::UeSlssMeasurementsElement const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCphySapUser::UeSlssMeasurementsElement const &', 'arg0')])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSlssMeasurementsElement::m_offset [variable]
    cls.add_instance_attribute('m_offset', 'uint16_t', is_const=False)
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSlssMeasurementsElement::m_slssid [variable]
    cls.add_instance_attribute('m_slssid', 'uint16_t', is_const=False)
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSlssMeasurementsElement::m_srsrp [variable]
    cls.add_instance_attribute('m_srsrp', 'double', is_const=False)
    return

def register_Ns3LteUeCphySapUserUeSlssMeasurementsParameters_methods(root_module, cls):
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSlssMeasurementsParameters::UeSlssMeasurementsParameters() [constructor]
    cls.add_constructor([])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSlssMeasurementsParameters::UeSlssMeasurementsParameters(ns3::LteUeCphySapUser::UeSlssMeasurementsParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeCphySapUser::UeSlssMeasurementsParameters const &', 'arg0')])
    ## lte-ue-cphy-sap.h (module 'lte'): ns3::LteUeCphySapUser::UeSlssMeasurementsParameters::m_ueSlssMeasurementsList [variable]
    cls.add_instance_attribute('m_ueSlssMeasurementsList', 'std::vector< ns3::LteUeCphySapUser::UeSlssMeasurementsElement >', is_const=False)
    return

def register_Ns3LteUePhySapProvider_methods(root_module, cls):
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::LteUePhySapProvider() [constructor]
    cls.add_constructor([])
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::LteUePhySapProvider(ns3::LteUePhySapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUePhySapProvider const &', 'arg0')])
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapProvider::NotifyConnectionSuccessful() [member function]
    cls.add_method('NotifyConnectionSuccessful', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapProvider::SendLteControlMessage(ns3::Ptr<ns3::LteControlMessage> msg) [member function]
    cls.add_method('SendLteControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteControlMessage >', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapProvider::SendMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('SendMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapProvider::SendRachPreamble(uint32_t prachId, uint32_t raRnti) [member function]
    cls.add_method('SendRachPreamble', 
                   'void', 
                   [param('uint32_t', 'prachId'), param('uint32_t', 'raRnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapProvider::SendSlMacPdu(ns3::Ptr<ns3::Packet> p, ns3::LteUePhySapProvider::TransmitSlPhySduParameters params) [member function]
    cls.add_method('SendSlMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::LteUePhySapProvider::TransmitSlPhySduParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteUePhySapProviderTransmitSlPhySduParameters_methods(root_module, cls):
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters::TransmitSlPhySduParameters() [constructor]
    cls.add_constructor([])
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters::TransmitSlPhySduParameters(ns3::LteUePhySapProvider::TransmitSlPhySduParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUePhySapProvider::TransmitSlPhySduParameters const &', 'arg0')])
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters::channel [variable]
    cls.add_instance_attribute('channel', 'ns3::LteUePhySapProvider::TransmitSlPhySduParameters::SidelinkChannel', is_const=False)
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters::dstId [variable]
    cls.add_instance_attribute('dstId', 'uint8_t', is_const=False)
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters::hopping [variable]
    cls.add_instance_attribute('hopping', 'uint8_t', is_const=False)
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters::hoppingInfo [variable]
    cls.add_instance_attribute('hoppingInfo', 'uint8_t', is_const=False)
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters::rbLen [variable]
    cls.add_instance_attribute('rbLen', 'uint8_t', is_const=False)
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters::rbStart [variable]
    cls.add_instance_attribute('rbStart', 'uint8_t', is_const=False)
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters::resNo [variable]
    cls.add_instance_attribute('resNo', 'uint32_t', is_const=False)
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapProvider::TransmitSlPhySduParameters::rv [variable]
    cls.add_instance_attribute('rv', 'uint8_t', is_const=False)
    return

def register_Ns3LteUePhySapUser_methods(root_module, cls):
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapUser::LteUePhySapUser() [constructor]
    cls.add_constructor([])
    ## lte-ue-phy-sap.h (module 'lte'): ns3::LteUePhySapUser::LteUePhySapUser(ns3::LteUePhySapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUePhySapUser const &', 'arg0')])
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapUser::NotifyChangeOfTiming(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('NotifyChangeOfTiming', 
                   'void', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapUser::NotifySidelinkEnabled() [member function]
    cls.add_method('NotifySidelinkEnabled', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapUser::NotifyUlTransmission() [member function]
    cls.add_method('NotifyUlTransmission', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapUser::ReceiveLteControlMessage(ns3::Ptr<ns3::LteControlMessage> msg) [member function]
    cls.add_method('ReceiveLteControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteControlMessage >', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapUser::ReceivePhyPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('ReceivePhyPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapUser::ReceiveSlDiscPhyPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('ReceiveSlDiscPhyPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapUser::ReceiveSlSciPhyPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('ReceiveSlSciPhyPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ue-phy-sap.h (module 'lte'): void ns3::LteUePhySapUser::SubframeIndication(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('SubframeIndication', 
                   'void', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteUeRrcSapProvider_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapProvider::LteUeRrcSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapProvider::LteUeRrcSapProvider(ns3::LteUeRrcSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeRrcSapProvider const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapProvider::CompleteSetup(ns3::LteUeRrcSapProvider::CompleteSetupParameters params) [member function]
    cls.add_method('CompleteSetup', 
                   'void', 
                   [param('ns3::LteUeRrcSapProvider::CompleteSetupParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapProvider::RecvRrcConnectionReconfiguration(ns3::LteRrcSap::RrcConnectionReconfiguration msg) [member function]
    cls.add_method('RecvRrcConnectionReconfiguration', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionReconfiguration', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapProvider::RecvRrcConnectionReestablishment(ns3::LteRrcSap::RrcConnectionReestablishment msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishment', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionReestablishment', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapProvider::RecvRrcConnectionReestablishmentReject(ns3::LteRrcSap::RrcConnectionReestablishmentReject msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishmentReject', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionReestablishmentReject', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapProvider::RecvRrcConnectionReject(ns3::LteRrcSap::RrcConnectionReject msg) [member function]
    cls.add_method('RecvRrcConnectionReject', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionReject', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapProvider::RecvRrcConnectionRelease(ns3::LteRrcSap::RrcConnectionRelease msg) [member function]
    cls.add_method('RecvRrcConnectionRelease', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionRelease', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapProvider::RecvRrcConnectionSetup(ns3::LteRrcSap::RrcConnectionSetup msg) [member function]
    cls.add_method('RecvRrcConnectionSetup', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionSetup', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapProvider::RecvSystemInformation(ns3::LteRrcSap::SystemInformation msg) [member function]
    cls.add_method('RecvSystemInformation', 
                   'void', 
                   [param('ns3::LteRrcSap::SystemInformation', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteUeRrcSapProviderCompleteSetupParameters_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapProvider::CompleteSetupParameters::CompleteSetupParameters() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapProvider::CompleteSetupParameters::CompleteSetupParameters(ns3::LteUeRrcSapProvider::CompleteSetupParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeRrcSapProvider::CompleteSetupParameters const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapProvider::CompleteSetupParameters::srb0SapUser [variable]
    cls.add_instance_attribute('srb0SapUser', 'ns3::LteRlcSapUser *', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapProvider::CompleteSetupParameters::srb1SapUser [variable]
    cls.add_instance_attribute('srb1SapUser', 'ns3::LtePdcpSapUser *', is_const=False)
    return

def register_Ns3LteUeRrcSapUser_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapUser::LteUeRrcSapUser() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapUser::LteUeRrcSapUser(ns3::LteUeRrcSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeRrcSapUser const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapUser::SendIdealUeContextRemoveRequest(uint16_t rnti) [member function]
    cls.add_method('SendIdealUeContextRemoveRequest', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapUser::SendMeasurementReport(ns3::LteRrcSap::MeasurementReport msg) [member function]
    cls.add_method('SendMeasurementReport', 
                   'void', 
                   [param('ns3::LteRrcSap::MeasurementReport', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapUser::SendRrcConnectionReconfigurationCompleted(ns3::LteRrcSap::RrcConnectionReconfigurationCompleted msg) [member function]
    cls.add_method('SendRrcConnectionReconfigurationCompleted', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionReconfigurationCompleted', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapUser::SendRrcConnectionReestablishmentComplete(ns3::LteRrcSap::RrcConnectionReestablishmentComplete msg) [member function]
    cls.add_method('SendRrcConnectionReestablishmentComplete', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionReestablishmentComplete', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapUser::SendRrcConnectionReestablishmentRequest(ns3::LteRrcSap::RrcConnectionReestablishmentRequest msg) [member function]
    cls.add_method('SendRrcConnectionReestablishmentRequest', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionReestablishmentRequest', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapUser::SendRrcConnectionRequest(ns3::LteRrcSap::RrcConnectionRequest msg) [member function]
    cls.add_method('SendRrcConnectionRequest', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionRequest', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapUser::SendRrcConnectionSetupCompleted(ns3::LteRrcSap::RrcConnectionSetupCompleted msg) [member function]
    cls.add_method('SendRrcConnectionSetupCompleted', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionSetupCompleted', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapUser::SendSidelinkUeInformation(ns3::LteRrcSap::SidelinkUeInformation msg) [member function]
    cls.add_method('SendSidelinkUeInformation', 
                   'void', 
                   [param('ns3::LteRrcSap::SidelinkUeInformation', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteUeRrcSapUser::Setup(ns3::LteUeRrcSapUser::SetupParameters params) [member function]
    cls.add_method('Setup', 
                   'void', 
                   [param('ns3::LteUeRrcSapUser::SetupParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteUeRrcSapUserSetupParameters_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapUser::SetupParameters::SetupParameters() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapUser::SetupParameters::SetupParameters(ns3::LteUeRrcSapUser::SetupParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeRrcSapUser::SetupParameters const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapUser::SetupParameters::srb0SapProvider [variable]
    cls.add_instance_attribute('srb0SapProvider', 'ns3::LteRlcSapProvider *', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteUeRrcSapUser::SetupParameters::srb1SapProvider [variable]
    cls.add_instance_attribute('srb1SapProvider', 'ns3::LtePdcpSapProvider *', is_const=False)
    return

def register_Ns3Mac48Address_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    cls.add_output_stream_operator()
    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(ns3::Mac48Address const & arg0) [constructor]
    cls.add_constructor([param('ns3::Mac48Address const &', 'arg0')])
    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address() [constructor]
    cls.add_constructor([])
    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(char const * str) [constructor]
    cls.add_constructor([param('char const *', 'str')])
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::Allocate() [member function]
    cls.add_method('Allocate', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Mac48Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyFrom(uint8_t const * buffer) [member function]
    cls.add_method('CopyFrom', 
                   'void', 
                   [param('uint8_t const *', 'buffer')])
    ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyTo(uint8_t * buffer) const [member function]
    cls.add_method('CopyTo', 
                   'void', 
                   [param('uint8_t *', 'buffer')], 
                   is_const=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetBroadcast() [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv4Address address) [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Mac48Address', 
                   [param('ns3::Ipv4Address', 'address')], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv6Address address) [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Mac48Address', 
                   [param('ns3::Ipv6Address', 'address')], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast6Prefix() [member function]
    cls.add_method('GetMulticast6Prefix', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticastPrefix() [member function]
    cls.add_method('GetMulticastPrefix', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsGroup() const [member function]
    cls.add_method('IsGroup', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mac48-address.h (module 'network'): static bool ns3::Mac48Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    return

def register_Ns3Mac64Address_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    cls.add_output_stream_operator()
    ## mac64-address.h (module 'network'): ns3::Mac64Address::Mac64Address(ns3::Mac64Address const & arg0) [constructor]
    cls.add_constructor([param('ns3::Mac64Address const &', 'arg0')])
    ## mac64-address.h (module 'network'): ns3::Mac64Address::Mac64Address() [constructor]
    cls.add_constructor([])
    ## mac64-address.h (module 'network'): ns3::Mac64Address::Mac64Address(char const * str) [constructor]
    cls.add_constructor([param('char const *', 'str')])
    ## mac64-address.h (module 'network'): static ns3::Mac64Address ns3::Mac64Address::Allocate() [member function]
    cls.add_method('Allocate', 
                   'ns3::Mac64Address', 
                   [], 
                   is_static=True)
    ## mac64-address.h (module 'network'): static ns3::Mac64Address ns3::Mac64Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Mac64Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## mac64-address.h (module 'network'): void ns3::Mac64Address::CopyFrom(uint8_t const * buffer) [member function]
    cls.add_method('CopyFrom', 
                   'void', 
                   [param('uint8_t const *', 'buffer')])
    ## mac64-address.h (module 'network'): void ns3::Mac64Address::CopyTo(uint8_t * buffer) const [member function]
    cls.add_method('CopyTo', 
                   'void', 
                   [param('uint8_t *', 'buffer')], 
                   is_const=True)
    ## mac64-address.h (module 'network'): static bool ns3::Mac64Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    return

def register_Ns3Mac8Address_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_output_stream_operator()
    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(ns3::Mac8Address const & arg0) [constructor]
    cls.add_constructor([param('ns3::Mac8Address const &', 'arg0')])
    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address() [constructor]
    cls.add_constructor([])
    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(uint8_t addr) [constructor]
    cls.add_constructor([param('uint8_t', 'addr')])
    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::Allocate() [member function]
    cls.add_method('Allocate', 
                   'ns3::Mac8Address', 
                   [], 
                   is_static=True)
    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Mac8Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyFrom(uint8_t const * pBuffer) [member function]
    cls.add_method('CopyFrom', 
                   'void', 
                   [param('uint8_t const *', 'pBuffer')])
    ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyTo(uint8_t * pBuffer) const [member function]
    cls.add_method('CopyTo', 
                   'void', 
                   [param('uint8_t *', 'pBuffer')], 
                   is_const=True)
    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::GetBroadcast() [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Mac8Address', 
                   [], 
                   is_static=True)
    ## mac8-address.h (module 'network'): static bool ns3::Mac8Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    return

def register_Ns3MacCeListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::MacCeListElement_s::MacCeListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::MacCeListElement_s::MacCeListElement_s(ns3::MacCeListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::MacCeListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::MacCeListElement_s::m_macCeType [variable]
    cls.add_instance_attribute('m_macCeType', 'ns3::MacCeListElement_s::MacCeType_e', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::MacCeListElement_s::m_macCeValue [variable]
    cls.add_instance_attribute('m_macCeValue', 'ns3::MacCeValue_u', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::MacCeListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3MacCeValue_u_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::MacCeValue_u::MacCeValue_u() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::MacCeValue_u::MacCeValue_u(ns3::MacCeValue_u const & arg0) [constructor]
    cls.add_constructor([param('ns3::MacCeValue_u const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::MacCeValue_u::m_bufferStatus [variable]
    cls.add_instance_attribute('m_bufferStatus', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::MacCeValue_u::m_crnti [variable]
    cls.add_instance_attribute('m_crnti', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::MacCeValue_u::m_phr [variable]
    cls.add_instance_attribute('m_phr', 'uint8_t', is_const=False)
    return

def register_Ns3Names_methods(root_module, cls):
    ## names.h (module 'core'): ns3::Names::Names() [constructor]
    cls.add_constructor([])
    ## names.h (module 'core'): ns3::Names::Names(ns3::Names const & arg0) [constructor]
    cls.add_constructor([param('ns3::Names const &', 'arg0')])
    ## names.h (module 'core'): static void ns3::Names::Add(std::string name, ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::Ptr< ns3::Object >', 'object')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Add(std::string path, std::string name, ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'path'), param('std::string', 'name'), param('ns3::Ptr< ns3::Object >', 'object')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Add(ns3::Ptr<ns3::Object> context, std::string name, ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::Object >', 'context'), param('std::string', 'name'), param('ns3::Ptr< ns3::Object >', 'object')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Clear() [member function]
    cls.add_method('Clear', 
                   'void', 
                   [], 
                   is_static=True)
    ## names.h (module 'core'): static std::string ns3::Names::FindName(ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('FindName', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::Object >', 'object')], 
                   is_static=True)
    ## names.h (module 'core'): static std::string ns3::Names::FindPath(ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('FindPath', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::Object >', 'object')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Rename(std::string oldpath, std::string newname) [member function]
    cls.add_method('Rename', 
                   'void', 
                   [param('std::string', 'oldpath'), param('std::string', 'newname')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Rename(std::string path, std::string oldname, std::string newname) [member function]
    cls.add_method('Rename', 
                   'void', 
                   [param('std::string', 'path'), param('std::string', 'oldname'), param('std::string', 'newname')], 
                   is_static=True)
    ## names.h (module 'core'): static void ns3::Names::Rename(ns3::Ptr<ns3::Object> context, std::string oldname, std::string newname) [member function]
    cls.add_method('Rename', 
                   'void', 
                   [param('ns3::Ptr< ns3::Object >', 'context'), param('std::string', 'oldname'), param('std::string', 'newname')], 
                   is_static=True)
    return

def register_Ns3NetDeviceContainer_methods(root_module, cls):
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::NetDeviceContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::NetDeviceContainer const &', 'arg0')])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer() [constructor]
    cls.add_constructor([])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::Ptr<ns3::NetDevice> dev) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::NetDevice >', 'dev')])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(std::string devName) [constructor]
    cls.add_constructor([param('std::string', 'devName')])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::NetDeviceContainer const & a, ns3::NetDeviceContainer const & b) [constructor]
    cls.add_constructor([param('ns3::NetDeviceContainer const &', 'a'), param('ns3::NetDeviceContainer const &', 'b')])
    ## net-device-container.h (module 'network'): void ns3::NetDeviceContainer::Add(ns3::NetDeviceContainer other) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'other')])
    ## net-device-container.h (module 'network'): void ns3::NetDeviceContainer::Add(ns3::Ptr<ns3::NetDevice> device) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device')])
    ## net-device-container.h (module 'network'): void ns3::NetDeviceContainer::Add(std::string deviceName) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'deviceName')])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::Iterator ns3::NetDeviceContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::NetDeviceContainer::Iterator', 
                   [], 
                   is_const=True)
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::Iterator ns3::NetDeviceContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::NetDeviceContainer::Iterator', 
                   [], 
                   is_const=True)
    ## net-device-container.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::NetDeviceContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## net-device-container.h (module 'network'): uint32_t ns3::NetDeviceContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3NodeContainer_methods(root_module, cls):
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'arg0')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer() [constructor]
    cls.add_constructor([])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::Ptr<ns3::Node> node) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Node >', 'node')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(std::string nodeName) [constructor]
    cls.add_constructor([param('std::string', 'nodeName')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(uint32_t n, uint32_t systemId=0) [constructor]
    cls.add_constructor([param('uint32_t', 'n'), param('uint32_t', 'systemId', default_value='0')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c, ns3::NodeContainer const & d) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c'), param('ns3::NodeContainer const &', 'd')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c, ns3::NodeContainer const & d, ns3::NodeContainer const & e) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c'), param('ns3::NodeContainer const &', 'd'), param('ns3::NodeContainer const &', 'e')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(ns3::NodeContainer other) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::NodeContainer', 'other')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(std::string nodeName) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'nodeName')])
    ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::NodeContainer::Iterator', 
                   [], 
                   is_const=True)
    ## node-container.h (module 'network'): bool ns3::NodeContainer::Contains(uint32_t id) const [member function]
    cls.add_method('Contains', 
                   'bool', 
                   [param('uint32_t', 'id')], 
                   is_const=True)
    ## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n) [member function]
    cls.add_method('Create', 
                   'void', 
                   [param('uint32_t', 'n')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n, uint32_t systemId) [member function]
    cls.add_method('Create', 
                   'void', 
                   [param('uint32_t', 'n'), param('uint32_t', 'systemId')])
    ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::NodeContainer::Iterator', 
                   [], 
                   is_const=True)
    ## node-container.h (module 'network'): ns3::Ptr<ns3::Node> ns3::NodeContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::Node >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## node-container.h (module 'network'): static ns3::NodeContainer ns3::NodeContainer::GetGlobal() [member function]
    cls.add_method('GetGlobal', 
                   'ns3::NodeContainer', 
                   [], 
                   is_static=True)
    ## node-container.h (module 'network'): uint32_t ns3::NodeContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3ObjectBase_methods(root_module, cls):
    ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase() [constructor]
    cls.add_constructor([])
    ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [constructor]
    cls.add_constructor([param('ns3::ObjectBase const &', 'arg0')])
    ## object-base.h (module 'core'): void ns3::ObjectBase::GetAttribute(std::string name, ns3::AttributeValue & value) const [member function]
    cls.add_method('GetAttribute', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue &', 'value')], 
                   is_const=True)
    ## object-base.h (module 'core'): bool ns3::ObjectBase::GetAttributeFailSafe(std::string name, ns3::AttributeValue & value) const [member function]
    cls.add_method('GetAttributeFailSafe', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::AttributeValue &', 'value')], 
                   is_const=True)
    ## object-base.h (module 'core'): ns3::TypeId ns3::ObjectBase::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## object-base.h (module 'core'): static ns3::TypeId ns3::ObjectBase::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## object-base.h (module 'core'): void ns3::ObjectBase::SetAttribute(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('SetAttribute', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::SetAttributeFailSafe(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('SetAttributeFailSafe', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceConnect(std::string name, std::string context, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceConnect', 
                   'bool', 
                   [param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceConnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceConnectWithoutContext', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceDisconnect(std::string name, std::string context, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceDisconnect', 
                   'bool', 
                   [param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceDisconnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceDisconnectWithoutContext', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): void ns3::ObjectBase::ConstructSelf(ns3::AttributeConstructionList const & attributes) [member function]
    cls.add_method('ConstructSelf', 
                   'void', 
                   [param('ns3::AttributeConstructionList const &', 'attributes')], 
                   visibility='protected')
    ## object-base.h (module 'core'): void ns3::ObjectBase::NotifyConstructionCompleted() [member function]
    cls.add_method('NotifyConstructionCompleted', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3ObjectDeleter_methods(root_module, cls):
    ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter() [constructor]
    cls.add_constructor([])
    ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [constructor]
    cls.add_constructor([param('ns3::ObjectDeleter const &', 'arg0')])
    ## object.h (module 'core'): static void ns3::ObjectDeleter::Delete(ns3::Object * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::Object *', 'object')], 
                   is_static=True)
    return

def register_Ns3ObjectFactory_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [constructor]
    cls.add_constructor([param('ns3::ObjectFactory const &', 'arg0')])
    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory() [constructor]
    cls.add_constructor([])
    ## object-factory.h (module 'core'): ns3::Ptr<ns3::Object> ns3::ObjectFactory::Create() const [member function]
    cls.add_method('Create', 
                   'ns3::Ptr< ns3::Object >', 
                   [], 
                   is_const=True)
    ## object-factory.h (module 'core'): ns3::TypeId ns3::ObjectFactory::GetTypeId() const [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
    cls.add_method('IsTypeIdSet', 
                   'bool', 
                   [], 
                   is_const=True)
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::Set() [member function]
    cls.add_method('Set', 
                   'void', 
                   [])
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(ns3::TypeId tid) [member function]
    cls.add_method('SetTypeId', 
                   'void', 
                   [param('ns3::TypeId', 'tid')])
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(char const * tid) [member function]
    cls.add_method('SetTypeId', 
                   'void', 
                   [param('char const *', 'tid')])
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(std::string tid) [member function]
    cls.add_method('SetTypeId', 
                   'void', 
                   [param('std::string', 'tid')])
    return

def register_Ns3PacketMetadata_methods(root_module, cls):
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(uint64_t uid, uint32_t size) [constructor]
    cls.add_constructor([param('uint64_t', 'uid'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(ns3::PacketMetadata const & o) [constructor]
    cls.add_constructor([param('ns3::PacketMetadata const &', 'o')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddAtEnd(ns3::PacketMetadata const & o) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('ns3::PacketMetadata const &', 'o')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddHeader(ns3::Header const & header, uint32_t size) [member function]
    cls.add_method('AddHeader', 
                   'void', 
                   [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddPaddingAtEnd(uint32_t end) [member function]
    cls.add_method('AddPaddingAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
    cls.add_method('AddTrailer', 
                   'void', 
                   [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::PacketMetadata::BeginItem(ns3::Buffer buffer) const [member function]
    cls.add_method('BeginItem', 
                   'ns3::PacketMetadata::ItemIterator', 
                   [param('ns3::Buffer', 'buffer')], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata ns3::PacketMetadata::CreateFragment(uint32_t start, uint32_t end) const [member function]
    cls.add_method('CreateFragment', 
                   'ns3::PacketMetadata', 
                   [param('uint32_t', 'start'), param('uint32_t', 'end')], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::Enable() [member function]
    cls.add_method('Enable', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::EnableChecking() [member function]
    cls.add_method('EnableChecking', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): uint64_t ns3::PacketMetadata::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtEnd(uint32_t end) [member function]
    cls.add_method('RemoveAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtStart(uint32_t start) [member function]
    cls.add_method('RemoveAtStart', 
                   'void', 
                   [param('uint32_t', 'start')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveHeader(ns3::Header const & header, uint32_t size) [member function]
    cls.add_method('RemoveHeader', 
                   'void', 
                   [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
    cls.add_method('RemoveTrailer', 
                   'void', 
                   [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3PacketMetadataItem_methods(root_module, cls):
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item() [constructor]
    cls.add_constructor([])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item(ns3::PacketMetadata::Item const & arg0) [constructor]
    cls.add_constructor([param('ns3::PacketMetadata::Item const &', 'arg0')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::current [variable]
    cls.add_instance_attribute('current', 'ns3::Buffer::Iterator', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentSize [variable]
    cls.add_instance_attribute('currentSize', 'uint32_t', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromEnd [variable]
    cls.add_instance_attribute('currentTrimedFromEnd', 'uint32_t', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromStart [variable]
    cls.add_instance_attribute('currentTrimedFromStart', 'uint32_t', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::isFragment [variable]
    cls.add_instance_attribute('isFragment', 'bool', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::tid [variable]
    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::type [variable]
    cls.add_instance_attribute('type', 'ns3::PacketMetadata::Item::ItemType', is_const=False)
    return

def register_Ns3PacketMetadataItemIterator_methods(root_module, cls):
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata::ItemIterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::PacketMetadata::ItemIterator const &', 'arg0')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata const * metadata, ns3::Buffer buffer) [constructor]
    cls.add_constructor([param('ns3::PacketMetadata const *', 'metadata'), param('ns3::Buffer', 'buffer')])
    ## packet-metadata.h (module 'network'): bool ns3::PacketMetadata::ItemIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item ns3::PacketMetadata::ItemIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::PacketMetadata::Item', 
                   [])
    return

def register_Ns3PacketTagIterator_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::PacketTagIterator::PacketTagIterator(ns3::PacketTagIterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::PacketTagIterator const &', 'arg0')])
    ## packet.h (module 'network'): bool ns3::PacketTagIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::PacketTagIterator::Item ns3::PacketTagIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::PacketTagIterator::Item', 
                   [])
    return

def register_Ns3PacketTagIteratorItem_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::PacketTagIterator::Item::Item(ns3::PacketTagIterator::Item const & arg0) [constructor]
    cls.add_constructor([param('ns3::PacketTagIterator::Item const &', 'arg0')])
    ## packet.h (module 'network'): void ns3::PacketTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
    cls.add_method('GetTag', 
                   'void', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::TypeId ns3::PacketTagIterator::Item::GetTypeId() const [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    return

def register_Ns3PacketTagList_methods(root_module, cls):
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList() [constructor]
    cls.add_constructor([])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList(ns3::PacketTagList const & o) [constructor]
    cls.add_constructor([param('ns3::PacketTagList const &', 'o')])
    ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::Add(ns3::Tag const & tag) const [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Tag const &', 'tag')], 
                   is_const=True)
    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData const * ns3::PacketTagList::Head() const [member function]
    cls.add_method('Head', 
                   'ns3::PacketTagList::TagData const *', 
                   [], 
                   is_const=True)
    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Peek(ns3::Tag & tag) const [member function]
    cls.add_method('Peek', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Remove(ns3::Tag & tag) [member function]
    cls.add_method('Remove', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::RemoveAll() [member function]
    cls.add_method('RemoveAll', 
                   'void', 
                   [])
    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Replace(ns3::Tag & tag) [member function]
    cls.add_method('Replace', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3PacketTagListTagData_methods(root_module, cls):
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData() [constructor]
    cls.add_constructor([])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData(ns3::PacketTagList::TagData const & arg0) [constructor]
    cls.add_constructor([param('ns3::PacketTagList::TagData const &', 'arg0')])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::count [variable]
    cls.add_instance_attribute('count', 'uint32_t', is_const=False)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::data [variable]
    cls.add_instance_attribute('data', 'uint8_t [ 1 ]', is_const=False)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::next [variable]
    cls.add_instance_attribute('next', 'ns3::PacketTagList::TagData *', is_const=False)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::size [variable]
    cls.add_instance_attribute('size', 'uint32_t', is_const=False)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::tid [variable]
    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
    return

def register_Ns3PagingInfoListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::PagingInfoListElement_s::PagingInfoListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::PagingInfoListElement_s::PagingInfoListElement_s(ns3::PagingInfoListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::PagingInfoListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::PagingInfoListElement_s::m_pagingIndex [variable]
    cls.add_instance_attribute('m_pagingIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::PagingInfoListElement_s::m_pagingMessageSize [variable]
    cls.add_instance_attribute('m_pagingMessageSize', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::PagingInfoListElement_s::m_pagingSubframe [variable]
    cls.add_instance_attribute('m_pagingSubframe', 'uint8_t', is_const=False)
    return

def register_Ns3ParameterLogger_methods(root_module, cls):
    ## log.h (module 'core'): ns3::ParameterLogger::ParameterLogger(ns3::ParameterLogger const & arg0) [constructor]
    cls.add_constructor([param('ns3::ParameterLogger const &', 'arg0')])
    ## log.h (module 'core'): ns3::ParameterLogger::ParameterLogger(std::ostream & os) [constructor]
    cls.add_constructor([param('std::ostream &', 'os')])
    return

def register_Ns3PhichListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::PhichListElement_s::PhichListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::PhichListElement_s::PhichListElement_s(ns3::PhichListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::PhichListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::PhichListElement_s::m_phich [variable]
    cls.add_instance_attribute('m_phich', 'ns3::PhichListElement_s::Phich_e', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::PhichListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3PhyReceptionStatParameters_methods(root_module, cls):
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::PhyReceptionStatParameters() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::PhyReceptionStatParameters(ns3::PhyReceptionStatParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::PhyReceptionStatParameters const &', 'arg0')])
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_ccId [variable]
    cls.add_instance_attribute('m_ccId', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_cellId [variable]
    cls.add_instance_attribute('m_cellId', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_correctness [variable]
    cls.add_instance_attribute('m_correctness', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_imsi [variable]
    cls.add_instance_attribute('m_imsi', 'uint64_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_layer [variable]
    cls.add_instance_attribute('m_layer', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_ndi [variable]
    cls.add_instance_attribute('m_ndi', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_rv [variable]
    cls.add_instance_attribute('m_rv', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_sinrPerRb [variable]
    cls.add_instance_attribute('m_sinrPerRb', 'double', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_size [variable]
    cls.add_instance_attribute('m_size', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_timestamp [variable]
    cls.add_instance_attribute('m_timestamp', 'int64_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyReceptionStatParameters::m_txMode [variable]
    cls.add_instance_attribute('m_txMode', 'uint8_t', is_const=False)
    return

def register_Ns3PhyTransmissionStatParameters_methods(root_module, cls):
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::PhyTransmissionStatParameters() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::PhyTransmissionStatParameters(ns3::PhyTransmissionStatParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::PhyTransmissionStatParameters const &', 'arg0')])
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::m_ccId [variable]
    cls.add_instance_attribute('m_ccId', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::m_cellId [variable]
    cls.add_instance_attribute('m_cellId', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::m_imsi [variable]
    cls.add_instance_attribute('m_imsi', 'uint64_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::m_layer [variable]
    cls.add_instance_attribute('m_layer', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::m_ndi [variable]
    cls.add_instance_attribute('m_ndi', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::m_rv [variable]
    cls.add_instance_attribute('m_rv', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::m_size [variable]
    cls.add_instance_attribute('m_size', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::m_timestamp [variable]
    cls.add_instance_attribute('m_timestamp', 'int64_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::PhyTransmissionStatParameters::m_txMode [variable]
    cls.add_instance_attribute('m_txMode', 'uint8_t', is_const=False)
    return

def register_Ns3RachListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::RachListElement_s::RachListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::RachListElement_s::RachListElement_s(ns3::RachListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::RachListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::RachListElement_s::m_estimatedSize [variable]
    cls.add_instance_attribute('m_estimatedSize', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::RachListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3RadioBearerStatsConnector_methods(root_module, cls):
    ## radio-bearer-stats-connector.h (module 'lte'): ns3::RadioBearerStatsConnector::RadioBearerStatsConnector(ns3::RadioBearerStatsConnector const & arg0) [constructor]
    cls.add_constructor([param('ns3::RadioBearerStatsConnector const &', 'arg0')])
    ## radio-bearer-stats-connector.h (module 'lte'): ns3::RadioBearerStatsConnector::RadioBearerStatsConnector() [constructor]
    cls.add_constructor([])
    ## radio-bearer-stats-connector.h (module 'lte'): static void ns3::RadioBearerStatsConnector::CreatedDrbEnb(ns3::RadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti, uint8_t lcid) [member function]
    cls.add_method('CreatedDrbEnb', 
                   'void', 
                   [param('ns3::RadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid')], 
                   is_static=True)
    ## radio-bearer-stats-connector.h (module 'lte'): static void ns3::RadioBearerStatsConnector::CreatedDrbUe(ns3::RadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti, uint8_t lcid) [member function]
    cls.add_method('CreatedDrbUe', 
                   'void', 
                   [param('ns3::RadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid')], 
                   is_static=True)
    ## radio-bearer-stats-connector.h (module 'lte'): static void ns3::RadioBearerStatsConnector::CreatedSrb1Ue(ns3::RadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('CreatedSrb1Ue', 
                   'void', 
                   [param('ns3::RadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')], 
                   is_static=True)
    ## radio-bearer-stats-connector.h (module 'lte'): void ns3::RadioBearerStatsConnector::DisconnectTracesEnb(std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('DisconnectTracesEnb', 
                   'void', 
                   [param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')])
    ## radio-bearer-stats-connector.h (module 'lte'): void ns3::RadioBearerStatsConnector::DisconnectTracesUe(std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('DisconnectTracesUe', 
                   'void', 
                   [param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')])
    ## radio-bearer-stats-connector.h (module 'lte'): void ns3::RadioBearerStatsConnector::EnablePdcpStats(ns3::Ptr<ns3::RadioBearerStatsCalculator> pdcpStats) [member function]
    cls.add_method('EnablePdcpStats', 
                   'void', 
                   [param('ns3::Ptr< ns3::RadioBearerStatsCalculator >', 'pdcpStats')])
    ## radio-bearer-stats-connector.h (module 'lte'): void ns3::RadioBearerStatsConnector::EnableRlcStats(ns3::Ptr<ns3::RadioBearerStatsCalculator> rlcStats) [member function]
    cls.add_method('EnableRlcStats', 
                   'void', 
                   [param('ns3::Ptr< ns3::RadioBearerStatsCalculator >', 'rlcStats')])
    ## radio-bearer-stats-connector.h (module 'lte'): void ns3::RadioBearerStatsConnector::EnsureConnected() [member function]
    cls.add_method('EnsureConnected', 
                   'void', 
                   [])
    ## radio-bearer-stats-connector.h (module 'lte'): static void ns3::RadioBearerStatsConnector::NotifyNewUeContextEnb(ns3::RadioBearerStatsConnector * c, std::string context, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('NotifyNewUeContextEnb', 
                   'void', 
                   [param('ns3::RadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')], 
                   is_static=True)
    ## radio-bearer-stats-connector.h (module 'lte'): static void ns3::RadioBearerStatsConnector::NotifyRandomAccessSuccessfulUe(ns3::RadioBearerStatsConnector * c, std::string context, uint64_t imsi, uint16_t cellid, uint16_t rnti) [member function]
    cls.add_method('NotifyRandomAccessSuccessfulUe', 
                   'void', 
                   [param('ns3::RadioBearerStatsConnector *', 'c'), param('std::string', 'context'), param('uint64_t', 'imsi'), param('uint16_t', 'cellid'), param('uint16_t', 'rnti')], 
                   is_static=True)
    return

def register_Ns3Rectangle_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## rectangle.h (module 'mobility'): ns3::Rectangle::Rectangle(ns3::Rectangle const & arg0) [constructor]
    cls.add_constructor([param('ns3::Rectangle const &', 'arg0')])
    ## rectangle.h (module 'mobility'): ns3::Rectangle::Rectangle(double _xMin, double _xMax, double _yMin, double _yMax) [constructor]
    cls.add_constructor([param('double', '_xMin'), param('double', '_xMax'), param('double', '_yMin'), param('double', '_yMax')])
    ## rectangle.h (module 'mobility'): ns3::Rectangle::Rectangle() [constructor]
    cls.add_constructor([])
    ## rectangle.h (module 'mobility'): ns3::Vector ns3::Rectangle::CalculateIntersection(ns3::Vector const & current, ns3::Vector const & speed) const [member function]
    cls.add_method('CalculateIntersection', 
                   'ns3::Vector', 
                   [param('ns3::Vector const &', 'current'), param('ns3::Vector const &', 'speed')], 
                   is_const=True)
    ## rectangle.h (module 'mobility'): ns3::Rectangle::Side ns3::Rectangle::GetClosestSide(ns3::Vector const & position) const [member function]
    cls.add_method('GetClosestSide', 
                   'ns3::Rectangle::Side', 
                   [param('ns3::Vector const &', 'position')], 
                   is_const=True)
    ## rectangle.h (module 'mobility'): bool ns3::Rectangle::IsInside(ns3::Vector const & position) const [member function]
    cls.add_method('IsInside', 
                   'bool', 
                   [param('ns3::Vector const &', 'position')], 
                   is_const=True)
    ## rectangle.h (module 'mobility'): ns3::Rectangle::xMax [variable]
    cls.add_instance_attribute('xMax', 'double', is_const=False)
    ## rectangle.h (module 'mobility'): ns3::Rectangle::xMin [variable]
    cls.add_instance_attribute('xMin', 'double', is_const=False)
    ## rectangle.h (module 'mobility'): ns3::Rectangle::yMax [variable]
    cls.add_instance_attribute('yMax', 'double', is_const=False)
    ## rectangle.h (module 'mobility'): ns3::Rectangle::yMin [variable]
    cls.add_instance_attribute('yMin', 'double', is_const=False)
    return

def register_Ns3RlcPduListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::RlcPduListElement_s::RlcPduListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::RlcPduListElement_s::RlcPduListElement_s(ns3::RlcPduListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::RlcPduListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::RlcPduListElement_s::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::RlcPduListElement_s::m_size [variable]
    cls.add_instance_attribute('m_size', 'uint16_t', is_const=False)
    return

def register_Ns3SbMeasResult_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::SbMeasResult_s::SbMeasResult_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::SbMeasResult_s::SbMeasResult_s(ns3::SbMeasResult_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::SbMeasResult_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::SbMeasResult_s::m_bwPart [variable]
    cls.add_instance_attribute('m_bwPart', 'ns3::BwPart_s', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SbMeasResult_s::m_higherLayerSelected [variable]
    cls.add_instance_attribute('m_higherLayerSelected', 'std::vector< ns3::HigherLayerSelected_s >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SbMeasResult_s::m_ueSelected [variable]
    cls.add_instance_attribute('m_ueSelected', 'ns3::UeSelected_s', is_const=False)
    return

def register_Ns3SciListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::SciListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::SciListElement_s(ns3::SciListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::SciListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::m_groupDstId [variable]
    cls.add_instance_attribute('m_groupDstId', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::m_hopping [variable]
    cls.add_instance_attribute('m_hopping', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::m_hoppingInfo [variable]
    cls.add_instance_attribute('m_hoppingInfo', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::m_rbLen [variable]
    cls.add_instance_attribute('m_rbLen', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::m_rbStart [variable]
    cls.add_instance_attribute('m_rbStart', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::m_resPscch [variable]
    cls.add_instance_attribute('m_resPscch', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::m_tbSize [variable]
    cls.add_instance_attribute('m_tbSize', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::m_timing [variable]
    cls.add_instance_attribute('m_timing', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SciListElement_s::m_trp [variable]
    cls.add_instance_attribute('m_trp', 'uint8_t', is_const=False)
    return

def register_Ns3SiConfiguration_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::SiConfiguration_s::SiConfiguration_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::SiConfiguration_s::SiConfiguration_s(ns3::SiConfiguration_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::SiConfiguration_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::SiConfiguration_s::m_sfn [variable]
    cls.add_instance_attribute('m_sfn', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SiConfiguration_s::m_siMessageList [variable]
    cls.add_instance_attribute('m_siMessageList', 'std::vector< ns3::SiMessageListElement_s >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SiConfiguration_s::m_siWindowLength [variable]
    cls.add_instance_attribute('m_siWindowLength', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SiConfiguration_s::m_sib1Length [variable]
    cls.add_instance_attribute('m_sib1Length', 'uint16_t', is_const=False)
    return

def register_Ns3SiMessageListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::SiMessageListElement_s::SiMessageListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::SiMessageListElement_s::SiMessageListElement_s(ns3::SiMessageListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::SiMessageListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::SiMessageListElement_s::m_length [variable]
    cls.add_instance_attribute('m_length', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SiMessageListElement_s::m_periodicity [variable]
    cls.add_instance_attribute('m_periodicity', 'uint16_t', is_const=False)
    return

def register_Ns3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > const &', 'o')])
    return

def register_Ns3Simulator_methods(root_module, cls):
    ## simulator.h (module 'core'): ns3::Simulator::Simulator(ns3::Simulator const & arg0) [constructor]
    cls.add_constructor([param('ns3::Simulator const &', 'arg0')])
    ## simulator.h (module 'core'): static void ns3::Simulator::Cancel(ns3::EventId const & id) [member function]
    cls.add_method('Cancel', 
                   'void', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Destroy() [member function]
    cls.add_method('Destroy', 
                   'void', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static uint32_t ns3::Simulator::GetContext() [member function]
    cls.add_method('GetContext', 
                   'uint32_t', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::GetDelayLeft(ns3::EventId const & id) [member function]
    cls.add_method('GetDelayLeft', 
                   'ns3::Time', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static uint64_t ns3::Simulator::GetEventCount() [member function]
    cls.add_method('GetEventCount', 
                   'uint64_t', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Ptr<ns3::SimulatorImpl> ns3::Simulator::GetImplementation() [member function]
    cls.add_method('GetImplementation', 
                   'ns3::Ptr< ns3::SimulatorImpl >', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::GetMaximumSimulationTime() [member function]
    cls.add_method('GetMaximumSimulationTime', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static uint32_t ns3::Simulator::GetSystemId() [member function]
    cls.add_method('GetSystemId', 
                   'uint32_t', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static bool ns3::Simulator::IsExpired(ns3::EventId const & id) [member function]
    cls.add_method('IsExpired', 
                   'bool', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static bool ns3::Simulator::IsFinished() [member function]
    cls.add_method('IsFinished', 
                   'bool', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::Now() [member function]
    cls.add_method('Now', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Remove(ns3::EventId const & id) [member function]
    cls.add_method('Remove', 
                   'void', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::SetImplementation(ns3::Ptr<ns3::SimulatorImpl> impl) [member function]
    cls.add_method('SetImplementation', 
                   'void', 
                   [param('ns3::Ptr< ns3::SimulatorImpl >', 'impl')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::SetScheduler(ns3::ObjectFactory schedulerFactory) [member function]
    cls.add_method('SetScheduler', 
                   'void', 
                   [param('ns3::ObjectFactory', 'schedulerFactory')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Stop(ns3::Time const & delay) [member function]
    cls.add_method('Stop', 
                   'void', 
                   [param('ns3::Time const &', 'delay')], 
                   is_static=True)
    return

def register_Ns3SlCtrlPacketInfo_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlCtrlPacketInfo_t::SlCtrlPacketInfo_t() [constructor]
    cls.add_constructor([])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlCtrlPacketInfo_t::SlCtrlPacketInfo_t(ns3::SlCtrlPacketInfo_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::SlCtrlPacketInfo_t const &', 'arg0')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlCtrlPacketInfo_t::index [variable]
    cls.add_instance_attribute('index', 'int', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlCtrlPacketInfo_t::sinr [variable]
    cls.add_instance_attribute('sinr', 'double', is_const=False)
    return

def register_Ns3SlDciListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::SlDciListElement_s::SlDciListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::SlDciListElement_s::SlDciListElement_s(ns3::SlDciListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::SlDciListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::SlDciListElement_s::m_hopping [variable]
    cls.add_instance_attribute('m_hopping', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SlDciListElement_s::m_hoppingInfo [variable]
    cls.add_instance_attribute('m_hoppingInfo', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SlDciListElement_s::m_rbLen [variable]
    cls.add_instance_attribute('m_rbLen', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SlDciListElement_s::m_rbStart [variable]
    cls.add_instance_attribute('m_rbStart', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SlDciListElement_s::m_resPscch [variable]
    cls.add_instance_attribute('m_resPscch', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SlDciListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SlDciListElement_s::m_tpc [variable]
    cls.add_instance_attribute('m_tpc', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SlDciListElement_s::m_trp [variable]
    cls.add_instance_attribute('m_trp', 'uint8_t', is_const=False)
    return

def register_Ns3SlDiscTbId_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDiscTbId_t::SlDiscTbId_t(ns3::SlDiscTbId_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::SlDiscTbId_t const &', 'arg0')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDiscTbId_t::SlDiscTbId_t() [constructor]
    cls.add_constructor([])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDiscTbId_t::SlDiscTbId_t(uint16_t const a, uint8_t const b) [constructor]
    cls.add_constructor([param('uint16_t const', 'a'), param('uint8_t const', 'b')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDiscTbId_t::m_resPsdch [variable]
    cls.add_instance_attribute('m_resPsdch', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDiscTbId_t::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3SlDisctbInfo_t_methods(root_module, cls):
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t::SlDisctbInfo_t() [constructor]
    cls.add_constructor([])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t::SlDisctbInfo_t(ns3::SlDisctbInfo_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::SlDisctbInfo_t const &', 'arg0')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t::corrupt [variable]
    cls.add_instance_attribute('corrupt', 'bool', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t::harqFeedbackSent [variable]
    cls.add_instance_attribute('harqFeedbackSent', 'bool', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t::index [variable]
    cls.add_instance_attribute('index', 'int', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t::mi [variable]
    cls.add_instance_attribute('mi', 'double', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t::ndi [variable]
    cls.add_instance_attribute('ndi', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t::rbBitmap [variable]
    cls.add_instance_attribute('rbBitmap', 'std::vector< int >', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t::resPsdch [variable]
    cls.add_instance_attribute('resPsdch', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t::rv [variable]
    cls.add_instance_attribute('rv', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlDisctbInfo_t::sinr [variable]
    cls.add_instance_attribute('sinr', 'double', is_const=False)
    return

def register_Ns3SlPhyReceptionStatParameters_methods(root_module, cls):
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::SlPhyReceptionStatParameters() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::SlPhyReceptionStatParameters(ns3::SlPhyReceptionStatParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::SlPhyReceptionStatParameters const &', 'arg0')])
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_cellId [variable]
    cls.add_instance_attribute('m_cellId', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_correctness [variable]
    cls.add_instance_attribute('m_correctness', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_groupDstId [variable]
    cls.add_instance_attribute('m_groupDstId', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_hopping [variable]
    cls.add_instance_attribute('m_hopping', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_hoppingInfo [variable]
    cls.add_instance_attribute('m_hoppingInfo', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_iTrp [variable]
    cls.add_instance_attribute('m_iTrp', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_imsi [variable]
    cls.add_instance_attribute('m_imsi', 'uint64_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_rbLen [variable]
    cls.add_instance_attribute('m_rbLen', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_rbStart [variable]
    cls.add_instance_attribute('m_rbStart', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_resPscch [variable]
    cls.add_instance_attribute('m_resPscch', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_size [variable]
    cls.add_instance_attribute('m_size', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyReceptionStatParameters::m_timestamp [variable]
    cls.add_instance_attribute('m_timestamp', 'int64_t', is_const=False)
    return

def register_Ns3SlPhyTransmissionStatParameters_methods(root_module, cls):
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::SlPhyTransmissionStatParameters() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::SlPhyTransmissionStatParameters(ns3::SlPhyTransmissionStatParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::SlPhyTransmissionStatParameters const &', 'arg0')])
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_ccId [variable]
    cls.add_instance_attribute('m_ccId', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_cellId [variable]
    cls.add_instance_attribute('m_cellId', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_hopping [variable]
    cls.add_instance_attribute('m_hopping', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_hoppingInfo [variable]
    cls.add_instance_attribute('m_hoppingInfo', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_iTrp [variable]
    cls.add_instance_attribute('m_iTrp', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_imsi [variable]
    cls.add_instance_attribute('m_imsi', 'uint64_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_rbLen [variable]
    cls.add_instance_attribute('m_rbLen', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_rbStart [variable]
    cls.add_instance_attribute('m_rbStart', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_resPscch [variable]
    cls.add_instance_attribute('m_resPscch', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_timestamp [variable]
    cls.add_instance_attribute('m_timestamp', 'int64_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlPhyTransmissionStatParameters::m_tpc [variable]
    cls.add_instance_attribute('m_tpc', 'uint8_t', is_const=False)
    return

def register_Ns3SlRxPacketInfo_t_methods(root_module, cls):
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlRxPacketInfo_t::params [variable]
    cls.add_instance_attribute('params', 'ns3::Ptr< ns3::LteSpectrumSignalParametersSlFrame >', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlRxPacketInfo_t::rbBitmap [variable]
    cls.add_instance_attribute('rbBitmap', 'std::vector< int >', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlRxPacketInfo_t::SlRxPacketInfo_t(ns3::SlRxPacketInfo_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::SlRxPacketInfo_t const &', 'arg0')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlRxPacketInfo_t::SlRxPacketInfo_t() [constructor]
    cls.add_constructor([])
    return

def register_Ns3SlTbId_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlTbId_t::SlTbId_t(ns3::SlTbId_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::SlTbId_t const &', 'arg0')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlTbId_t::SlTbId_t() [constructor]
    cls.add_constructor([])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlTbId_t::SlTbId_t(uint16_t const a, uint8_t const b) [constructor]
    cls.add_constructor([param('uint16_t const', 'a'), param('uint8_t const', 'b')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlTbId_t::m_l1dst [variable]
    cls.add_instance_attribute('m_l1dst', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SlTbId_t::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3SlUeMacStatParameters_methods(root_module, cls):
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::SlUeMacStatParameters() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::SlUeMacStatParameters(ns3::SlUeMacStatParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::SlUeMacStatParameters const &', 'arg0')])
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_cellId [variable]
    cls.add_instance_attribute('m_cellId', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_frameNo [variable]
    cls.add_instance_attribute('m_frameNo', 'uint32_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_groupDstId [variable]
    cls.add_instance_attribute('m_groupDstId', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_hopping [variable]
    cls.add_instance_attribute('m_hopping', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_hoppingInfo [variable]
    cls.add_instance_attribute('m_hoppingInfo', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_imsi [variable]
    cls.add_instance_attribute('m_imsi', 'uint64_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_periodStartFrame [variable]
    cls.add_instance_attribute('m_periodStartFrame', 'uint32_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_periodStartSubframe [variable]
    cls.add_instance_attribute('m_periodStartSubframe', 'uint32_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_pscchTxLengthRB [variable]
    cls.add_instance_attribute('m_pscchTxLengthRB', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_pscchTxStartRB [variable]
    cls.add_instance_attribute('m_pscchTxStartRB', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_psschItrp [variable]
    cls.add_instance_attribute('m_psschItrp', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_resIndex [variable]
    cls.add_instance_attribute('m_resIndex', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_rv [variable]
    cls.add_instance_attribute('m_rv', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_sidelinkDropped [variable]
    cls.add_instance_attribute('m_sidelinkDropped', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_subframeNo [variable]
    cls.add_instance_attribute('m_subframeNo', 'uint32_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_tbSize [variable]
    cls.add_instance_attribute('m_tbSize', 'uint16_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_timestamp [variable]
    cls.add_instance_attribute('m_timestamp', 'int64_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_txLengthRB [variable]
    cls.add_instance_attribute('m_txLengthRB', 'uint8_t', is_const=False)
    ## lte-common.h (module 'lte'): ns3::SlUeMacStatParameters::m_txStartRB [variable]
    cls.add_instance_attribute('m_txStartRB', 'uint8_t', is_const=False)
    return

def register_Ns3SltbInfo_t_methods(root_module, cls):
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t::SltbInfo_t() [constructor]
    cls.add_constructor([])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t::SltbInfo_t(ns3::SltbInfo_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::SltbInfo_t const &', 'arg0')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t::corrupt [variable]
    cls.add_instance_attribute('corrupt', 'bool', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t::harqFeedbackSent [variable]
    cls.add_instance_attribute('harqFeedbackSent', 'bool', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t::mcs [variable]
    cls.add_instance_attribute('mcs', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t::mi [variable]
    cls.add_instance_attribute('mi', 'double', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t::ndi [variable]
    cls.add_instance_attribute('ndi', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t::rbBitmap [variable]
    cls.add_instance_attribute('rbBitmap', 'std::vector< int >', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t::rv [variable]
    cls.add_instance_attribute('rv', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t::sinr [variable]
    cls.add_instance_attribute('sinr', 'double', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::SltbInfo_t::size [variable]
    cls.add_instance_attribute('size', 'uint16_t', is_const=False)
    return

def register_Ns3SpsConfig_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::SpsConfig_s::SpsConfig_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::SpsConfig_s::SpsConfig_s(ns3::SpsConfig_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::SpsConfig_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::SpsConfig_s::m_implicitReleaseAfter [variable]
    cls.add_instance_attribute('m_implicitReleaseAfter', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SpsConfig_s::m_n1PucchAnPersistentList [variable]
    cls.add_instance_attribute('m_n1PucchAnPersistentList', 'std::vector< unsigned short >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SpsConfig_s::m_n1PucchAnPersistentListSize [variable]
    cls.add_instance_attribute('m_n1PucchAnPersistentListSize', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SpsConfig_s::m_numberOfConfSpsProcesses [variable]
    cls.add_instance_attribute('m_numberOfConfSpsProcesses', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SpsConfig_s::m_semiPersistSchedIntervalDl [variable]
    cls.add_instance_attribute('m_semiPersistSchedIntervalDl', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SpsConfig_s::m_semiPersistSchedIntervalUl [variable]
    cls.add_instance_attribute('m_semiPersistSchedIntervalUl', 'uint16_t', is_const=False)
    return

def register_Ns3SrConfig_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::SrConfig_s::SrConfig_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::SrConfig_s::SrConfig_s(ns3::SrConfig_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::SrConfig_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::SrConfig_s::m_action [variable]
    cls.add_instance_attribute('m_action', 'ns3::SetupRelease_e', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SrConfig_s::m_dsrTransMax [variable]
    cls.add_instance_attribute('m_dsrTransMax', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::SrConfig_s::m_schedInterval [variable]
    cls.add_instance_attribute('m_schedInterval', 'uint8_t', is_const=False)
    return

def register_Ns3SrListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::SrListElement_s::SrListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::SrListElement_s::SrListElement_s(ns3::SrListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::SrListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::SrListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3StatisticalSummary_methods(root_module, cls):
    ## data-calculator.h (module 'stats'): ns3::StatisticalSummary::StatisticalSummary() [constructor]
    cls.add_constructor([])
    ## data-calculator.h (module 'stats'): ns3::StatisticalSummary::StatisticalSummary(ns3::StatisticalSummary const & arg0) [constructor]
    cls.add_constructor([param('ns3::StatisticalSummary const &', 'arg0')])
    ## data-calculator.h (module 'stats'): long int ns3::StatisticalSummary::getCount() const [member function]
    cls.add_method('getCount', 
                   'long int', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getMax() const [member function]
    cls.add_method('getMax', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getMean() const [member function]
    cls.add_method('getMean', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getMin() const [member function]
    cls.add_method('getMin', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getSqrSum() const [member function]
    cls.add_method('getSqrSum', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getStddev() const [member function]
    cls.add_method('getStddev', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getSum() const [member function]
    cls.add_method('getSum', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): double ns3::StatisticalSummary::getVariance() const [member function]
    cls.add_method('getVariance', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3Tag_methods(root_module, cls):
    ## tag.h (module 'network'): ns3::Tag::Tag() [constructor]
    cls.add_constructor([])
    ## tag.h (module 'network'): ns3::Tag::Tag(ns3::Tag const & arg0) [constructor]
    cls.add_constructor([param('ns3::Tag const &', 'arg0')])
    ## tag.h (module 'network'): void ns3::Tag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_pure_virtual=True, is_virtual=True)
    ## tag.h (module 'network'): uint32_t ns3::Tag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## tag.h (module 'network'): static ns3::TypeId ns3::Tag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## tag.h (module 'network'): void ns3::Tag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## tag.h (module 'network'): void ns3::Tag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3TagBuffer_methods(root_module, cls):
    ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [constructor]
    cls.add_constructor([param('ns3::TagBuffer const &', 'arg0')])
    ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(uint8_t * start, uint8_t * end) [constructor]
    cls.add_constructor([param('uint8_t *', 'start'), param('uint8_t *', 'end')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::CopyFrom(ns3::TagBuffer o) [member function]
    cls.add_method('CopyFrom', 
                   'void', 
                   [param('ns3::TagBuffer', 'o')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::Read(uint8_t * buffer, uint32_t size) [member function]
    cls.add_method('Read', 
                   'void', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
    ## tag-buffer.h (module 'network'): double ns3::TagBuffer::ReadDouble() [member function]
    cls.add_method('ReadDouble', 
                   'double', 
                   [])
    ## tag-buffer.h (module 'network'): uint16_t ns3::TagBuffer::ReadU16() [member function]
    cls.add_method('ReadU16', 
                   'uint16_t', 
                   [])
    ## tag-buffer.h (module 'network'): uint32_t ns3::TagBuffer::ReadU32() [member function]
    cls.add_method('ReadU32', 
                   'uint32_t', 
                   [])
    ## tag-buffer.h (module 'network'): uint64_t ns3::TagBuffer::ReadU64() [member function]
    cls.add_method('ReadU64', 
                   'uint64_t', 
                   [])
    ## tag-buffer.h (module 'network'): uint8_t ns3::TagBuffer::ReadU8() [member function]
    cls.add_method('ReadU8', 
                   'uint8_t', 
                   [])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::TrimAtEnd(uint32_t trim) [member function]
    cls.add_method('TrimAtEnd', 
                   'void', 
                   [param('uint32_t', 'trim')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::Write(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Write', 
                   'void', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteDouble(double v) [member function]
    cls.add_method('WriteDouble', 
                   'void', 
                   [param('double', 'v')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t v) [member function]
    cls.add_method('WriteU16', 
                   'void', 
                   [param('uint16_t', 'v')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t v) [member function]
    cls.add_method('WriteU32', 
                   'void', 
                   [param('uint32_t', 'v')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU64(uint64_t v) [member function]
    cls.add_method('WriteU64', 
                   'void', 
                   [param('uint64_t', 'v')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU8(uint8_t v) [member function]
    cls.add_method('WriteU8', 
                   'void', 
                   [param('uint8_t', 'v')])
    return

def register_Ns3TbErrorStats_t_methods(root_module, cls):
    ## lte-nist-error-model.h (module 'lte'): ns3::TbErrorStats_t::TbErrorStats_t() [constructor]
    cls.add_constructor([])
    ## lte-nist-error-model.h (module 'lte'): ns3::TbErrorStats_t::TbErrorStats_t(ns3::TbErrorStats_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::TbErrorStats_t const &', 'arg0')])
    ## lte-nist-error-model.h (module 'lte'): ns3::TbErrorStats_t::sinr [variable]
    cls.add_instance_attribute('sinr', 'double', is_const=False)
    ## lte-nist-error-model.h (module 'lte'): ns3::TbErrorStats_t::tbler [variable]
    cls.add_instance_attribute('tbler', 'double', is_const=False)
    return

def register_Ns3TbId_t_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## lte-spectrum-phy.h (module 'lte'): ns3::TbId_t::TbId_t(ns3::TbId_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::TbId_t const &', 'arg0')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::TbId_t::TbId_t() [constructor]
    cls.add_constructor([])
    ## lte-spectrum-phy.h (module 'lte'): ns3::TbId_t::TbId_t(uint16_t const a, uint8_t const b) [constructor]
    cls.add_constructor([param('uint16_t const', 'a'), param('uint8_t const', 'b')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::TbId_t::m_layer [variable]
    cls.add_instance_attribute('m_layer', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::TbId_t::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    return

def register_Ns3Time_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<=')
    cls.add_binary_comparison_operator('>=')
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('>')
    cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
    cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
    cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
    cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
    cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
    cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
    cls.add_output_stream_operator()
    ## nstime.h (module 'core'): ns3::Time::Time() [constructor]
    cls.add_constructor([])
    ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [constructor]
    cls.add_constructor([param('ns3::Time const &', 'o')])
    ## nstime.h (module 'core'): ns3::Time::Time(double v) [constructor]
    cls.add_constructor([param('double', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(int v) [constructor]
    cls.add_constructor([param('int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long int v) [constructor]
    cls.add_constructor([param('long int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long long int v) [constructor]
    cls.add_constructor([param('long long int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(unsigned int v) [constructor]
    cls.add_constructor([param('unsigned int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long unsigned int v) [constructor]
    cls.add_constructor([param('long unsigned int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long long unsigned int v) [constructor]
    cls.add_constructor([param('long long unsigned int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(ns3::int64x64_t const & v) [constructor]
    cls.add_constructor([param('ns3::int64x64_t const &', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(std::string const & s) [constructor]
    cls.add_constructor([param('std::string const &', 's')])
    ## nstime.h (module 'core'): ns3::TimeWithUnit ns3::Time::As(ns3::Time::Unit const unit=::ns3::Time::Unit::AUTO) const [member function]
    cls.add_method('As', 
                   'ns3::TimeWithUnit', 
                   [param('ns3::Time::Unit const', 'unit', default_value='::ns3::Time::Unit::AUTO')], 
                   is_const=True)
    ## nstime.h (module 'core'): int ns3::Time::Compare(ns3::Time const & o) const [member function]
    cls.add_method('Compare', 
                   'int', 
                   [param('ns3::Time const &', 'o')], 
                   is_const=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::From(ns3::int64x64_t const & value) [member function]
    cls.add_method('From', 
                   'ns3::Time', 
                   [param('ns3::int64x64_t const &', 'value')], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::From(ns3::int64x64_t const & value, ns3::Time::Unit unit) [member function]
    cls.add_method('From', 
                   'ns3::Time', 
                   [param('ns3::int64x64_t const &', 'value'), param('ns3::Time::Unit', 'unit')], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::FromDouble(double value, ns3::Time::Unit unit) [member function]
    cls.add_method('FromDouble', 
                   'ns3::Time', 
                   [param('double', 'value'), param('ns3::Time::Unit', 'unit')], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::FromInteger(uint64_t value, ns3::Time::Unit unit) [member function]
    cls.add_method('FromInteger', 
                   'ns3::Time', 
                   [param('uint64_t', 'value'), param('ns3::Time::Unit', 'unit')], 
                   is_static=True)
    ## nstime.h (module 'core'): double ns3::Time::GetDays() const [member function]
    cls.add_method('GetDays', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetDouble() const [member function]
    cls.add_method('GetDouble', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetFemtoSeconds() const [member function]
    cls.add_method('GetFemtoSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetHours() const [member function]
    cls.add_method('GetHours', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetInteger() const [member function]
    cls.add_method('GetInteger', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetMicroSeconds() const [member function]
    cls.add_method('GetMicroSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetMilliSeconds() const [member function]
    cls.add_method('GetMilliSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetMinutes() const [member function]
    cls.add_method('GetMinutes', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetNanoSeconds() const [member function]
    cls.add_method('GetNanoSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetPicoSeconds() const [member function]
    cls.add_method('GetPicoSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): static ns3::Time::Unit ns3::Time::GetResolution() [member function]
    cls.add_method('GetResolution', 
                   'ns3::Time::Unit', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): double ns3::Time::GetSeconds() const [member function]
    cls.add_method('GetSeconds', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetTimeStep() const [member function]
    cls.add_method('GetTimeStep', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetYears() const [member function]
    cls.add_method('GetYears', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsNegative() const [member function]
    cls.add_method('IsNegative', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsPositive() const [member function]
    cls.add_method('IsPositive', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsStrictlyNegative() const [member function]
    cls.add_method('IsStrictlyNegative', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsStrictlyPositive() const [member function]
    cls.add_method('IsStrictlyPositive', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsZero() const [member function]
    cls.add_method('IsZero', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::Max() [member function]
    cls.add_method('Max', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::Min() [member function]
    cls.add_method('Min', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): ns3::Time ns3::Time::RoundTo(ns3::Time::Unit unit) const [member function]
    cls.add_method('RoundTo', 
                   'ns3::Time', 
                   [param('ns3::Time::Unit', 'unit')], 
                   is_const=True)
    ## nstime.h (module 'core'): static void ns3::Time::SetResolution(ns3::Time::Unit resolution) [member function]
    cls.add_method('SetResolution', 
                   'void', 
                   [param('ns3::Time::Unit', 'resolution')], 
                   is_static=True)
    ## nstime.h (module 'core'): static bool ns3::Time::StaticInit() [member function]
    cls.add_method('StaticInit', 
                   'bool', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): ns3::int64x64_t ns3::Time::To(ns3::Time::Unit unit) const [member function]
    cls.add_method('To', 
                   'ns3::int64x64_t', 
                   [param('ns3::Time::Unit', 'unit')], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::ToDouble(ns3::Time::Unit unit) const [member function]
    cls.add_method('ToDouble', 
                   'double', 
                   [param('ns3::Time::Unit', 'unit')], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::ToInteger(ns3::Time::Unit unit) const [member function]
    cls.add_method('ToInteger', 
                   'int64_t', 
                   [param('ns3::Time::Unit', 'unit')], 
                   is_const=True)
    return

def register_Ns3TimeWithUnit_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [constructor]
    cls.add_constructor([param('ns3::TimeWithUnit const &', 'arg0')])
    ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::Time const time, ns3::Time::Unit const unit) [constructor]
    cls.add_constructor([param('ns3::Time const', 'time'), param('ns3::Time::Unit const', 'unit')])
    return

def register_Ns3Timer_methods(root_module, cls):
    ## timer.h (module 'core'): ns3::Timer::Timer(ns3::Timer const & arg0) [constructor]
    cls.add_constructor([param('ns3::Timer const &', 'arg0')])
    ## timer.h (module 'core'): ns3::Timer::Timer() [constructor]
    cls.add_constructor([])
    ## timer.h (module 'core'): ns3::Timer::Timer(ns3::Timer::DestroyPolicy destroyPolicy) [constructor]
    cls.add_constructor([param('ns3::Timer::DestroyPolicy', 'destroyPolicy')])
    ## timer.h (module 'core'): void ns3::Timer::Cancel() [member function]
    cls.add_method('Cancel', 
                   'void', 
                   [])
    ## timer.h (module 'core'): ns3::Time ns3::Timer::GetDelay() const [member function]
    cls.add_method('GetDelay', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): ns3::Time ns3::Timer::GetDelayLeft() const [member function]
    cls.add_method('GetDelayLeft', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): ns3::Timer::State ns3::Timer::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Timer::State', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): bool ns3::Timer::IsExpired() const [member function]
    cls.add_method('IsExpired', 
                   'bool', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): bool ns3::Timer::IsRunning() const [member function]
    cls.add_method('IsRunning', 
                   'bool', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): bool ns3::Timer::IsSuspended() const [member function]
    cls.add_method('IsSuspended', 
                   'bool', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): void ns3::Timer::Remove() [member function]
    cls.add_method('Remove', 
                   'void', 
                   [])
    ## timer.h (module 'core'): void ns3::Timer::Resume() [member function]
    cls.add_method('Resume', 
                   'void', 
                   [])
    ## timer.h (module 'core'): void ns3::Timer::Schedule() [member function]
    cls.add_method('Schedule', 
                   'void', 
                   [])
    ## timer.h (module 'core'): void ns3::Timer::Schedule(ns3::Time delay) [member function]
    cls.add_method('Schedule', 
                   'void', 
                   [param('ns3::Time', 'delay')])
    ## timer.h (module 'core'): void ns3::Timer::SetDelay(ns3::Time const & delay) [member function]
    cls.add_method('SetDelay', 
                   'void', 
                   [param('ns3::Time const &', 'delay')])
    ## timer.h (module 'core'): void ns3::Timer::Suspend() [member function]
    cls.add_method('Suspend', 
                   'void', 
                   [])
    return

def register_Ns3TimerImpl_methods(root_module, cls):
    ## timer-impl.h (module 'core'): ns3::TimerImpl::TimerImpl() [constructor]
    cls.add_constructor([])
    ## timer-impl.h (module 'core'): ns3::TimerImpl::TimerImpl(ns3::TimerImpl const & arg0) [constructor]
    cls.add_constructor([param('ns3::TimerImpl const &', 'arg0')])
    ## timer-impl.h (module 'core'): void ns3::TimerImpl::Invoke() [member function]
    cls.add_method('Invoke', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## timer-impl.h (module 'core'): ns3::EventId ns3::TimerImpl::Schedule(ns3::Time const & delay) [member function]
    cls.add_method('Schedule', 
                   'ns3::EventId', 
                   [param('ns3::Time const &', 'delay')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3TracedValue__Bool_methods(root_module, cls):
    ## traced-value.h (module 'core'): ns3::TracedValue<bool>::TracedValue() [constructor]
    cls.add_constructor([])
    ## traced-value.h (module 'core'): ns3::TracedValue<bool>::TracedValue(ns3::TracedValue<bool> const & o) [constructor]
    cls.add_constructor([param('ns3::TracedValue< bool > const &', 'o')])
    ## traced-value.h (module 'core'): ns3::TracedValue<bool>::TracedValue(bool const & v) [constructor]
    cls.add_constructor([param('bool const &', 'v')])
    ## traced-value.h (module 'core'): ns3::TracedValue<bool>::TracedValue(ns3::TracedValue<bool> const & other) [constructor]
    cls.add_constructor([param('ns3::TracedValue< bool > const &', 'other')])
    ## traced-value.h (module 'core'): ns3::TracedValue<bool>::TracedValue(ns3::TracedValue<bool> const & other) [constructor]
    cls.add_constructor([param('ns3::TracedValue< bool > const &', 'other')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<bool>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
    cls.add_method('Connect', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<bool>::ConnectWithoutContext(ns3::CallbackBase const & cb) [member function]
    cls.add_method('ConnectWithoutContext', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<bool>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
    cls.add_method('Disconnect', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<bool>::DisconnectWithoutContext(ns3::CallbackBase const & cb) [member function]
    cls.add_method('DisconnectWithoutContext', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb')])
    ## traced-value.h (module 'core'): bool ns3::TracedValue<bool>::Get() const [member function]
    cls.add_method('Get', 
                   'bool', 
                   [], 
                   is_const=True)
    ## traced-value.h (module 'core'): void ns3::TracedValue<bool>::Set(bool const & v) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('bool const &', 'v')])
    return

def register_Ns3TracedValue__Double_methods(root_module, cls):
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue() [constructor]
    cls.add_constructor([])
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(ns3::TracedValue<double> const & o) [constructor]
    cls.add_constructor([param('ns3::TracedValue< double > const &', 'o')])
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(double const & v) [constructor]
    cls.add_constructor([param('double const &', 'v')])
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(ns3::TracedValue<double> const & other) [constructor]
    cls.add_constructor([param('ns3::TracedValue< double > const &', 'other')])
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(ns3::TracedValue<double> const & other) [constructor]
    cls.add_constructor([param('ns3::TracedValue< double > const &', 'other')])
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(int const & other) [constructor]
    cls.add_constructor([param('int const &', 'other')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
    cls.add_method('Connect', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<double>::ConnectWithoutContext(ns3::CallbackBase const & cb) [member function]
    cls.add_method('ConnectWithoutContext', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
    cls.add_method('Disconnect', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<double>::DisconnectWithoutContext(ns3::CallbackBase const & cb) [member function]
    cls.add_method('DisconnectWithoutContext', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb')])
    ## traced-value.h (module 'core'): double ns3::TracedValue<double>::Get() const [member function]
    cls.add_method('Get', 
                   'double', 
                   [], 
                   is_const=True)
    ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Set(double const & v) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('double const &', 'v')])
    return

def register_Ns3TransmissionModesLayers_methods(root_module, cls):
    ## lte-common.h (module 'lte'): ns3::TransmissionModesLayers::TransmissionModesLayers() [constructor]
    cls.add_constructor([])
    ## lte-common.h (module 'lte'): ns3::TransmissionModesLayers::TransmissionModesLayers(ns3::TransmissionModesLayers const & arg0) [constructor]
    cls.add_constructor([param('ns3::TransmissionModesLayers const &', 'arg0')])
    ## lte-common.h (module 'lte'): static uint8_t ns3::TransmissionModesLayers::TxMode2LayerNum(uint8_t txMode) [member function]
    cls.add_method('TxMode2LayerNum', 
                   'uint8_t', 
                   [param('uint8_t', 'txMode')], 
                   is_static=True)
    return

def register_Ns3TypeId_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('<')
    ## type-id.h (module 'core'): ns3::TypeId::TypeId(std::string const & name) [constructor]
    cls.add_constructor([param('std::string const &', 'name')])
    ## type-id.h (module 'core'): ns3::TypeId::TypeId() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [constructor]
    cls.add_constructor([param('ns3::TypeId const &', 'o')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
    cls.add_method('AddAttribute', 
                   'ns3::TypeId', 
                   [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
    cls.add_method('AddAttribute', 
                   'ns3::TypeId', 
                   [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
    cls.add_method('AddTraceSource', 
                   'ns3::TypeId', 
                   [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(std::size_t i) const [member function]
    cls.add_method('GetAttribute', 
                   'ns3::TypeId::AttributeInformation', 
                   [param('std::size_t', 'i')], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(std::size_t i) const [member function]
    cls.add_method('GetAttributeFullName', 
                   'std::string', 
                   [param('std::size_t', 'i')], 
                   is_const=True)
    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetAttributeN() const [member function]
    cls.add_method('GetAttributeN', 
                   'std::size_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TypeId::GetConstructor() const [member function]
    cls.add_method('GetConstructor', 
                   'ns3::Callback< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeId::GetGroupName() const [member function]
    cls.add_method('GetGroupName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::TypeId::hash_t ns3::TypeId::GetHash() const [member function]
    cls.add_method('GetHash', 
                   'ns3::TypeId::hash_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeId::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::GetParent() const [member function]
    cls.add_method('GetParent', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint16_t i) [member function]
    cls.add_method('GetRegistered', 
                   'ns3::TypeId', 
                   [param('uint16_t', 'i')], 
                   is_static=True)
    ## type-id.h (module 'core'): static uint16_t ns3::TypeId::GetRegisteredN() [member function]
    cls.add_method('GetRegisteredN', 
                   'uint16_t', 
                   [], 
                   is_static=True)
    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'std::size_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(std::size_t i) const [member function]
    cls.add_method('GetTraceSource', 
                   'ns3::TypeId::TraceSourceInformation', 
                   [param('std::size_t', 'i')], 
                   is_const=True)
    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetTraceSourceN() const [member function]
    cls.add_method('GetTraceSourceN', 
                   'std::size_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): uint16_t ns3::TypeId::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::HasConstructor() const [member function]
    cls.add_method('HasConstructor', 
                   'bool', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::HasParent() const [member function]
    cls.add_method('HasParent', 
                   'bool', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::HideFromDocumentation() [member function]
    cls.add_method('HideFromDocumentation', 
                   'ns3::TypeId', 
                   [])
    ## type-id.h (module 'core'): bool ns3::TypeId::IsChildOf(ns3::TypeId other) const [member function]
    cls.add_method('IsChildOf', 
                   'bool', 
                   [param('ns3::TypeId', 'other')], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::LookupAttributeByName(std::string name, ns3::TypeId::AttributeInformation * info) const [member function]
    cls.add_method('LookupAttributeByName', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::TypeId::AttributeInformation *', 'info', transfer_ownership=False)], 
                   is_const=True)
    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(ns3::TypeId::hash_t hash) [member function]
    cls.add_method('LookupByHash', 
                   'ns3::TypeId', 
                   [param('uint32_t', 'hash')], 
                   is_static=True)
    ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(ns3::TypeId::hash_t hash, ns3::TypeId * tid) [member function]
    cls.add_method('LookupByHashFailSafe', 
                   'bool', 
                   [param('uint32_t', 'hash'), param('ns3::TypeId *', 'tid')], 
                   is_static=True)
    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByName(std::string name) [member function]
    cls.add_method('LookupByName', 
                   'ns3::TypeId', 
                   [param('std::string', 'name')], 
                   is_static=True)
    ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
    cls.add_method('LookupTraceSourceByName', 
                   'ns3::Ptr< ns3::TraceSourceAccessor const >', 
                   [param('std::string', 'name')], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
    cls.add_method('LookupTraceSourceByName', 
                   'ns3::Ptr< ns3::TraceSourceAccessor const >', 
                   [param('std::string', 'name'), param('ns3::TypeId::TraceSourceInformation *', 'info')], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::MustHideFromDocumentation() const [member function]
    cls.add_method('MustHideFromDocumentation', 
                   'bool', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(std::size_t i, ns3::Ptr<const ns3::AttributeValue> initialValue) [member function]
    cls.add_method('SetAttributeInitialValue', 
                   'bool', 
                   [param('std::size_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetGroupName(std::string groupName) [member function]
    cls.add_method('SetGroupName', 
                   'ns3::TypeId', 
                   [param('std::string', 'groupName')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetParent(ns3::TypeId tid) [member function]
    cls.add_method('SetParent', 
                   'ns3::TypeId', 
                   [param('ns3::TypeId', 'tid')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetParent() [member function]
    cls.add_method('SetParent', 
                   'ns3::TypeId', 
                   [], 
                   template_parameters=['ns3::Object'])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetSize(std::size_t size) [member function]
    cls.add_method('SetSize', 
                   'ns3::TypeId', 
                   [param('std::size_t', 'size')])
    ## type-id.h (module 'core'): void ns3::TypeId::SetUid(uint16_t uid) [member function]
    cls.add_method('SetUid', 
                   'void', 
                   [param('uint16_t', 'uid')])
    return

def register_Ns3TypeIdAttributeInformation_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [constructor]
    cls.add_constructor([param('ns3::TypeId::AttributeInformation const &', 'arg0')])
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::accessor [variable]
    cls.add_instance_attribute('accessor', 'ns3::Ptr< ns3::AttributeAccessor const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::checker [variable]
    cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)
    cls.add_instance_attribute('flags', 'uint32_t', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::help [variable]
    cls.add_instance_attribute('help', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::initialValue [variable]
    cls.add_instance_attribute('initialValue', 'ns3::Ptr< ns3::AttributeValue const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::originalInitialValue [variable]
    cls.add_instance_attribute('originalInitialValue', 'ns3::Ptr< ns3::AttributeValue const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::supportLevel [variable]
    cls.add_instance_attribute('supportLevel', 'ns3::TypeId::SupportLevel', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::supportMsg [variable]
    cls.add_instance_attribute('supportMsg', 'std::string', is_const=False)
    return

def register_Ns3TypeIdTraceSourceInformation_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [constructor]
    cls.add_constructor([param('ns3::TypeId::TraceSourceInformation const &', 'arg0')])
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::accessor [variable]
    cls.add_instance_attribute('accessor', 'ns3::Ptr< ns3::TraceSourceAccessor const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::callback [variable]
    cls.add_instance_attribute('callback', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::help [variable]
    cls.add_instance_attribute('help', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::supportLevel [variable]
    cls.add_instance_attribute('supportLevel', 'ns3::TypeId::SupportLevel', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::supportMsg [variable]
    cls.add_instance_attribute('supportMsg', 'std::string', is_const=False)
    return

def register_Ns3UeCapabilities_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::UeCapabilities_s::UeCapabilities_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::UeCapabilities_s::UeCapabilities_s(ns3::UeCapabilities_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::UeCapabilities_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::UeCapabilities_s::m_halfDuplex [variable]
    cls.add_instance_attribute('m_halfDuplex', 'bool', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UeCapabilities_s::m_intraSfHopping [variable]
    cls.add_instance_attribute('m_intraSfHopping', 'bool', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UeCapabilities_s::m_resAllocType1 [variable]
    cls.add_instance_attribute('m_resAllocType1', 'bool', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UeCapabilities_s::m_type2Sb1 [variable]
    cls.add_instance_attribute('m_type2Sb1', 'bool', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UeCapabilities_s::m_ueCategory [variable]
    cls.add_instance_attribute('m_ueCategory', 'uint8_t', is_const=False)
    return

def register_Ns3UeSelected_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::UeSelected_s::UeSelected_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::UeSelected_s::UeSelected_s(ns3::UeSelected_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::UeSelected_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::UeSelected_s::m_sbCqi [variable]
    cls.add_instance_attribute('m_sbCqi', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UeSelected_s::m_sbList [variable]
    cls.add_instance_attribute('m_sbList', 'std::vector< unsigned char >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UeSelected_s::m_sbPmi [variable]
    cls.add_instance_attribute('m_sbPmi', 'uint8_t', is_const=False)
    return

def register_Ns3UlCqi_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::UlCqi_s::UlCqi_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::UlCqi_s::UlCqi_s(ns3::UlCqi_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::UlCqi_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::UlCqi_s::m_sinr [variable]
    cls.add_instance_attribute('m_sinr', 'std::vector< unsigned short >', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlCqi_s::m_type [variable]
    cls.add_instance_attribute('m_type', 'ns3::UlCqi_s::Type_e', is_const=False)
    return

def register_Ns3UlDciListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::UlDciListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::UlDciListElement_s(ns3::UlDciListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::UlDciListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_aggrLevel [variable]
    cls.add_instance_attribute('m_aggrLevel', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_cceIndex [variable]
    cls.add_instance_attribute('m_cceIndex', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_cqiRequest [variable]
    cls.add_instance_attribute('m_cqiRequest', 'bool', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_dai [variable]
    cls.add_instance_attribute('m_dai', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_freqHopping [variable]
    cls.add_instance_attribute('m_freqHopping', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_hopping [variable]
    cls.add_instance_attribute('m_hopping', 'bool', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_n2Dmrs [variable]
    cls.add_instance_attribute('m_n2Dmrs', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_ndi [variable]
    cls.add_instance_attribute('m_ndi', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_pdcchPowerOffset [variable]
    cls.add_instance_attribute('m_pdcchPowerOffset', 'int8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_rbLen [variable]
    cls.add_instance_attribute('m_rbLen', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_rbStart [variable]
    cls.add_instance_attribute('m_rbStart', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_tbSize [variable]
    cls.add_instance_attribute('m_tbSize', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_tpc [variable]
    cls.add_instance_attribute('m_tpc', 'int8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_ueTxAntennaSelection [variable]
    cls.add_instance_attribute('m_ueTxAntennaSelection', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlDciListElement_s::m_ulIndex [variable]
    cls.add_instance_attribute('m_ulIndex', 'uint8_t', is_const=False)
    return

def register_Ns3UlGrant_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s::UlGrant_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s::UlGrant_s(ns3::UlGrant_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::UlGrant_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s::m_cqiRequest [variable]
    cls.add_instance_attribute('m_cqiRequest', 'bool', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s::m_hopping [variable]
    cls.add_instance_attribute('m_hopping', 'bool', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s::m_mcs [variable]
    cls.add_instance_attribute('m_mcs', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s::m_rbLen [variable]
    cls.add_instance_attribute('m_rbLen', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s::m_rbStart [variable]
    cls.add_instance_attribute('m_rbStart', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s::m_tbSize [variable]
    cls.add_instance_attribute('m_tbSize', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s::m_tpc [variable]
    cls.add_instance_attribute('m_tpc', 'int8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlGrant_s::m_ulDelay [variable]
    cls.add_instance_attribute('m_ulDelay', 'bool', is_const=False)
    return

def register_Ns3UlInfoListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::UlInfoListElement_s::UlInfoListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::UlInfoListElement_s::UlInfoListElement_s(ns3::UlInfoListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::UlInfoListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::UlInfoListElement_s::m_receptionStatus [variable]
    cls.add_instance_attribute('m_receptionStatus', 'ns3::UlInfoListElement_s::ReceptionStatus_e', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlInfoListElement_s::m_rnti [variable]
    cls.add_instance_attribute('m_rnti', 'uint16_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlInfoListElement_s::m_tpc [variable]
    cls.add_instance_attribute('m_tpc', 'uint8_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::UlInfoListElement_s::m_ulReception [variable]
    cls.add_instance_attribute('m_ulReception', 'std::vector< unsigned short >', is_const=False)
    return

def register_Ns3Vector2D_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('<')
    cls.add_binary_numeric_operator('-', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('>=')
    cls.add_binary_comparison_operator('>')
    cls.add_binary_comparison_operator('<=')
    ## vector.h (module 'core'): ns3::Vector2D::Vector2D(ns3::Vector2D const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector2D const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Vector2D::Vector2D(double _x, double _y) [constructor]
    cls.add_constructor([param('double', '_x'), param('double', '_y')])
    ## vector.h (module 'core'): ns3::Vector2D::Vector2D() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): double ns3::Vector2D::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'double', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): double ns3::Vector2D::GetLengthSquared() const [member function]
    cls.add_method('GetLengthSquared', 
                   'double', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): ns3::Vector2D::x [variable]
    cls.add_instance_attribute('x', 'double', is_const=False)
    ## vector.h (module 'core'): ns3::Vector2D::y [variable]
    cls.add_instance_attribute('y', 'double', is_const=False)
    return

def register_Ns3Vector3D_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('<')
    cls.add_binary_numeric_operator('-', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('>=')
    cls.add_binary_comparison_operator('>')
    cls.add_binary_comparison_operator('<=')
    ## vector.h (module 'core'): ns3::Vector3D::Vector3D(ns3::Vector3D const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector3D const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Vector3D::Vector3D(double _x, double _y, double _z) [constructor]
    cls.add_constructor([param('double', '_x'), param('double', '_y'), param('double', '_z')])
    ## vector.h (module 'core'): ns3::Vector3D::Vector3D() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): double ns3::Vector3D::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'double', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): double ns3::Vector3D::GetLengthSquared() const [member function]
    cls.add_method('GetLengthSquared', 
                   'double', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): ns3::Vector3D::x [variable]
    cls.add_instance_attribute('x', 'double', is_const=False)
    ## vector.h (module 'core'): ns3::Vector3D::y [variable]
    cls.add_instance_attribute('y', 'double', is_const=False)
    ## vector.h (module 'core'): ns3::Vector3D::z [variable]
    cls.add_instance_attribute('z', 'double', is_const=False)
    return

def register_Ns3VendorSpecificListElement_s_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::VendorSpecificListElement_s::VendorSpecificListElement_s() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::VendorSpecificListElement_s::VendorSpecificListElement_s(ns3::VendorSpecificListElement_s const & arg0) [constructor]
    cls.add_constructor([param('ns3::VendorSpecificListElement_s const &', 'arg0')])
    ## ff-mac-common.h (module 'lte'): ns3::VendorSpecificListElement_s::m_length [variable]
    cls.add_instance_attribute('m_length', 'uint32_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::VendorSpecificListElement_s::m_type [variable]
    cls.add_instance_attribute('m_type', 'uint32_t', is_const=False)
    ## ff-mac-common.h (module 'lte'): ns3::VendorSpecificListElement_s::m_value [variable]
    cls.add_instance_attribute('m_value', 'ns3::Ptr< ns3::VendorSpecificValue >', is_const=False)
    return

def register_Ns3Empty_methods(root_module, cls):
    ## empty.h (module 'core'): ns3::empty::empty() [constructor]
    cls.add_constructor([])
    ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [constructor]
    cls.add_constructor([param('ns3::empty const &', 'arg0')])
    return

def register_Ns3Int64x64_t_methods(root_module, cls):
    cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
    cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
    cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<=')
    cls.add_binary_comparison_operator('>=')
    cls.add_output_stream_operator()
    cls.add_unary_numeric_operator('-')
    cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
    cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
    cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
    cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
    cls.add_binary_comparison_operator('>')
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
    cls.add_constructor([])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(double const value) [constructor]
    cls.add_constructor([param('double const', 'value')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long double const value) [constructor]
    cls.add_constructor([param('long double const', 'value')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int const v) [constructor]
    cls.add_constructor([param('int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long int const v) [constructor]
    cls.add_constructor([param('long int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int const v) [constructor]
    cls.add_constructor([param('long long int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int const v) [constructor]
    cls.add_constructor([param('unsigned int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int const v) [constructor]
    cls.add_constructor([param('long unsigned int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int const v) [constructor]
    cls.add_constructor([param('long long unsigned int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int128_t const v) [constructor]
    cls.add_constructor([param('int128_t const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t const hi, uint64_t const lo) [constructor]
    cls.add_constructor([param('int64_t const', 'hi'), param('uint64_t const', 'lo')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [constructor]
    cls.add_constructor([param('ns3::int64x64_t const &', 'o')])
    ## int64x64-128.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
    cls.add_method('GetDouble', 
                   'double', 
                   [], 
                   is_const=True)
    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
    cls.add_method('GetHigh', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetInt() const [member function]
    cls.add_method('GetInt', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## int64x64-128.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
    cls.add_method('GetLow', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## int64x64-128.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t const v) [member function]
    cls.add_method('Invert', 
                   'ns3::int64x64_t', 
                   [param('uint64_t const', 'v')], 
                   is_static=True)
    ## int64x64-128.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
    cls.add_method('MulByInvert', 
                   'void', 
                   [param('ns3::int64x64_t const &', 'o')])
    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::Round() const [member function]
    cls.add_method('Round', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::implementation [variable]
    cls.add_static_attribute('implementation', 'ns3::int64x64_t::impl_type const', is_const=True)
    return

def register_Ns3TbInfo_t_methods(root_module, cls):
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::tbInfo_t() [constructor]
    cls.add_constructor([])
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::tbInfo_t(ns3::tbInfo_t const & arg0) [constructor]
    cls.add_constructor([param('ns3::tbInfo_t const &', 'arg0')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::corrupt [variable]
    cls.add_instance_attribute('corrupt', 'bool', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::downlink [variable]
    cls.add_instance_attribute('downlink', 'bool', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::harqFeedbackSent [variable]
    cls.add_instance_attribute('harqFeedbackSent', 'bool', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::harqProcessId [variable]
    cls.add_instance_attribute('harqProcessId', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::mcs [variable]
    cls.add_instance_attribute('mcs', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::mi [variable]
    cls.add_instance_attribute('mi', 'double', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::ndi [variable]
    cls.add_instance_attribute('ndi', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::rbBitmap [variable]
    cls.add_instance_attribute('rbBitmap', 'std::vector< int >', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::rv [variable]
    cls.add_instance_attribute('rv', 'uint8_t', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::sinr [variable]
    cls.add_instance_attribute('sinr', 'double', is_const=False)
    ## lte-spectrum-phy.h (module 'lte'): ns3::tbInfo_t::size [variable]
    cls.add_instance_attribute('size', 'uint16_t', is_const=False)
    return

def register_Ns3Chunk_methods(root_module, cls):
    ## chunk.h (module 'network'): ns3::Chunk::Chunk() [constructor]
    cls.add_constructor([])
    ## chunk.h (module 'network'): ns3::Chunk::Chunk(ns3::Chunk const & arg0) [constructor]
    cls.add_constructor([param('ns3::Chunk const &', 'arg0')])
    ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_pure_virtual=True, is_virtual=True)
    ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
                   is_virtual=True)
    ## chunk.h (module 'network'): static ns3::TypeId ns3::Chunk::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## chunk.h (module 'network'): void ns3::Chunk::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3EpsBearer_methods(root_module, cls):
    ## eps-bearer.h (module 'lte'): ns3::EpsBearer::EpsBearer() [constructor]
    cls.add_constructor([])
    ## eps-bearer.h (module 'lte'): ns3::EpsBearer::EpsBearer(ns3::EpsBearer::Qci x) [constructor]
    cls.add_constructor([param('ns3::EpsBearer::Qci', 'x')])
    ## eps-bearer.h (module 'lte'): ns3::EpsBearer::EpsBearer(ns3::EpsBearer::Qci x, ns3::GbrQosInformation y) [constructor]
    cls.add_constructor([param('ns3::EpsBearer::Qci', 'x'), param('ns3::GbrQosInformation', 'y')])
    ## eps-bearer.h (module 'lte'): ns3::EpsBearer::EpsBearer(ns3::EpsBearer const & o) [constructor]
    cls.add_constructor([param('ns3::EpsBearer const &', 'o')])
    ## eps-bearer.h (module 'lte'): ns3::TypeId ns3::EpsBearer::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## eps-bearer.h (module 'lte'): uint16_t ns3::EpsBearer::GetPacketDelayBudgetMs() const [member function]
    cls.add_method('GetPacketDelayBudgetMs', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'lte'): double ns3::EpsBearer::GetPacketErrorLossRate() const [member function]
    cls.add_method('GetPacketErrorLossRate', 
                   'double', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'lte'): uint8_t ns3::EpsBearer::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'lte'): uint8_t ns3::EpsBearer::GetRelease() const [member function]
    cls.add_method('GetRelease', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'lte'): static ns3::TypeId ns3::EpsBearer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## eps-bearer.h (module 'lte'): bool ns3::EpsBearer::IsGbr() const [member function]
    cls.add_method('IsGbr', 
                   'bool', 
                   [], 
                   is_const=True)
    ## eps-bearer.h (module 'lte'): void ns3::EpsBearer::SetRelease(uint8_t release) [member function]
    cls.add_method('SetRelease', 
                   'void', 
                   [param('uint8_t', 'release')])
    ## eps-bearer.h (module 'lte'): ns3::EpsBearer::arp [variable]
    cls.add_instance_attribute('arp', 'ns3::AllocationRetentionPriority', is_const=False)
    ## eps-bearer.h (module 'lte'): ns3::EpsBearer::gbrQosInfo [variable]
    cls.add_instance_attribute('gbrQosInfo', 'ns3::GbrQosInformation', is_const=False)
    ## eps-bearer.h (module 'lte'): ns3::EpsBearer::qci [variable]
    cls.add_instance_attribute('qci', 'ns3::EpsBearer::Qci', is_const=False)
    return

def register_Ns3Header_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## header.h (module 'network'): ns3::Header::Header() [constructor]
    cls.add_constructor([])
    ## header.h (module 'network'): ns3::Header::Header(ns3::Header const & arg0) [constructor]
    cls.add_constructor([param('ns3::Header const &', 'arg0')])
    ## header.h (module 'network'): uint32_t ns3::Header::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_pure_virtual=True, is_virtual=True)
    ## header.h (module 'network'): uint32_t ns3::Header::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## header.h (module 'network'): static ns3::TypeId ns3::Header::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## header.h (module 'network'): void ns3::Header::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## header.h (module 'network'): void ns3::Header::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteCcmMacSapUser_methods(root_module, cls):
    ## lte-ccm-mac-sap.h (module 'lte'): ns3::LteCcmMacSapUser::LteCcmMacSapUser() [constructor]
    cls.add_constructor([])
    ## lte-ccm-mac-sap.h (module 'lte'): ns3::LteCcmMacSapUser::LteCcmMacSapUser(ns3::LteCcmMacSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteCcmMacSapUser const &', 'arg0')])
    ## lte-ccm-mac-sap.h (module 'lte'): void ns3::LteCcmMacSapUser::NotifyPrbOccupancy(double prbOccupancy, uint8_t componentCarrierId) [member function]
    cls.add_method('NotifyPrbOccupancy', 
                   'void', 
                   [param('double', 'prbOccupancy'), param('uint8_t', 'componentCarrierId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-mac-sap.h (module 'lte'): void ns3::LteCcmMacSapUser::UlReceiveMacCe(ns3::MacCeListElement_s bsr, uint8_t componentCarrierId) [member function]
    cls.add_method('UlReceiveMacCe', 
                   'void', 
                   [param('ns3::MacCeListElement_s', 'bsr'), param('uint8_t', 'componentCarrierId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-ccm-mac-sap.h (module 'lte'): void ns3::LteCcmMacSapUser::UlReceiveSr(uint16_t rnti, uint8_t componentCarrierId) [member function]
    cls.add_method('UlReceiveSr', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'componentCarrierId')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteEnbRrcSapProvider_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapProvider::LteEnbRrcSapProvider() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapProvider::LteEnbRrcSapProvider(ns3::LteEnbRrcSapProvider const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbRrcSapProvider const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapProvider::CompleteSetupUe(uint16_t rnti, ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters params) [member function]
    cls.add_method('CompleteSetupUe', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapProvider::RecvIdealUeContextRemoveRequest(uint16_t rnti) [member function]
    cls.add_method('RecvIdealUeContextRemoveRequest', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapProvider::RecvMeasurementReport(uint16_t rnti, ns3::LteRrcSap::MeasurementReport msg) [member function]
    cls.add_method('RecvMeasurementReport', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::MeasurementReport', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapProvider::RecvRrcConnectionReconfigurationCompleted(uint16_t rnti, ns3::LteRrcSap::RrcConnectionReconfigurationCompleted msg) [member function]
    cls.add_method('RecvRrcConnectionReconfigurationCompleted', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::RrcConnectionReconfigurationCompleted', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapProvider::RecvRrcConnectionReestablishmentComplete(uint16_t rnti, ns3::LteRrcSap::RrcConnectionReestablishmentComplete msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishmentComplete', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::RrcConnectionReestablishmentComplete', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapProvider::RecvRrcConnectionReestablishmentRequest(uint16_t rnti, ns3::LteRrcSap::RrcConnectionReestablishmentRequest msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishmentRequest', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::RrcConnectionReestablishmentRequest', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapProvider::RecvRrcConnectionRequest(uint16_t rnti, ns3::LteRrcSap::RrcConnectionRequest msg) [member function]
    cls.add_method('RecvRrcConnectionRequest', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::RrcConnectionRequest', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapProvider::RecvRrcConnectionSetupCompleted(uint16_t rnti, ns3::LteRrcSap::RrcConnectionSetupCompleted msg) [member function]
    cls.add_method('RecvRrcConnectionSetupCompleted', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::RrcConnectionSetupCompleted', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapProvider::RecvSidelinkUeInformation(uint16_t rnti, ns3::LteRrcSap::SidelinkUeInformation msg) [member function]
    cls.add_method('RecvSidelinkUeInformation', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::SidelinkUeInformation', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteEnbRrcSapProviderCompleteSetupUeParameters_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters::CompleteSetupUeParameters() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters::CompleteSetupUeParameters(ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters::srb0SapUser [variable]
    cls.add_instance_attribute('srb0SapUser', 'ns3::LteRlcSapUser *', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters::srb1SapUser [variable]
    cls.add_instance_attribute('srb1SapUser', 'ns3::LtePdcpSapUser *', is_const=False)
    return

def register_Ns3LteEnbRrcSapUser_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapUser::LteEnbRrcSapUser() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapUser::LteEnbRrcSapUser(ns3::LteEnbRrcSapUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbRrcSapUser const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration ns3::LteEnbRrcSapUser::DecodeHandoverCommand(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DecodeHandoverCommand', 
                   'ns3::LteRrcSap::RrcConnectionReconfiguration', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteRrcSap::HandoverPreparationInfo ns3::LteEnbRrcSapUser::DecodeHandoverPreparationInformation(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DecodeHandoverPreparationInformation', 
                   'ns3::LteRrcSap::HandoverPreparationInfo', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): ns3::Ptr<ns3::Packet> ns3::LteEnbRrcSapUser::EncodeHandoverCommand(ns3::LteRrcSap::RrcConnectionReconfiguration msg) [member function]
    cls.add_method('EncodeHandoverCommand', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('ns3::LteRrcSap::RrcConnectionReconfiguration', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): ns3::Ptr<ns3::Packet> ns3::LteEnbRrcSapUser::EncodeHandoverPreparationInformation(ns3::LteRrcSap::HandoverPreparationInfo msg) [member function]
    cls.add_method('EncodeHandoverPreparationInformation', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('ns3::LteRrcSap::HandoverPreparationInfo', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapUser::RemoveUe(uint16_t rnti) [member function]
    cls.add_method('RemoveUe', 
                   'void', 
                   [param('uint16_t', 'rnti')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapUser::SendRrcConnectionReconfiguration(uint16_t rnti, ns3::LteRrcSap::RrcConnectionReconfiguration msg) [member function]
    cls.add_method('SendRrcConnectionReconfiguration', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::RrcConnectionReconfiguration', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapUser::SendRrcConnectionReestablishment(uint16_t rnti, ns3::LteRrcSap::RrcConnectionReestablishment msg) [member function]
    cls.add_method('SendRrcConnectionReestablishment', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::RrcConnectionReestablishment', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapUser::SendRrcConnectionReestablishmentReject(uint16_t rnti, ns3::LteRrcSap::RrcConnectionReestablishmentReject msg) [member function]
    cls.add_method('SendRrcConnectionReestablishmentReject', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::RrcConnectionReestablishmentReject', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapUser::SendRrcConnectionReject(uint16_t rnti, ns3::LteRrcSap::RrcConnectionReject msg) [member function]
    cls.add_method('SendRrcConnectionReject', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::RrcConnectionReject', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapUser::SendRrcConnectionRelease(uint16_t rnti, ns3::LteRrcSap::RrcConnectionRelease msg) [member function]
    cls.add_method('SendRrcConnectionRelease', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::RrcConnectionRelease', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapUser::SendRrcConnectionSetup(uint16_t rnti, ns3::LteRrcSap::RrcConnectionSetup msg) [member function]
    cls.add_method('SendRrcConnectionSetup', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteRrcSap::RrcConnectionSetup', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapUser::SendSystemInformation(uint16_t cellId, ns3::LteRrcSap::SystemInformation msg) [member function]
    cls.add_method('SendSystemInformation', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('ns3::LteRrcSap::SystemInformation', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-rrc-sap.h (module 'lte'): void ns3::LteEnbRrcSapUser::SetupUe(uint16_t rnti, ns3::LteEnbRrcSapUser::SetupUeParameters params) [member function]
    cls.add_method('SetupUe', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('ns3::LteEnbRrcSapUser::SetupUeParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3LteEnbRrcSapUserSetupUeParameters_methods(root_module, cls):
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapUser::SetupUeParameters::SetupUeParameters() [constructor]
    cls.add_constructor([])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapUser::SetupUeParameters::SetupUeParameters(ns3::LteEnbRrcSapUser::SetupUeParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbRrcSapUser::SetupUeParameters const &', 'arg0')])
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapUser::SetupUeParameters::srb0SapProvider [variable]
    cls.add_instance_attribute('srb0SapProvider', 'ns3::LteRlcSapProvider *', is_const=False)
    ## lte-rrc-sap.h (module 'lte'): ns3::LteEnbRrcSapUser::SetupUeParameters::srb1SapProvider [variable]
    cls.add_instance_attribute('srb1SapProvider', 'ns3::LtePdcpSapProvider *', is_const=False)
    return

def register_Ns3LteSlDiscHeader_methods(root_module, cls):
    ## lte-sl-header.h (module 'lte'): ns3::LteSlDiscHeader::LteSlDiscHeader(ns3::LteSlDiscHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlDiscHeader const &', 'arg0')])
    ## lte-sl-header.h (module 'lte'): ns3::LteSlDiscHeader::LteSlDiscHeader() [constructor]
    cls.add_constructor([])
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlDiscHeader::BuildDiscoveryMsgType() [member function]
    cls.add_method('BuildDiscoveryMsgType', 
                   'uint8_t', 
                   [])
    ## lte-sl-header.h (module 'lte'): uint32_t ns3::LteSlDiscHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-header.h (module 'lte'): uint32_t ns3::LteSlDiscHeader::GetApplicationCode() const [member function]
    cls.add_method('GetApplicationCode', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlDiscHeader::GetDiscoveryContentType() const [member function]
    cls.add_method('GetDiscoveryContentType', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlDiscHeader::GetDiscoveryModel() const [member function]
    cls.add_method('GetDiscoveryModel', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlDiscHeader::GetDiscoveryMsgType() const [member function]
    cls.add_method('GetDiscoveryMsgType', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlDiscHeader::GetDiscoveryType() const [member function]
    cls.add_method('GetDiscoveryType', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint32_t ns3::LteSlDiscHeader::GetGroup() const [member function]
    cls.add_method('GetGroup', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint32_t ns3::LteSlDiscHeader::GetGroupInfo() const [member function]
    cls.add_method('GetGroupInfo', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint64_t ns3::LteSlDiscHeader::GetInfo() const [member function]
    cls.add_method('GetInfo', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): ns3::TypeId ns3::LteSlDiscHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-header.h (module 'lte'): uint32_t ns3::LteSlDiscHeader::GetMic() const [member function]
    cls.add_method('GetMic', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint32_t ns3::LteSlDiscHeader::GetRelayServiceCode() const [member function]
    cls.add_method('GetRelayServiceCode', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint32_t ns3::LteSlDiscHeader::GetRelayUeId() const [member function]
    cls.add_method('GetRelayUeId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint32_t ns3::LteSlDiscHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlDiscHeader::GetStatusIndicator() const [member function]
    cls.add_method('GetStatusIndicator', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): static ns3::TypeId ns3::LteSlDiscHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlDiscHeader::GetURDSComposition() const [member function]
    cls.add_method('GetURDSComposition', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlDiscHeader::GetUtcBaseCounter() const [member function]
    cls.add_method('GetUtcBaseCounter', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlDiscHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlDiscHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlDiscHeader::SetMic(uint32_t mic) [member function]
    cls.add_method('SetMic', 
                   'void', 
                   [param('uint32_t', 'mic')])
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlDiscHeader::SetOpenDiscoveryAnnounceParameters(uint32_t appCode) [member function]
    cls.add_method('SetOpenDiscoveryAnnounceParameters', 
                   'void', 
                   [param('uint32_t', 'appCode')])
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlDiscHeader::SetRelayAnnouncementParameters(uint32_t serviceCode, uint64_t announcerInfo, uint32_t relayUeId, uint32_t status) [member function]
    cls.add_method('SetRelayAnnouncementParameters', 
                   'void', 
                   [param('uint32_t', 'serviceCode'), param('uint64_t', 'announcerInfo'), param('uint32_t', 'relayUeId'), param('uint32_t', 'status')])
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlDiscHeader::SetRelayResponseParameters(uint32_t serviceCode, uint64_t discovereeInfo, uint32_t relayUeId, uint32_t status) [member function]
    cls.add_method('SetRelayResponseParameters', 
                   'void', 
                   [param('uint32_t', 'serviceCode'), param('uint64_t', 'discovereeInfo'), param('uint32_t', 'relayUeId'), param('uint32_t', 'status')])
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlDiscHeader::SetRelaySoliciationParameters(uint32_t serviceCode, uint64_t discovererInfo, uint32_t relayUeId) [member function]
    cls.add_method('SetRelaySoliciationParameters', 
                   'void', 
                   [param('uint32_t', 'serviceCode'), param('uint64_t', 'discovererInfo'), param('uint32_t', 'relayUeId')])
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlDiscHeader::SetRestrictedDiscoveryQueryParameters(uint32_t appCode) [member function]
    cls.add_method('SetRestrictedDiscoveryQueryParameters', 
                   'void', 
                   [param('uint32_t', 'appCode')])
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlDiscHeader::SetRestrictedDiscoveryResponseParameters(uint32_t appCode) [member function]
    cls.add_method('SetRestrictedDiscoveryResponseParameters', 
                   'void', 
                   [param('uint32_t', 'appCode')])
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlDiscHeader::SetUtcBaseCounter(uint8_t counter) [member function]
    cls.add_method('SetUtcBaseCounter', 
                   'void', 
                   [param('uint8_t', 'counter')])
    return

def register_Ns3LteSlPc5SignallingMessageType_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::LteSlPc5SignallingMessageType::LteSlPc5SignallingMessageType(ns3::LteSlPc5SignallingMessageType const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlPc5SignallingMessageType const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::LteSlPc5SignallingMessageType::LteSlPc5SignallingMessageType() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::LteSlPc5SignallingMessageType::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::LteSlPc5SignallingMessageType::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::string ns3::LteSlPc5SignallingMessageType::GetMessageAcronym() const [member function]
    cls.add_method('GetMessageAcronym', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::string ns3::LteSlPc5SignallingMessageType::GetMessageName() const [member function]
    cls.add_method('GetMessageName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::LteSlPc5SignallingMessageType::GetMessageType() [member function]
    cls.add_method('GetMessageType', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::LteSlPc5SignallingMessageType::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::LteSlPc5SignallingMessageType::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::LteSlPc5SignallingMessageType::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::LteSlPc5SignallingMessageType::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::LteSlPc5SignallingMessageType::SetMessageType(uint8_t msgType) [member function]
    cls.add_method('SetMessageType', 
                   'void', 
                   [param('uint8_t', 'msgType')])
    return

def register_Ns3LteSlSciHeader_methods(root_module, cls):
    ## lte-sl-header.h (module 'lte'): ns3::LteSlSciHeader::LteSlSciHeader(ns3::LteSlSciHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlSciHeader const &', 'arg0')])
    ## lte-sl-header.h (module 'lte'): ns3::LteSlSciHeader::LteSlSciHeader() [constructor]
    cls.add_constructor([])
    ## lte-sl-header.h (module 'lte'): uint32_t ns3::LteSlSciHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlSciHeader::GetGroupDstId() const [member function]
    cls.add_method('GetGroupDstId', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlSciHeader::GetHoppingInfo() const [member function]
    cls.add_method('GetHoppingInfo', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): ns3::TypeId ns3::LteSlSciHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlSciHeader::GetMcs() const [member function]
    cls.add_method('GetMcs', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlSciHeader::GetRbLen() const [member function]
    cls.add_method('GetRbLen', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlSciHeader::GetRbStart() const [member function]
    cls.add_method('GetRbStart', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): uint32_t ns3::LteSlSciHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-header.h (module 'lte'): uint8_t ns3::LteSlSciHeader::GetTrp() const [member function]
    cls.add_method('GetTrp', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): static ns3::TypeId ns3::LteSlSciHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-header.h (module 'lte'): bool ns3::LteSlSciHeader::IsHopping() const [member function]
    cls.add_method('IsHopping', 
                   'bool', 
                   [], 
                   is_const=True)
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlSciHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlSciHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-header.h (module 'lte'): void ns3::LteSlSciHeader::SetSciFormat0Params(bool hopping, uint8_t rbStart, uint8_t rbLen, uint8_t hoppingInfo, uint8_t trp, uint8_t mcs, uint8_t groupId) [member function]
    cls.add_method('SetSciFormat0Params', 
                   'void', 
                   [param('bool', 'hopping'), param('uint8_t', 'rbStart'), param('uint8_t', 'rbLen'), param('uint8_t', 'hoppingInfo'), param('uint8_t', 'trp'), param('uint8_t', 'mcs'), param('uint8_t', 'groupId')])
    return

def register_Ns3Object_methods(root_module, cls):
    ## object.h (module 'core'): ns3::Object::Object() [constructor]
    cls.add_constructor([])
    ## object.h (module 'core'): void ns3::Object::AggregateObject(ns3::Ptr<ns3::Object> other) [member function]
    cls.add_method('AggregateObject', 
                   'void', 
                   [param('ns3::Ptr< ns3::Object >', 'other')])
    ## object.h (module 'core'): void ns3::Object::Dispose() [member function]
    cls.add_method('Dispose', 
                   'void', 
                   [])
    ## object.h (module 'core'): ns3::Object::AggregateIterator ns3::Object::GetAggregateIterator() const [member function]
    cls.add_method('GetAggregateIterator', 
                   'ns3::Object::AggregateIterator', 
                   [], 
                   is_const=True)
    ## object.h (module 'core'): ns3::TypeId ns3::Object::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## object.h (module 'core'): ns3::Ptr<ns3::Object> ns3::Object::GetObject() const [member function]
    cls.add_method('GetObject', 
                   'ns3::Ptr< ns3::Object >', 
                   [], 
                   custom_template_method_name='GetObject', is_const=True, template_parameters=['ns3::Object'])
    ## object.h (module 'core'): ns3::Ptr<ns3::Object> ns3::Object::GetObject(ns3::TypeId tid) const [member function]
    cls.add_method('GetObject', 
                   'ns3::Ptr< ns3::Object >', 
                   [param('ns3::TypeId', 'tid')], 
                   custom_template_method_name='GetObject', is_const=True, template_parameters=['ns3::Object'])
    ## object.h (module 'core'): static ns3::TypeId ns3::Object::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## object.h (module 'core'): void ns3::Object::Initialize() [member function]
    cls.add_method('Initialize', 
                   'void', 
                   [])
    ## object.h (module 'core'): bool ns3::Object::IsInitialized() const [member function]
    cls.add_method('IsInitialized', 
                   'bool', 
                   [], 
                   is_const=True)
    ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [constructor]
    cls.add_constructor([param('ns3::Object const &', 'o')], 
                        visibility='protected')
    ## object.h (module 'core'): void ns3::Object::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## object.h (module 'core'): void ns3::Object::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## object.h (module 'core'): void ns3::Object::NotifyNewAggregate() [member function]
    cls.add_method('NotifyNewAggregate', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3ObjectAggregateIterator_methods(root_module, cls):
    ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::Object::AggregateIterator const &', 'arg0')])
    ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator() [constructor]
    cls.add_constructor([])
    ## object.h (module 'core'): bool ns3::Object::AggregateIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## object.h (module 'core'): ns3::Ptr<const ns3::Object> ns3::Object::AggregateIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::Ptr< ns3::Object const >', 
                   [])
    return

def register_Ns3PacketBurst_methods(root_module, cls):
    ## packet-burst.h (module 'network'): ns3::PacketBurst::PacketBurst(ns3::PacketBurst const & arg0) [constructor]
    cls.add_constructor([param('ns3::PacketBurst const &', 'arg0')])
    ## packet-burst.h (module 'network'): ns3::PacketBurst::PacketBurst() [constructor]
    cls.add_constructor([])
    ## packet-burst.h (module 'network'): void ns3::PacketBurst::AddPacket(ns3::Ptr<ns3::Packet> packet) [member function]
    cls.add_method('AddPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet')])
    ## packet-burst.h (module 'network'): std::list<ns3::Ptr<ns3::Packet>, std::allocator<ns3::Ptr<ns3::Packet>>>::const_iterator ns3::PacketBurst::Begin() const [member function]
    cls.add_method('Begin', 
                   'std::list< ns3::Ptr< ns3::Packet > > const_iterator', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): ns3::Ptr<ns3::PacketBurst> ns3::PacketBurst::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::PacketBurst >', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): std::list<ns3::Ptr<ns3::Packet>, std::allocator<ns3::Ptr<ns3::Packet>>>::const_iterator ns3::PacketBurst::End() const [member function]
    cls.add_method('End', 
                   'std::list< ns3::Ptr< ns3::Packet > > const_iterator', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): uint32_t ns3::PacketBurst::GetNPackets() const [member function]
    cls.add_method('GetNPackets', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): std::list<ns3::Ptr<ns3::Packet>, std::allocator<ns3::Ptr<ns3::Packet>>> ns3::PacketBurst::GetPackets() const [member function]
    cls.add_method('GetPackets', 
                   'std::list< ns3::Ptr< ns3::Packet > >', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): uint32_t ns3::PacketBurst::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet-burst.h (module 'network'): static ns3::TypeId ns3::PacketBurst::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## packet-burst.h (module 'network'): void ns3::PacketBurst::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PhasedArrayModel_methods(root_module, cls):
    ## phased-array-model.h (module 'antenna'): ns3::PhasedArrayModel::PhasedArrayModel(ns3::PhasedArrayModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::PhasedArrayModel const &', 'arg0')])
    ## phased-array-model.h (module 'antenna'): ns3::PhasedArrayModel::PhasedArrayModel() [constructor]
    cls.add_constructor([])
    ## phased-array-model.h (module 'antenna'): ns3::Ptr<const ns3::AntennaModel> ns3::PhasedArrayModel::GetAntennaElement() const [member function]
    cls.add_method('GetAntennaElement', 
                   'ns3::Ptr< ns3::AntennaModel const >', 
                   [], 
                   is_const=True)
    ## phased-array-model.h (module 'antenna'): ns3::PhasedArrayModel::ComplexVector ns3::PhasedArrayModel::GetBeamformingVector() const [member function]
    cls.add_method('GetBeamformingVector', 
                   'ns3::PhasedArrayModel::ComplexVector', 
                   [], 
                   is_const=True)
    ## phased-array-model.h (module 'antenna'): ns3::PhasedArrayModel::ComplexVector ns3::PhasedArrayModel::GetBeamformingVector(ns3::Angles a) const [member function]
    cls.add_method('GetBeamformingVector', 
                   'ns3::PhasedArrayModel::ComplexVector', 
                   [param('ns3::Angles', 'a')], 
                   is_const=True)
    ## phased-array-model.h (module 'antenna'): std::pair<double, double> ns3::PhasedArrayModel::GetElementFieldPattern(ns3::Angles a) const [member function]
    cls.add_method('GetElementFieldPattern', 
                   'std::pair< double, double >', 
                   [param('ns3::Angles', 'a')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## phased-array-model.h (module 'antenna'): ns3::Vector ns3::PhasedArrayModel::GetElementLocation(uint64_t index) const [member function]
    cls.add_method('GetElementLocation', 
                   'ns3::Vector', 
                   [param('uint64_t', 'index')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## phased-array-model.h (module 'antenna'): uint32_t ns3::PhasedArrayModel::GetId() const [member function]
    cls.add_method('GetId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## phased-array-model.h (module 'antenna'): uint64_t ns3::PhasedArrayModel::GetNumberOfElements() const [member function]
    cls.add_method('GetNumberOfElements', 
                   'uint64_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## phased-array-model.h (module 'antenna'): ns3::PhasedArrayModel::ComplexVector ns3::PhasedArrayModel::GetSteeringVector(ns3::Angles a) const [member function]
    cls.add_method('GetSteeringVector', 
                   'ns3::PhasedArrayModel::ComplexVector', 
                   [param('ns3::Angles', 'a')], 
                   is_const=True)
    ## phased-array-model.h (module 'antenna'): static ns3::TypeId ns3::PhasedArrayModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## phased-array-model.h (module 'antenna'): void ns3::PhasedArrayModel::SetAntennaElement(ns3::Ptr<ns3::AntennaModel> antennaElement) [member function]
    cls.add_method('SetAntennaElement', 
                   'void', 
                   [param('ns3::Ptr< ns3::AntennaModel >', 'antennaElement')])
    ## phased-array-model.h (module 'antenna'): void ns3::PhasedArrayModel::SetBeamformingVector(ns3::PhasedArrayModel::ComplexVector const & beamformingVector) [member function]
    cls.add_method('SetBeamformingVector', 
                   'void', 
                   [param('ns3::PhasedArrayModel::ComplexVector const &', 'beamformingVector')])
    ## phased-array-model.h (module 'antenna'): static double ns3::PhasedArrayModel::ComputeNorm(ns3::PhasedArrayModel::ComplexVector const & vector) [member function]
    cls.add_method('ComputeNorm', 
                   'double', 
                   [param('ns3::PhasedArrayModel::ComplexVector const &', 'vector')], 
                   is_static=True, visibility='protected')
    return

def register_Ns3PhasedArraySpectrumPropagationLossModel_methods(root_module, cls):
    ## phased-array-spectrum-propagation-loss-model.h (module 'spectrum'): ns3::PhasedArraySpectrumPropagationLossModel::PhasedArraySpectrumPropagationLossModel(ns3::PhasedArraySpectrumPropagationLossModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::PhasedArraySpectrumPropagationLossModel const &', 'arg0')])
    ## phased-array-spectrum-propagation-loss-model.h (module 'spectrum'): ns3::PhasedArraySpectrumPropagationLossModel::PhasedArraySpectrumPropagationLossModel() [constructor]
    cls.add_constructor([])
    ## phased-array-spectrum-propagation-loss-model.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumValue> ns3::PhasedArraySpectrumPropagationLossModel::CalcRxPowerSpectralDensity(ns3::Ptr<const ns3::SpectrumValue> txPsd, ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b, ns3::Ptr<const ns3::PhasedArrayModel> aPhasedArrayModel, ns3::Ptr<const ns3::PhasedArrayModel> bPhasedArrayModel) const [member function]
    cls.add_method('CalcRxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'txPsd'), param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b'), param('ns3::Ptr< ns3::PhasedArrayModel const >', 'aPhasedArrayModel'), param('ns3::Ptr< ns3::PhasedArrayModel const >', 'bPhasedArrayModel')], 
                   is_const=True)
    ## phased-array-spectrum-propagation-loss-model.h (module 'spectrum'): static ns3::TypeId ns3::PhasedArraySpectrumPropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## phased-array-spectrum-propagation-loss-model.h (module 'spectrum'): void ns3::PhasedArraySpectrumPropagationLossModel::SetNext(ns3::Ptr<ns3::PhasedArraySpectrumPropagationLossModel> next) [member function]
    cls.add_method('SetNext', 
                   'void', 
                   [param('ns3::Ptr< ns3::PhasedArraySpectrumPropagationLossModel >', 'next')])
    ## phased-array-spectrum-propagation-loss-model.h (module 'spectrum'): void ns3::PhasedArraySpectrumPropagationLossModel::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## phased-array-spectrum-propagation-loss-model.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumValue> ns3::PhasedArraySpectrumPropagationLossModel::DoCalcRxPowerSpectralDensity(ns3::Ptr<const ns3::SpectrumValue> txPsd, ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b, ns3::Ptr<const ns3::PhasedArrayModel> aPhasedArrayModel, ns3::Ptr<const ns3::PhasedArrayModel> bPhasedArrayModel) const [member function]
    cls.add_method('DoCalcRxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'txPsd'), param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b'), param('ns3::Ptr< ns3::PhasedArrayModel const >', 'aPhasedArrayModel'), param('ns3::Ptr< ns3::PhasedArrayModel const >', 'bPhasedArrayModel')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
    return

def register_Ns3PropagationDelayModel_methods(root_module, cls):
    ## propagation-delay-model.h (module 'propagation'): ns3::PropagationDelayModel::PropagationDelayModel() [constructor]
    cls.add_constructor([])
    ## propagation-delay-model.h (module 'propagation'): ns3::PropagationDelayModel::PropagationDelayModel(ns3::PropagationDelayModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::PropagationDelayModel const &', 'arg0')])
    ## propagation-delay-model.h (module 'propagation'): int64_t ns3::PropagationDelayModel::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')])
    ## propagation-delay-model.h (module 'propagation'): ns3::Time ns3::PropagationDelayModel::GetDelay(ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('GetDelay', 
                   'ns3::Time', 
                   [param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## propagation-delay-model.h (module 'propagation'): static ns3::TypeId ns3::PropagationDelayModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-delay-model.h (module 'propagation'): int64_t ns3::PropagationDelayModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_pure_virtual=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PropagationLossModel_methods(root_module, cls):
    ## propagation-loss-model.h (module 'propagation'): static ns3::TypeId ns3::PropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-loss-model.h (module 'propagation'): ns3::PropagationLossModel::PropagationLossModel() [constructor]
    cls.add_constructor([])
    ## propagation-loss-model.h (module 'propagation'): void ns3::PropagationLossModel::SetNext(ns3::Ptr<ns3::PropagationLossModel> next) [member function]
    cls.add_method('SetNext', 
                   'void', 
                   [param('ns3::Ptr< ns3::PropagationLossModel >', 'next')])
    ## propagation-loss-model.h (module 'propagation'): ns3::Ptr<ns3::PropagationLossModel> ns3::PropagationLossModel::GetNext() [member function]
    cls.add_method('GetNext', 
                   'ns3::Ptr< ns3::PropagationLossModel >', 
                   [])
    ## propagation-loss-model.h (module 'propagation'): double ns3::PropagationLossModel::CalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('CalcRxPower', 
                   'double', 
                   [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True)
    ## propagation-loss-model.h (module 'propagation'): int64_t ns3::PropagationLossModel::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')])
    ## propagation-loss-model.h (module 'propagation'): int64_t ns3::PropagationLossModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_pure_virtual=True, is_virtual=True, visibility='protected')
    ## propagation-loss-model.h (module 'propagation'): double ns3::PropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPower', 
                   'double', 
                   [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
    return

def register_Ns3RandomPropagationDelayModel_methods(root_module, cls):
    ## propagation-delay-model.h (module 'propagation'): ns3::RandomPropagationDelayModel::RandomPropagationDelayModel(ns3::RandomPropagationDelayModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::RandomPropagationDelayModel const &', 'arg0')])
    ## propagation-delay-model.h (module 'propagation'): ns3::RandomPropagationDelayModel::RandomPropagationDelayModel() [constructor]
    cls.add_constructor([])
    ## propagation-delay-model.h (module 'propagation'): ns3::Time ns3::RandomPropagationDelayModel::GetDelay(ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('GetDelay', 
                   'ns3::Time', 
                   [param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_virtual=True)
    ## propagation-delay-model.h (module 'propagation'): static ns3::TypeId ns3::RandomPropagationDelayModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-delay-model.h (module 'propagation'): int64_t ns3::RandomPropagationDelayModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3RandomPropagationLossModel_methods(root_module, cls):
    ## propagation-loss-model.h (module 'propagation'): static ns3::TypeId ns3::RandomPropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-loss-model.h (module 'propagation'): ns3::RandomPropagationLossModel::RandomPropagationLossModel() [constructor]
    cls.add_constructor([])
    ## propagation-loss-model.h (module 'propagation'): double ns3::RandomPropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPower', 
                   'double', 
                   [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_virtual=True, visibility='private')
    ## propagation-loss-model.h (module 'propagation'): int64_t ns3::RandomPropagationLossModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3RandomVariableStream_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::RandomVariableStream::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::RandomVariableStream::RandomVariableStream() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): void ns3::RandomVariableStream::SetStream(int64_t stream) [member function]
    cls.add_method('SetStream', 
                   'void', 
                   [param('int64_t', 'stream')])
    ## random-variable-stream.h (module 'core'): int64_t ns3::RandomVariableStream::GetStream() const [member function]
    cls.add_method('GetStream', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): void ns3::RandomVariableStream::SetAntithetic(bool isAntithetic) [member function]
    cls.add_method('SetAntithetic', 
                   'void', 
                   [param('bool', 'isAntithetic')])
    ## random-variable-stream.h (module 'core'): bool ns3::RandomVariableStream::IsAntithetic() const [member function]
    cls.add_method('IsAntithetic', 
                   'bool', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::RandomVariableStream::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::RandomVariableStream::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## random-variable-stream.h (module 'core'): ns3::RngStream * ns3::RandomVariableStream::Peek() const [member function]
    cls.add_method('Peek', 
                   'ns3::RngStream *', 
                   [], 
                   is_const=True, visibility='protected')
    return

def register_Ns3RangePropagationLossModel_methods(root_module, cls):
    ## propagation-loss-model.h (module 'propagation'): static ns3::TypeId ns3::RangePropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-loss-model.h (module 'propagation'): ns3::RangePropagationLossModel::RangePropagationLossModel() [constructor]
    cls.add_constructor([])
    ## propagation-loss-model.h (module 'propagation'): double ns3::RangePropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPower', 
                   'double', 
                   [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_virtual=True, visibility='private')
    ## propagation-loss-model.h (module 'propagation'): int64_t ns3::RangePropagationLossModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3RemoteUeInfoRequest_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::RemoteUeInfoRequest::RemoteUeInfoRequest(ns3::RemoteUeInfoRequest const & arg0) [constructor]
    cls.add_constructor([param('ns3::RemoteUeInfoRequest const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::RemoteUeInfoRequest::RemoteUeInfoRequest() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::RemoteUeInfoRequest::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::RemoteUeInfoRequest::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::RemoteUeInfoRequest::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::RemoteUeInfoRequest::GetRemoteUeInfoType() [member function]
    cls.add_method('GetRemoteUeInfoType', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::RemoteUeInfoRequest::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::RemoteUeInfoRequest::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::RemoteUeInfoRequest::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::RemoteUeInfoRequest::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::RemoteUeInfoRequest::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::RemoteUeInfoRequest::SetRemoteUeInfoType(uint8_t remoteUeInfoType) [member function]
    cls.add_method('SetRemoteUeInfoType', 
                   'void', 
                   [param('uint8_t', 'remoteUeInfoType')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::RemoteUeInfoRequest::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3RemoteUeInfoResponse_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::RemoteUeInfoResponse::RemoteUeInfoResponse(ns3::RemoteUeInfoResponse const & arg0) [constructor]
    cls.add_constructor([param('ns3::RemoteUeInfoResponse const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::RemoteUeInfoResponse::RemoteUeInfoResponse() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::RemoteUeInfoResponse::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint64_t ns3::RemoteUeInfoResponse::GetImei() [member function]
    cls.add_method('GetImei', 
                   'uint64_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::RemoteUeInfoResponse::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::RemoteUeInfoResponse::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::RemoteUeInfoResponse::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::RemoteUeInfoResponse::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::RemoteUeInfoResponse::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::RemoteUeInfoResponse::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::RemoteUeInfoResponse::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::RemoteUeInfoResponse::SetImei(uint64_t imei) [member function]
    cls.add_method('SetImei', 
                   'void', 
                   [param('uint64_t', 'imei')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::RemoteUeInfoResponse::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3SeqTsHeader_methods(root_module, cls):
    ## seq-ts-header.h (module 'applications'): ns3::SeqTsHeader::SeqTsHeader(ns3::SeqTsHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::SeqTsHeader const &', 'arg0')])
    ## seq-ts-header.h (module 'applications'): ns3::SeqTsHeader::SeqTsHeader() [constructor]
    cls.add_constructor([])
    ## seq-ts-header.h (module 'applications'): uint32_t ns3::SeqTsHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## seq-ts-header.h (module 'applications'): ns3::TypeId ns3::SeqTsHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## seq-ts-header.h (module 'applications'): uint32_t ns3::SeqTsHeader::GetSeq() const [member function]
    cls.add_method('GetSeq', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## seq-ts-header.h (module 'applications'): uint32_t ns3::SeqTsHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## seq-ts-header.h (module 'applications'): ns3::Time ns3::SeqTsHeader::GetTs() const [member function]
    cls.add_method('GetTs', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## seq-ts-header.h (module 'applications'): static ns3::TypeId ns3::SeqTsHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## seq-ts-header.h (module 'applications'): void ns3::SeqTsHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## seq-ts-header.h (module 'applications'): void ns3::SeqTsHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## seq-ts-header.h (module 'applications'): void ns3::SeqTsHeader::SetSeq(uint32_t seq) [member function]
    cls.add_method('SetSeq', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3SeqTsSizeHeader_methods(root_module, cls):
    ## seq-ts-size-header.h (module 'applications'): ns3::SeqTsSizeHeader::SeqTsSizeHeader(ns3::SeqTsSizeHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::SeqTsSizeHeader const &', 'arg0')])
    ## seq-ts-size-header.h (module 'applications'): ns3::SeqTsSizeHeader::SeqTsSizeHeader() [constructor]
    cls.add_constructor([])
    ## seq-ts-size-header.h (module 'applications'): uint32_t ns3::SeqTsSizeHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## seq-ts-size-header.h (module 'applications'): ns3::TypeId ns3::SeqTsSizeHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## seq-ts-size-header.h (module 'applications'): uint32_t ns3::SeqTsSizeHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## seq-ts-size-header.h (module 'applications'): uint64_t ns3::SeqTsSizeHeader::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## seq-ts-size-header.h (module 'applications'): static ns3::TypeId ns3::SeqTsSizeHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## seq-ts-size-header.h (module 'applications'): void ns3::SeqTsSizeHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## seq-ts-size-header.h (module 'applications'): void ns3::SeqTsSizeHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## seq-ts-size-header.h (module 'applications'): void ns3::SeqTsSizeHeader::SetSize(uint64_t size) [member function]
    cls.add_method('SetSize', 
                   'void', 
                   [param('uint64_t', 'size')])
    return

def register_Ns3SequentialRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::SequentialRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::SequentialRandomVariable::SequentialRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::SequentialRandomVariable::GetMin() const [member function]
    cls.add_method('GetMin', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::SequentialRandomVariable::GetMax() const [member function]
    cls.add_method('GetMax', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): ns3::Ptr<ns3::RandomVariableStream> ns3::SequentialRandomVariable::GetIncrement() const [member function]
    cls.add_method('GetIncrement', 
                   'ns3::Ptr< ns3::RandomVariableStream >', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::SequentialRandomVariable::GetConsecutive() const [member function]
    cls.add_method('GetConsecutive', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::SequentialRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::SequentialRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3SidelinkCommResourcePool_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SidelinkCommResourcePool(ns3::SidelinkCommResourcePool const & arg0) [constructor]
    cls.add_constructor([param('ns3::SidelinkCommResourcePool const &', 'arg0')])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SidelinkCommResourcePool() [constructor]
    cls.add_constructor([])
    ## lte-sl-pool.h (module 'lte'): std::vector<unsigned int, std::allocator<unsigned int>> ns3::SidelinkCommResourcePool::GetAllPsschSubframes() [member function]
    cls.add_method('GetAllPsschSubframes', 
                   'std::vector< unsigned int >', 
                   [])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SubframeInfo ns3::SidelinkCommResourcePool::GetCurrentScPeriod(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('GetCurrentScPeriod', 
                   'ns3::SidelinkCommResourcePool::SubframeInfo', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')])
    ## lte-sl-pool.h (module 'lte'): ns3::LteRrcSap::SlHoppingConfigComm ns3::SidelinkCommResourcePool::GetDataHoppingConfig() [member function]
    cls.add_method('GetDataHoppingConfig', 
                   'ns3::LteRrcSap::SlHoppingConfigComm', 
                   [])
    ## lte-sl-pool.h (module 'lte'): uint32_t ns3::SidelinkCommResourcePool::GetNPscch() [member function]
    cls.add_method('GetNPscch', 
                   'uint32_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SubframeInfo ns3::SidelinkCommResourcePool::GetNextScPeriod(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('GetNextScPeriod', 
                   'ns3::SidelinkCommResourcePool::SubframeInfo', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')])
    ## lte-sl-pool.h (module 'lte'): std::list<unsigned char, std::allocator<unsigned char>> ns3::SidelinkCommResourcePool::GetPscchOpportunities(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('GetPscchOpportunities', 
                   'std::list< unsigned char >', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')])
    ## lte-sl-pool.h (module 'lte'): std::vector<int, std::allocator<int>> ns3::SidelinkCommResourcePool::GetPscchRbs(uint32_t frameNo, uint32_t subframeNo, uint32_t n) [member function]
    cls.add_method('GetPscchRbs', 
                   'std::vector< int >', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo'), param('uint32_t', 'n')])
    ## lte-sl-pool.h (module 'lte'): std::list<ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo, std::allocator<ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo>> ns3::SidelinkCommResourcePool::GetPscchTransmissions(uint32_t n) [member function]
    cls.add_method('GetPscchTransmissions', 
                   'std::list< ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo >', 
                   [param('uint32_t', 'n')])
    ## lte-sl-pool.h (module 'lte'): uint32_t ns3::SidelinkCommResourcePool::GetPsschBandwidth() [member function]
    cls.add_method('GetPsschBandwidth', 
                   'uint32_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): std::list<ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo, std::allocator<ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo>> ns3::SidelinkCommResourcePool::GetPsschTransmissions(ns3::SidelinkCommResourcePool::SubframeInfo periodStart, uint8_t itrp, uint8_t rbStart, uint8_t rbLen) [member function]
    cls.add_method('GetPsschTransmissions', 
                   'std::list< ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo >', 
                   [param('ns3::SidelinkCommResourcePool::SubframeInfo', 'periodStart'), param('uint8_t', 'itrp'), param('uint8_t', 'rbStart'), param('uint8_t', 'rbLen')])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SlPoolType ns3::SidelinkCommResourcePool::GetSchedulingType() [member function]
    cls.add_method('GetSchedulingType', 
                   'ns3::SidelinkCommResourcePool::SlPoolType', 
                   [])
    ## lte-sl-pool.h (module 'lte'): std::vector<unsigned int, std::allocator<unsigned int>> ns3::SidelinkCommResourcePool::GetTbPerSlPeriod() [member function]
    cls.add_method('GetTbPerSlPeriod', 
                   'std::vector< unsigned int >', 
                   [])
    ## lte-sl-pool.h (module 'lte'): static ns3::TypeId ns3::SidelinkCommResourcePool::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pool.h (module 'lte'): std::vector<std::vector<unsigned char, std::allocator<unsigned char>>, std::allocator<std::vector<unsigned char, std::allocator<unsigned char>>>> ns3::SidelinkCommResourcePool::GetValidAllocations() [member function]
    cls.add_method('GetValidAllocations', 
                   'std::vector< std::vector< unsigned char > >', 
                   [])
    ## lte-sl-pool.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::SidelinkCommResourcePool::GetValidRBstart(uint8_t rbLen) [member function]
    cls.add_method('GetValidRBstart', 
                   'std::vector< unsigned char >', 
                   [param('uint8_t', 'rbLen')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkCommResourcePool::SetPool(ns3::LteRrcSap::SlCommResourcePool pool) [member function]
    cls.add_method('SetPool', 
                   'void', 
                   [param('ns3::LteRrcSap::SlCommResourcePool', 'pool')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkCommResourcePool::SetPool(ns3::LteRrcSap::SlPreconfigCommPool pool) [member function]
    cls.add_method('SetPool', 
                   'void', 
                   [param('ns3::LteRrcSap::SlPreconfigCommPool', 'pool')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkCommResourcePool::Initialize() [member function]
    cls.add_method('Initialize', 
                   'void', 
                   [], 
                   visibility='protected')
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo ns3::SidelinkCommResourcePool::TranslatePscch(ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo info) [member function]
    cls.add_method('TranslatePscch', 
                   'ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo', 
                   [param('ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo', 'info')], 
                   visibility='protected')
    return

def register_Ns3SidelinkCommResourcePoolSidelinkTransmissionInfo_methods(root_module, cls):
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo::SidelinkTransmissionInfo() [constructor]
    cls.add_constructor([])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo::SidelinkTransmissionInfo(ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo const &', 'arg0')])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo::nbRb [variable]
    cls.add_instance_attribute('nbRb', 'uint8_t', is_const=False)
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo::rbStart [variable]
    cls.add_instance_attribute('rbStart', 'uint8_t', is_const=False)
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SidelinkTransmissionInfo::subframe [variable]
    cls.add_instance_attribute('subframe', 'ns3::SidelinkCommResourcePool::SubframeInfo', is_const=False)
    return

def register_Ns3SidelinkCommResourcePoolSubframeInfo_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_numeric_operator('-', root_module['ns3::SidelinkCommResourcePool::SubframeInfo'], root_module['ns3::SidelinkCommResourcePool::SubframeInfo'], param('ns3::SidelinkCommResourcePool::SubframeInfo const &', 'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::SidelinkCommResourcePool::SubframeInfo'], root_module['ns3::SidelinkCommResourcePool::SubframeInfo'], param('ns3::SidelinkCommResourcePool::SubframeInfo const &', 'right'))
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SubframeInfo::SubframeInfo() [constructor]
    cls.add_constructor([])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SubframeInfo::SubframeInfo(ns3::SidelinkCommResourcePool::SubframeInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::SidelinkCommResourcePool::SubframeInfo const &', 'arg0')])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SubframeInfo::frameNo [variable]
    cls.add_instance_attribute('frameNo', 'uint32_t', is_const=False)
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkCommResourcePool::SubframeInfo::subframeNo [variable]
    cls.add_instance_attribute('subframeNo', 'uint32_t', is_const=False)
    return

def register_Ns3SidelinkDiscResourcePool_methods(root_module, cls):
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SidelinkDiscResourcePool(ns3::SidelinkDiscResourcePool const & arg0) [constructor]
    cls.add_constructor([param('ns3::SidelinkDiscResourcePool const &', 'arg0')])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SidelinkDiscResourcePool() [constructor]
    cls.add_constructor([])
    ## lte-sl-pool.h (module 'lte'): std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int>> ns3::SidelinkDiscResourcePool::GetConflictingResources(uint32_t res) [member function]
    cls.add_method('GetConflictingResources', 
                   'std::set< unsigned int >', 
                   [param('uint32_t', 'res')])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SubframeInfo ns3::SidelinkDiscResourcePool::GetCurrentDiscPeriod(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('GetCurrentDiscPeriod', 
                   'ns3::SidelinkDiscResourcePool::SubframeInfo', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')])
    ## lte-sl-pool.h (module 'lte'): int32_t ns3::SidelinkDiscResourcePool::GetDiscPeriod() [member function]
    cls.add_method('GetDiscPeriod', 
                   'int32_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): uint32_t ns3::SidelinkDiscResourcePool::GetNPsdch() [member function]
    cls.add_method('GetNPsdch', 
                   'uint32_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): uint32_t ns3::SidelinkDiscResourcePool::GetNRbPairs() [member function]
    cls.add_method('GetNRbPairs', 
                   'uint32_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): uint32_t ns3::SidelinkDiscResourcePool::GetNSubframes() [member function]
    cls.add_method('GetNSubframes', 
                   'uint32_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SubframeInfo ns3::SidelinkDiscResourcePool::GetNextDiscPeriod(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('GetNextDiscPeriod', 
                   'ns3::SidelinkDiscResourcePool::SubframeInfo', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')])
    ## lte-sl-pool.h (module 'lte'): uint8_t ns3::SidelinkDiscResourcePool::GetNumRetx() [member function]
    cls.add_method('GetNumRetx', 
                   'uint8_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): std::vector<unsigned int, std::allocator<unsigned int>> ns3::SidelinkDiscResourcePool::GetPsdchOpportunities(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('GetPsdchOpportunities', 
                   'std::vector< unsigned int >', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')])
    ## lte-sl-pool.h (module 'lte'): std::list<ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo, std::allocator<ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo>> ns3::SidelinkDiscResourcePool::GetPsdchTransmissions(uint32_t npsdch) [member function]
    cls.add_method('GetPsdchTransmissions', 
                   'std::list< ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo >', 
                   [param('uint32_t', 'npsdch')])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SlPoolType ns3::SidelinkDiscResourcePool::GetSchedulingType() [member function]
    cls.add_method('GetSchedulingType', 
                   'ns3::SidelinkDiscResourcePool::SlPoolType', 
                   [])
    ## lte-sl-pool.h (module 'lte'): static ns3::TypeId ns3::SidelinkDiscResourcePool::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkDiscResourcePool::SetPool(ns3::LteRrcSap::SlDiscResourcePool pool) [member function]
    cls.add_method('SetPool', 
                   'void', 
                   [param('ns3::LteRrcSap::SlDiscResourcePool', 'pool')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkDiscResourcePool::SetPool(ns3::LteRrcSap::SlPreconfigDiscPool pool) [member function]
    cls.add_method('SetPool', 
                   'void', 
                   [param('ns3::LteRrcSap::SlPreconfigDiscPool', 'pool')])
    ## lte-sl-pool.h (module 'lte'): uint32_t ns3::SidelinkDiscResourcePool::TxProbabilityAsInt(ns3::LteRrcSap::TxProbability prob) [member function]
    cls.add_method('TxProbabilityAsInt', 
                   'uint32_t', 
                   [param('ns3::LteRrcSap::TxProbability', 'prob')])
    ## lte-sl-pool.h (module 'lte'): static ns3::LteRrcSap::TxProbability ns3::SidelinkDiscResourcePool::TxProbabilityFromInt(uint32_t p) [member function]
    cls.add_method('TxProbabilityFromInt', 
                   'ns3::LteRrcSap::TxProbability', 
                   [param('uint32_t', 'p')], 
                   is_static=True)
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkDiscResourcePool::Initialize() [member function]
    cls.add_method('Initialize', 
                   'void', 
                   [], 
                   visibility='protected')
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo ns3::SidelinkDiscResourcePool::TranslatePsdch(ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo info) [member function]
    cls.add_method('TranslatePsdch', 
                   'ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo', 
                   [param('ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo', 'info')], 
                   visibility='protected')
    return

def register_Ns3SidelinkDiscResourcePoolSidelinkTransmissionInfo_methods(root_module, cls):
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo::SidelinkTransmissionInfo() [constructor]
    cls.add_constructor([])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo::SidelinkTransmissionInfo(ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo const &', 'arg0')])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo::nbRb [variable]
    cls.add_instance_attribute('nbRb', 'uint8_t', is_const=False)
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo::rbStart [variable]
    cls.add_instance_attribute('rbStart', 'uint8_t', is_const=False)
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SidelinkTransmissionInfo::subframe [variable]
    cls.add_instance_attribute('subframe', 'ns3::SidelinkDiscResourcePool::SubframeInfo', is_const=False)
    return

def register_Ns3SidelinkDiscResourcePoolSubframeInfo_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_numeric_operator('+', root_module['ns3::SidelinkDiscResourcePool::SubframeInfo'], root_module['ns3::SidelinkDiscResourcePool::SubframeInfo'], param('ns3::SidelinkDiscResourcePool::SubframeInfo const &', 'right'))
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SubframeInfo::SubframeInfo() [constructor]
    cls.add_constructor([])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SubframeInfo::SubframeInfo(ns3::SidelinkDiscResourcePool::SubframeInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::SidelinkDiscResourcePool::SubframeInfo const &', 'arg0')])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SubframeInfo::frameNo [variable]
    cls.add_instance_attribute('frameNo', 'uint32_t', is_const=False)
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkDiscResourcePool::SubframeInfo::subframeNo [variable]
    cls.add_instance_attribute('subframeNo', 'uint32_t', is_const=False)
    return

def register_Ns3SidelinkRxCommResourcePool_methods(root_module, cls):
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkRxCommResourcePool::SidelinkRxCommResourcePool() [constructor]
    cls.add_constructor([])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkRxCommResourcePool::SidelinkRxCommResourcePool(ns3::SidelinkRxCommResourcePool const & arg0) [constructor]
    cls.add_constructor([param('ns3::SidelinkRxCommResourcePool const &', 'arg0')])
    ## lte-sl-pool.h (module 'lte'): static ns3::TypeId ns3::SidelinkRxCommResourcePool::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    return

def register_Ns3SidelinkRxDiscResourcePool_methods(root_module, cls):
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkRxDiscResourcePool::SidelinkRxDiscResourcePool() [constructor]
    cls.add_constructor([])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkRxDiscResourcePool::SidelinkRxDiscResourcePool(ns3::SidelinkRxDiscResourcePool const & arg0) [constructor]
    cls.add_constructor([param('ns3::SidelinkRxDiscResourcePool const &', 'arg0')])
    ## lte-sl-pool.h (module 'lte'): static ns3::TypeId ns3::SidelinkRxDiscResourcePool::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    return

def register_Ns3SidelinkTxCommResourcePool_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkTxCommResourcePool::SidelinkTxCommResourcePool() [constructor]
    cls.add_constructor([])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkTxCommResourcePool::SidelinkTxCommResourcePool(ns3::SidelinkTxCommResourcePool const & arg0) [constructor]
    cls.add_constructor([param('ns3::SidelinkTxCommResourcePool const &', 'arg0')])
    ## lte-sl-pool.h (module 'lte'): uint8_t ns3::SidelinkTxCommResourcePool::GetIndex() [member function]
    cls.add_method('GetIndex', 
                   'uint8_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): uint8_t ns3::SidelinkTxCommResourcePool::GetMcs() [member function]
    cls.add_method('GetMcs', 
                   'uint8_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): uint8_t ns3::SidelinkTxCommResourcePool::GetPoolIdentity() [member function]
    cls.add_method('GetPoolIdentity', 
                   'uint8_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): static ns3::TypeId ns3::SidelinkTxCommResourcePool::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkTxCommResourcePool::SetPool(ns3::LteRrcSap::SlCommResourcePool pool) [member function]
    cls.add_method('SetPool', 
                   'void', 
                   [param('ns3::LteRrcSap::SlCommResourcePool', 'pool')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkTxCommResourcePool::SetPool(ns3::LteRrcSap::SlPreconfigCommPool pool) [member function]
    cls.add_method('SetPool', 
                   'void', 
                   [param('ns3::LteRrcSap::SlPreconfigCommPool', 'pool')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkTxCommResourcePool::SetScheduledTxParameters(uint16_t slrnti, ns3::LteRrcSap::SlMacMainConfigSl macMainConfig, ns3::LteRrcSap::SlCommResourcePool commTxConfig, uint8_t index) [member function]
    cls.add_method('SetScheduledTxParameters', 
                   'void', 
                   [param('uint16_t', 'slrnti'), param('ns3::LteRrcSap::SlMacMainConfigSl', 'macMainConfig'), param('ns3::LteRrcSap::SlCommResourcePool', 'commTxConfig'), param('uint8_t', 'index')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkTxCommResourcePool::SetScheduledTxParameters(uint16_t slrnti, ns3::LteRrcSap::SlMacMainConfigSl macMainConfig, ns3::LteRrcSap::SlCommResourcePool commTxConfig, uint8_t index, uint8_t mcs) [member function]
    cls.add_method('SetScheduledTxParameters', 
                   'void', 
                   [param('uint16_t', 'slrnti'), param('ns3::LteRrcSap::SlMacMainConfigSl', 'macMainConfig'), param('ns3::LteRrcSap::SlCommResourcePool', 'commTxConfig'), param('uint8_t', 'index'), param('uint8_t', 'mcs')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkTxCommResourcePool::SetUeSelectedTxParameters(uint8_t identity) [member function]
    cls.add_method('SetUeSelectedTxParameters', 
                   'void', 
                   [param('uint8_t', 'identity')])
    return

def register_Ns3SidelinkTxDiscResourcePool_methods(root_module, cls):
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkTxDiscResourcePool::SidelinkTxDiscResourcePool() [constructor]
    cls.add_constructor([])
    ## lte-sl-pool.h (module 'lte'): ns3::SidelinkTxDiscResourcePool::SidelinkTxDiscResourcePool(ns3::SidelinkTxDiscResourcePool const & arg0) [constructor]
    cls.add_constructor([param('ns3::SidelinkTxDiscResourcePool const &', 'arg0')])
    ## lte-sl-pool.h (module 'lte'): uint8_t ns3::SidelinkTxDiscResourcePool::GetPoolIdentity() [member function]
    cls.add_method('GetPoolIdentity', 
                   'uint8_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): uint32_t ns3::SidelinkTxDiscResourcePool::GetTxProbability() [member function]
    cls.add_method('GetTxProbability', 
                   'uint32_t', 
                   [])
    ## lte-sl-pool.h (module 'lte'): static ns3::TypeId ns3::SidelinkTxDiscResourcePool::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkTxDiscResourcePool::SetPool(ns3::LteRrcSap::SlDiscResourcePool pool) [member function]
    cls.add_method('SetPool', 
                   'void', 
                   [param('ns3::LteRrcSap::SlDiscResourcePool', 'pool')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkTxDiscResourcePool::SetPool(ns3::LteRrcSap::SlPreconfigDiscPool pool) [member function]
    cls.add_method('SetPool', 
                   'void', 
                   [param('ns3::LteRrcSap::SlPreconfigDiscPool', 'pool')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkTxDiscResourcePool::SetScheduledTxParameters(ns3::LteRrcSap::SlDiscResourcePool discPool, ns3::LteRrcSap::SlTfIndexPairList discResources, ns3::LteRrcSap::SlHoppingConfigDisc discHopping) [member function]
    cls.add_method('SetScheduledTxParameters', 
                   'void', 
                   [param('ns3::LteRrcSap::SlDiscResourcePool', 'discPool'), param('ns3::LteRrcSap::SlTfIndexPairList', 'discResources'), param('ns3::LteRrcSap::SlHoppingConfigDisc', 'discHopping')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkTxDiscResourcePool::SetTxProbability(uint32_t theta) [member function]
    cls.add_method('SetTxProbability', 
                   'void', 
                   [param('uint32_t', 'theta')])
    ## lte-sl-pool.h (module 'lte'): void ns3::SidelinkTxDiscResourcePool::SetUeSelectedTxParameters(uint8_t identity) [member function]
    cls.add_method('SetUeSelectedTxParameters', 
                   'void', 
                   [param('uint8_t', 'identity')])
    return

def register_Ns3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>>::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter< ns3::AttributeAccessor > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>>::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter< ns3::AttributeChecker > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>>::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter< ns3::AttributeValue > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>>::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter< ns3::CallbackImplBase > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EpcTft, ns3::empty, ns3::DefaultDeleter<ns3::EpcTft>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EpcTft, ns3::empty, ns3::DefaultDeleter<ns3::EpcTft>>::SimpleRefCount(ns3::SimpleRefCount<ns3::EpcTft, ns3::empty, ns3::DefaultDeleter<ns3::EpcTft>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::EpcTft, ns3::empty, ns3::DefaultDeleter< ns3::EpcTft > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>>::SimpleRefCount(ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter< ns3::EventImpl > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>>::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter< ns3::Hash::Implementation > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::LteControlMessage>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::LteControlMessage>>::SimpleRefCount(ns3::SimpleRefCount<ns3::LteControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::LteControlMessage>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::LteControlMessage, ns3::empty, ns3::DefaultDeleter< ns3::LteControlMessage > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteHarqPhy>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteHarqPhy>>::SimpleRefCount(ns3::SimpleRefCount<ns3::LteHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteHarqPhy>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::LteHarqPhy, ns3::empty, ns3::DefaultDeleter< ns3::LteHarqPhy > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3LteSlHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteSlHarqPhy__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteSlHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteSlHarqPhy>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteSlHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteSlHarqPhy>>::SimpleRefCount(ns3::SimpleRefCount<ns3::LteSlHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteSlHarqPhy>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::LteSlHarqPhy, ns3::empty, ns3::DefaultDeleter< ns3::LteSlHarqPhy > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3LteSlTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteSlTft__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteSlTft, ns3::empty, ns3::DefaultDeleter<ns3::LteSlTft>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::LteSlTft, ns3::empty, ns3::DefaultDeleter<ns3::LteSlTft>>::SimpleRefCount(ns3::SimpleRefCount<ns3::LteSlTft, ns3::empty, ns3::DefaultDeleter<ns3::LteSlTft>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::LteSlTft, ns3::empty, ns3::DefaultDeleter< ns3::LteSlTft > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>>::SimpleRefCount(ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter< ns3::NixVector > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>>::SimpleRefCount(ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter< ns3::OutputStreamWrapper > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>>::SimpleRefCount(ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter< ns3::Packet > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel>>::SimpleRefCount(ns3::SimpleRefCount<ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter< ns3::SpectrumModel > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters>>::SimpleRefCount(ns3::SimpleRefCount<ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter< ns3::SpectrumSignalParameters > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue>>::SimpleRefCount(ns3::SimpleRefCount<ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter< ns3::SpectrumValue > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>>::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter< ns3::TraceSourceAccessor > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue>>::SimpleRefCount(ns3::SimpleRefCount<ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter< ns3::VendorSpecificValue > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttCallMachineGrpBasicState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachineGrpBasicState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>>::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBasicState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttCallMachineGrpBroadcastState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachineGrpBroadcastState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>>::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBroadcastState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttCallMachinePrivateState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachinePrivateState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>>::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttCallMachinePrivateState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttCallTypeMachinePrivateState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallTypeMachinePrivateState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>>::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttCallTypeMachinePrivateState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOffNetworkFloorParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOffNetworkFloorParticipantState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>>::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOffNetworkFloorParticipantState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkCallMachineClientState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkCallMachineClientState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>>::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOnNetworkCallMachineClientState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorArbitratorState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorArbitratorState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>>::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorArbitratorState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorDualControlState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorDualControlState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>>::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorDualControlState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorParticipantState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>>::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorParticipantState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorTowardsParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorTowardsParticipantState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>>::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorTowardsParticipantState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttServerCallMachineGroupPrearrangedState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttServerCallMachineGroupPrearrangedState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>>::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttServerCallMachineGroupPrearrangedState > > const &', 'o')])
    return

def register_Ns3Socket_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::Socket::Socket(ns3::Socket const & arg0) [constructor]
    cls.add_constructor([param('ns3::Socket const &', 'arg0')])
    ## socket.h (module 'network'): ns3::Socket::Socket() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): int ns3::Socket::Bind(ns3::Address const & address) [member function]
    cls.add_method('Bind', 
                   'int', 
                   [param('ns3::Address const &', 'address')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Bind() [member function]
    cls.add_method('Bind', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Bind6() [member function]
    cls.add_method('Bind6', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
    cls.add_method('BindToNetDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')], 
                   is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Close() [member function]
    cls.add_method('Close', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Connect(ns3::Address const & address) [member function]
    cls.add_method('Connect', 
                   'int', 
                   [param('ns3::Address const &', 'address')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::Ptr<ns3::Socket> ns3::Socket::CreateSocket(ns3::Ptr<ns3::Node> node, ns3::TypeId tid) [member function]
    cls.add_method('CreateSocket', 
                   'ns3::Ptr< ns3::Socket >', 
                   [param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::TypeId', 'tid')], 
                   is_static=True)
    ## socket.h (module 'network'): bool ns3::Socket::GetAllowBroadcast() const [member function]
    cls.add_method('GetAllowBroadcast', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Socket::GetBoundNetDevice() [member function]
    cls.add_method('GetBoundNetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [])
    ## socket.h (module 'network'): ns3::Socket::SocketErrno ns3::Socket::GetErrno() const [member function]
    cls.add_method('GetErrno', 
                   'ns3::Socket::SocketErrno', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpTos() const [member function]
    cls.add_method('GetIpTos', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpTtl() const [member function]
    cls.add_method('GetIpTtl', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpv6HopLimit() const [member function]
    cls.add_method('GetIpv6HopLimit', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpv6Tclass() const [member function]
    cls.add_method('GetIpv6Tclass', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Node> ns3::Socket::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::GetPeerName(ns3::Address & address) const [member function]
    cls.add_method('GetPeerName', 
                   'int', 
                   [param('ns3::Address &', 'address')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): uint32_t ns3::Socket::GetRxAvailable() const [member function]
    cls.add_method('GetRxAvailable', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::GetSockName(ns3::Address & address) const [member function]
    cls.add_method('GetSockName', 
                   'int', 
                   [param('ns3::Address &', 'address')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Socket::SocketType ns3::Socket::GetSocketType() const [member function]
    cls.add_method('GetSocketType', 
                   'ns3::Socket::SocketType', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::Socket::GetTxAvailable() const [member function]
    cls.add_method('GetTxAvailable', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::Socket::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): static uint8_t ns3::Socket::IpTos2Priority(uint8_t ipTos) [member function]
    cls.add_method('IpTos2Priority', 
                   'uint8_t', 
                   [param('uint8_t', 'ipTos')], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::Socket::Ipv6JoinGroup(ns3::Ipv6Address address, ns3::Socket::Ipv6MulticastFilterMode filterMode, std::vector<ns3::Ipv6Address, std::allocator<ns3::Ipv6Address>> sourceAddresses) [member function]
    cls.add_method('Ipv6JoinGroup', 
                   'void', 
                   [param('ns3::Ipv6Address', 'address'), param('ns3::Socket::Ipv6MulticastFilterMode', 'filterMode'), param('std::vector< ns3::Ipv6Address >', 'sourceAddresses')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::Ipv6JoinGroup(ns3::Ipv6Address address) [member function]
    cls.add_method('Ipv6JoinGroup', 
                   'void', 
                   [param('ns3::Ipv6Address', 'address')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::Ipv6LeaveGroup() [member function]
    cls.add_method('Ipv6LeaveGroup', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpRecvTos() const [member function]
    cls.add_method('IsIpRecvTos', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpRecvTtl() const [member function]
    cls.add_method('IsIpRecvTtl', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpv6RecvHopLimit() const [member function]
    cls.add_method('IsIpv6RecvHopLimit', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpv6RecvTclass() const [member function]
    cls.add_method('IsIpv6RecvTclass', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsRecvPktInfo() const [member function]
    cls.add_method('IsRecvPktInfo', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): int ns3::Socket::Listen() [member function]
    cls.add_method('Listen', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::Recv(uint32_t maxSize, uint32_t flags) [member function]
    cls.add_method('Recv', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('uint32_t', 'maxSize'), param('uint32_t', 'flags')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::Recv() [member function]
    cls.add_method('Recv', 
                   'ns3::Ptr< ns3::Packet >', 
                   [])
    ## socket.h (module 'network'): int ns3::Socket::Recv(uint8_t * buf, uint32_t size, uint32_t flags) [member function]
    cls.add_method('Recv', 
                   'int', 
                   [param('uint8_t *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags')])
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress) [member function]
    cls.add_method('RecvFrom', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('uint32_t', 'maxSize'), param('uint32_t', 'flags'), param('ns3::Address &', 'fromAddress')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::RecvFrom(ns3::Address & fromAddress) [member function]
    cls.add_method('RecvFrom', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('ns3::Address &', 'fromAddress')])
    ## socket.h (module 'network'): int ns3::Socket::RecvFrom(uint8_t * buf, uint32_t size, uint32_t flags, ns3::Address & fromAddress) [member function]
    cls.add_method('RecvFrom', 
                   'int', 
                   [param('uint8_t *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags'), param('ns3::Address &', 'fromAddress')])
    ## socket.h (module 'network'): int ns3::Socket::Send(ns3::Ptr<ns3::Packet> p, uint32_t flags) [member function]
    cls.add_method('Send', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Send(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('Send', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## socket.h (module 'network'): int ns3::Socket::Send(uint8_t const * buf, uint32_t size, uint32_t flags) [member function]
    cls.add_method('Send', 
                   'int', 
                   [param('uint8_t const *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags')])
    ## socket.h (module 'network'): int ns3::Socket::SendTo(ns3::Ptr<ns3::Packet> p, uint32_t flags, ns3::Address const & toAddress) [member function]
    cls.add_method('SendTo', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags'), param('ns3::Address const &', 'toAddress')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::SendTo(uint8_t const * buf, uint32_t size, uint32_t flags, ns3::Address const & address) [member function]
    cls.add_method('SendTo', 
                   'int', 
                   [param('uint8_t const *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags'), param('ns3::Address const &', 'address')])
    ## socket.h (module 'network'): void ns3::Socket::SetAcceptCallback(ns3::Callback<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionRequest, ns3::Callback<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> newConnectionCreated) [member function]
    cls.add_method('SetAcceptCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionRequest'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'newConnectionCreated')])
    ## socket.h (module 'network'): bool ns3::Socket::SetAllowBroadcast(bool allowBroadcast) [member function]
    cls.add_method('SetAllowBroadcast', 
                   'bool', 
                   [param('bool', 'allowBroadcast')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::SetCloseCallbacks(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> normalClose, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> errorClose) [member function]
    cls.add_method('SetCloseCallbacks', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'normalClose'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'errorClose')])
    ## socket.h (module 'network'): void ns3::Socket::SetConnectCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionSucceeded, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionFailed) [member function]
    cls.add_method('SetConnectCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionSucceeded'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionFailed')])
    ## socket.h (module 'network'): void ns3::Socket::SetDataSentCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> dataSent) [member function]
    cls.add_method('SetDataSentCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'dataSent')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpRecvTos(bool ipv4RecvTos) [member function]
    cls.add_method('SetIpRecvTos', 
                   'void', 
                   [param('bool', 'ipv4RecvTos')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpRecvTtl(bool ipv4RecvTtl) [member function]
    cls.add_method('SetIpRecvTtl', 
                   'void', 
                   [param('bool', 'ipv4RecvTtl')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpTos(uint8_t ipTos) [member function]
    cls.add_method('SetIpTos', 
                   'void', 
                   [param('uint8_t', 'ipTos')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpTtl(uint8_t ipTtl) [member function]
    cls.add_method('SetIpTtl', 
                   'void', 
                   [param('uint8_t', 'ipTtl')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6HopLimit(uint8_t ipHopLimit) [member function]
    cls.add_method('SetIpv6HopLimit', 
                   'void', 
                   [param('uint8_t', 'ipHopLimit')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6RecvHopLimit(bool ipv6RecvHopLimit) [member function]
    cls.add_method('SetIpv6RecvHopLimit', 
                   'void', 
                   [param('bool', 'ipv6RecvHopLimit')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6RecvTclass(bool ipv6RecvTclass) [member function]
    cls.add_method('SetIpv6RecvTclass', 
                   'void', 
                   [param('bool', 'ipv6RecvTclass')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6Tclass(int ipTclass) [member function]
    cls.add_method('SetIpv6Tclass', 
                   'void', 
                   [param('int', 'ipTclass')])
    ## socket.h (module 'network'): void ns3::Socket::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')])
    ## socket.h (module 'network'): void ns3::Socket::SetRecvCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> receivedData) [member function]
    cls.add_method('SetRecvCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'receivedData')])
    ## socket.h (module 'network'): void ns3::Socket::SetRecvPktInfo(bool flag) [member function]
    cls.add_method('SetRecvPktInfo', 
                   'void', 
                   [param('bool', 'flag')])
    ## socket.h (module 'network'): void ns3::Socket::SetSendCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCb) [member function]
    cls.add_method('SetSendCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCb')])
    ## socket.h (module 'network'): int ns3::Socket::ShutdownRecv() [member function]
    cls.add_method('ShutdownRecv', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::ShutdownSend() [member function]
    cls.add_method('ShutdownSend', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpTtl() const [member function]
    cls.add_method('IsManualIpTtl', 
                   'bool', 
                   [], 
                   is_const=True, visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpv6HopLimit() const [member function]
    cls.add_method('IsManualIpv6HopLimit', 
                   'bool', 
                   [], 
                   is_const=True, visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpv6Tclass() const [member function]
    cls.add_method('IsManualIpv6Tclass', 
                   'bool', 
                   [], 
                   is_const=True, visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyConnectionFailed() [member function]
    cls.add_method('NotifyConnectionFailed', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::NotifyConnectionRequest(ns3::Address const & from) [member function]
    cls.add_method('NotifyConnectionRequest', 
                   'bool', 
                   [param('ns3::Address const &', 'from')], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyConnectionSucceeded() [member function]
    cls.add_method('NotifyConnectionSucceeded', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyDataRecv() [member function]
    cls.add_method('NotifyDataRecv', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyDataSent(uint32_t size) [member function]
    cls.add_method('NotifyDataSent', 
                   'void', 
                   [param('uint32_t', 'size')], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyErrorClose() [member function]
    cls.add_method('NotifyErrorClose', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyNewConnectionCreated(ns3::Ptr<ns3::Socket> socket, ns3::Address const & from) [member function]
    cls.add_method('NotifyNewConnectionCreated', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket'), param('ns3::Address const &', 'from')], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyNormalClose() [member function]
    cls.add_method('NotifyNormalClose', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifySend(uint32_t spaceAvailable) [member function]
    cls.add_method('NotifySend', 
                   'void', 
                   [param('uint32_t', 'spaceAvailable')], 
                   visibility='protected')
    return

def register_Ns3SocketIpTosTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag(ns3::SocketIpTosTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketIpTosTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpTosTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpTosTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpTosTag::GetTos() const [member function]
    cls.add_method('GetTos', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpTosTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::SetTos(uint8_t tos) [member function]
    cls.add_method('SetTos', 
                   'void', 
                   [param('uint8_t', 'tos')])
    return

def register_Ns3SocketIpTtlTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag(ns3::SocketIpTtlTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketIpTtlTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpTtlTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpTtlTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpTtlTag::GetTtl() const [member function]
    cls.add_method('GetTtl', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpTtlTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::SetTtl(uint8_t ttl) [member function]
    cls.add_method('SetTtl', 
                   'void', 
                   [param('uint8_t', 'ttl')])
    return

def register_Ns3SocketIpv6HopLimitTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag(ns3::SocketIpv6HopLimitTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketIpv6HopLimitTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpv6HopLimitTag::GetHopLimit() const [member function]
    cls.add_method('GetHopLimit', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpv6HopLimitTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpv6HopLimitTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpv6HopLimitTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::SetHopLimit(uint8_t hopLimit) [member function]
    cls.add_method('SetHopLimit', 
                   'void', 
                   [param('uint8_t', 'hopLimit')])
    return

def register_Ns3SocketIpv6TclassTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag(ns3::SocketIpv6TclassTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketIpv6TclassTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpv6TclassTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpv6TclassTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpv6TclassTag::GetTclass() const [member function]
    cls.add_method('GetTclass', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpv6TclassTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::SetTclass(uint8_t tclass) [member function]
    cls.add_method('SetTclass', 
                   'void', 
                   [param('uint8_t', 'tclass')])
    return

def register_Ns3SocketPriorityTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag(ns3::SocketPriorityTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketPriorityTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketPriorityTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketPriorityTag::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketPriorityTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketPriorityTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketPriorityTag::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')])
    return

def register_Ns3SocketSetDontFragmentTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag(ns3::SocketSetDontFragmentTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketSetDontFragmentTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Disable() [member function]
    cls.add_method('Disable', 
                   'void', 
                   [])
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Enable() [member function]
    cls.add_method('Enable', 
                   'void', 
                   [])
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketSetDontFragmentTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketSetDontFragmentTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketSetDontFragmentTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): bool ns3::SocketSetDontFragmentTag::IsEnabled() const [member function]
    cls.add_method('IsEnabled', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3SpectrumInterference_methods(root_module, cls):
    ## spectrum-interference.h (module 'spectrum'): ns3::SpectrumInterference::SpectrumInterference() [constructor]
    cls.add_constructor([])
    ## spectrum-interference.h (module 'spectrum'): static ns3::TypeId ns3::SpectrumInterference::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::SetErrorModel(ns3::Ptr<ns3::SpectrumErrorModel> e) [member function]
    cls.add_method('SetErrorModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumErrorModel >', 'e')])
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::StartRx(ns3::Ptr<const ns3::Packet> p, ns3::Ptr<const ns3::SpectrumValue> rxPsd) [member function]
    cls.add_method('StartRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet const >', 'p'), param('ns3::Ptr< ns3::SpectrumValue const >', 'rxPsd')])
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::AbortRx() [member function]
    cls.add_method('AbortRx', 
                   'void', 
                   [])
    ## spectrum-interference.h (module 'spectrum'): bool ns3::SpectrumInterference::EndRx() [member function]
    cls.add_method('EndRx', 
                   'bool', 
                   [])
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::AddSignal(ns3::Ptr<const ns3::SpectrumValue> spd, ns3::Time const duration) [member function]
    cls.add_method('AddSignal', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'spd'), param('ns3::Time const', 'duration')])
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::SetNoisePowerSpectralDensity(ns3::Ptr<const ns3::SpectrumValue> noisePsd) [member function]
    cls.add_method('SetNoisePowerSpectralDensity', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'noisePsd')])
    ## spectrum-interference.h (module 'spectrum'): ns3::SpectrumInterference::SpectrumInterference(ns3::SpectrumInterference const & arg0) [constructor]
    cls.add_constructor([param('ns3::SpectrumInterference const &', 'arg0')])
    ## spectrum-interference.h (module 'spectrum'): void ns3::SpectrumInterference::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3SpectrumModel_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    ## spectrum-model.h (module 'spectrum'): ns3::SpectrumModel::SpectrumModel(ns3::SpectrumModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::SpectrumModel const &', 'arg0')])
    ## spectrum-model.h (module 'spectrum'): ns3::SpectrumModel::SpectrumModel(std::vector<double, std::allocator<double>> const & centerFreqs) [constructor]
    cls.add_constructor([param('std::vector< double > const &', 'centerFreqs')])
    ## spectrum-model.h (module 'spectrum'): ns3::SpectrumModel::SpectrumModel(ns3::Bands const & bands) [constructor]
    cls.add_constructor([param('ns3::Bands const &', 'bands')])
    ## spectrum-model.h (module 'spectrum'): std::vector<ns3::BandInfo, std::allocator<ns3::BandInfo>>::const_iterator ns3::SpectrumModel::Begin() const [member function]
    cls.add_method('Begin', 
                   'std::vector< ns3::BandInfo > const_iterator', 
                   [], 
                   is_const=True)
    ## spectrum-model.h (module 'spectrum'): std::vector<ns3::BandInfo, std::allocator<ns3::BandInfo>>::const_iterator ns3::SpectrumModel::End() const [member function]
    cls.add_method('End', 
                   'std::vector< ns3::BandInfo > const_iterator', 
                   [], 
                   is_const=True)
    ## spectrum-model.h (module 'spectrum'): size_t ns3::SpectrumModel::GetNumBands() const [member function]
    cls.add_method('GetNumBands', 
                   'size_t', 
                   [], 
                   is_const=True)
    ## spectrum-model.h (module 'spectrum'): ns3::SpectrumModelUid_t ns3::SpectrumModel::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'ns3::SpectrumModelUid_t', 
                   [], 
                   is_const=True)
    ## spectrum-model.h (module 'spectrum'): bool ns3::SpectrumModel::IsOrthogonal(ns3::SpectrumModel const & other) const [member function]
    cls.add_method('IsOrthogonal', 
                   'bool', 
                   [param('ns3::SpectrumModel const &', 'other')], 
                   is_const=True)
    return

def register_Ns3SpectrumPhy_methods(root_module, cls):
    ## spectrum-phy.h (module 'spectrum'): ns3::SpectrumPhy::SpectrumPhy() [constructor]
    cls.add_constructor([])
    ## spectrum-phy.h (module 'spectrum'): static ns3::TypeId ns3::SpectrumPhy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## spectrum-phy.h (module 'spectrum'): void ns3::SpectrumPhy::SetDevice(ns3::Ptr<ns3::NetDevice> d) [member function]
    cls.add_method('SetDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'd')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): ns3::Ptr<ns3::NetDevice> ns3::SpectrumPhy::GetDevice() const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): void ns3::SpectrumPhy::SetMobility(ns3::Ptr<ns3::MobilityModel> m) [member function]
    cls.add_method('SetMobility', 
                   'void', 
                   [param('ns3::Ptr< ns3::MobilityModel >', 'm')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): ns3::Ptr<ns3::MobilityModel> ns3::SpectrumPhy::GetMobility() const [member function]
    cls.add_method('GetMobility', 
                   'ns3::Ptr< ns3::MobilityModel >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): void ns3::SpectrumPhy::SetChannel(ns3::Ptr<ns3::SpectrumChannel> c) [member function]
    cls.add_method('SetChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumChannel >', 'c')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): ns3::Ptr<const ns3::SpectrumModel> ns3::SpectrumPhy::GetRxSpectrumModel() const [member function]
    cls.add_method('GetRxSpectrumModel', 
                   'ns3::Ptr< ns3::SpectrumModel const >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): ns3::Ptr<ns3::Object> ns3::SpectrumPhy::GetAntenna() const [member function]
    cls.add_method('GetAntenna', 
                   'ns3::Ptr< ns3::Object >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## spectrum-phy.h (module 'spectrum'): void ns3::SpectrumPhy::StartRx(ns3::Ptr<ns3::SpectrumSignalParameters> params) [member function]
    cls.add_method('StartRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumSignalParameters >', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3SpectrumPropagationLossModel_methods(root_module, cls):
    ## spectrum-propagation-loss-model.h (module 'spectrum'): ns3::SpectrumPropagationLossModel::SpectrumPropagationLossModel(ns3::SpectrumPropagationLossModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::SpectrumPropagationLossModel const &', 'arg0')])
    ## spectrum-propagation-loss-model.h (module 'spectrum'): ns3::SpectrumPropagationLossModel::SpectrumPropagationLossModel() [constructor]
    cls.add_constructor([])
    ## spectrum-propagation-loss-model.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumValue> ns3::SpectrumPropagationLossModel::CalcRxPowerSpectralDensity(ns3::Ptr<const ns3::SpectrumValue> txPsd, ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
    cls.add_method('CalcRxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'txPsd'), param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
                   is_const=True)
    ## spectrum-propagation-loss-model.h (module 'spectrum'): static ns3::TypeId ns3::SpectrumPropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## spectrum-propagation-loss-model.h (module 'spectrum'): void ns3::SpectrumPropagationLossModel::SetNext(ns3::Ptr<ns3::SpectrumPropagationLossModel> next) [member function]
    cls.add_method('SetNext', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumPropagationLossModel >', 'next')])
    ## spectrum-propagation-loss-model.h (module 'spectrum'): void ns3::SpectrumPropagationLossModel::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## spectrum-propagation-loss-model.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumValue> ns3::SpectrumPropagationLossModel::DoCalcRxPowerSpectralDensity(ns3::Ptr<const ns3::SpectrumValue> txPsd, ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'txPsd'), param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
    return

def register_Ns3SpectrumSignalParameters_methods(root_module, cls):
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::SpectrumSignalParameters() [constructor]
    cls.add_constructor([])
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::SpectrumSignalParameters(ns3::SpectrumSignalParameters const & p) [constructor]
    cls.add_constructor([param('ns3::SpectrumSignalParameters const &', 'p')])
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumSignalParameters> ns3::SpectrumSignalParameters::Copy() [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::SpectrumSignalParameters >', 
                   [], 
                   is_virtual=True)
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::duration [variable]
    cls.add_instance_attribute('duration', 'ns3::Time', is_const=False)
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::psd [variable]
    cls.add_instance_attribute('psd', 'ns3::Ptr< ns3::SpectrumValue >', is_const=False)
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::txAntenna [variable]
    cls.add_instance_attribute('txAntenna', 'ns3::Ptr< ns3::AntennaModel >', is_const=False)
    ## spectrum-signal-parameters.h (module 'spectrum'): ns3::SpectrumSignalParameters::txPhy [variable]
    cls.add_instance_attribute('txPhy', 'ns3::Ptr< ns3::SpectrumPhy >', is_const=False)
    return

def register_Ns3SpectrumValue_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_unary_numeric_operator('-')
    cls.add_binary_numeric_operator('/', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('double', 'right'))
    cls.add_binary_numeric_operator('/', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('ns3::SpectrumValue const &', 'right'))
    cls.add_binary_numeric_operator('*', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('double', 'right'))
    cls.add_binary_numeric_operator('*', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('ns3::SpectrumValue const &', 'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('double', 'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('ns3::SpectrumValue const &', 'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('double', 'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::SpectrumValue'], root_module['ns3::SpectrumValue'], param('ns3::SpectrumValue const &', 'right'))
    cls.add_inplace_numeric_operator('*=', param('ns3::SpectrumValue const &', 'right'))
    cls.add_inplace_numeric_operator('*=', param('double', 'right'))
    cls.add_inplace_numeric_operator('+=', param('ns3::SpectrumValue const &', 'right'))
    cls.add_inplace_numeric_operator('+=', param('double', 'right'))
    cls.add_inplace_numeric_operator('-=', param('ns3::SpectrumValue const &', 'right'))
    cls.add_inplace_numeric_operator('-=', param('double', 'right'))
    cls.add_inplace_numeric_operator('/=', param('ns3::SpectrumValue const &', 'right'))
    cls.add_inplace_numeric_operator('/=', param('double', 'right'))
    ## spectrum-value.h (module 'spectrum'): ns3::SpectrumValue::SpectrumValue(ns3::SpectrumValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::SpectrumValue const &', 'arg0')])
    ## spectrum-value.h (module 'spectrum'): ns3::SpectrumValue::SpectrumValue(ns3::Ptr<const ns3::SpectrumModel> sm) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::SpectrumModel const >', 'sm')])
    ## spectrum-value.h (module 'spectrum'): ns3::SpectrumValue::SpectrumValue() [constructor]
    cls.add_constructor([])
    ## spectrum-value.h (module 'spectrum'): std::vector<ns3::BandInfo, std::allocator<ns3::BandInfo>>::const_iterator ns3::SpectrumValue::ConstBandsBegin() const [member function]
    cls.add_method('ConstBandsBegin', 
                   'std::vector< ns3::BandInfo > const_iterator', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): std::vector<ns3::BandInfo, std::allocator<ns3::BandInfo>>::const_iterator ns3::SpectrumValue::ConstBandsEnd() const [member function]
    cls.add_method('ConstBandsEnd', 
                   'std::vector< ns3::BandInfo > const_iterator', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): std::vector<double, std::allocator<double>>::const_iterator ns3::SpectrumValue::ConstValuesBegin() const [member function]
    cls.add_method('ConstValuesBegin', 
                   'std::vector< double > const_iterator', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): std::vector<double, std::allocator<double>>::const_iterator ns3::SpectrumValue::ConstValuesEnd() const [member function]
    cls.add_method('ConstValuesEnd', 
                   'std::vector< double > const_iterator', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumValue> ns3::SpectrumValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): ns3::Ptr<const ns3::SpectrumModel> ns3::SpectrumValue::GetSpectrumModel() const [member function]
    cls.add_method('GetSpectrumModel', 
                   'ns3::Ptr< ns3::SpectrumModel const >', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): ns3::SpectrumModelUid_t ns3::SpectrumValue::GetSpectrumModelUid() const [member function]
    cls.add_method('GetSpectrumModelUid', 
                   'ns3::SpectrumModelUid_t', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): uint32_t ns3::SpectrumValue::GetValuesN() const [member function]
    cls.add_method('GetValuesN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): double const & ns3::SpectrumValue::ValuesAt(uint32_t pos) const [member function]
    cls.add_method('ValuesAt', 
                   'double const &', 
                   [param('uint32_t', 'pos')], 
                   is_const=True)
    ## spectrum-value.h (module 'spectrum'): std::vector<double, std::allocator<double>>::iterator ns3::SpectrumValue::ValuesBegin() [member function]
    cls.add_method('ValuesBegin', 
                   'std::vector< double > iterator', 
                   [])
    ## spectrum-value.h (module 'spectrum'): std::vector<double, std::allocator<double>>::iterator ns3::SpectrumValue::ValuesEnd() [member function]
    cls.add_method('ValuesEnd', 
                   'std::vector< double > iterator', 
                   [])
    return

def register_Ns3ThreeLogDistancePropagationLossModel_methods(root_module, cls):
    ## propagation-loss-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeLogDistancePropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-loss-model.h (module 'propagation'): ns3::ThreeLogDistancePropagationLossModel::ThreeLogDistancePropagationLossModel() [constructor]
    cls.add_constructor([])
    ## propagation-loss-model.h (module 'propagation'): double ns3::ThreeLogDistancePropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPower', 
                   'double', 
                   [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_virtual=True, visibility='private')
    ## propagation-loss-model.h (module 'propagation'): int64_t ns3::ThreeLogDistancePropagationLossModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3TraceSourceAccessor_methods(root_module, cls):
    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [constructor]
    cls.add_constructor([param('ns3::TraceSourceAccessor const &', 'arg0')])
    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor() [constructor]
    cls.add_constructor([])
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::Connect(ns3::ObjectBase * obj, std::string context, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('Connect', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::ConnectWithoutContext(ns3::ObjectBase * obj, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('ConnectWithoutContext', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('ns3::CallbackBase const &', 'cb')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::Disconnect(ns3::ObjectBase * obj, std::string context, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('Disconnect', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::DisconnectWithoutContext(ns3::ObjectBase * obj, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('DisconnectWithoutContext', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('ns3::CallbackBase const &', 'cb')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3Trailer_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## trailer.h (module 'network'): ns3::Trailer::Trailer() [constructor]
    cls.add_constructor([])
    ## trailer.h (module 'network'): ns3::Trailer::Trailer(ns3::Trailer const & arg0) [constructor]
    cls.add_constructor([param('ns3::Trailer const &', 'arg0')])
    ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator end) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'end')], 
                   is_pure_virtual=True, is_virtual=True)
    ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
                   is_virtual=True)
    ## trailer.h (module 'network'): uint32_t ns3::Trailer::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## trailer.h (module 'network'): static ns3::TypeId ns3::Trailer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## trailer.h (module 'network'): void ns3::Trailer::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## trailer.h (module 'network'): void ns3::Trailer::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3TriangularRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::TriangularRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::TriangularRandomVariable::TriangularRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetMean() const [member function]
    cls.add_method('GetMean', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetMin() const [member function]
    cls.add_method('GetMin', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetMax() const [member function]
    cls.add_method('GetMax', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetValue(double mean, double min, double max) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mean'), param('double', 'min'), param('double', 'max')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::TriangularRandomVariable::GetInteger(uint32_t mean, uint32_t min, uint32_t max) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mean'), param('uint32_t', 'min'), param('uint32_t', 'max')])
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::TriangularRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3TwoRayGroundPropagationLossModel_methods(root_module, cls):
    ## propagation-loss-model.h (module 'propagation'): static ns3::TypeId ns3::TwoRayGroundPropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-loss-model.h (module 'propagation'): ns3::TwoRayGroundPropagationLossModel::TwoRayGroundPropagationLossModel() [constructor]
    cls.add_constructor([])
    ## propagation-loss-model.h (module 'propagation'): void ns3::TwoRayGroundPropagationLossModel::SetFrequency(double frequency) [member function]
    cls.add_method('SetFrequency', 
                   'void', 
                   [param('double', 'frequency')])
    ## propagation-loss-model.h (module 'propagation'): void ns3::TwoRayGroundPropagationLossModel::SetSystemLoss(double systemLoss) [member function]
    cls.add_method('SetSystemLoss', 
                   'void', 
                   [param('double', 'systemLoss')])
    ## propagation-loss-model.h (module 'propagation'): void ns3::TwoRayGroundPropagationLossModel::SetMinDistance(double minDistance) [member function]
    cls.add_method('SetMinDistance', 
                   'void', 
                   [param('double', 'minDistance')])
    ## propagation-loss-model.h (module 'propagation'): double ns3::TwoRayGroundPropagationLossModel::GetMinDistance() const [member function]
    cls.add_method('GetMinDistance', 
                   'double', 
                   [], 
                   is_const=True)
    ## propagation-loss-model.h (module 'propagation'): double ns3::TwoRayGroundPropagationLossModel::GetFrequency() const [member function]
    cls.add_method('GetFrequency', 
                   'double', 
                   [], 
                   is_const=True)
    ## propagation-loss-model.h (module 'propagation'): double ns3::TwoRayGroundPropagationLossModel::GetSystemLoss() const [member function]
    cls.add_method('GetSystemLoss', 
                   'double', 
                   [], 
                   is_const=True)
    ## propagation-loss-model.h (module 'propagation'): void ns3::TwoRayGroundPropagationLossModel::SetHeightAboveZ(double heightAboveZ) [member function]
    cls.add_method('SetHeightAboveZ', 
                   'void', 
                   [param('double', 'heightAboveZ')])
    ## propagation-loss-model.h (module 'propagation'): double ns3::TwoRayGroundPropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPower', 
                   'double', 
                   [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_virtual=True, visibility='private')
    ## propagation-loss-model.h (module 'propagation'): int64_t ns3::TwoRayGroundPropagationLossModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3UeManager_methods(root_module, cls):
    ## lte-enb-rrc.h (module 'lte'): ns3::UeManager::UeManager(ns3::UeManager const & arg0) [constructor]
    cls.add_constructor([param('ns3::UeManager const &', 'arg0')])
    ## lte-enb-rrc.h (module 'lte'): ns3::UeManager::UeManager() [constructor]
    cls.add_constructor([])
    ## lte-enb-rrc.h (module 'lte'): ns3::UeManager::UeManager(ns3::Ptr<ns3::LteEnbRrc> rrc, uint16_t rnti, ns3::UeManager::State s, uint8_t componentCarrierId) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::LteEnbRrc >', 'rrc'), param('uint16_t', 'rnti'), param('ns3::UeManager::State', 's'), param('uint8_t', 'componentCarrierId')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::CancelPendingEvents() [member function]
    cls.add_method('CancelPendingEvents', 
                   'void', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::CmacUeConfigUpdateInd(ns3::LteEnbCmacSapUser::UeConfig cmacParams) [member function]
    cls.add_method('CmacUeConfigUpdateInd', 
                   'void', 
                   [param('ns3::LteEnbCmacSapUser::UeConfig', 'cmacParams')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::CompleteSetupUe(ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters params) [member function]
    cls.add_method('CompleteSetupUe', 
                   'void', 
                   [param('ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters', 'params')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::DoReceivePdcpSdu(ns3::LtePdcpSapUser::ReceivePdcpSduParameters params) [member function]
    cls.add_method('DoReceivePdcpSdu', 
                   'void', 
                   [param('ns3::LtePdcpSapUser::ReceivePdcpSduParameters', 'params')])
    ## lte-enb-rrc.h (module 'lte'): uint8_t ns3::UeManager::GetComponentCarrierId() const [member function]
    cls.add_method('GetComponentCarrierId', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-enb-rrc.h (module 'lte'): std::vector<ns3::EpcX2Sap::ErabToBeSetupItem, std::allocator<ns3::EpcX2Sap::ErabToBeSetupItem>> ns3::UeManager::GetErabList() [member function]
    cls.add_method('GetErabList', 
                   'std::vector< ns3::EpcX2Sap::ErabToBeSetupItem >', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): uint64_t ns3::UeManager::GetImsi() const [member function]
    cls.add_method('GetImsi', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## lte-enb-rrc.h (module 'lte'): ns3::LteRrcSap::RadioResourceConfigDedicated ns3::UeManager::GetRadioResourceConfigForHandoverPreparationInfo() [member function]
    cls.add_method('GetRadioResourceConfigForHandoverPreparationInfo', 
                   'ns3::LteRrcSap::RadioResourceConfigDedicated', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): uint16_t ns3::UeManager::GetRnti() const [member function]
    cls.add_method('GetRnti', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-enb-rrc.h (module 'lte'): ns3::LteRrcSap::RrcConnectionReconfiguration ns3::UeManager::GetRrcConnectionReconfigurationForHandover(uint8_t componentCarrierId) [member function]
    cls.add_method('GetRrcConnectionReconfigurationForHandover', 
                   'ns3::LteRrcSap::RrcConnectionReconfiguration', 
                   [param('uint8_t', 'componentCarrierId')])
    ## lte-enb-rrc.h (module 'lte'): uint16_t ns3::UeManager::GetSrsConfigurationIndex() const [member function]
    cls.add_method('GetSrsConfigurationIndex', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-enb-rrc.h (module 'lte'): ns3::UeManager::State ns3::UeManager::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::UeManager::State', 
                   [], 
                   is_const=True)
    ## lte-enb-rrc.h (module 'lte'): static ns3::TypeId ns3::UeManager::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::InitialContextSetupRequest() [member function]
    cls.add_method('InitialContextSetupRequest', 
                   'void', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::PrepareHandover(uint16_t cellId) [member function]
    cls.add_method('PrepareHandover', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecordDataRadioBearersToBeStarted() [member function]
    cls.add_method('RecordDataRadioBearersToBeStarted', 
                   'void', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvHandoverPreparationFailure(uint16_t cellId) [member function]
    cls.add_method('RecvHandoverPreparationFailure', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvHandoverRequestAck(ns3::EpcX2Sap::HandoverRequestAckParams params) [member function]
    cls.add_method('RecvHandoverRequestAck', 
                   'void', 
                   [param('ns3::EpcX2Sap::HandoverRequestAckParams', 'params')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvIdealUeContextRemoveRequest(uint16_t rnti) [member function]
    cls.add_method('RecvIdealUeContextRemoveRequest', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvMeasurementReport(ns3::LteRrcSap::MeasurementReport msg) [member function]
    cls.add_method('RecvMeasurementReport', 
                   'void', 
                   [param('ns3::LteRrcSap::MeasurementReport', 'msg')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvRrcConnectionReconfigurationCompleted(ns3::LteRrcSap::RrcConnectionReconfigurationCompleted msg) [member function]
    cls.add_method('RecvRrcConnectionReconfigurationCompleted', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionReconfigurationCompleted', 'msg')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvRrcConnectionReestablishmentComplete(ns3::LteRrcSap::RrcConnectionReestablishmentComplete msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishmentComplete', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionReestablishmentComplete', 'msg')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvRrcConnectionReestablishmentRequest(ns3::LteRrcSap::RrcConnectionReestablishmentRequest msg) [member function]
    cls.add_method('RecvRrcConnectionReestablishmentRequest', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionReestablishmentRequest', 'msg')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvRrcConnectionRequest(ns3::LteRrcSap::RrcConnectionRequest msg) [member function]
    cls.add_method('RecvRrcConnectionRequest', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionRequest', 'msg')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvRrcConnectionSetupCompleted(ns3::LteRrcSap::RrcConnectionSetupCompleted msg) [member function]
    cls.add_method('RecvRrcConnectionSetupCompleted', 
                   'void', 
                   [param('ns3::LteRrcSap::RrcConnectionSetupCompleted', 'msg')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvSidelinkUeInformation(ns3::LteRrcSap::SidelinkUeInformation msg) [member function]
    cls.add_method('RecvSidelinkUeInformation', 
                   'void', 
                   [param('ns3::LteRrcSap::SidelinkUeInformation', 'msg')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvSnStatusTransfer(ns3::EpcX2Sap::SnStatusTransferParams params) [member function]
    cls.add_method('RecvSnStatusTransfer', 
                   'void', 
                   [param('ns3::EpcX2Sap::SnStatusTransferParams', 'params')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::RecvUeContextRelease(ns3::EpcX2Sap::UeContextReleaseParams params) [member function]
    cls.add_method('RecvUeContextRelease', 
                   'void', 
                   [param('ns3::EpcX2Sap::UeContextReleaseParams', 'params')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::ReleaseDataRadioBearer(uint8_t drbid) [member function]
    cls.add_method('ReleaseDataRadioBearer', 
                   'void', 
                   [param('uint8_t', 'drbid')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::ScheduleRrcConnectionReconfiguration() [member function]
    cls.add_method('ScheduleRrcConnectionReconfiguration', 
                   'void', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::SendData(uint8_t bid, ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('SendData', 
                   'void', 
                   [param('uint8_t', 'bid'), param('ns3::Ptr< ns3::Packet >', 'p')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::SendUeContextRelease() [member function]
    cls.add_method('SendUeContextRelease', 
                   'void', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::SetImsi(uint64_t imsi) [member function]
    cls.add_method('SetImsi', 
                   'void', 
                   [param('uint64_t', 'imsi')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::SetPdschConfigDedicated(ns3::LteRrcSap::PdschConfigDedicated pdschConfigDedicated) [member function]
    cls.add_method('SetPdschConfigDedicated', 
                   'void', 
                   [param('ns3::LteRrcSap::PdschConfigDedicated', 'pdschConfigDedicated')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::SetSource(uint16_t sourceCellId, uint16_t sourceX2apId) [member function]
    cls.add_method('SetSource', 
                   'void', 
                   [param('uint16_t', 'sourceCellId'), param('uint16_t', 'sourceX2apId')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::SetSrsConfigurationIndex(uint16_t srsConfIndex) [member function]
    cls.add_method('SetSrsConfigurationIndex', 
                   'void', 
                   [param('uint16_t', 'srsConfIndex')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::SetupDataRadioBearer(ns3::EpsBearer bearer, uint8_t bearerId, uint32_t gtpTeid, ns3::Ipv4Address transportLayerAddress) [member function]
    cls.add_method('SetupDataRadioBearer', 
                   'void', 
                   [param('ns3::EpsBearer', 'bearer'), param('uint8_t', 'bearerId'), param('uint32_t', 'gtpTeid'), param('ns3::Ipv4Address', 'transportLayerAddress')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::StartDataRadioBearers() [member function]
    cls.add_method('StartDataRadioBearers', 
                   'void', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## lte-enb-rrc.h (module 'lte'): void ns3::UeManager::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3UniformRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::UniformRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::UniformRandomVariable::UniformRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetMin() const [member function]
    cls.add_method('GetMin', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetMax() const [member function]
    cls.add_method('GetMax', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetValue(double min, double max) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'min'), param('double', 'max')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::UniformRandomVariable::GetInteger(uint32_t min, uint32_t max) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'min'), param('uint32_t', 'max')])
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::UniformRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3VendorSpecificValue_methods(root_module, cls):
    ## ff-mac-common.h (module 'lte'): ns3::VendorSpecificValue::VendorSpecificValue() [constructor]
    cls.add_constructor([])
    ## ff-mac-common.h (module 'lte'): ns3::VendorSpecificValue::VendorSpecificValue(ns3::VendorSpecificValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::VendorSpecificValue const &', 'arg0')])
    return

def register_Ns3WeibullRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::WeibullRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::WeibullRandomVariable::WeibullRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetScale() const [member function]
    cls.add_method('GetScale', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetShape() const [member function]
    cls.add_method('GetShape', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetValue(double scale, double shape, double bound) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'scale'), param('double', 'shape'), param('double', 'bound')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::WeibullRandomVariable::GetInteger(uint32_t scale, uint32_t shape, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'scale'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::WeibullRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3ZetaRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ZetaRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ZetaRandomVariable::ZetaRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ZetaRandomVariable::GetAlpha() const [member function]
    cls.add_method('GetAlpha', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ZetaRandomVariable::GetValue(double alpha) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'alpha')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZetaRandomVariable::GetInteger(uint32_t alpha) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'alpha')])
    ## random-variable-stream.h (module 'core'): double ns3::ZetaRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZetaRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3ZipfRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ZipfRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ZipfRandomVariable::ZipfRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZipfRandomVariable::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ZipfRandomVariable::GetAlpha() const [member function]
    cls.add_method('GetAlpha', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ZipfRandomVariable::GetValue(uint32_t n, double alpha) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('uint32_t', 'n'), param('double', 'alpha')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZipfRandomVariable::GetInteger(uint32_t n, uint32_t alpha) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'n'), param('uint32_t', 'alpha')])
    ## random-variable-stream.h (module 'core'): double ns3::ZipfRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZipfRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3AntennaModel_methods(root_module, cls):
    ## antenna-model.h (module 'antenna'): ns3::AntennaModel::AntennaModel(ns3::AntennaModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::AntennaModel const &', 'arg0')])
    ## antenna-model.h (module 'antenna'): ns3::AntennaModel::AntennaModel() [constructor]
    cls.add_constructor([])
    ## antenna-model.h (module 'antenna'): double ns3::AntennaModel::GetGainDb(ns3::Angles a) [member function]
    cls.add_method('GetGainDb', 
                   'double', 
                   [param('ns3::Angles', 'a')], 
                   is_pure_virtual=True, is_virtual=True)
    ## antenna-model.h (module 'antenna'): static ns3::TypeId ns3::AntennaModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    return

def register_Ns3Application_methods(root_module, cls):
    ## application.h (module 'network'): ns3::Application::Application(ns3::Application const & arg0) [constructor]
    cls.add_constructor([param('ns3::Application const &', 'arg0')])
    ## application.h (module 'network'): ns3::Application::Application() [constructor]
    cls.add_constructor([])
    ## application.h (module 'network'): ns3::Ptr<ns3::Node> ns3::Application::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True)
    ## application.h (module 'network'): static ns3::TypeId ns3::Application::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## application.h (module 'network'): void ns3::Application::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## application.h (module 'network'): void ns3::Application::SetStartTime(ns3::Time start) [member function]
    cls.add_method('SetStartTime', 
                   'void', 
                   [param('ns3::Time', 'start')])
    ## application.h (module 'network'): void ns3::Application::SetStopTime(ns3::Time stop) [member function]
    cls.add_method('SetStopTime', 
                   'void', 
                   [param('ns3::Time', 'stop')])
    ## application.h (module 'network'): void ns3::Application::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## application.h (module 'network'): void ns3::Application::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## application.h (module 'network'): void ns3::Application::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## application.h (module 'network'): void ns3::Application::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3AttributeAccessor_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [constructor]
    cls.add_constructor([param('ns3::AttributeAccessor const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Get(ns3::ObjectBase const * object, ns3::AttributeValue & attribute) const [member function]
    cls.add_method('Get', 
                   'bool', 
                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::HasGetter() const [member function]
    cls.add_method('HasGetter', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::HasSetter() const [member function]
    cls.add_method('HasSetter', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Set(ns3::ObjectBase * object, ns3::AttributeValue const & value) const [member function]
    cls.add_method('Set', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'object', transfer_ownership=False), param('ns3::AttributeValue const &', 'value')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3AttributeChecker_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::AttributeChecker const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): bool ns3::AttributeChecker::Check(ns3::AttributeValue const & value) const [member function]
    cls.add_method('Check', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'value')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeChecker::Copy(ns3::AttributeValue const & source, ns3::AttributeValue & destination) const [member function]
    cls.add_method('Copy', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'source'), param('ns3::AttributeValue &', 'destination')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::Create() const [member function]
    cls.add_method('Create', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::CreateValidValue(ns3::AttributeValue const & value) const [member function]
    cls.add_method('CreateValidValue', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [param('ns3::AttributeValue const &', 'value')], 
                   is_const=True)
    ## attribute.h (module 'core'): std::string ns3::AttributeChecker::GetUnderlyingTypeInformation() const [member function]
    cls.add_method('GetUnderlyingTypeInformation', 
                   'std::string', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): std::string ns3::AttributeChecker::GetValueTypeName() const [member function]
    cls.add_method('GetValueTypeName', 
                   'std::string', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeChecker::HasUnderlyingTypeInformation() const [member function]
    cls.add_method('HasUnderlyingTypeInformation', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3AttributeValue_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::AttributeValue const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3BooleanChecker_methods(root_module, cls):
    ## boolean.h (module 'core'): ns3::BooleanChecker::BooleanChecker() [constructor]
    cls.add_constructor([])
    ## boolean.h (module 'core'): ns3::BooleanChecker::BooleanChecker(ns3::BooleanChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::BooleanChecker const &', 'arg0')])
    return

def register_Ns3BooleanValue_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue(ns3::BooleanValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::BooleanValue const &', 'arg0')])
    ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue() [constructor]
    cls.add_constructor([])
    ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue(bool value) [constructor]
    cls.add_constructor([param('bool', 'value')])
    ## boolean.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::BooleanValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## boolean.h (module 'core'): bool ns3::BooleanValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## boolean.h (module 'core'): bool ns3::BooleanValue::Get() const [member function]
    cls.add_method('Get', 
                   'bool', 
                   [], 
                   is_const=True)
    ## boolean.h (module 'core'): std::string ns3::BooleanValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## boolean.h (module 'core'): void ns3::BooleanValue::Set(bool value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('bool', 'value')])
    return

def register_Ns3BoxChecker_methods(root_module, cls):
    ## box.h (module 'mobility'): ns3::BoxChecker::BoxChecker() [constructor]
    cls.add_constructor([])
    ## box.h (module 'mobility'): ns3::BoxChecker::BoxChecker(ns3::BoxChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::BoxChecker const &', 'arg0')])
    return

def register_Ns3BoxValue_methods(root_module, cls):
    ## box.h (module 'mobility'): ns3::BoxValue::BoxValue() [constructor]
    cls.add_constructor([])
    ## box.h (module 'mobility'): ns3::BoxValue::BoxValue(ns3::Box const & value) [constructor]
    cls.add_constructor([param('ns3::Box const &', 'value')])
    ## box.h (module 'mobility'): ns3::BoxValue::BoxValue(ns3::BoxValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::BoxValue const &', 'arg0')])
    ## box.h (module 'mobility'): ns3::Ptr<ns3::AttributeValue> ns3::BoxValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## box.h (module 'mobility'): bool ns3::BoxValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## box.h (module 'mobility'): ns3::Box ns3::BoxValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Box', 
                   [], 
                   is_const=True)
    ## box.h (module 'mobility'): std::string ns3::BoxValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## box.h (module 'mobility'): void ns3::BoxValue::Set(ns3::Box const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Box const &', 'value')])
    return

def register_Ns3Building_methods(root_module, cls):
    ## building.h (module 'buildings'): ns3::Building::Building(ns3::Building const & arg0) [constructor]
    cls.add_constructor([param('ns3::Building const &', 'arg0')])
    ## building.h (module 'buildings'): ns3::Building::Building(double xMin, double xMax, double yMin, double yMax, double zMin, double zMax) [constructor]
    cls.add_constructor([param('double', 'xMin'), param('double', 'xMax'), param('double', 'yMin'), param('double', 'yMax'), param('double', 'zMin'), param('double', 'zMax')])
    ## building.h (module 'buildings'): ns3::Building::Building() [constructor]
    cls.add_constructor([])
    ## building.h (module 'buildings'): void ns3::Building::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## building.h (module 'buildings'): ns3::Box ns3::Building::GetBoundaries() const [member function]
    cls.add_method('GetBoundaries', 
                   'ns3::Box', 
                   [], 
                   is_const=True)
    ## building.h (module 'buildings'): ns3::Building::BuildingType_t ns3::Building::GetBuildingType() const [member function]
    cls.add_method('GetBuildingType', 
                   'ns3::Building::BuildingType_t', 
                   [], 
                   is_const=True)
    ## building.h (module 'buildings'): ns3::Building::ExtWallsType_t ns3::Building::GetExtWallsType() const [member function]
    cls.add_method('GetExtWallsType', 
                   'ns3::Building::ExtWallsType_t', 
                   [], 
                   is_const=True)
    ## building.h (module 'buildings'): uint16_t ns3::Building::GetFloor(ns3::Vector position) const [member function]
    cls.add_method('GetFloor', 
                   'uint16_t', 
                   [param('ns3::Vector3D', 'position')], 
                   is_const=True)
    ## building.h (module 'buildings'): uint32_t ns3::Building::GetId() const [member function]
    cls.add_method('GetId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## building.h (module 'buildings'): uint16_t ns3::Building::GetNFloors() const [member function]
    cls.add_method('GetNFloors', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## building.h (module 'buildings'): uint16_t ns3::Building::GetNRoomsX() const [member function]
    cls.add_method('GetNRoomsX', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## building.h (module 'buildings'): uint16_t ns3::Building::GetNRoomsY() const [member function]
    cls.add_method('GetNRoomsY', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## building.h (module 'buildings'): uint16_t ns3::Building::GetRoomX(ns3::Vector position) const [member function]
    cls.add_method('GetRoomX', 
                   'uint16_t', 
                   [param('ns3::Vector3D', 'position')], 
                   is_const=True)
    ## building.h (module 'buildings'): uint16_t ns3::Building::GetRoomY(ns3::Vector position) const [member function]
    cls.add_method('GetRoomY', 
                   'uint16_t', 
                   [param('ns3::Vector3D', 'position')], 
                   is_const=True)
    ## building.h (module 'buildings'): static ns3::TypeId ns3::Building::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## building.h (module 'buildings'): bool ns3::Building::IsInside(ns3::Vector position) const [member function]
    cls.add_method('IsInside', 
                   'bool', 
                   [param('ns3::Vector3D', 'position')], 
                   is_const=True)
    ## building.h (module 'buildings'): bool ns3::Building::IsIntersect(ns3::Vector const & l1, ns3::Vector const & l2) const [member function]
    cls.add_method('IsIntersect', 
                   'bool', 
                   [param('ns3::Vector const &', 'l1'), param('ns3::Vector const &', 'l2')], 
                   is_const=True)
    ## building.h (module 'buildings'): void ns3::Building::SetBoundaries(ns3::Box box) [member function]
    cls.add_method('SetBoundaries', 
                   'void', 
                   [param('ns3::Box', 'box')])
    ## building.h (module 'buildings'): void ns3::Building::SetBuildingType(ns3::Building::BuildingType_t t) [member function]
    cls.add_method('SetBuildingType', 
                   'void', 
                   [param('ns3::Building::BuildingType_t', 't')])
    ## building.h (module 'buildings'): void ns3::Building::SetExtWallsType(ns3::Building::ExtWallsType_t t) [member function]
    cls.add_method('SetExtWallsType', 
                   'void', 
                   [param('ns3::Building::ExtWallsType_t', 't')])
    ## building.h (module 'buildings'): void ns3::Building::SetNFloors(uint16_t nfloors) [member function]
    cls.add_method('SetNFloors', 
                   'void', 
                   [param('uint16_t', 'nfloors')])
    ## building.h (module 'buildings'): void ns3::Building::SetNRoomsX(uint16_t nroomx) [member function]
    cls.add_method('SetNRoomsX', 
                   'void', 
                   [param('uint16_t', 'nroomx')])
    ## building.h (module 'buildings'): void ns3::Building::SetNRoomsY(uint16_t nroomy) [member function]
    cls.add_method('SetNRoomsY', 
                   'void', 
                   [param('uint16_t', 'nroomy')])
    return

def register_Ns3CallbackChecker_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackChecker const &', 'arg0')])
    return

def register_Ns3CallbackImplBase_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImplBase const &', 'arg0')])
    ## callback.h (module 'core'): std::string ns3::CallbackImplBase::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other) const [member function]
    cls.add_method('IsEqual', 
                   'bool', 
                   [param('ns3::Ptr< ns3::CallbackImplBase const >', 'other')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::Demangle(std::string const & mangled) [member function]
    cls.add_method('Demangle', 
                   'std::string', 
                   [param('std::string const &', 'mangled')], 
                   is_static=True, visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::ObjectBase*'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['void'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::Packet> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Address const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::sip::SipHeader const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['bool'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['double'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['unsigned short'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::NetDevice::PacketType'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::Socket> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['unsigned int'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::sip::SipElement::DialogState'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::sip::SipElement::TransactionState'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['char const*'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Address'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::Application const> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::TypeId const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['std::__cxx11::basic_string<char', ' std::char_traits<char>', ' std::allocator<char> > const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::psc::McpttCall> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Time'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['std::__cxx11::basic_string<char', ' std::char_traits<char>', ' std::allocator<char> > '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['unsigned long'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::DlSchedulingCallbackInfo'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['unsigned char'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::MobilityModel const> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::SpectrumPhy const> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::SpectrumSignalParameters> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::PacketBurst const> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::PhyReceptionStatParameters'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::SlPhyReceptionStatParameters'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::LteSpectrumPhy> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::LteUePhy::State'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::PhyTransmissionStatParameters'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['std::vector<int', ' std::allocator<int> > const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::SpectrumValue> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::UeManager::State'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::LteRrcSap::MeasurementReport'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::LteSlDiscHeader'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::LteUeRrc::State'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::LteUeRrc> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['std::__cxx11::list<ns3::LteRrcSap::SCellToAddMod', ' std::allocator<ns3::LteRrcSap::SCellToAddMod> > '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::LteUeRrc::SlChangeOfSyncRefStatParameters'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::SeqTsSizeHeader'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::psc::UavMobilityEnergyModel::State'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Vector3D'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::psc::UavMobilityEnergyModel const> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::psc::McpttEntityId const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Time const&'], visibility='protected')
    return

def register_Ns3CallbackValue_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackValue const &', 'arg0')])
    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackBase const & base) [constructor]
    cls.add_constructor([param('ns3::CallbackBase const &', 'base')])
    ## callback.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::CallbackValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackValue::Set(ns3::CallbackBase base) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::CallbackBase', 'base')])
    return

def register_Ns3CcHelper_methods(root_module, cls):
    ## cc-helper.h (module 'lte'): ns3::CcHelper::CcHelper(ns3::CcHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::CcHelper const &', 'arg0')])
    ## cc-helper.h (module 'lte'): ns3::CcHelper::CcHelper() [constructor]
    cls.add_constructor([])
    ## cc-helper.h (module 'lte'): ns3::ComponentCarrier ns3::CcHelper::DoCreateSingleCc(uint16_t ulBandwidth, uint16_t dlBandwidth, uint32_t ulEarfcn, uint32_t dlEarfcn, bool isPrimary) [member function]
    cls.add_method('DoCreateSingleCc', 
                   'ns3::ComponentCarrier', 
                   [param('uint16_t', 'ulBandwidth'), param('uint16_t', 'dlBandwidth'), param('uint32_t', 'ulEarfcn'), param('uint32_t', 'dlEarfcn'), param('bool', 'isPrimary')])
    ## cc-helper.h (module 'lte'): void ns3::CcHelper::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## cc-helper.h (module 'lte'): std::map<unsigned char, ns3::ComponentCarrier, std::less<unsigned char>, std::allocator<std::pair<const unsigned char, ns3::ComponentCarrier>>> ns3::CcHelper::EquallySpacedCcs() [member function]
    cls.add_method('EquallySpacedCcs', 
                   'std::map< unsigned char, ns3::ComponentCarrier >', 
                   [])
    ## cc-helper.h (module 'lte'): uint16_t ns3::CcHelper::GetDlBandwidth() [member function]
    cls.add_method('GetDlBandwidth', 
                   'uint16_t', 
                   [])
    ## cc-helper.h (module 'lte'): uint32_t ns3::CcHelper::GetDlEarfcn() [member function]
    cls.add_method('GetDlEarfcn', 
                   'uint32_t', 
                   [])
    ## cc-helper.h (module 'lte'): uint16_t ns3::CcHelper::GetNumberOfComponentCarriers() [member function]
    cls.add_method('GetNumberOfComponentCarriers', 
                   'uint16_t', 
                   [])
    ## cc-helper.h (module 'lte'): static ns3::TypeId ns3::CcHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## cc-helper.h (module 'lte'): uint16_t ns3::CcHelper::GetUlBandwidth() [member function]
    cls.add_method('GetUlBandwidth', 
                   'uint16_t', 
                   [])
    ## cc-helper.h (module 'lte'): uint32_t ns3::CcHelper::GetUlEarfcn() [member function]
    cls.add_method('GetUlEarfcn', 
                   'uint32_t', 
                   [])
    ## cc-helper.h (module 'lte'): void ns3::CcHelper::SetCcAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetCcAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## cc-helper.h (module 'lte'): void ns3::CcHelper::SetDlBandwidth(uint16_t dlBandwidth) [member function]
    cls.add_method('SetDlBandwidth', 
                   'void', 
                   [param('uint16_t', 'dlBandwidth')])
    ## cc-helper.h (module 'lte'): void ns3::CcHelper::SetDlEarfcn(uint32_t dlEarfcn) [member function]
    cls.add_method('SetDlEarfcn', 
                   'void', 
                   [param('uint32_t', 'dlEarfcn')])
    ## cc-helper.h (module 'lte'): void ns3::CcHelper::SetNumberOfComponentCarriers(uint16_t nCc) [member function]
    cls.add_method('SetNumberOfComponentCarriers', 
                   'void', 
                   [param('uint16_t', 'nCc')])
    ## cc-helper.h (module 'lte'): void ns3::CcHelper::SetUlBandwidth(uint16_t ulBandwidth) [member function]
    cls.add_method('SetUlBandwidth', 
                   'void', 
                   [param('uint16_t', 'ulBandwidth')])
    ## cc-helper.h (module 'lte'): void ns3::CcHelper::SetUlEarfcn(uint32_t ulEarfcn) [member function]
    cls.add_method('SetUlEarfcn', 
                   'void', 
                   [param('uint32_t', 'ulEarfcn')])
    ## cc-helper.h (module 'lte'): void ns3::CcHelper::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3Channel_methods(root_module, cls):
    ## channel.h (module 'network'): ns3::Channel::Channel(ns3::Channel const & arg0) [constructor]
    cls.add_constructor([param('ns3::Channel const &', 'arg0')])
    ## channel.h (module 'network'): ns3::Channel::Channel() [constructor]
    cls.add_constructor([])
    ## channel.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Channel::GetDevice(std::size_t i) const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [param('std::size_t', 'i')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## channel.h (module 'network'): uint32_t ns3::Channel::GetId() const [member function]
    cls.add_method('GetId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## channel.h (module 'network'): std::size_t ns3::Channel::GetNDevices() const [member function]
    cls.add_method('GetNDevices', 
                   'std::size_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## channel.h (module 'network'): static ns3::TypeId ns3::Channel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    return

def register_Ns3ComponentCarrier_methods(root_module, cls):
    ## component-carrier.h (module 'lte'): ns3::ComponentCarrier::ComponentCarrier(ns3::ComponentCarrier const & arg0) [constructor]
    cls.add_constructor([param('ns3::ComponentCarrier const &', 'arg0')])
    ## component-carrier.h (module 'lte'): ns3::ComponentCarrier::ComponentCarrier() [constructor]
    cls.add_constructor([])
    ## component-carrier.h (module 'lte'): void ns3::ComponentCarrier::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## component-carrier.h (module 'lte'): uint32_t ns3::ComponentCarrier::GetCsgId() const [member function]
    cls.add_method('GetCsgId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## component-carrier.h (module 'lte'): bool ns3::ComponentCarrier::GetCsgIndication() const [member function]
    cls.add_method('GetCsgIndication', 
                   'bool', 
                   [], 
                   is_const=True)
    ## component-carrier.h (module 'lte'): uint16_t ns3::ComponentCarrier::GetDlBandwidth() const [member function]
    cls.add_method('GetDlBandwidth', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## component-carrier.h (module 'lte'): uint32_t ns3::ComponentCarrier::GetDlEarfcn() const [member function]
    cls.add_method('GetDlEarfcn', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## component-carrier.h (module 'lte'): static ns3::TypeId ns3::ComponentCarrier::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## component-carrier.h (module 'lte'): uint16_t ns3::ComponentCarrier::GetUlBandwidth() const [member function]
    cls.add_method('GetUlBandwidth', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## component-carrier.h (module 'lte'): uint32_t ns3::ComponentCarrier::GetUlEarfcn() const [member function]
    cls.add_method('GetUlEarfcn', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## component-carrier.h (module 'lte'): bool ns3::ComponentCarrier::IsPrimary() const [member function]
    cls.add_method('IsPrimary', 
                   'bool', 
                   [], 
                   is_const=True)
    ## component-carrier.h (module 'lte'): void ns3::ComponentCarrier::SetAsPrimary(bool primaryCarrier) [member function]
    cls.add_method('SetAsPrimary', 
                   'void', 
                   [param('bool', 'primaryCarrier')])
    ## component-carrier.h (module 'lte'): void ns3::ComponentCarrier::SetCsgId(uint32_t csgId) [member function]
    cls.add_method('SetCsgId', 
                   'void', 
                   [param('uint32_t', 'csgId')])
    ## component-carrier.h (module 'lte'): void ns3::ComponentCarrier::SetCsgIndication(bool csgIndication) [member function]
    cls.add_method('SetCsgIndication', 
                   'void', 
                   [param('bool', 'csgIndication')])
    ## component-carrier.h (module 'lte'): void ns3::ComponentCarrier::SetDlBandwidth(uint16_t bw) [member function]
    cls.add_method('SetDlBandwidth', 
                   'void', 
                   [param('uint16_t', 'bw')], 
                   is_virtual=True)
    ## component-carrier.h (module 'lte'): void ns3::ComponentCarrier::SetDlEarfcn(uint32_t earfcn) [member function]
    cls.add_method('SetDlEarfcn', 
                   'void', 
                   [param('uint32_t', 'earfcn')])
    ## component-carrier.h (module 'lte'): void ns3::ComponentCarrier::SetUlBandwidth(uint16_t bw) [member function]
    cls.add_method('SetUlBandwidth', 
                   'void', 
                   [param('uint16_t', 'bw')], 
                   is_virtual=True)
    ## component-carrier.h (module 'lte'): void ns3::ComponentCarrier::SetUlEarfcn(uint32_t earfcn) [member function]
    cls.add_method('SetUlEarfcn', 
                   'void', 
                   [param('uint32_t', 'earfcn')])
    return

def register_Ns3ComponentCarrierBaseStation_methods(root_module, cls):
    ## component-carrier.h (module 'lte'): ns3::ComponentCarrierBaseStation::ComponentCarrierBaseStation(ns3::ComponentCarrierBaseStation const & arg0) [constructor]
    cls.add_constructor([param('ns3::ComponentCarrierBaseStation const &', 'arg0')])
    ## component-carrier.h (module 'lte'): ns3::ComponentCarrierBaseStation::ComponentCarrierBaseStation() [constructor]
    cls.add_constructor([])
    ## component-carrier.h (module 'lte'): uint16_t ns3::ComponentCarrierBaseStation::GetCellId() [member function]
    cls.add_method('GetCellId', 
                   'uint16_t', 
                   [])
    ## component-carrier.h (module 'lte'): static ns3::TypeId ns3::ComponentCarrierBaseStation::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## component-carrier.h (module 'lte'): void ns3::ComponentCarrierBaseStation::SetCellId(uint16_t cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    return

def register_Ns3ComponentCarrierEnb_methods(root_module, cls):
    ## component-carrier-enb.h (module 'lte'): static ns3::TypeId ns3::ComponentCarrierEnb::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## component-carrier-enb.h (module 'lte'): ns3::ComponentCarrierEnb::ComponentCarrierEnb() [constructor]
    cls.add_constructor([])
    ## component-carrier-enb.h (module 'lte'): void ns3::ComponentCarrierEnb::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## component-carrier-enb.h (module 'lte'): ns3::Ptr<ns3::LteEnbPhy> ns3::ComponentCarrierEnb::GetPhy() [member function]
    cls.add_method('GetPhy', 
                   'ns3::Ptr< ns3::LteEnbPhy >', 
                   [])
    ## component-carrier-enb.h (module 'lte'): ns3::Ptr<ns3::LteEnbMac> ns3::ComponentCarrierEnb::GetMac() [member function]
    cls.add_method('GetMac', 
                   'ns3::Ptr< ns3::LteEnbMac >', 
                   [])
    ## component-carrier-enb.h (module 'lte'): ns3::Ptr<ns3::LteFfrAlgorithm> ns3::ComponentCarrierEnb::GetFfrAlgorithm() [member function]
    cls.add_method('GetFfrAlgorithm', 
                   'ns3::Ptr< ns3::LteFfrAlgorithm >', 
                   [])
    ## component-carrier-enb.h (module 'lte'): ns3::Ptr<ns3::FfMacScheduler> ns3::ComponentCarrierEnb::GetFfMacScheduler() [member function]
    cls.add_method('GetFfMacScheduler', 
                   'ns3::Ptr< ns3::FfMacScheduler >', 
                   [])
    ## component-carrier-enb.h (module 'lte'): void ns3::ComponentCarrierEnb::SetPhy(ns3::Ptr<ns3::LteEnbPhy> s) [member function]
    cls.add_method('SetPhy', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteEnbPhy >', 's')])
    ## component-carrier-enb.h (module 'lte'): void ns3::ComponentCarrierEnb::SetMac(ns3::Ptr<ns3::LteEnbMac> s) [member function]
    cls.add_method('SetMac', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteEnbMac >', 's')])
    ## component-carrier-enb.h (module 'lte'): void ns3::ComponentCarrierEnb::SetFfMacScheduler(ns3::Ptr<ns3::FfMacScheduler> s) [member function]
    cls.add_method('SetFfMacScheduler', 
                   'void', 
                   [param('ns3::Ptr< ns3::FfMacScheduler >', 's')])
    ## component-carrier-enb.h (module 'lte'): void ns3::ComponentCarrierEnb::SetFfrAlgorithm(ns3::Ptr<ns3::LteFfrAlgorithm> s) [member function]
    cls.add_method('SetFfrAlgorithm', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteFfrAlgorithm >', 's')])
    ## component-carrier-enb.h (module 'lte'): ns3::ComponentCarrierEnb::ComponentCarrierEnb(ns3::ComponentCarrierEnb const & arg0) [constructor]
    cls.add_constructor([param('ns3::ComponentCarrierEnb const &', 'arg0')])
    ## component-carrier-enb.h (module 'lte'): void ns3::ComponentCarrierEnb::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3ComponentCarrierUe_methods(root_module, cls):
    ## component-carrier-ue.h (module 'lte'): static ns3::TypeId ns3::ComponentCarrierUe::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## component-carrier-ue.h (module 'lte'): ns3::ComponentCarrierUe::ComponentCarrierUe() [constructor]
    cls.add_constructor([])
    ## component-carrier-ue.h (module 'lte'): void ns3::ComponentCarrierUe::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## component-carrier-ue.h (module 'lte'): ns3::Ptr<ns3::LteUePhy> ns3::ComponentCarrierUe::GetPhy() const [member function]
    cls.add_method('GetPhy', 
                   'ns3::Ptr< ns3::LteUePhy >', 
                   [], 
                   is_const=True)
    ## component-carrier-ue.h (module 'lte'): ns3::Ptr<ns3::LteUeMac> ns3::ComponentCarrierUe::GetMac() const [member function]
    cls.add_method('GetMac', 
                   'ns3::Ptr< ns3::LteUeMac >', 
                   [], 
                   is_const=True)
    ## component-carrier-ue.h (module 'lte'): void ns3::ComponentCarrierUe::SetPhy(ns3::Ptr<ns3::LteUePhy> s) [member function]
    cls.add_method('SetPhy', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteUePhy >', 's')])
    ## component-carrier-ue.h (module 'lte'): void ns3::ComponentCarrierUe::SetMac(ns3::Ptr<ns3::LteUeMac> s) [member function]
    cls.add_method('SetMac', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteUeMac >', 's')])
    ## component-carrier-ue.h (module 'lte'): ns3::ComponentCarrierUe::ComponentCarrierUe(ns3::ComponentCarrierUe const & arg0) [constructor]
    cls.add_constructor([param('ns3::ComponentCarrierUe const &', 'arg0')])
    ## component-carrier-ue.h (module 'lte'): void ns3::ComponentCarrierUe::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3ConstantRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ConstantRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ConstantRandomVariable::ConstantRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ConstantRandomVariable::GetConstant() const [member function]
    cls.add_method('GetConstant', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ConstantRandomVariable::GetValue(double constant) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'constant')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ConstantRandomVariable::GetInteger(uint32_t constant) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'constant')])
    ## random-variable-stream.h (module 'core'): double ns3::ConstantRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ConstantRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3ConstantSpeedPropagationDelayModel_methods(root_module, cls):
    ## propagation-delay-model.h (module 'propagation'): ns3::ConstantSpeedPropagationDelayModel::ConstantSpeedPropagationDelayModel(ns3::ConstantSpeedPropagationDelayModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::ConstantSpeedPropagationDelayModel const &', 'arg0')])
    ## propagation-delay-model.h (module 'propagation'): ns3::ConstantSpeedPropagationDelayModel::ConstantSpeedPropagationDelayModel() [constructor]
    cls.add_constructor([])
    ## propagation-delay-model.h (module 'propagation'): ns3::Time ns3::ConstantSpeedPropagationDelayModel::GetDelay(ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('GetDelay', 
                   'ns3::Time', 
                   [param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_virtual=True)
    ## propagation-delay-model.h (module 'propagation'): double ns3::ConstantSpeedPropagationDelayModel::GetSpeed() const [member function]
    cls.add_method('GetSpeed', 
                   'double', 
                   [], 
                   is_const=True)
    ## propagation-delay-model.h (module 'propagation'): static ns3::TypeId ns3::ConstantSpeedPropagationDelayModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-delay-model.h (module 'propagation'): void ns3::ConstantSpeedPropagationDelayModel::SetSpeed(double speed) [member function]
    cls.add_method('SetSpeed', 
                   'void', 
                   [param('double', 'speed')])
    ## propagation-delay-model.h (module 'propagation'): int64_t ns3::ConstantSpeedPropagationDelayModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3DataCalculator_methods(root_module, cls):
    ## data-calculator.h (module 'stats'): ns3::DataCalculator::DataCalculator(ns3::DataCalculator const & arg0) [constructor]
    cls.add_constructor([param('ns3::DataCalculator const &', 'arg0')])
    ## data-calculator.h (module 'stats'): ns3::DataCalculator::DataCalculator() [constructor]
    cls.add_constructor([])
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::Disable() [member function]
    cls.add_method('Disable', 
                   'void', 
                   [])
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::Enable() [member function]
    cls.add_method('Enable', 
                   'void', 
                   [])
    ## data-calculator.h (module 'stats'): std::string ns3::DataCalculator::GetContext() const [member function]
    cls.add_method('GetContext', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## data-calculator.h (module 'stats'): bool ns3::DataCalculator::GetEnabled() const [member function]
    cls.add_method('GetEnabled', 
                   'bool', 
                   [], 
                   is_const=True)
    ## data-calculator.h (module 'stats'): std::string ns3::DataCalculator::GetKey() const [member function]
    cls.add_method('GetKey', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## data-calculator.h (module 'stats'): static ns3::TypeId ns3::DataCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::Output(ns3::DataOutputCallback & callback) const [member function]
    cls.add_method('Output', 
                   'void', 
                   [param('ns3::DataOutputCallback &', 'callback')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::SetContext(std::string const context) [member function]
    cls.add_method('SetContext', 
                   'void', 
                   [param('std::string const', 'context')])
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::SetKey(std::string const key) [member function]
    cls.add_method('SetKey', 
                   'void', 
                   [param('std::string const', 'key')])
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::Start(ns3::Time const & startTime) [member function]
    cls.add_method('Start', 
                   'void', 
                   [param('ns3::Time const &', 'startTime')], 
                   is_virtual=True)
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::Stop(ns3::Time const & stopTime) [member function]
    cls.add_method('Stop', 
                   'void', 
                   [param('ns3::Time const &', 'stopTime')], 
                   is_virtual=True)
    ## data-calculator.h (module 'stats'): void ns3::DataCalculator::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3DataOutputInterface_methods(root_module, cls):
    ## data-output-interface.h (module 'stats'): ns3::DataOutputInterface::DataOutputInterface(ns3::DataOutputInterface const & arg0) [constructor]
    cls.add_constructor([param('ns3::DataOutputInterface const &', 'arg0')])
    ## data-output-interface.h (module 'stats'): ns3::DataOutputInterface::DataOutputInterface() [constructor]
    cls.add_constructor([])
    ## data-output-interface.h (module 'stats'): std::string ns3::DataOutputInterface::GetFilePrefix() const [member function]
    cls.add_method('GetFilePrefix', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## data-output-interface.h (module 'stats'): static ns3::TypeId ns3::DataOutputInterface::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputInterface::Output(ns3::DataCollector & dc) [member function]
    cls.add_method('Output', 
                   'void', 
                   [param('ns3::DataCollector &', 'dc')], 
                   is_pure_virtual=True, is_virtual=True)
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputInterface::SetFilePrefix(std::string const prefix) [member function]
    cls.add_method('SetFilePrefix', 
                   'void', 
                   [param('std::string const', 'prefix')])
    ## data-output-interface.h (module 'stats'): void ns3::DataOutputInterface::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3DataRateChecker_methods(root_module, cls):
    ## data-rate.h (module 'network'): ns3::DataRateChecker::DataRateChecker() [constructor]
    cls.add_constructor([])
    ## data-rate.h (module 'network'): ns3::DataRateChecker::DataRateChecker(ns3::DataRateChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::DataRateChecker const &', 'arg0')])
    return

def register_Ns3DataRateValue_methods(root_module, cls):
    ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue() [constructor]
    cls.add_constructor([])
    ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue(ns3::DataRate const & value) [constructor]
    cls.add_constructor([param('ns3::DataRate const &', 'value')])
    ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue(ns3::DataRateValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::DataRateValue const &', 'arg0')])
    ## data-rate.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::DataRateValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## data-rate.h (module 'network'): bool ns3::DataRateValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## data-rate.h (module 'network'): ns3::DataRate ns3::DataRateValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::DataRate', 
                   [], 
                   is_const=True)
    ## data-rate.h (module 'network'): std::string ns3::DataRateValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## data-rate.h (module 'network'): void ns3::DataRateValue::Set(ns3::DataRate const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::DataRate const &', 'value')])
    return

def register_Ns3DeterministicRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::DeterministicRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::DeterministicRandomVariable::DeterministicRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): void ns3::DeterministicRandomVariable::SetValueArray(double * values, std::size_t length) [member function]
    cls.add_method('SetValueArray', 
                   'void', 
                   [param('double *', 'values'), param('std::size_t', 'length')])
    ## random-variable-stream.h (module 'core'): double ns3::DeterministicRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::DeterministicRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3DeviceEnergyModel_methods(root_module, cls):
    ## device-energy-model.h (module 'energy'): ns3::DeviceEnergyModel::DeviceEnergyModel(ns3::DeviceEnergyModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::DeviceEnergyModel const &', 'arg0')])
    ## device-energy-model.h (module 'energy'): ns3::DeviceEnergyModel::DeviceEnergyModel() [constructor]
    cls.add_constructor([])
    ## device-energy-model.h (module 'energy'): void ns3::DeviceEnergyModel::ChangeState(int newState) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('int', 'newState')], 
                   is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): double ns3::DeviceEnergyModel::GetCurrentA() const [member function]
    cls.add_method('GetCurrentA', 
                   'double', 
                   [], 
                   is_const=True)
    ## device-energy-model.h (module 'energy'): double ns3::DeviceEnergyModel::GetTotalEnergyConsumption() const [member function]
    cls.add_method('GetTotalEnergyConsumption', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): static ns3::TypeId ns3::DeviceEnergyModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## device-energy-model.h (module 'energy'): void ns3::DeviceEnergyModel::HandleEnergyChanged() [member function]
    cls.add_method('HandleEnergyChanged', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): void ns3::DeviceEnergyModel::HandleEnergyDepletion() [member function]
    cls.add_method('HandleEnergyDepletion', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): void ns3::DeviceEnergyModel::HandleEnergyRecharged() [member function]
    cls.add_method('HandleEnergyRecharged', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): void ns3::DeviceEnergyModel::SetEnergySource(ns3::Ptr<ns3::EnergySource> source) [member function]
    cls.add_method('SetEnergySource', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): double ns3::DeviceEnergyModel::DoGetCurrentA() const [member function]
    cls.add_method('DoGetCurrentA', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3DirectCommunicationAccept_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationAccept::DirectCommunicationAccept(ns3::DirectCommunicationAccept const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectCommunicationAccept const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationAccept::DirectCommunicationAccept() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationAccept::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectCommunicationAccept::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationAccept::GetIpAddressConfig() [member function]
    cls.add_method('GetIpAddressConfig', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectCommunicationAccept::GetLinkLocalIpv6Address() [member function]
    cls.add_method('GetLinkLocalIpv6Address', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationAccept::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectCommunicationAccept::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationAccept::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectCommunicationAccept::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationAccept::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationAccept::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationAccept::SetIpAddressConfig(uint8_t ipAddressConfig) [member function]
    cls.add_method('SetIpAddressConfig', 
                   'void', 
                   [param('uint8_t', 'ipAddressConfig')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationAccept::SetLinkLocalIpv6Address(std::vector<unsigned char, std::allocator<unsigned char>> linkLocalIpv6Address) [member function]
    cls.add_method('SetLinkLocalIpv6Address', 
                   'void', 
                   [param('std::vector< unsigned char >', 'linkLocalIpv6Address')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationAccept::SetParameters(uint8_t ipAddressConfig, std::vector<unsigned char, std::allocator<unsigned char>> linkLocalIpv6Address) [member function]
    cls.add_method('SetParameters', 
                   'void', 
                   [param('uint8_t', 'ipAddressConfig'), param('std::vector< unsigned char >', 'linkLocalIpv6Address')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationAccept::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3DirectCommunicationKeepalive_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationKeepalive::DirectCommunicationKeepalive(ns3::DirectCommunicationKeepalive const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectCommunicationKeepalive const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationKeepalive::DirectCommunicationKeepalive() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationKeepalive::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectCommunicationKeepalive::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationKeepalive::GetKeepaliveCounter() [member function]
    cls.add_method('GetKeepaliveCounter', 
                   'uint32_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationKeepalive::GetMaximumInactivityPeriod() [member function]
    cls.add_method('GetMaximumInactivityPeriod', 
                   'uint32_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationKeepalive::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectCommunicationKeepalive::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationKeepalive::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectCommunicationKeepalive::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationKeepalive::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationKeepalive::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationKeepalive::SetKeepaliveCounter(uint32_t keepaliveCounter) [member function]
    cls.add_method('SetKeepaliveCounter', 
                   'void', 
                   [param('uint32_t', 'keepaliveCounter')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationKeepalive::SetMaximumInactivityPeriod(uint32_t maxInactivityPeriod) [member function]
    cls.add_method('SetMaximumInactivityPeriod', 
                   'void', 
                   [param('uint32_t', 'maxInactivityPeriod')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationKeepalive::SetParameters(uint32_t keepaliveCounter, uint32_t maxInactivityPeriod) [member function]
    cls.add_method('SetParameters', 
                   'void', 
                   [param('uint32_t', 'keepaliveCounter'), param('uint32_t', 'maxInactivityPeriod')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationKeepalive::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3DirectCommunicationKeepaliveAck_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationKeepaliveAck::DirectCommunicationKeepaliveAck(ns3::DirectCommunicationKeepaliveAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectCommunicationKeepaliveAck const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationKeepaliveAck::DirectCommunicationKeepaliveAck() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationKeepaliveAck::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectCommunicationKeepaliveAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationKeepaliveAck::GetKeepaliveCounter() [member function]
    cls.add_method('GetKeepaliveCounter', 
                   'uint32_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationKeepaliveAck::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectCommunicationKeepaliveAck::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationKeepaliveAck::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectCommunicationKeepaliveAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationKeepaliveAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationKeepaliveAck::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationKeepaliveAck::SetKeepaliveCounter(uint32_t keepaliveCounter) [member function]
    cls.add_method('SetKeepaliveCounter', 
                   'void', 
                   [param('uint32_t', 'keepaliveCounter')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationKeepaliveAck::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3DirectCommunicationReject_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationReject::DirectCommunicationReject(ns3::DirectCommunicationReject const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectCommunicationReject const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationReject::DirectCommunicationReject() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationReject::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectCommunicationReject::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationReject::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationReject::GetPc5SignallingCauseValue() [member function]
    cls.add_method('GetPc5SignallingCauseValue', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectCommunicationReject::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationReject::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectCommunicationReject::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationReject::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationReject::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationReject::SetPc5SignallingCauseValue(uint8_t pc5SignallingCauseValue) [member function]
    cls.add_method('SetPc5SignallingCauseValue', 
                   'void', 
                   [param('uint8_t', 'pc5SignallingCauseValue')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationReject::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3DirectCommunicationRelease_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationRelease::DirectCommunicationRelease(ns3::DirectCommunicationRelease const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectCommunicationRelease const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationRelease::DirectCommunicationRelease() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationRelease::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectCommunicationRelease::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationRelease::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationRelease::GetReleaseReason() [member function]
    cls.add_method('GetReleaseReason', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectCommunicationRelease::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationRelease::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectCommunicationRelease::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRelease::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRelease::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRelease::SetReleaseReason(uint8_t releaseReason) [member function]
    cls.add_method('SetReleaseReason', 
                   'void', 
                   [param('uint8_t', 'releaseReason')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRelease::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3DirectCommunicationReleaseAccept_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationReleaseAccept::DirectCommunicationReleaseAccept(ns3::DirectCommunicationReleaseAccept const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectCommunicationReleaseAccept const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationReleaseAccept::DirectCommunicationReleaseAccept() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationReleaseAccept::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectCommunicationReleaseAccept::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationReleaseAccept::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectCommunicationReleaseAccept::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationReleaseAccept::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectCommunicationReleaseAccept::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationReleaseAccept::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationReleaseAccept::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationReleaseAccept::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3DirectCommunicationRequest_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationRequest::DirectCommunicationRequest(ns3::DirectCommunicationRequest const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectCommunicationRequest const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectCommunicationRequest::DirectCommunicationRequest() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationRequest::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint64_t ns3::DirectCommunicationRequest::GetImsi() [member function]
    cls.add_method('GetImsi', 
                   'uint64_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectCommunicationRequest::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationRequest::GetIpAddressConfig() [member function]
    cls.add_method('GetIpAddressConfig', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationRequest::GetKdId() [member function]
    cls.add_method('GetKdId', 
                   'uint32_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectCommunicationRequest::GetLinkLocalIpv6Address() [member function]
    cls.add_method('GetLinkLocalIpv6Address', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationRequest::GetMaximumInactivityPeriod() [member function]
    cls.add_method('GetMaximumInactivityPeriod', 
                   'uint32_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationRequest::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationRequest::GetMsbKdId() [member function]
    cls.add_method('GetMsbKdId', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectCommunicationRequest::GetNonce1() [member function]
    cls.add_method('GetNonce1', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationRequest::GetRelayServiceCode() [member function]
    cls.add_method('GetRelayServiceCode', 
                   'uint32_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectCommunicationRequest::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectCommunicationRequest::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectCommunicationRequest::GetSignature() [member function]
    cls.add_method('GetSignature', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectCommunicationRequest::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectCommunicationRequest::GetUeSecurityCapabilities() [member function]
    cls.add_method('GetUeSecurityCapabilities', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint64_t ns3::DirectCommunicationRequest::GetUserInfo() [member function]
    cls.add_method('GetUserInfo', 
                   'uint64_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectCommunicationRequest::GetUserInfoType() [member function]
    cls.add_method('GetUserInfoType', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetImsi(uint64_t imsi) [member function]
    cls.add_method('SetImsi', 
                   'void', 
                   [param('uint64_t', 'imsi')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetIpAddressConfig(uint8_t ipAddressConfig) [member function]
    cls.add_method('SetIpAddressConfig', 
                   'void', 
                   [param('uint8_t', 'ipAddressConfig')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetKdId(uint32_t kdId) [member function]
    cls.add_method('SetKdId', 
                   'void', 
                   [param('uint32_t', 'kdId')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetLinkLocalIpv6Address(std::vector<unsigned char, std::allocator<unsigned char>> linkLocalIpv6Address) [member function]
    cls.add_method('SetLinkLocalIpv6Address', 
                   'void', 
                   [param('std::vector< unsigned char >', 'linkLocalIpv6Address')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetMaximumInactivityPeriod(uint32_t maxInactivityPeriod) [member function]
    cls.add_method('SetMaximumInactivityPeriod', 
                   'void', 
                   [param('uint32_t', 'maxInactivityPeriod')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetMsbKdId(uint8_t msb) [member function]
    cls.add_method('SetMsbKdId', 
                   'void', 
                   [param('uint8_t', 'msb')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetNonce1(std::vector<unsigned char, std::allocator<unsigned char>> nonce1) [member function]
    cls.add_method('SetNonce1', 
                   'void', 
                   [param('std::vector< unsigned char >', 'nonce1')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetParameters(uint8_t userInfoType, uint64_t userInfo, uint8_t ipAddressConfig, uint32_t maxInactivityPeriod, std::vector<unsigned char, std::allocator<unsigned char>> nonce1, uint16_t ueSecurityCapabilities, uint8_t msb, int32_t kdId, uint32_t relayServiceCode, std::vector<unsigned char, std::allocator<unsigned char>> signature, std::vector<unsigned char, std::allocator<unsigned char>> linkLocalIpv6Address) [member function]
    cls.add_method('SetParameters', 
                   'void', 
                   [param('uint8_t', 'userInfoType'), param('uint64_t', 'userInfo'), param('uint8_t', 'ipAddressConfig'), param('uint32_t', 'maxInactivityPeriod'), param('std::vector< unsigned char >', 'nonce1'), param('uint16_t', 'ueSecurityCapabilities'), param('uint8_t', 'msb'), param('int32_t', 'kdId'), param('uint32_t', 'relayServiceCode'), param('std::vector< unsigned char >', 'signature'), param('std::vector< unsigned char >', 'linkLocalIpv6Address')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetRelayServiceCode(uint32_t relayServiceCode) [member function]
    cls.add_method('SetRelayServiceCode', 
                   'void', 
                   [param('uint32_t', 'relayServiceCode')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetSignature(std::vector<unsigned char, std::allocator<unsigned char>> signature) [member function]
    cls.add_method('SetSignature', 
                   'void', 
                   [param('std::vector< unsigned char >', 'signature')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetUeSecurityCapabilities(uint16_t ueSecurityCapabilities) [member function]
    cls.add_method('SetUeSecurityCapabilities', 
                   'void', 
                   [param('uint16_t', 'ueSecurityCapabilities')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectCommunicationRequest::SetUserInfo(uint8_t userInfoType, uint64_t userInfo) [member function]
    cls.add_method('SetUserInfo', 
                   'void', 
                   [param('uint8_t', 'userInfoType'), param('uint64_t', 'userInfo')])
    return

def register_Ns3DirectRekeyingRequest_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectRekeyingRequest::DirectRekeyingRequest(ns3::DirectRekeyingRequest const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectRekeyingRequest const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectRekeyingRequest::DirectRekeyingRequest() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectRekeyingRequest::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectRekeyingRequest::GetAuthFlag() [member function]
    cls.add_method('GetAuthFlag', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectRekeyingRequest::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectRekeyingRequest::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectRekeyingRequest::GetMsb() [member function]
    cls.add_method('GetMsb', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectRekeyingRequest::GetNonce1() [member function]
    cls.add_method('GetNonce1', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectRekeyingRequest::GetPrukId() [member function]
    cls.add_method('GetPrukId', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectRekeyingRequest::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectRekeyingRequest::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectRekeyingRequest::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectRekeyingRequest::GetUeSecurityCapabilities() [member function]
    cls.add_method('GetUeSecurityCapabilities', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingRequest::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingRequest::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingRequest::SetAuthFlag(uint8_t authFlag) [member function]
    cls.add_method('SetAuthFlag', 
                   'void', 
                   [param('uint8_t', 'authFlag')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingRequest::SetMsb(uint8_t msb) [member function]
    cls.add_method('SetMsb', 
                   'void', 
                   [param('uint8_t', 'msb')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingRequest::SetNonce1(std::vector<unsigned char, std::allocator<unsigned char>> nonce1) [member function]
    cls.add_method('SetNonce1', 
                   'void', 
                   [param('std::vector< unsigned char >', 'nonce1')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingRequest::SetParameters(uint16_t ueSecurityCapabilities, std::vector<unsigned char, std::allocator<unsigned char>> nonce1, uint8_t msb, uint8_t authFlag, std::vector<unsigned char, std::allocator<unsigned char>> prukId) [member function]
    cls.add_method('SetParameters', 
                   'void', 
                   [param('uint16_t', 'ueSecurityCapabilities'), param('std::vector< unsigned char >', 'nonce1'), param('uint8_t', 'msb'), param('uint8_t', 'authFlag'), param('std::vector< unsigned char >', 'prukId')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingRequest::SetPrukId(std::vector<unsigned char, std::allocator<unsigned char>> prukId) [member function]
    cls.add_method('SetPrukId', 
                   'void', 
                   [param('std::vector< unsigned char >', 'prukId')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingRequest::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingRequest::SetUeSecurityCapabilities(uint16_t ueSecurityCapabilities) [member function]
    cls.add_method('SetUeSecurityCapabilities', 
                   'void', 
                   [param('uint16_t', 'ueSecurityCapabilities')])
    return

def register_Ns3DirectRekeyingResponse_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectRekeyingResponse::DirectRekeyingResponse(ns3::DirectRekeyingResponse const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectRekeyingResponse const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectRekeyingResponse::DirectRekeyingResponse() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectRekeyingResponse::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectRekeyingResponse::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectRekeyingResponse::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectRekeyingResponse::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectRekeyingResponse::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectRekeyingResponse::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingResponse::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingResponse::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingResponse::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3DirectRekeyingTrigger_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectRekeyingTrigger::DirectRekeyingTrigger(ns3::DirectRekeyingTrigger const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectRekeyingTrigger const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectRekeyingTrigger::DirectRekeyingTrigger() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectRekeyingTrigger::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectRekeyingTrigger::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectRekeyingTrigger::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectRekeyingTrigger::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectRekeyingTrigger::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectRekeyingTrigger::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingTrigger::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingTrigger::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectRekeyingTrigger::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3DirectSecurityModeCommand_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectSecurityModeCommand::DirectSecurityModeCommand(ns3::DirectSecurityModeCommand const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectSecurityModeCommand const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectSecurityModeCommand::DirectSecurityModeCommand() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectSecurityModeCommand::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectSecurityModeCommand::GetChosenAlgorithmsCyphering() [member function]
    cls.add_method('GetChosenAlgorithmsCyphering', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectSecurityModeCommand::GetChosenAlgorithmsIntegrity() [member function]
    cls.add_method('GetChosenAlgorithmsIntegrity', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectSecurityModeCommand::GetEncryptedPayload() [member function]
    cls.add_method('GetEncryptedPayload', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectSecurityModeCommand::GetGpi() [member function]
    cls.add_method('GetGpi', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectSecurityModeCommand::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectSecurityModeCommand::GetKdFreshness() [member function]
    cls.add_method('GetKdFreshness', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectSecurityModeCommand::GetLsb() [member function]
    cls.add_method('GetLsb', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectSecurityModeCommand::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectSecurityModeCommand::GetMsb() [member function]
    cls.add_method('GetMsb', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectSecurityModeCommand::GetNonce2() [member function]
    cls.add_method('GetNonce2', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectSecurityModeCommand::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectSecurityModeCommand::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectSecurityModeCommand::GetSignature() [member function]
    cls.add_method('GetSignature', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectSecurityModeCommand::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectSecurityModeCommand::GetUeSecurityCapabilities() [member function]
    cls.add_method('GetUeSecurityCapabilities', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint64_t ns3::DirectSecurityModeCommand::GetUserInfo() [member function]
    cls.add_method('GetUserInfo', 
                   'uint64_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectSecurityModeCommand::GetUserInfoType() [member function]
    cls.add_method('GetUserInfoType', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetChosenAlgorithms(uint8_t chosenAlgorithmsIntegrity, uint8_t chosenalgorithmsCyphering) [member function]
    cls.add_method('SetChosenAlgorithms', 
                   'void', 
                   [param('uint8_t', 'chosenAlgorithmsIntegrity'), param('uint8_t', 'chosenalgorithmsCyphering')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetEncryptedPayload(std::vector<unsigned char, std::allocator<unsigned char>> encryptedPayload) [member function]
    cls.add_method('SetEncryptedPayload', 
                   'void', 
                   [param('std::vector< unsigned char >', 'encryptedPayload')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetGpi(std::vector<unsigned char, std::allocator<unsigned char>> gpi) [member function]
    cls.add_method('SetGpi', 
                   'void', 
                   [param('std::vector< unsigned char >', 'gpi')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetKdFreshness(std::vector<unsigned char, std::allocator<unsigned char>> kdFreshness) [member function]
    cls.add_method('SetKdFreshness', 
                   'void', 
                   [param('std::vector< unsigned char >', 'kdFreshness')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetLsb(uint8_t lsb) [member function]
    cls.add_method('SetLsb', 
                   'void', 
                   [param('uint8_t', 'lsb')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetMsb(uint16_t msb) [member function]
    cls.add_method('SetMsb', 
                   'void', 
                   [param('uint16_t', 'msb')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetNonce2(std::vector<unsigned char, std::allocator<unsigned char>> nonce2) [member function]
    cls.add_method('SetNonce2', 
                   'void', 
                   [param('std::vector< unsigned char >', 'nonce2')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetParameters(uint16_t ueSecurityCapabilities, std::vector<unsigned char, std::allocator<unsigned char>> nonce2, uint8_t chosenAlgorithmsIntegrity, uint8_t chosenAlgorithmCyphering, uint8_t lsb, uint16_t msb, std::vector<unsigned char, std::allocator<unsigned char>> kdFreshness, std::vector<unsigned char, std::allocator<unsigned char>> gpi, uint8_t userInfoType, uint64_t userInfo, std::vector<unsigned char, std::allocator<unsigned char>> signature, std::vector<unsigned char, std::allocator<unsigned char>> encryptedPayload) [member function]
    cls.add_method('SetParameters', 
                   'void', 
                   [param('uint16_t', 'ueSecurityCapabilities'), param('std::vector< unsigned char >', 'nonce2'), param('uint8_t', 'chosenAlgorithmsIntegrity'), param('uint8_t', 'chosenAlgorithmCyphering'), param('uint8_t', 'lsb'), param('uint16_t', 'msb'), param('std::vector< unsigned char >', 'kdFreshness'), param('std::vector< unsigned char >', 'gpi'), param('uint8_t', 'userInfoType'), param('uint64_t', 'userInfo'), param('std::vector< unsigned char >', 'signature'), param('std::vector< unsigned char >', 'encryptedPayload')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetSignature(std::vector<unsigned char, std::allocator<unsigned char>> signature) [member function]
    cls.add_method('SetSignature', 
                   'void', 
                   [param('std::vector< unsigned char >', 'signature')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetUeSecurityCapabilities(uint16_t ueSecurityCapabilities) [member function]
    cls.add_method('SetUeSecurityCapabilities', 
                   'void', 
                   [param('uint16_t', 'ueSecurityCapabilities')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeCommand::SetUserInfo(uint8_t userInfoType, uint64_t userInfo) [member function]
    cls.add_method('SetUserInfo', 
                   'void', 
                   [param('uint8_t', 'userInfoType'), param('uint64_t', 'userInfo')])
    return

def register_Ns3DirectSecurityModeComplete_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectSecurityModeComplete::DirectSecurityModeComplete(ns3::DirectSecurityModeComplete const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectSecurityModeComplete const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectSecurityModeComplete::DirectSecurityModeComplete() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectSecurityModeComplete::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectSecurityModeComplete::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectSecurityModeComplete::GetLsb() [member function]
    cls.add_method('GetLsb', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectSecurityModeComplete::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectSecurityModeComplete::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectSecurityModeComplete::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectSecurityModeComplete::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeComplete::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeComplete::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeComplete::SetLsb(uint16_t lsb) [member function]
    cls.add_method('SetLsb', 
                   'void', 
                   [param('uint16_t', 'lsb')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeComplete::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3DirectSecurityModeReject_methods(root_module, cls):
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectSecurityModeReject::DirectSecurityModeReject(ns3::DirectSecurityModeReject const & arg0) [constructor]
    cls.add_constructor([param('ns3::DirectSecurityModeReject const &', 'arg0')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::DirectSecurityModeReject::DirectSecurityModeReject() [constructor]
    cls.add_constructor([])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectSecurityModeReject::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectSecurityModeReject::GetAuts() [member function]
    cls.add_method('GetAuts', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): ns3::TypeId ns3::DirectSecurityModeReject::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectSecurityModeReject::GetMessageIdentifier() [member function]
    cls.add_method('GetMessageIdentifier', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint8_t ns3::DirectSecurityModeReject::GetPc5SignallingCauseValue() [member function]
    cls.add_method('GetPc5SignallingCauseValue', 
                   'uint8_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::DirectSecurityModeReject::GetRand() [member function]
    cls.add_method('GetRand', 
                   'std::vector< unsigned char >', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint16_t ns3::DirectSecurityModeReject::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint16_t', 
                   [])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): uint32_t ns3::DirectSecurityModeReject::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): static ns3::TypeId ns3::DirectSecurityModeReject::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeReject::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeReject::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeReject::SetAuts(std::vector<unsigned char, std::allocator<unsigned char>> auts) [member function]
    cls.add_method('SetAuts', 
                   'void', 
                   [param('std::vector< unsigned char >', 'auts')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeReject::SetPc5SignallingCauseValue(uint8_t pc5SignallingCauseValue) [member function]
    cls.add_method('SetPc5SignallingCauseValue', 
                   'void', 
                   [param('uint8_t', 'pc5SignallingCauseValue')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeReject::SetRand(std::vector<unsigned char, std::allocator<unsigned char>> rand) [member function]
    cls.add_method('SetRand', 
                   'void', 
                   [param('std::vector< unsigned char >', 'rand')])
    ## lte-sl-pc5-signalling-header.h (module 'lte'): void ns3::DirectSecurityModeReject::SetSequenceNumber(uint32_t seq) [member function]
    cls.add_method('SetSequenceNumber', 
                   'void', 
                   [param('uint32_t', 'seq')])
    return

def register_Ns3DoubleValue_methods(root_module, cls):
    ## double.h (module 'core'): ns3::DoubleValue::DoubleValue() [constructor]
    cls.add_constructor([])
    ## double.h (module 'core'): ns3::DoubleValue::DoubleValue(double const & value) [constructor]
    cls.add_constructor([param('double const &', 'value')])
    ## double.h (module 'core'): ns3::DoubleValue::DoubleValue(ns3::DoubleValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::DoubleValue const &', 'arg0')])
    ## double.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::DoubleValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## double.h (module 'core'): bool ns3::DoubleValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## double.h (module 'core'): double ns3::DoubleValue::Get() const [member function]
    cls.add_method('Get', 
                   'double', 
                   [], 
                   is_const=True)
    ## double.h (module 'core'): std::string ns3::DoubleValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## double.h (module 'core'): void ns3::DoubleValue::Set(double const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('double const &', 'value')])
    return

def register_Ns3EmpiricalRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): ns3::EmpiricalRandomVariable::EmpiricalRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): void ns3::EmpiricalRandomVariable::CDF(double v, double c) [member function]
    cls.add_method('CDF', 
                   'void', 
                   [param('double', 'v'), param('double', 'c')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::EmpiricalRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::EmpiricalRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): double ns3::EmpiricalRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): double ns3::EmpiricalRandomVariable::Interpolate() [member function]
    cls.add_method('Interpolate', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): bool ns3::EmpiricalRandomVariable::SetInterpolate(bool interpolate) [member function]
    cls.add_method('SetInterpolate', 
                   'bool', 
                   [param('bool', 'interpolate')])
    return

def register_Ns3EmptyAttributeAccessor_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [constructor]
    cls.add_constructor([param('ns3::EmptyAttributeAccessor const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::Get(ns3::ObjectBase const * object, ns3::AttributeValue & attribute) const [member function]
    cls.add_method('Get', 
                   'bool', 
                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::HasGetter() const [member function]
    cls.add_method('HasGetter', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::HasSetter() const [member function]
    cls.add_method('HasSetter', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::Set(ns3::ObjectBase * object, ns3::AttributeValue const & value) const [member function]
    cls.add_method('Set', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'object'), param('ns3::AttributeValue const &', 'value')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3EmptyAttributeChecker_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::EmptyAttributeChecker const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::Check(ns3::AttributeValue const & value) const [member function]
    cls.add_method('Check', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'value')], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::Copy(ns3::AttributeValue const & source, ns3::AttributeValue & destination) const [member function]
    cls.add_method('Copy', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'source'), param('ns3::AttributeValue &', 'destination')], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EmptyAttributeChecker::Create() const [member function]
    cls.add_method('Create', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeChecker::GetUnderlyingTypeInformation() const [member function]
    cls.add_method('GetUnderlyingTypeInformation', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeChecker::GetValueTypeName() const [member function]
    cls.add_method('GetValueTypeName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::HasUnderlyingTypeInformation() const [member function]
    cls.add_method('HasUnderlyingTypeInformation', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3EmptyAttributeValue_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::EmptyAttributeValue const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EmptyAttributeValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True, visibility='private')
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True, visibility='private')
    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3EnergyHarvester_methods(root_module, cls):
    ## energy-harvester.h (module 'energy'): ns3::EnergyHarvester::EnergyHarvester(ns3::EnergyHarvester const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnergyHarvester const &', 'arg0')])
    ## energy-harvester.h (module 'energy'): ns3::EnergyHarvester::EnergyHarvester() [constructor]
    cls.add_constructor([])
    ## energy-harvester.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::EnergyHarvester::GetEnergySource() const [member function]
    cls.add_method('GetEnergySource', 
                   'ns3::Ptr< ns3::EnergySource >', 
                   [], 
                   is_const=True)
    ## energy-harvester.h (module 'energy'): ns3::Ptr<ns3::Node> ns3::EnergyHarvester::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True)
    ## energy-harvester.h (module 'energy'): double ns3::EnergyHarvester::GetPower() const [member function]
    cls.add_method('GetPower', 
                   'double', 
                   [], 
                   is_const=True)
    ## energy-harvester.h (module 'energy'): static ns3::TypeId ns3::EnergyHarvester::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## energy-harvester.h (module 'energy'): void ns3::EnergyHarvester::SetEnergySource(ns3::Ptr<ns3::EnergySource> source) [member function]
    cls.add_method('SetEnergySource', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergySource >', 'source')])
    ## energy-harvester.h (module 'energy'): void ns3::EnergyHarvester::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## energy-harvester.h (module 'energy'): void ns3::EnergyHarvester::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## energy-harvester.h (module 'energy'): double ns3::EnergyHarvester::DoGetPower() const [member function]
    cls.add_method('DoGetPower', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3EnergySource_methods(root_module, cls):
    ## energy-source.h (module 'energy'): ns3::EnergySource::EnergySource(ns3::EnergySource const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnergySource const &', 'arg0')])
    ## energy-source.h (module 'energy'): ns3::EnergySource::EnergySource() [constructor]
    cls.add_constructor([])
    ## energy-source.h (module 'energy'): void ns3::EnergySource::AppendDeviceEnergyModel(ns3::Ptr<ns3::DeviceEnergyModel> deviceEnergyModelPtr) [member function]
    cls.add_method('AppendDeviceEnergyModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::DeviceEnergyModel >', 'deviceEnergyModelPtr')])
    ## energy-source.h (module 'energy'): void ns3::EnergySource::ConnectEnergyHarvester(ns3::Ptr<ns3::EnergyHarvester> energyHarvesterPtr) [member function]
    cls.add_method('ConnectEnergyHarvester', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergyHarvester >', 'energyHarvesterPtr')])
    ## energy-source.h (module 'energy'): void ns3::EnergySource::DisposeDeviceModels() [member function]
    cls.add_method('DisposeDeviceModels', 
                   'void', 
                   [])
    ## energy-source.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::EnergySource::FindDeviceEnergyModels(ns3::TypeId tid) [member function]
    cls.add_method('FindDeviceEnergyModels', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::TypeId', 'tid')])
    ## energy-source.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::EnergySource::FindDeviceEnergyModels(std::string name) [member function]
    cls.add_method('FindDeviceEnergyModels', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('std::string', 'name')])
    ## energy-source.h (module 'energy'): double ns3::EnergySource::GetEnergyFraction() [member function]
    cls.add_method('GetEnergyFraction', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## energy-source.h (module 'energy'): double ns3::EnergySource::GetInitialEnergy() const [member function]
    cls.add_method('GetInitialEnergy', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## energy-source.h (module 'energy'): ns3::Ptr<ns3::Node> ns3::EnergySource::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True)
    ## energy-source.h (module 'energy'): double ns3::EnergySource::GetRemainingEnergy() [member function]
    cls.add_method('GetRemainingEnergy', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## energy-source.h (module 'energy'): double ns3::EnergySource::GetSupplyVoltage() const [member function]
    cls.add_method('GetSupplyVoltage', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## energy-source.h (module 'energy'): static ns3::TypeId ns3::EnergySource::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## energy-source.h (module 'energy'): void ns3::EnergySource::InitializeDeviceModels() [member function]
    cls.add_method('InitializeDeviceModels', 
                   'void', 
                   [])
    ## energy-source.h (module 'energy'): void ns3::EnergySource::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## energy-source.h (module 'energy'): void ns3::EnergySource::UpdateEnergySource() [member function]
    cls.add_method('UpdateEnergySource', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## energy-source.h (module 'energy'): void ns3::EnergySource::BreakDeviceEnergyModelRefCycle() [member function]
    cls.add_method('BreakDeviceEnergyModelRefCycle', 
                   'void', 
                   [], 
                   visibility='protected')
    ## energy-source.h (module 'energy'): double ns3::EnergySource::CalculateTotalCurrent() [member function]
    cls.add_method('CalculateTotalCurrent', 
                   'double', 
                   [], 
                   visibility='protected')
    ## energy-source.h (module 'energy'): void ns3::EnergySource::NotifyEnergyChanged() [member function]
    cls.add_method('NotifyEnergyChanged', 
                   'void', 
                   [], 
                   visibility='protected')
    ## energy-source.h (module 'energy'): void ns3::EnergySource::NotifyEnergyDrained() [member function]
    cls.add_method('NotifyEnergyDrained', 
                   'void', 
                   [], 
                   visibility='protected')
    ## energy-source.h (module 'energy'): void ns3::EnergySource::NotifyEnergyRecharged() [member function]
    cls.add_method('NotifyEnergyRecharged', 
                   'void', 
                   [], 
                   visibility='protected')
    ## energy-source.h (module 'energy'): void ns3::EnergySource::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3EnergySourceContainer_methods(root_module, cls):
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::EnergySourceContainer(ns3::EnergySourceContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnergySourceContainer const &', 'arg0')])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::EnergySourceContainer() [constructor]
    cls.add_constructor([])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::EnergySourceContainer(ns3::Ptr<ns3::EnergySource> source) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::EnergySource >', 'source')])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::EnergySourceContainer(std::string sourceName) [constructor]
    cls.add_constructor([param('std::string', 'sourceName')])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::EnergySourceContainer(ns3::EnergySourceContainer const & a, ns3::EnergySourceContainer const & b) [constructor]
    cls.add_constructor([param('ns3::EnergySourceContainer const &', 'a'), param('ns3::EnergySourceContainer const &', 'b')])
    ## energy-source-container.h (module 'energy'): void ns3::EnergySourceContainer::Add(ns3::EnergySourceContainer container) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::EnergySourceContainer', 'container')])
    ## energy-source-container.h (module 'energy'): void ns3::EnergySourceContainer::Add(ns3::Ptr<ns3::EnergySource> source) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergySource >', 'source')])
    ## energy-source-container.h (module 'energy'): void ns3::EnergySourceContainer::Add(std::string sourceName) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'sourceName')])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::Iterator ns3::EnergySourceContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::EnergySourceContainer::Iterator', 
                   [], 
                   is_const=True)
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::Iterator ns3::EnergySourceContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::EnergySourceContainer::Iterator', 
                   [], 
                   is_const=True)
    ## energy-source-container.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::EnergySourceContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::EnergySource >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## energy-source-container.h (module 'energy'): uint32_t ns3::EnergySourceContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## energy-source-container.h (module 'energy'): static ns3::TypeId ns3::EnergySourceContainer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## energy-source-container.h (module 'energy'): void ns3::EnergySourceContainer::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## energy-source-container.h (module 'energy'): void ns3::EnergySourceContainer::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3EnumChecker_methods(root_module, cls):
    ## enum.h (module 'core'): ns3::EnumChecker::EnumChecker(ns3::EnumChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnumChecker const &', 'arg0')])
    ## enum.h (module 'core'): ns3::EnumChecker::EnumChecker() [constructor]
    cls.add_constructor([])
    ## enum.h (module 'core'): void ns3::EnumChecker::Add(int value, std::string name) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('int', 'value'), param('std::string', 'name')])
    ## enum.h (module 'core'): void ns3::EnumChecker::AddDefault(int value, std::string name) [member function]
    cls.add_method('AddDefault', 
                   'void', 
                   [param('int', 'value'), param('std::string', 'name')])
    ## enum.h (module 'core'): bool ns3::EnumChecker::Check(ns3::AttributeValue const & value) const [member function]
    cls.add_method('Check', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'value')], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): bool ns3::EnumChecker::Copy(ns3::AttributeValue const & src, ns3::AttributeValue & dst) const [member function]
    cls.add_method('Copy', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'src'), param('ns3::AttributeValue &', 'dst')], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EnumChecker::Create() const [member function]
    cls.add_method('Create', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): std::string ns3::EnumChecker::GetName(int value) const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [param('int', 'value')], 
                   is_const=True)
    ## enum.h (module 'core'): std::string ns3::EnumChecker::GetUnderlyingTypeInformation() const [member function]
    cls.add_method('GetUnderlyingTypeInformation', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): int ns3::EnumChecker::GetValue(std::string const name) const [member function]
    cls.add_method('GetValue', 
                   'int', 
                   [param('std::string const', 'name')], 
                   is_const=True)
    ## enum.h (module 'core'): std::string ns3::EnumChecker::GetValueTypeName() const [member function]
    cls.add_method('GetValueTypeName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): bool ns3::EnumChecker::HasUnderlyingTypeInformation() const [member function]
    cls.add_method('HasUnderlyingTypeInformation', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3EnumValue_methods(root_module, cls):
    ## enum.h (module 'core'): ns3::EnumValue::EnumValue(ns3::EnumValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnumValue const &', 'arg0')])
    ## enum.h (module 'core'): ns3::EnumValue::EnumValue() [constructor]
    cls.add_constructor([])
    ## enum.h (module 'core'): ns3::EnumValue::EnumValue(int value) [constructor]
    cls.add_constructor([param('int', 'value')])
    ## enum.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EnumValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): bool ns3::EnumValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## enum.h (module 'core'): int ns3::EnumValue::Get() const [member function]
    cls.add_method('Get', 
                   'int', 
                   [], 
                   is_const=True)
    ## enum.h (module 'core'): std::string ns3::EnumValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): void ns3::EnumValue::Set(int value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('int', 'value')])
    return

def register_Ns3EpcTft_methods(root_module, cls):
    ## epc-tft.h (module 'lte'): ns3::EpcTft::EpcTft(ns3::EpcTft const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcTft const &', 'arg0')])
    ## epc-tft.h (module 'lte'): ns3::EpcTft::EpcTft() [constructor]
    cls.add_constructor([])
    ## epc-tft.h (module 'lte'): uint8_t ns3::EpcTft::Add(ns3::EpcTft::PacketFilter f) [member function]
    cls.add_method('Add', 
                   'uint8_t', 
                   [param('ns3::EpcTft::PacketFilter', 'f')])
    ## epc-tft.h (module 'lte'): static ns3::Ptr<ns3::EpcTft> ns3::EpcTft::Default() [member function]
    cls.add_method('Default', 
                   'ns3::Ptr< ns3::EpcTft >', 
                   [], 
                   is_static=True)
    ## epc-tft.h (module 'lte'): std::list<ns3::EpcTft::PacketFilter, std::allocator<ns3::EpcTft::PacketFilter>> ns3::EpcTft::GetPacketFilters() const [member function]
    cls.add_method('GetPacketFilters', 
                   'std::list< ns3::EpcTft::PacketFilter >', 
                   [], 
                   is_const=True)
    ## epc-tft.h (module 'lte'): bool ns3::EpcTft::Matches(ns3::EpcTft::Direction direction, ns3::Ipv4Address remoteAddress, ns3::Ipv4Address localAddress, uint16_t remotePort, uint16_t localPort, uint8_t typeOfService) [member function]
    cls.add_method('Matches', 
                   'bool', 
                   [param('ns3::EpcTft::Direction', 'direction'), param('ns3::Ipv4Address', 'remoteAddress'), param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'remotePort'), param('uint16_t', 'localPort'), param('uint8_t', 'typeOfService')])
    ## epc-tft.h (module 'lte'): bool ns3::EpcTft::Matches(ns3::EpcTft::Direction direction, ns3::Ipv6Address remoteAddress, ns3::Ipv6Address localAddress, uint16_t remotePort, uint16_t localPort, uint8_t typeOfService) [member function]
    cls.add_method('Matches', 
                   'bool', 
                   [param('ns3::EpcTft::Direction', 'direction'), param('ns3::Ipv6Address', 'remoteAddress'), param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'remotePort'), param('uint16_t', 'localPort'), param('uint8_t', 'typeOfService')])
    return

def register_Ns3EpcTftPacketFilter_methods(root_module, cls):
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::PacketFilter(ns3::EpcTft::PacketFilter const & arg0) [constructor]
    cls.add_constructor([param('ns3::EpcTft::PacketFilter const &', 'arg0')])
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::PacketFilter() [constructor]
    cls.add_constructor([])
    ## epc-tft.h (module 'lte'): bool ns3::EpcTft::PacketFilter::Matches(ns3::EpcTft::Direction d, ns3::Ipv4Address ra, ns3::Ipv4Address la, uint16_t rp, uint16_t lp, uint8_t tos) [member function]
    cls.add_method('Matches', 
                   'bool', 
                   [param('ns3::EpcTft::Direction', 'd'), param('ns3::Ipv4Address', 'ra'), param('ns3::Ipv4Address', 'la'), param('uint16_t', 'rp'), param('uint16_t', 'lp'), param('uint8_t', 'tos')])
    ## epc-tft.h (module 'lte'): bool ns3::EpcTft::PacketFilter::Matches(ns3::EpcTft::Direction d, ns3::Ipv6Address ra, ns3::Ipv6Address la, uint16_t rp, uint16_t lp, uint8_t tos) [member function]
    cls.add_method('Matches', 
                   'bool', 
                   [param('ns3::EpcTft::Direction', 'd'), param('ns3::Ipv6Address', 'ra'), param('ns3::Ipv6Address', 'la'), param('uint16_t', 'rp'), param('uint16_t', 'lp'), param('uint8_t', 'tos')])
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::direction [variable]
    cls.add_instance_attribute('direction', 'ns3::EpcTft::Direction', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::localAddress [variable]
    cls.add_instance_attribute('localAddress', 'ns3::Ipv4Address', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::localIpv6Address [variable]
    cls.add_instance_attribute('localIpv6Address', 'ns3::Ipv6Address', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::localIpv6Prefix [variable]
    cls.add_instance_attribute('localIpv6Prefix', 'ns3::Ipv6Prefix', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::localMask [variable]
    cls.add_instance_attribute('localMask', 'ns3::Ipv4Mask', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::localPortEnd [variable]
    cls.add_instance_attribute('localPortEnd', 'uint16_t', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::localPortStart [variable]
    cls.add_instance_attribute('localPortStart', 'uint16_t', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::precedence [variable]
    cls.add_instance_attribute('precedence', 'uint8_t', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::remoteAddress [variable]
    cls.add_instance_attribute('remoteAddress', 'ns3::Ipv4Address', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::remoteIpv6Address [variable]
    cls.add_instance_attribute('remoteIpv6Address', 'ns3::Ipv6Address', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::remoteIpv6Prefix [variable]
    cls.add_instance_attribute('remoteIpv6Prefix', 'ns3::Ipv6Prefix', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::remoteMask [variable]
    cls.add_instance_attribute('remoteMask', 'ns3::Ipv4Mask', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::remotePortEnd [variable]
    cls.add_instance_attribute('remotePortEnd', 'uint16_t', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::remotePortStart [variable]
    cls.add_instance_attribute('remotePortStart', 'uint16_t', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::typeOfService [variable]
    cls.add_instance_attribute('typeOfService', 'uint8_t', is_const=False)
    ## epc-tft.h (module 'lte'): ns3::EpcTft::PacketFilter::typeOfServiceMask [variable]
    cls.add_instance_attribute('typeOfServiceMask', 'uint8_t', is_const=False)
    return

def register_Ns3ErlangRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ErlangRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ErlangRandomVariable::ErlangRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ErlangRandomVariable::GetK() const [member function]
    cls.add_method('GetK', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ErlangRandomVariable::GetLambda() const [member function]
    cls.add_method('GetLambda', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ErlangRandomVariable::GetValue(uint32_t k, double lambda) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('uint32_t', 'k'), param('double', 'lambda')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ErlangRandomVariable::GetInteger(uint32_t k, uint32_t lambda) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'k'), param('uint32_t', 'lambda')])
    ## random-variable-stream.h (module 'core'): double ns3::ErlangRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ErlangRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3EventImpl_methods(root_module, cls):
    ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl(ns3::EventImpl const & arg0) [constructor]
    cls.add_constructor([param('ns3::EventImpl const &', 'arg0')])
    ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl() [constructor]
    cls.add_constructor([])
    ## event-impl.h (module 'core'): void ns3::EventImpl::Cancel() [member function]
    cls.add_method('Cancel', 
                   'void', 
                   [])
    ## event-impl.h (module 'core'): void ns3::EventImpl::Invoke() [member function]
    cls.add_method('Invoke', 
                   'void', 
                   [])
    ## event-impl.h (module 'core'): bool ns3::EventImpl::IsCancelled() [member function]
    cls.add_method('IsCancelled', 
                   'bool', 
                   [])
    ## event-impl.h (module 'core'): void ns3::EventImpl::Notify() [member function]
    cls.add_method('Notify', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True, visibility='protected')
    return

def register_Ns3ExponentialRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ExponentialRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ExponentialRandomVariable::ExponentialRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetMean() const [member function]
    cls.add_method('GetMean', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetValue(double mean, double bound) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mean'), param('double', 'bound')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ExponentialRandomVariable::GetInteger(uint32_t mean, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mean'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ExponentialRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3FixedRssLossModel_methods(root_module, cls):
    ## propagation-loss-model.h (module 'propagation'): static ns3::TypeId ns3::FixedRssLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-loss-model.h (module 'propagation'): ns3::FixedRssLossModel::FixedRssLossModel() [constructor]
    cls.add_constructor([])
    ## propagation-loss-model.h (module 'propagation'): void ns3::FixedRssLossModel::SetRss(double rss) [member function]
    cls.add_method('SetRss', 
                   'void', 
                   [param('double', 'rss')])
    ## propagation-loss-model.h (module 'propagation'): double ns3::FixedRssLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPower', 
                   'double', 
                   [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_virtual=True, visibility='private')
    ## propagation-loss-model.h (module 'propagation'): int64_t ns3::FixedRssLossModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3FriisPropagationLossModel_methods(root_module, cls):
    ## propagation-loss-model.h (module 'propagation'): static ns3::TypeId ns3::FriisPropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-loss-model.h (module 'propagation'): ns3::FriisPropagationLossModel::FriisPropagationLossModel() [constructor]
    cls.add_constructor([])
    ## propagation-loss-model.h (module 'propagation'): void ns3::FriisPropagationLossModel::SetFrequency(double frequency) [member function]
    cls.add_method('SetFrequency', 
                   'void', 
                   [param('double', 'frequency')])
    ## propagation-loss-model.h (module 'propagation'): void ns3::FriisPropagationLossModel::SetSystemLoss(double systemLoss) [member function]
    cls.add_method('SetSystemLoss', 
                   'void', 
                   [param('double', 'systemLoss')])
    ## propagation-loss-model.h (module 'propagation'): void ns3::FriisPropagationLossModel::SetMinLoss(double minLoss) [member function]
    cls.add_method('SetMinLoss', 
                   'void', 
                   [param('double', 'minLoss')])
    ## propagation-loss-model.h (module 'propagation'): double ns3::FriisPropagationLossModel::GetMinLoss() const [member function]
    cls.add_method('GetMinLoss', 
                   'double', 
                   [], 
                   is_const=True)
    ## propagation-loss-model.h (module 'propagation'): double ns3::FriisPropagationLossModel::GetFrequency() const [member function]
    cls.add_method('GetFrequency', 
                   'double', 
                   [], 
                   is_const=True)
    ## propagation-loss-model.h (module 'propagation'): double ns3::FriisPropagationLossModel::GetSystemLoss() const [member function]
    cls.add_method('GetSystemLoss', 
                   'double', 
                   [], 
                   is_const=True)
    ## propagation-loss-model.h (module 'propagation'): double ns3::FriisPropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPower', 
                   'double', 
                   [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_virtual=True, visibility='private')
    ## propagation-loss-model.h (module 'propagation'): int64_t ns3::FriisPropagationLossModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3GammaRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::GammaRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::GammaRandomVariable::GammaRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetAlpha() const [member function]
    cls.add_method('GetAlpha', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetBeta() const [member function]
    cls.add_method('GetBeta', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetValue(double alpha, double beta) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'alpha'), param('double', 'beta')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::GammaRandomVariable::GetInteger(uint32_t alpha, uint32_t beta) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'alpha'), param('uint32_t', 'beta')])
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::GammaRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3IntegerValue_methods(root_module, cls):
    ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue() [constructor]
    cls.add_constructor([])
    ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue(int64_t const & value) [constructor]
    cls.add_constructor([param('int64_t const &', 'value')])
    ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue(ns3::IntegerValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntegerValue const &', 'arg0')])
    ## integer.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::IntegerValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## integer.h (module 'core'): bool ns3::IntegerValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## integer.h (module 'core'): int64_t ns3::IntegerValue::Get() const [member function]
    cls.add_method('Get', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## integer.h (module 'core'): std::string ns3::IntegerValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## integer.h (module 'core'): void ns3::IntegerValue::Set(int64_t const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('int64_t const &', 'value')])
    return

def register_Ns3Ipv4AddressChecker_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4AddressChecker const &', 'arg0')])
    return

def register_Ns3Ipv4AddressValue_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4Address const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address const &', 'value')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv4AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4AddressValue::Set(ns3::Ipv4Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv4Address const &', 'value')])
    return

def register_Ns3Ipv4MaskChecker_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4MaskChecker const &', 'arg0')])
    return

def register_Ns3Ipv4MaskValue_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4Mask const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv4Mask const &', 'value')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv4MaskValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask ns3::Ipv4MaskValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4MaskValue::Set(ns3::Ipv4Mask const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv4Mask const &', 'value')])
    return

def register_Ns3Ipv6AddressChecker_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv6AddressChecker const &', 'arg0')])
    return

def register_Ns3Ipv6AddressValue_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6Address const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address const &', 'value')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
    ## ipv6-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv6AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6AddressValue::Set(ns3::Ipv6Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv6Address const &', 'value')])
    return

def register_Ns3Ipv6PrefixChecker_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv6PrefixChecker const &', 'arg0')])
    return

def register_Ns3Ipv6PrefixValue_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6Prefix const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv6Prefix const &', 'value')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
    ## ipv6-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv6PrefixValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix ns3::Ipv6PrefixValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6PrefixValue::Set(ns3::Ipv6Prefix const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv6Prefix const &', 'value')])
    return

def register_Ns3LogDistancePropagationLossModel_methods(root_module, cls):
    ## propagation-loss-model.h (module 'propagation'): static ns3::TypeId ns3::LogDistancePropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-loss-model.h (module 'propagation'): ns3::LogDistancePropagationLossModel::LogDistancePropagationLossModel() [constructor]
    cls.add_constructor([])
    ## propagation-loss-model.h (module 'propagation'): void ns3::LogDistancePropagationLossModel::SetPathLossExponent(double n) [member function]
    cls.add_method('SetPathLossExponent', 
                   'void', 
                   [param('double', 'n')])
    ## propagation-loss-model.h (module 'propagation'): double ns3::LogDistancePropagationLossModel::GetPathLossExponent() const [member function]
    cls.add_method('GetPathLossExponent', 
                   'double', 
                   [], 
                   is_const=True)
    ## propagation-loss-model.h (module 'propagation'): void ns3::LogDistancePropagationLossModel::SetReference(double referenceDistance, double referenceLoss) [member function]
    cls.add_method('SetReference', 
                   'void', 
                   [param('double', 'referenceDistance'), param('double', 'referenceLoss')])
    ## propagation-loss-model.h (module 'propagation'): double ns3::LogDistancePropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPower', 
                   'double', 
                   [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_virtual=True, visibility='private')
    ## propagation-loss-model.h (module 'propagation'): int64_t ns3::LogDistancePropagationLossModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3LogNormalRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::LogNormalRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::LogNormalRandomVariable::LogNormalRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetMu() const [member function]
    cls.add_method('GetMu', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetSigma() const [member function]
    cls.add_method('GetSigma', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetValue(double mu, double sigma) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mu'), param('double', 'sigma')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::LogNormalRandomVariable::GetInteger(uint32_t mu, uint32_t sigma) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mu'), param('uint32_t', 'sigma')])
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::LogNormalRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3LteAmc_methods(root_module, cls):
    ## lte-amc.h (module 'lte'): ns3::LteAmc::LteAmc(ns3::LteAmc const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteAmc const &', 'arg0')])
    ## lte-amc.h (module 'lte'): ns3::LteAmc::LteAmc() [constructor]
    cls.add_constructor([])
    ## lte-amc.h (module 'lte'): std::vector<int, std::allocator<int>> ns3::LteAmc::CreateCqiFeedbacks(ns3::SpectrumValue const & sinr, uint8_t rbgSize=0) [member function]
    cls.add_method('CreateCqiFeedbacks', 
                   'std::vector< int >', 
                   [param('ns3::SpectrumValue const &', 'sinr'), param('uint8_t', 'rbgSize', default_value='0')])
    ## lte-amc.h (module 'lte'): int ns3::LteAmc::GetCqiFromSpectralEfficiency(double s) [member function]
    cls.add_method('GetCqiFromSpectralEfficiency', 
                   'int', 
                   [param('double', 's')])
    ## lte-amc.h (module 'lte'): int ns3::LteAmc::GetDlTbSizeFromMcs(int mcs, int nprb) [member function]
    cls.add_method('GetDlTbSizeFromMcs', 
                   'int', 
                   [param('int', 'mcs'), param('int', 'nprb')])
    ## lte-amc.h (module 'lte'): int ns3::LteAmc::GetMcsFromCqi(int cqi) [member function]
    cls.add_method('GetMcsFromCqi', 
                   'int', 
                   [param('int', 'cqi')])
    ## lte-amc.h (module 'lte'): double ns3::LteAmc::GetSpectralEfficiencyFromCqi(int cqi) [member function]
    cls.add_method('GetSpectralEfficiencyFromCqi', 
                   'double', 
                   [param('int', 'cqi')])
    ## lte-amc.h (module 'lte'): static ns3::TypeId ns3::LteAmc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-amc.h (module 'lte'): std::vector<ns3::LteAmc::McsPrbInfo, std::allocator<ns3::LteAmc::McsPrbInfo>> ns3::LteAmc::GetUlMcsNprbInfoFromTbs(int tbs, int max_prb=110, int max_mcs=28) [member function]
    cls.add_method('GetUlMcsNprbInfoFromTbs', 
                   'std::vector< ns3::LteAmc::McsPrbInfo >', 
                   [param('int', 'tbs'), param('int', 'max_prb', default_value='110'), param('int', 'max_mcs', default_value='28')])
    ## lte-amc.h (module 'lte'): int ns3::LteAmc::GetUlTbSizeFromMcs(int mcs, int nprb) [member function]
    cls.add_method('GetUlTbSizeFromMcs', 
                   'int', 
                   [param('int', 'mcs'), param('int', 'nprb')])
    return

def register_Ns3LteAmcMcsPrbInfo_methods(root_module, cls):
    ## lte-amc.h (module 'lte'): ns3::LteAmc::McsPrbInfo::McsPrbInfo() [constructor]
    cls.add_constructor([])
    ## lte-amc.h (module 'lte'): ns3::LteAmc::McsPrbInfo::McsPrbInfo(ns3::LteAmc::McsPrbInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteAmc::McsPrbInfo const &', 'arg0')])
    ## lte-amc.h (module 'lte'): ns3::LteAmc::McsPrbInfo::mcs [variable]
    cls.add_instance_attribute('mcs', 'uint8_t', is_const=False)
    ## lte-amc.h (module 'lte'): ns3::LteAmc::McsPrbInfo::nbRb [variable]
    cls.add_instance_attribute('nbRb', 'uint8_t', is_const=False)
    ## lte-amc.h (module 'lte'): ns3::LteAmc::McsPrbInfo::tbs [variable]
    cls.add_instance_attribute('tbs', 'int32_t', is_const=False)
    return

def register_Ns3LteControlMessage_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::LteControlMessage::LteControlMessage(ns3::LteControlMessage const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteControlMessage const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::LteControlMessage::LteControlMessage() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): ns3::LteControlMessage::MessageType ns3::LteControlMessage::GetMessageType() [member function]
    cls.add_method('GetMessageType', 
                   'ns3::LteControlMessage::MessageType', 
                   [])
    ## lte-control-messages.h (module 'lte'): void ns3::LteControlMessage::SetMessageType(ns3::LteControlMessage::MessageType type) [member function]
    cls.add_method('SetMessageType', 
                   'void', 
                   [param('ns3::LteControlMessage::MessageType', 'type')])
    return

def register_Ns3LteEnbMac_methods(root_module, cls):
    ## lte-enb-mac.h (module 'lte'): ns3::LteEnbMac::LteEnbMac(ns3::LteEnbMac const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbMac const &', 'arg0')])
    ## lte-enb-mac.h (module 'lte'): ns3::LteEnbMac::LteEnbMac() [constructor]
    cls.add_constructor([])
    ## lte-enb-mac.h (module 'lte'): void ns3::LteEnbMac::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-enb-mac.h (module 'lte'): void ns3::LteEnbMac::DoReceivePhyPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoReceivePhyPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## lte-enb-mac.h (module 'lte'): ns3::FfMacCschedSapUser * ns3::LteEnbMac::GetFfMacCschedSapUser() [member function]
    cls.add_method('GetFfMacCschedSapUser', 
                   'ns3::FfMacCschedSapUser *', 
                   [])
    ## lte-enb-mac.h (module 'lte'): ns3::FfMacSchedSapUser * ns3::LteEnbMac::GetFfMacSchedSapUser() [member function]
    cls.add_method('GetFfMacSchedSapUser', 
                   'ns3::FfMacSchedSapUser *', 
                   [])
    ## lte-enb-mac.h (module 'lte'): ns3::LteCcmMacSapProvider * ns3::LteEnbMac::GetLteCcmMacSapProvider() [member function]
    cls.add_method('GetLteCcmMacSapProvider', 
                   'ns3::LteCcmMacSapProvider *', 
                   [])
    ## lte-enb-mac.h (module 'lte'): ns3::LteEnbCmacSapProvider * ns3::LteEnbMac::GetLteEnbCmacSapProvider() [member function]
    cls.add_method('GetLteEnbCmacSapProvider', 
                   'ns3::LteEnbCmacSapProvider *', 
                   [])
    ## lte-enb-mac.h (module 'lte'): ns3::LteEnbPhySapUser * ns3::LteEnbMac::GetLteEnbPhySapUser() [member function]
    cls.add_method('GetLteEnbPhySapUser', 
                   'ns3::LteEnbPhySapUser *', 
                   [])
    ## lte-enb-mac.h (module 'lte'): ns3::LteMacSapProvider * ns3::LteEnbMac::GetLteMacSapProvider() [member function]
    cls.add_method('GetLteMacSapProvider', 
                   'ns3::LteMacSapProvider *', 
                   [])
    ## lte-enb-mac.h (module 'lte'): static ns3::TypeId ns3::LteEnbMac::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-enb-mac.h (module 'lte'): void ns3::LteEnbMac::SetComponentCarrierId(uint8_t index) [member function]
    cls.add_method('SetComponentCarrierId', 
                   'void', 
                   [param('uint8_t', 'index')])
    ## lte-enb-mac.h (module 'lte'): void ns3::LteEnbMac::SetFfMacCschedSapProvider(ns3::FfMacCschedSapProvider * s) [member function]
    cls.add_method('SetFfMacCschedSapProvider', 
                   'void', 
                   [param('ns3::FfMacCschedSapProvider *', 's')])
    ## lte-enb-mac.h (module 'lte'): void ns3::LteEnbMac::SetFfMacSchedSapProvider(ns3::FfMacSchedSapProvider * s) [member function]
    cls.add_method('SetFfMacSchedSapProvider', 
                   'void', 
                   [param('ns3::FfMacSchedSapProvider *', 's')])
    ## lte-enb-mac.h (module 'lte'): void ns3::LteEnbMac::SetLteCcmMacSapUser(ns3::LteCcmMacSapUser * s) [member function]
    cls.add_method('SetLteCcmMacSapUser', 
                   'void', 
                   [param('ns3::LteCcmMacSapUser *', 's')])
    ## lte-enb-mac.h (module 'lte'): void ns3::LteEnbMac::SetLteEnbCmacSapUser(ns3::LteEnbCmacSapUser * s) [member function]
    cls.add_method('SetLteEnbCmacSapUser', 
                   'void', 
                   [param('ns3::LteEnbCmacSapUser *', 's')])
    ## lte-enb-mac.h (module 'lte'): void ns3::LteEnbMac::SetLteEnbPhySapProvider(ns3::LteEnbPhySapProvider * s) [member function]
    cls.add_method('SetLteEnbPhySapProvider', 
                   'void', 
                   [param('ns3::LteEnbPhySapProvider *', 's')])
    ## lte-enb-mac.h (module 'lte'): void ns3::LteEnbMac::SetLteMacSapUser(ns3::LteMacSapUser * s) [member function]
    cls.add_method('SetLteMacSapUser', 
                   'void', 
                   [param('ns3::LteMacSapUser *', 's')])
    return

def register_Ns3LteEnbRrc_methods(root_module, cls):
    ## lte-enb-rrc.h (module 'lte'): ns3::LteEnbRrc::LteEnbRrc(ns3::LteEnbRrc const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbRrc const &', 'arg0')])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteEnbRrc::LteEnbRrc() [constructor]
    cls.add_constructor([])
    ## lte-enb-rrc.h (module 'lte'): std::vector<unsigned char, std::allocator<unsigned char>> ns3::LteEnbRrc::AddUeMeasReportConfig(ns3::LteRrcSap::ReportConfigEutra config) [member function]
    cls.add_method('AddUeMeasReportConfig', 
                   'std::vector< unsigned char >', 
                   [param('ns3::LteRrcSap::ReportConfigEutra', 'config')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::AddX2Neighbour(uint16_t cellId) [member function]
    cls.add_method('AddX2Neighbour', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## lte-enb-rrc.h (module 'lte'): uint8_t ns3::LteEnbRrc::CellToComponentCarrierId(uint16_t cellId) [member function]
    cls.add_method('CellToComponentCarrierId', 
                   'uint8_t', 
                   [param('uint16_t', 'cellId')])
    ## lte-enb-rrc.h (module 'lte'): uint16_t ns3::LteEnbRrc::ComponentCarrierToCellId(uint8_t componentCarrierId) [member function]
    cls.add_method('ComponentCarrierToCellId', 
                   'uint16_t', 
                   [param('uint8_t', 'componentCarrierId')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::ConfigureCarriers(std::map<unsigned char, ns3::Ptr<ns3::ComponentCarrierBaseStation>, std::less<unsigned char>, std::allocator<std::pair<const unsigned char, ns3::Ptr<ns3::ComponentCarrierBaseStation>>>> ccPhyConf) [member function]
    cls.add_method('ConfigureCarriers', 
                   'void', 
                   [param('std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierBaseStation > >', 'ccPhyConf')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::ConfigureCell(std::map<unsigned char, ns3::Ptr<ns3::ComponentCarrierBaseStation>, std::less<unsigned char>, std::allocator<std::pair<const unsigned char, ns3::Ptr<ns3::ComponentCarrierBaseStation>>>> ccPhyConf) [member function]
    cls.add_method('ConfigureCell', 
                   'void', 
                   [param('std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierBaseStation > >', 'ccPhyConf')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::ConnectionRejectedTimeout(uint16_t rnti) [member function]
    cls.add_method('ConnectionRejectedTimeout', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::ConnectionRequestTimeout(uint16_t rnti) [member function]
    cls.add_method('ConnectionRequestTimeout', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::ConnectionSetupTimeout(uint16_t rnti) [member function]
    cls.add_method('ConnectionSetupTimeout', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::DoSendReleaseDataRadioBearer(uint64_t imsi, uint16_t rnti, uint8_t bearerId) [member function]
    cls.add_method('DoSendReleaseDataRadioBearer', 
                   'void', 
                   [param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'bearerId')])
    ## lte-enb-rrc.h (module 'lte'): ns3::EpcX2SapUser * ns3::LteEnbRrc::GetEpcX2SapUser() [member function]
    cls.add_method('GetEpcX2SapUser', 
                   'ns3::EpcX2SapUser *', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteAnrSapUser * ns3::LteEnbRrc::GetLteAnrSapUser() [member function]
    cls.add_method('GetLteAnrSapUser', 
                   'ns3::LteAnrSapUser *', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteCcmRrcSapUser * ns3::LteEnbRrc::GetLteCcmRrcSapUser() [member function]
    cls.add_method('GetLteCcmRrcSapUser', 
                   'ns3::LteCcmRrcSapUser *', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteEnbCmacSapUser * ns3::LteEnbRrc::GetLteEnbCmacSapUser() [member function]
    cls.add_method('GetLteEnbCmacSapUser', 
                   'ns3::LteEnbCmacSapUser *', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteEnbCmacSapUser * ns3::LteEnbRrc::GetLteEnbCmacSapUser(uint8_t pos) [member function]
    cls.add_method('GetLteEnbCmacSapUser', 
                   'ns3::LteEnbCmacSapUser *', 
                   [param('uint8_t', 'pos')])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteEnbCphySapUser * ns3::LteEnbRrc::GetLteEnbCphySapUser() [member function]
    cls.add_method('GetLteEnbCphySapUser', 
                   'ns3::LteEnbCphySapUser *', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteEnbCphySapUser * ns3::LteEnbRrc::GetLteEnbCphySapUser(uint8_t pos) [member function]
    cls.add_method('GetLteEnbCphySapUser', 
                   'ns3::LteEnbCphySapUser *', 
                   [param('uint8_t', 'pos')])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteEnbRrcSapProvider * ns3::LteEnbRrc::GetLteEnbRrcSapProvider() [member function]
    cls.add_method('GetLteEnbRrcSapProvider', 
                   'ns3::LteEnbRrcSapProvider *', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteFfrRrcSapUser * ns3::LteEnbRrc::GetLteFfrRrcSapUser() [member function]
    cls.add_method('GetLteFfrRrcSapUser', 
                   'ns3::LteFfrRrcSapUser *', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteFfrRrcSapUser * ns3::LteEnbRrc::GetLteFfrRrcSapUser(uint8_t index) [member function]
    cls.add_method('GetLteFfrRrcSapUser', 
                   'ns3::LteFfrRrcSapUser *', 
                   [param('uint8_t', 'index')])
    ## lte-enb-rrc.h (module 'lte'): ns3::LteHandoverManagementSapUser * ns3::LteEnbRrc::GetLteHandoverManagementSapUser() [member function]
    cls.add_method('GetLteHandoverManagementSapUser', 
                   'ns3::LteHandoverManagementSapUser *', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): ns3::EpcEnbS1SapUser * ns3::LteEnbRrc::GetS1SapUser() [member function]
    cls.add_method('GetS1SapUser', 
                   'ns3::EpcEnbS1SapUser *', 
                   [])
    ## lte-enb-rrc.h (module 'lte'): uint32_t ns3::LteEnbRrc::GetSrsPeriodicity() const [member function]
    cls.add_method('GetSrsPeriodicity', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-enb-rrc.h (module 'lte'): static ns3::TypeId ns3::LteEnbRrc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-enb-rrc.h (module 'lte'): ns3::Ptr<ns3::UeManager> ns3::LteEnbRrc::GetUeManager(uint16_t rnti) [member function]
    cls.add_method('GetUeManager', 
                   'ns3::Ptr< ns3::UeManager >', 
                   [param('uint16_t', 'rnti')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::HandoverJoiningTimeout(uint16_t rnti) [member function]
    cls.add_method('HandoverJoiningTimeout', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::HandoverLeavingTimeout(uint16_t rnti) [member function]
    cls.add_method('HandoverLeavingTimeout', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## lte-enb-rrc.h (module 'lte'): bool ns3::LteEnbRrc::HasCellId(uint16_t cellId) const [member function]
    cls.add_method('HasCellId', 
                   'bool', 
                   [param('uint16_t', 'cellId')], 
                   is_const=True)
    ## lte-enb-rrc.h (module 'lte'): bool ns3::LteEnbRrc::HasUeManager(uint16_t rnti) const [member function]
    cls.add_method('HasUeManager', 
                   'bool', 
                   [param('uint16_t', 'rnti')], 
                   is_const=True)
    ## lte-enb-rrc.h (module 'lte'): bool ns3::LteEnbRrc::SendData(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('SendData', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SendHandoverRequest(uint16_t rnti, uint16_t cellId) [member function]
    cls.add_method('SendHandoverRequest', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint16_t', 'cellId')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetCellId(uint16_t m_cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'm_cellId')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetCellId(uint16_t m_cellId, uint8_t ccIndex) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'm_cellId'), param('uint8_t', 'ccIndex')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetCsgId(uint32_t csgId, bool csgIndication) [member function]
    cls.add_method('SetCsgId', 
                   'void', 
                   [param('uint32_t', 'csgId'), param('bool', 'csgIndication')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetEpcX2SapProvider(ns3::EpcX2SapProvider * s) [member function]
    cls.add_method('SetEpcX2SapProvider', 
                   'void', 
                   [param('ns3::EpcX2SapProvider *', 's')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
    cls.add_method('SetForwardUpCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetLteAnrSapProvider(ns3::LteAnrSapProvider * s) [member function]
    cls.add_method('SetLteAnrSapProvider', 
                   'void', 
                   [param('ns3::LteAnrSapProvider *', 's')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetLteCcmRrcSapProvider(ns3::LteCcmRrcSapProvider * s) [member function]
    cls.add_method('SetLteCcmRrcSapProvider', 
                   'void', 
                   [param('ns3::LteCcmRrcSapProvider *', 's')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetLteEnbCmacSapProvider(ns3::LteEnbCmacSapProvider * s) [member function]
    cls.add_method('SetLteEnbCmacSapProvider', 
                   'void', 
                   [param('ns3::LteEnbCmacSapProvider *', 's')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetLteEnbCmacSapProvider(ns3::LteEnbCmacSapProvider * s, uint8_t pos) [member function]
    cls.add_method('SetLteEnbCmacSapProvider', 
                   'void', 
                   [param('ns3::LteEnbCmacSapProvider *', 's'), param('uint8_t', 'pos')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetLteEnbCphySapProvider(ns3::LteEnbCphySapProvider * s) [member function]
    cls.add_method('SetLteEnbCphySapProvider', 
                   'void', 
                   [param('ns3::LteEnbCphySapProvider *', 's')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetLteEnbCphySapProvider(ns3::LteEnbCphySapProvider * s, uint8_t pos) [member function]
    cls.add_method('SetLteEnbCphySapProvider', 
                   'void', 
                   [param('ns3::LteEnbCphySapProvider *', 's'), param('uint8_t', 'pos')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetLteEnbRrcSapUser(ns3::LteEnbRrcSapUser * s) [member function]
    cls.add_method('SetLteEnbRrcSapUser', 
                   'void', 
                   [param('ns3::LteEnbRrcSapUser *', 's')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetLteFfrRrcSapProvider(ns3::LteFfrRrcSapProvider * s) [member function]
    cls.add_method('SetLteFfrRrcSapProvider', 
                   'void', 
                   [param('ns3::LteFfrRrcSapProvider *', 's')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetLteFfrRrcSapProvider(ns3::LteFfrRrcSapProvider * s, uint8_t index) [member function]
    cls.add_method('SetLteFfrRrcSapProvider', 
                   'void', 
                   [param('ns3::LteFfrRrcSapProvider *', 's'), param('uint8_t', 'index')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetLteHandoverManagementSapProvider(ns3::LteHandoverManagementSapProvider * s) [member function]
    cls.add_method('SetLteHandoverManagementSapProvider', 
                   'void', 
                   [param('ns3::LteHandoverManagementSapProvider *', 's')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetLteMacSapProvider(ns3::LteMacSapProvider * s) [member function]
    cls.add_method('SetLteMacSapProvider', 
                   'void', 
                   [param('ns3::LteMacSapProvider *', 's')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetS1SapProvider(ns3::EpcEnbS1SapProvider * s) [member function]
    cls.add_method('SetS1SapProvider', 
                   'void', 
                   [param('ns3::EpcEnbS1SapProvider *', 's')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::SetSrsPeriodicity(uint32_t p) [member function]
    cls.add_method('SetSrsPeriodicity', 
                   'void', 
                   [param('uint32_t', 'p')])
    ## lte-enb-rrc.h (module 'lte'): void ns3::LteEnbRrc::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3LteHarqPhy_methods(root_module, cls):
    ## lte-harq-phy.h (module 'lte'): ns3::LteHarqPhy::LteHarqPhy(ns3::LteHarqPhy const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteHarqPhy const &', 'arg0')])
    ## lte-harq-phy.h (module 'lte'): ns3::LteHarqPhy::LteHarqPhy() [constructor]
    cls.add_constructor([])
    ## lte-harq-phy.h (module 'lte'): void ns3::LteHarqPhy::ClearDlHarqBuffer(uint16_t rnti) [member function]
    cls.add_method('ClearDlHarqBuffer', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## lte-harq-phy.h (module 'lte'): double ns3::LteHarqPhy::GetAccumulatedMiDl(uint8_t harqProcId, uint8_t layer) [member function]
    cls.add_method('GetAccumulatedMiDl', 
                   'double', 
                   [param('uint8_t', 'harqProcId'), param('uint8_t', 'layer')])
    ## lte-harq-phy.h (module 'lte'): double ns3::LteHarqPhy::GetAccumulatedMiUl(uint16_t rnti) [member function]
    cls.add_method('GetAccumulatedMiUl', 
                   'double', 
                   [param('uint16_t', 'rnti')])
    ## lte-harq-phy.h (module 'lte'): ns3::HarqProcessInfoList_t ns3::LteHarqPhy::GetHarqProcessInfoDl(uint8_t harqProcId, uint8_t layer) [member function]
    cls.add_method('GetHarqProcessInfoDl', 
                   'ns3::HarqProcessInfoList_t', 
                   [param('uint8_t', 'harqProcId'), param('uint8_t', 'layer')])
    ## lte-harq-phy.h (module 'lte'): ns3::HarqProcessInfoList_t ns3::LteHarqPhy::GetHarqProcessInfoUl(uint16_t rnti, uint8_t harqProcId) [member function]
    cls.add_method('GetHarqProcessInfoUl', 
                   'ns3::HarqProcessInfoList_t', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'harqProcId')])
    ## lte-harq-phy.h (module 'lte'): void ns3::LteHarqPhy::ResetDlHarqProcessStatus(uint8_t id) [member function]
    cls.add_method('ResetDlHarqProcessStatus', 
                   'void', 
                   [param('uint8_t', 'id')])
    ## lte-harq-phy.h (module 'lte'): void ns3::LteHarqPhy::ResetUlHarqProcessStatus(uint16_t rnti, uint8_t id) [member function]
    cls.add_method('ResetUlHarqProcessStatus', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'id')])
    ## lte-harq-phy.h (module 'lte'): void ns3::LteHarqPhy::SubframeIndication(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('SubframeIndication', 
                   'void', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')])
    ## lte-harq-phy.h (module 'lte'): void ns3::LteHarqPhy::UpdateDlHarqProcessStatus(uint8_t id, uint8_t layer, double mi, uint16_t infoBytes, uint16_t codeBytes) [member function]
    cls.add_method('UpdateDlHarqProcessStatus', 
                   'void', 
                   [param('uint8_t', 'id'), param('uint8_t', 'layer'), param('double', 'mi'), param('uint16_t', 'infoBytes'), param('uint16_t', 'codeBytes')])
    ## lte-harq-phy.h (module 'lte'): void ns3::LteHarqPhy::UpdateDlHarqProcessStatus(uint8_t id, uint8_t layer, double sinr) [member function]
    cls.add_method('UpdateDlHarqProcessStatus', 
                   'void', 
                   [param('uint8_t', 'id'), param('uint8_t', 'layer'), param('double', 'sinr')])
    ## lte-harq-phy.h (module 'lte'): void ns3::LteHarqPhy::UpdateUlHarqProcessStatus(uint16_t rnti, double mi, uint16_t infoBytes, uint16_t codeBytes) [member function]
    cls.add_method('UpdateUlHarqProcessStatus', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('double', 'mi'), param('uint16_t', 'infoBytes'), param('uint16_t', 'codeBytes')])
    ## lte-harq-phy.h (module 'lte'): void ns3::LteHarqPhy::UpdateUlHarqProcessStatus(uint16_t rnti, double sinr) [member function]
    cls.add_method('UpdateUlHarqProcessStatus', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('double', 'sinr')])
    return

def register_Ns3LteHelper_methods(root_module, cls):
    ## lte-helper.h (module 'lte'): ns3::LteHelper::LteHelper() [constructor]
    cls.add_constructor([])
    ## lte-helper.h (module 'lte'): static ns3::TypeId ns3::LteHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetEpcHelper(ns3::Ptr<ns3::EpcHelper> h) [member function]
    cls.add_method('SetEpcHelper', 
                   'void', 
                   [param('ns3::Ptr< ns3::EpcHelper >', 'h')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetPathlossModelType(ns3::TypeId type) [member function]
    cls.add_method('SetPathlossModelType', 
                   'void', 
                   [param('ns3::TypeId', 'type')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetPathlossModelAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetPathlossModelAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetSchedulerType(std::string type) [member function]
    cls.add_method('SetSchedulerType', 
                   'void', 
                   [param('std::string', 'type')])
    ## lte-helper.h (module 'lte'): std::string ns3::LteHelper::GetSchedulerType() const [member function]
    cls.add_method('GetSchedulerType', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetSchedulerAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetSchedulerAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetFfrAlgorithmType(std::string type) [member function]
    cls.add_method('SetFfrAlgorithmType', 
                   'void', 
                   [param('std::string', 'type')])
    ## lte-helper.h (module 'lte'): std::string ns3::LteHelper::GetFfrAlgorithmType() const [member function]
    cls.add_method('GetFfrAlgorithmType', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetFfrAlgorithmAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetFfrAlgorithmAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetHandoverAlgorithmType(std::string type) [member function]
    cls.add_method('SetHandoverAlgorithmType', 
                   'void', 
                   [param('std::string', 'type')])
    ## lte-helper.h (module 'lte'): std::string ns3::LteHelper::GetHandoverAlgorithmType() const [member function]
    cls.add_method('GetHandoverAlgorithmType', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetHandoverAlgorithmAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetHandoverAlgorithmAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetEnbDeviceAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetEnbDeviceAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetEnbAntennaModelType(std::string type) [member function]
    cls.add_method('SetEnbAntennaModelType', 
                   'void', 
                   [param('std::string', 'type')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetEnbAntennaModelAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetEnbAntennaModelAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetUeDeviceAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetUeDeviceAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetUeAntennaModelType(std::string type) [member function]
    cls.add_method('SetUeAntennaModelType', 
                   'void', 
                   [param('std::string', 'type')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetUeAntennaModelAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetUeAntennaModelAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetSpectrumChannelType(std::string type) [member function]
    cls.add_method('SetSpectrumChannelType', 
                   'void', 
                   [param('std::string', 'type')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetSpectrumChannelAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetSpectrumChannelAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetEnbComponentCarrierManagerType(std::string type) [member function]
    cls.add_method('SetEnbComponentCarrierManagerType', 
                   'void', 
                   [param('std::string', 'type')])
    ## lte-helper.h (module 'lte'): std::string ns3::LteHelper::GetEnbComponentCarrierManagerType() const [member function]
    cls.add_method('GetEnbComponentCarrierManagerType', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetEnbComponentCarrierManagerAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetEnbComponentCarrierManagerAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetUeComponentCarrierManagerType(std::string type) [member function]
    cls.add_method('SetUeComponentCarrierManagerType', 
                   'void', 
                   [param('std::string', 'type')])
    ## lte-helper.h (module 'lte'): std::string ns3::LteHelper::GetUeComponentCarrierManagerType() const [member function]
    cls.add_method('GetUeComponentCarrierManagerType', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetUeComponentCarrierManagerAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetUeComponentCarrierManagerAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetSlUeControllerType(std::string type) [member function]
    cls.add_method('SetSlUeControllerType', 
                   'void', 
                   [param('std::string', 'type')])
    ## lte-helper.h (module 'lte'): std::string ns3::LteHelper::GetSlUeControllerType() const [member function]
    cls.add_method('GetSlUeControllerType', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetSlUeControllerAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetSlUeControllerAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): ns3::Ptr<ns3::Object> ns3::LteHelper::GetUplinkPathlossModel() const [member function]
    cls.add_method('GetUplinkPathlossModel', 
                   'ns3::Ptr< ns3::Object >', 
                   [], 
                   is_const=True)
    ## lte-helper.h (module 'lte'): ns3::Ptr<ns3::Object> ns3::LteHelper::GetDownlinkPathlossModel() const [member function]
    cls.add_method('GetDownlinkPathlossModel', 
                   'ns3::Ptr< ns3::Object >', 
                   [], 
                   is_const=True)
    ## lte-helper.h (module 'lte'): ns3::NetDeviceContainer ns3::LteHelper::InstallEnbDevice(ns3::NodeContainer c) [member function]
    cls.add_method('InstallEnbDevice', 
                   'ns3::NetDeviceContainer', 
                   [param('ns3::NodeContainer', 'c')])
    ## lte-helper.h (module 'lte'): ns3::NetDeviceContainer ns3::LteHelper::InstallUeDevice(ns3::NodeContainer c) [member function]
    cls.add_method('InstallUeDevice', 
                   'ns3::NetDeviceContainer', 
                   [param('ns3::NodeContainer', 'c')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::Attach(ns3::NetDeviceContainer ueDevices) [member function]
    cls.add_method('Attach', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'ueDevices')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::Attach(ns3::Ptr<ns3::NetDevice> ueDevice) [member function]
    cls.add_method('Attach', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::Attach(ns3::NetDeviceContainer ueDevices, ns3::Ptr<ns3::NetDevice> enbDevice) [member function]
    cls.add_method('Attach', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'ueDevices'), param('ns3::Ptr< ns3::NetDevice >', 'enbDevice')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::Attach(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::Ptr<ns3::NetDevice> enbDevice, uint8_t componentCarrierId=0) [member function]
    cls.add_method('Attach', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::Ptr< ns3::NetDevice >', 'enbDevice'), param('uint8_t', 'componentCarrierId', default_value='0')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::AttachToClosestEnb(ns3::NetDeviceContainer ueDevices, ns3::NetDeviceContainer enbDevices) [member function]
    cls.add_method('AttachToClosestEnb', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'ueDevices'), param('ns3::NetDeviceContainer', 'enbDevices')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::AttachToClosestEnb(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::NetDeviceContainer enbDevices) [member function]
    cls.add_method('AttachToClosestEnb', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::NetDeviceContainer', 'enbDevices')])
    ## lte-helper.h (module 'lte'): uint8_t ns3::LteHelper::ActivateDedicatedEpsBearer(ns3::NetDeviceContainer ueDevices, ns3::EpsBearer bearer, ns3::Ptr<ns3::EpcTft> tft) [member function]
    cls.add_method('ActivateDedicatedEpsBearer', 
                   'uint8_t', 
                   [param('ns3::NetDeviceContainer', 'ueDevices'), param('ns3::EpsBearer', 'bearer'), param('ns3::Ptr< ns3::EpcTft >', 'tft')])
    ## lte-helper.h (module 'lte'): uint8_t ns3::LteHelper::ActivateDedicatedEpsBearer(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::EpsBearer bearer, ns3::Ptr<ns3::EpcTft> tft) [member function]
    cls.add_method('ActivateDedicatedEpsBearer', 
                   'uint8_t', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::EpsBearer', 'bearer'), param('ns3::Ptr< ns3::EpcTft >', 'tft')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::DeActivateDedicatedEpsBearer(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::Ptr<ns3::NetDevice> enbDevice, uint8_t bearerId) [member function]
    cls.add_method('DeActivateDedicatedEpsBearer', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::Ptr< ns3::NetDevice >', 'enbDevice'), param('uint8_t', 'bearerId')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::AddX2Interface(ns3::NodeContainer enbNodes) [member function]
    cls.add_method('AddX2Interface', 
                   'void', 
                   [param('ns3::NodeContainer', 'enbNodes')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::AddX2Interface(ns3::Ptr<ns3::Node> enbNode1, ns3::Ptr<ns3::Node> enbNode2) [member function]
    cls.add_method('AddX2Interface', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'enbNode1'), param('ns3::Ptr< ns3::Node >', 'enbNode2')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::HandoverRequest(ns3::Time hoTime, ns3::Ptr<ns3::NetDevice> ueDev, ns3::Ptr<ns3::NetDevice> sourceEnbDev, ns3::Ptr<ns3::NetDevice> targetEnbDev) [member function]
    cls.add_method('HandoverRequest', 
                   'void', 
                   [param('ns3::Time', 'hoTime'), param('ns3::Ptr< ns3::NetDevice >', 'ueDev'), param('ns3::Ptr< ns3::NetDevice >', 'sourceEnbDev'), param('ns3::Ptr< ns3::NetDevice >', 'targetEnbDev')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::HandoverRequest(ns3::Time hoTime, ns3::Ptr<ns3::NetDevice> ueDev, ns3::Ptr<ns3::NetDevice> sourceEnbDev, uint16_t targetCellId) [member function]
    cls.add_method('HandoverRequest', 
                   'void', 
                   [param('ns3::Time', 'hoTime'), param('ns3::Ptr< ns3::NetDevice >', 'ueDev'), param('ns3::Ptr< ns3::NetDevice >', 'sourceEnbDev'), param('uint16_t', 'targetCellId')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::ActivateDataRadioBearer(ns3::NetDeviceContainer ueDevices, ns3::EpsBearer bearer) [member function]
    cls.add_method('ActivateDataRadioBearer', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'ueDevices'), param('ns3::EpsBearer', 'bearer')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::ActivateDataRadioBearer(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::EpsBearer bearer) [member function]
    cls.add_method('ActivateDataRadioBearer', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::EpsBearer', 'bearer')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetFadingModel(std::string type) [member function]
    cls.add_method('SetFadingModel', 
                   'void', 
                   [param('std::string', 'type')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::SetFadingModelAttribute(std::string n, ns3::AttributeValue const & v) [member function]
    cls.add_method('SetFadingModelAttribute', 
                   'void', 
                   [param('std::string', 'n'), param('ns3::AttributeValue const &', 'v')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableLogComponents() [member function]
    cls.add_method('EnableLogComponents', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableTraces() [member function]
    cls.add_method('EnableTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnablePhyTraces() [member function]
    cls.add_method('EnablePhyTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableDlPhyTraces() [member function]
    cls.add_method('EnableDlPhyTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableUlPhyTraces() [member function]
    cls.add_method('EnableUlPhyTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableDlTxPhyTraces() [member function]
    cls.add_method('EnableDlTxPhyTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableUlTxPhyTraces() [member function]
    cls.add_method('EnableUlTxPhyTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableDlRxPhyTraces() [member function]
    cls.add_method('EnableDlRxPhyTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableUlRxPhyTraces() [member function]
    cls.add_method('EnableUlRxPhyTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableMacTraces() [member function]
    cls.add_method('EnableMacTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableDlMacTraces() [member function]
    cls.add_method('EnableDlMacTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableUlMacTraces() [member function]
    cls.add_method('EnableUlMacTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableRlcTraces() [member function]
    cls.add_method('EnableRlcTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): ns3::Ptr<ns3::RadioBearerStatsCalculator> ns3::LteHelper::GetRlcStats() [member function]
    cls.add_method('GetRlcStats', 
                   'ns3::Ptr< ns3::RadioBearerStatsCalculator >', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnablePdcpTraces() [member function]
    cls.add_method('EnablePdcpTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): ns3::Ptr<ns3::RadioBearerStatsCalculator> ns3::LteHelper::GetPdcpStats() [member function]
    cls.add_method('GetPdcpStats', 
                   'ns3::Ptr< ns3::RadioBearerStatsCalculator >', 
                   [])
    ## lte-helper.h (module 'lte'): int64_t ns3::LteHelper::AssignStreams(ns3::NetDeviceContainer c, int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('ns3::NetDeviceContainer', 'c'), param('int64_t', 'stream')])
    ## lte-helper.h (module 'lte'): ns3::Ptr<ns3::SpectrumChannel> ns3::LteHelper::GetUplinkSpectrumChannel() const [member function]
    cls.add_method('GetUplinkSpectrumChannel', 
                   'ns3::Ptr< ns3::SpectrumChannel >', 
                   [], 
                   is_const=True)
    ## lte-helper.h (module 'lte'): ns3::Ptr<ns3::SpectrumChannel> ns3::LteHelper::GetDownlinkSpectrumChannel() const [member function]
    cls.add_method('GetDownlinkSpectrumChannel', 
                   'ns3::Ptr< ns3::SpectrumChannel >', 
                   [], 
                   is_const=True)
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::DisableEnbPhy(bool disableEnbPhy) [member function]
    cls.add_method('DisableEnbPhy', 
                   'void', 
                   [param('bool', 'disableEnbPhy')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::ActivateSidelinkBearer(ns3::NetDeviceContainer ueDevices, ns3::Ptr<ns3::LteSlTft> tft) [member function]
    cls.add_method('ActivateSidelinkBearer', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'ueDevices'), param('ns3::Ptr< ns3::LteSlTft >', 'tft')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::DeactivateSidelinkBearer(ns3::NetDeviceContainer ueDevices, ns3::Ptr<ns3::LteSlTft> tft) [member function]
    cls.add_method('DeactivateSidelinkBearer', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'ueDevices'), param('ns3::Ptr< ns3::LteSlTft >', 'tft')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::ActivateSidelinkBearer(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::Ptr<ns3::LteSlTft> tft) [member function]
    cls.add_method('ActivateSidelinkBearer', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::Ptr< ns3::LteSlTft >', 'tft')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::DeactivateSidelinkBearer(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::Ptr<ns3::LteSlTft> tft) [member function]
    cls.add_method('DeactivateSidelinkBearer', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::Ptr< ns3::LteSlTft >', 'tft')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableSlRxPhyTraces() [member function]
    cls.add_method('EnableSlRxPhyTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableSlPscchRxPhyTraces() [member function]
    cls.add_method('EnableSlPscchRxPhyTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableSlPscchMacTraces() [member function]
    cls.add_method('EnableSlPscchMacTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableSlPsschMacTraces() [member function]
    cls.add_method('EnableSlPsschMacTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableSlPsdchMacTraces() [member function]
    cls.add_method('EnableSlPsdchMacTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableRrcTraces() [member function]
    cls.add_method('EnableRrcTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableDiscoveryMonitoringRrcTraces() [member function]
    cls.add_method('EnableDiscoveryMonitoringRrcTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::InstallSidelinkConfiguration(ns3::NetDeviceContainer enbDevices, ns3::Ptr<ns3::LteSlEnbRrc> slConfiguration) [member function]
    cls.add_method('InstallSidelinkConfiguration', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'enbDevices'), param('ns3::Ptr< ns3::LteSlEnbRrc >', 'slConfiguration')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::InstallSidelinkConfiguration(ns3::Ptr<ns3::NetDevice> enbDevice, ns3::Ptr<ns3::LteSlEnbRrc> slConfiguration) [member function]
    cls.add_method('InstallSidelinkConfiguration', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'enbDevice'), param('ns3::Ptr< ns3::LteSlEnbRrc >', 'slConfiguration')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::InstallSidelinkConfiguration(ns3::NetDeviceContainer ueDevices, ns3::Ptr<ns3::LteSlUeRrc> slConfiguration) [member function]
    cls.add_method('InstallSidelinkConfiguration', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'ueDevices'), param('ns3::Ptr< ns3::LteSlUeRrc >', 'slConfiguration')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::InstallSidelinkConfiguration(ns3::Ptr<ns3::NetDevice> ueDevice, ns3::Ptr<ns3::LteSlUeRrc> slConfiguration) [member function]
    cls.add_method('InstallSidelinkConfiguration', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'ueDevice'), param('ns3::Ptr< ns3::LteSlUeRrc >', 'slConfiguration')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::RemoteUeContextConnected(uint64_t relayImsi, uint64_t ueImsi, uint8_t * ipv6Prefix) [member function]
    cls.add_method('RemoteUeContextConnected', 
                   'void', 
                   [param('uint64_t', 'relayImsi'), param('uint64_t', 'ueImsi'), param('uint8_t *', 'ipv6Prefix')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::RemoteUeContextDisconnected(uint64_t relayImsi, uint64_t ueImsi, uint8_t * ipv6Prefix) [member function]
    cls.add_method('RemoteUeContextDisconnected', 
                   'void', 
                   [param('uint64_t', 'relayImsi'), param('uint64_t', 'ueImsi'), param('uint8_t *', 'ipv6Prefix')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::EnableSidelinkTraces() [member function]
    cls.add_method('EnableSidelinkTraces', 
                   'void', 
                   [])
    ## lte-helper.h (module 'lte'): ns3::LteHelper::LteHelper(ns3::LteHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteHelper const &', 'arg0')])
    ## lte-helper.h (module 'lte'): void ns3::LteHelper::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3LteInterference_methods(root_module, cls):
    ## lte-interference.h (module 'lte'): ns3::LteInterference::LteInterference(ns3::LteInterference const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteInterference const &', 'arg0')])
    ## lte-interference.h (module 'lte'): ns3::LteInterference::LteInterference() [constructor]
    cls.add_constructor([])
    ## lte-interference.h (module 'lte'): void ns3::LteInterference::AddInterferenceChunkProcessor(ns3::Ptr<ns3::LteChunkProcessor> p) [member function]
    cls.add_method('AddInterferenceChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteChunkProcessor >', 'p')], 
                   is_virtual=True)
    ## lte-interference.h (module 'lte'): void ns3::LteInterference::AddRsPowerChunkProcessor(ns3::Ptr<ns3::LteChunkProcessor> p) [member function]
    cls.add_method('AddRsPowerChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteChunkProcessor >', 'p')], 
                   is_virtual=True)
    ## lte-interference.h (module 'lte'): void ns3::LteInterference::AddSignal(ns3::Ptr<const ns3::SpectrumValue> spd, ns3::Time const duration) [member function]
    cls.add_method('AddSignal', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'spd'), param('ns3::Time const', 'duration')], 
                   is_virtual=True)
    ## lte-interference.h (module 'lte'): void ns3::LteInterference::AddSinrChunkProcessor(ns3::Ptr<ns3::LteChunkProcessor> p) [member function]
    cls.add_method('AddSinrChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteChunkProcessor >', 'p')], 
                   is_virtual=True)
    ## lte-interference.h (module 'lte'): void ns3::LteInterference::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-interference.h (module 'lte'): void ns3::LteInterference::EndRx() [member function]
    cls.add_method('EndRx', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-interference.h (module 'lte'): static ns3::TypeId ns3::LteInterference::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-interference.h (module 'lte'): void ns3::LteInterference::SetNoisePowerSpectralDensity(ns3::Ptr<const ns3::SpectrumValue> noisePsd) [member function]
    cls.add_method('SetNoisePowerSpectralDensity', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'noisePsd')], 
                   is_virtual=True)
    ## lte-interference.h (module 'lte'): void ns3::LteInterference::StartRx(ns3::Ptr<const ns3::SpectrumValue> rxPsd) [member function]
    cls.add_method('StartRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'rxPsd')], 
                   is_virtual=True)
    ## lte-interference.h (module 'lte'): void ns3::LteInterference::ConditionallyEvaluateChunk() [member function]
    cls.add_method('ConditionallyEvaluateChunk', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## lte-interference.h (module 'lte'): void ns3::LteInterference::DoAddSignal(ns3::Ptr<const ns3::SpectrumValue> spd) [member function]
    cls.add_method('DoAddSignal', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'spd')], 
                   is_virtual=True, visibility='protected')
    ## lte-interference.h (module 'lte'): void ns3::LteInterference::DoSubtractSignal(ns3::Ptr<const ns3::SpectrumValue> spd, uint32_t signalId) [member function]
    cls.add_method('DoSubtractSignal', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'spd'), param('uint32_t', 'signalId')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3LtePhy_methods(root_module, cls):
    ## lte-phy.h (module 'lte'): ns3::LtePhy::LtePhy(ns3::LtePhy const & arg0) [constructor]
    cls.add_constructor([param('ns3::LtePhy const &', 'arg0')])
    ## lte-phy.h (module 'lte'): ns3::LtePhy::LtePhy() [constructor]
    cls.add_constructor([])
    ## lte-phy.h (module 'lte'): ns3::LtePhy::LtePhy(ns3::Ptr<ns3::LteSpectrumPhy> dlPhy, ns3::Ptr<ns3::LteSpectrumPhy> ulPhy) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::LteSpectrumPhy >', 'dlPhy'), param('ns3::Ptr< ns3::LteSpectrumPhy >', 'ulPhy')])
    ## lte-phy.h (module 'lte'): ns3::Ptr<ns3::SpectrumValue> ns3::LtePhy::CreateTxPowerSpectralDensity() [member function]
    cls.add_method('CreateTxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::DoSendMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoSendMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::DoSetCellId(uint16_t cellId) [member function]
    cls.add_method('DoSetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::GenerateCtrlCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateCtrlCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::GenerateDataCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateDataCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-phy.h (module 'lte'): uint8_t ns3::LtePhy::GetComponentCarrierId() [member function]
    cls.add_method('GetComponentCarrierId', 
                   'uint8_t', 
                   [])
    ## lte-phy.h (module 'lte'): std::list<ns3::Ptr<ns3::LteControlMessage>, std::allocator<ns3::Ptr<ns3::LteControlMessage>>> ns3::LtePhy::GetControlMessages() [member function]
    cls.add_method('GetControlMessages', 
                   'std::list< ns3::Ptr< ns3::LteControlMessage > >', 
                   [])
    ## lte-phy.h (module 'lte'): ns3::Ptr<ns3::LteNetDevice> ns3::LtePhy::GetDevice() const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::LteNetDevice >', 
                   [], 
                   is_const=True)
    ## lte-phy.h (module 'lte'): ns3::Ptr<ns3::LteSpectrumPhy> ns3::LtePhy::GetDownlinkSpectrumPhy() [member function]
    cls.add_method('GetDownlinkSpectrumPhy', 
                   'ns3::Ptr< ns3::LteSpectrumPhy >', 
                   [])
    ## lte-phy.h (module 'lte'): ns3::Ptr<ns3::PacketBurst> ns3::LtePhy::GetPacketBurst() [member function]
    cls.add_method('GetPacketBurst', 
                   'ns3::Ptr< ns3::PacketBurst >', 
                   [])
    ## lte-phy.h (module 'lte'): uint8_t ns3::LtePhy::GetRbgSize() const [member function]
    cls.add_method('GetRbgSize', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-phy.h (module 'lte'): uint16_t ns3::LtePhy::GetSrsPeriodicity(uint16_t srcCi) const [member function]
    cls.add_method('GetSrsPeriodicity', 
                   'uint16_t', 
                   [param('uint16_t', 'srcCi')], 
                   is_const=True)
    ## lte-phy.h (module 'lte'): uint16_t ns3::LtePhy::GetSrsSubframeOffset(uint16_t srcCi) const [member function]
    cls.add_method('GetSrsSubframeOffset', 
                   'uint16_t', 
                   [param('uint16_t', 'srcCi')], 
                   is_const=True)
    ## lte-phy.h (module 'lte'): double ns3::LtePhy::GetTti() const [member function]
    cls.add_method('GetTti', 
                   'double', 
                   [], 
                   is_const=True)
    ## lte-phy.h (module 'lte'): static ns3::TypeId ns3::LtePhy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-phy.h (module 'lte'): ns3::Ptr<ns3::LteSpectrumPhy> ns3::LtePhy::GetUplinkSpectrumPhy() [member function]
    cls.add_method('GetUplinkSpectrumPhy', 
                   'ns3::Ptr< ns3::LteSpectrumPhy >', 
                   [])
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::ReportInterference(ns3::SpectrumValue const & interf) [member function]
    cls.add_method('ReportInterference', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'interf')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::ReportRsReceivedPower(ns3::SpectrumValue const & power) [member function]
    cls.add_method('ReportRsReceivedPower', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'power')], 
                   is_pure_virtual=True, is_virtual=True)
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::SetComponentCarrierId(uint8_t index) [member function]
    cls.add_method('SetComponentCarrierId', 
                   'void', 
                   [param('uint8_t', 'index')])
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::SetControlMessages(ns3::Ptr<ns3::LteControlMessage> m) [member function]
    cls.add_method('SetControlMessages', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteControlMessage >', 'm')])
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::SetDevice(ns3::Ptr<ns3::LteNetDevice> d) [member function]
    cls.add_method('SetDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteNetDevice >', 'd')])
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::SetDownlinkChannel(ns3::Ptr<ns3::SpectrumChannel> c) [member function]
    cls.add_method('SetDownlinkChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumChannel >', 'c')])
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::SetMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('SetMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::SetTti(double tti) [member function]
    cls.add_method('SetTti', 
                   'void', 
                   [param('double', 'tti')])
    ## lte-phy.h (module 'lte'): void ns3::LtePhy::SetUplinkChannel(ns3::Ptr<ns3::SpectrumChannel> c) [member function]
    cls.add_method('SetUplinkChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumChannel >', 'c')])
    return

def register_Ns3LteRadioBearerInfo_methods(root_module, cls):
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteRadioBearerInfo::LteRadioBearerInfo() [constructor]
    cls.add_constructor([])
    ## lte-radio-bearer-info.h (module 'lte'): static ns3::TypeId ns3::LteRadioBearerInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteRadioBearerInfo::m_rlc [variable]
    cls.add_instance_attribute('m_rlc', 'ns3::Ptr< ns3::LteRlc >', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteRadioBearerInfo::m_pdcp [variable]
    cls.add_instance_attribute('m_pdcp', 'ns3::Ptr< ns3::LtePdcp >', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteRadioBearerInfo::LteRadioBearerInfo(ns3::LteRadioBearerInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRadioBearerInfo const &', 'arg0')])
    return

def register_Ns3LteRlc_methods(root_module, cls):
    ## lte-rlc.h (module 'lte'): ns3::LteRlc::LteRlc(ns3::LteRlc const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRlc const &', 'arg0')])
    ## lte-rlc.h (module 'lte'): ns3::LteRlc::LteRlc() [constructor]
    cls.add_constructor([])
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-rlc.h (module 'lte'): ns3::LteMacSapUser * ns3::LteRlc::GetLteMacSapUser() [member function]
    cls.add_method('GetLteMacSapUser', 
                   'ns3::LteMacSapUser *', 
                   [])
    ## lte-rlc.h (module 'lte'): ns3::LteRlcSapProvider * ns3::LteRlc::GetLteRlcSapProvider() [member function]
    cls.add_method('GetLteRlcSapProvider', 
                   'ns3::LteRlcSapProvider *', 
                   [])
    ## lte-rlc.h (module 'lte'): static ns3::TypeId ns3::LteRlc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::SetDestinationL2Id(uint32_t dst) [member function]
    cls.add_method('SetDestinationL2Id', 
                   'void', 
                   [param('uint32_t', 'dst')])
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::SetLcId(uint8_t lcId) [member function]
    cls.add_method('SetLcId', 
                   'void', 
                   [param('uint8_t', 'lcId')])
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::SetLteMacSapProvider(ns3::LteMacSapProvider * s) [member function]
    cls.add_method('SetLteMacSapProvider', 
                   'void', 
                   [param('ns3::LteMacSapProvider *', 's')])
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::SetLteRlcSapUser(ns3::LteRlcSapUser * s) [member function]
    cls.add_method('SetLteRlcSapUser', 
                   'void', 
                   [param('ns3::LteRlcSapUser *', 's')])
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::SetRlcChannelType(ns3::LteRlc::ChannelType channelType) [member function]
    cls.add_method('SetRlcChannelType', 
                   'void', 
                   [param('ns3::LteRlc::ChannelType', 'channelType')])
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::SetRnti(uint16_t rnti) [member function]
    cls.add_method('SetRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::SetSourceL2Id(uint32_t src) [member function]
    cls.add_method('SetSourceL2Id', 
                   'void', 
                   [param('uint32_t', 'src')])
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::DoNotifyHarqDeliveryFailure() [member function]
    cls.add_method('DoNotifyHarqDeliveryFailure', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True, visibility='protected')
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::DoNotifyTxOpportunity(ns3::LteMacSapUser::TxOpportunityParameters params) [member function]
    cls.add_method('DoNotifyTxOpportunity', 
                   'void', 
                   [param('ns3::LteMacSapUser::TxOpportunityParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True, visibility='protected')
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::DoReceivePdu(ns3::LteMacSapUser::ReceivePduParameters params) [member function]
    cls.add_method('DoReceivePdu', 
                   'void', 
                   [param('ns3::LteMacSapUser::ReceivePduParameters', 'params')], 
                   is_pure_virtual=True, is_virtual=True, visibility='protected')
    ## lte-rlc.h (module 'lte'): void ns3::LteRlc::DoTransmitPdcpPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoTransmitPdcpPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_pure_virtual=True, is_virtual=True, visibility='protected')
    return

def register_Ns3LteRlcSm_methods(root_module, cls):
    ## lte-rlc.h (module 'lte'): ns3::LteRlcSm::LteRlcSm(ns3::LteRlcSm const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteRlcSm const &', 'arg0')])
    ## lte-rlc.h (module 'lte'): ns3::LteRlcSm::LteRlcSm() [constructor]
    cls.add_constructor([])
    ## lte-rlc.h (module 'lte'): void ns3::LteRlcSm::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-rlc.h (module 'lte'): void ns3::LteRlcSm::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-rlc.h (module 'lte'): void ns3::LteRlcSm::DoNotifyHarqDeliveryFailure() [member function]
    cls.add_method('DoNotifyHarqDeliveryFailure', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-rlc.h (module 'lte'): void ns3::LteRlcSm::DoNotifyTxOpportunity(ns3::LteMacSapUser::TxOpportunityParameters txOpParams) [member function]
    cls.add_method('DoNotifyTxOpportunity', 
                   'void', 
                   [param('ns3::LteMacSapUser::TxOpportunityParameters', 'txOpParams')], 
                   is_virtual=True)
    ## lte-rlc.h (module 'lte'): void ns3::LteRlcSm::DoReceivePdu(ns3::LteMacSapUser::ReceivePduParameters rxPduParams) [member function]
    cls.add_method('DoReceivePdu', 
                   'void', 
                   [param('ns3::LteMacSapUser::ReceivePduParameters', 'rxPduParams')], 
                   is_virtual=True)
    ## lte-rlc.h (module 'lte'): void ns3::LteRlcSm::DoTransmitPdcpPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoTransmitPdcpPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True)
    ## lte-rlc.h (module 'lte'): static ns3::TypeId ns3::LteRlcSm::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    return

def register_Ns3LteSidelinkRadioBearerInfo_methods(root_module, cls):
    ## lte-radio-bearer-info.h (module 'lte'): static ns3::TypeId ns3::LteSidelinkRadioBearerInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSidelinkRadioBearerInfo::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'uint8_t', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSidelinkRadioBearerInfo::m_logicalChannelConfig [variable]
    cls.add_instance_attribute('m_logicalChannelConfig', 'ns3::LteRrcSap::LogicalChannelConfig', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSidelinkRadioBearerInfo::m_sourceL2Id [variable]
    cls.add_instance_attribute('m_sourceL2Id', 'uint32_t', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSidelinkRadioBearerInfo::m_destinationL2Id [variable]
    cls.add_instance_attribute('m_destinationL2Id', 'uint32_t', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSidelinkRadioBearerInfo::LteSidelinkRadioBearerInfo(ns3::LteSidelinkRadioBearerInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSidelinkRadioBearerInfo const &', 'arg0')])
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSidelinkRadioBearerInfo::LteSidelinkRadioBearerInfo() [constructor]
    cls.add_constructor([])
    return

def register_Ns3LteSignalingRadioBearerInfo_methods(root_module, cls):
    ## lte-radio-bearer-info.h (module 'lte'): static ns3::TypeId ns3::LteSignalingRadioBearerInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSignalingRadioBearerInfo::m_srbIdentity [variable]
    cls.add_instance_attribute('m_srbIdentity', 'uint8_t', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSignalingRadioBearerInfo::m_logicalChannelConfig [variable]
    cls.add_instance_attribute('m_logicalChannelConfig', 'ns3::LteRrcSap::LogicalChannelConfig', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSignalingRadioBearerInfo::LteSignalingRadioBearerInfo(ns3::LteSignalingRadioBearerInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSignalingRadioBearerInfo const &', 'arg0')])
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteSignalingRadioBearerInfo::LteSignalingRadioBearerInfo() [constructor]
    cls.add_constructor([])
    return

def register_Ns3LteSlEnbRrc_methods(root_module, cls):
    ## lte-sl-enb-rrc.h (module 'lte'): ns3::LteSlEnbRrc::LteSlEnbRrc(ns3::LteSlEnbRrc const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlEnbRrc const &', 'arg0')])
    ## lte-sl-enb-rrc.h (module 'lte'): ns3::LteSlEnbRrc::LteSlEnbRrc() [constructor]
    cls.add_constructor([])
    ## lte-sl-enb-rrc.h (module 'lte'): void ns3::LteSlEnbRrc::AddDiscPool(ns3::LteRrcSap::SlDiscTxResourcesSetup pool) [member function]
    cls.add_method('AddDiscPool', 
                   'void', 
                   [param('ns3::LteRrcSap::SlDiscTxResourcesSetup', 'pool')])
    ## lte-sl-enb-rrc.h (module 'lte'): void ns3::LteSlEnbRrc::AddPreconfiguredDedicatedPool(uint32_t group, ns3::LteRrcSap::SlCommTxResourcesSetup pool) [member function]
    cls.add_method('AddPreconfiguredDedicatedPool', 
                   'void', 
                   [param('uint32_t', 'group'), param('ns3::LteRrcSap::SlCommTxResourcesSetup', 'pool')])
    ## lte-sl-enb-rrc.h (module 'lte'): void ns3::LteSlEnbRrc::AddPreconfiguredDedicatedPool(ns3::LteRrcSap::SlPreconfigDiscPool pool) [member function]
    cls.add_method('AddPreconfiguredDedicatedPool', 
                   'void', 
                   [param('ns3::LteRrcSap::SlPreconfigDiscPool', 'pool')])
    ## lte-sl-enb-rrc.h (module 'lte'): ns3::Ptr<ns3::LteSlEnbRrc> ns3::LteSlEnbRrc::Copy() [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::LteSlEnbRrc >', 
                   [])
    ## lte-sl-enb-rrc.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType18 ns3::LteSlEnbRrc::GetSystemInformationType18() [member function]
    cls.add_method('GetSystemInformationType18', 
                   'ns3::LteRrcSap::SystemInformationBlockType18', 
                   [])
    ## lte-sl-enb-rrc.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType19 ns3::LteSlEnbRrc::GetSystemInformationType19() [member function]
    cls.add_method('GetSystemInformationType19', 
                   'ns3::LteRrcSap::SystemInformationBlockType19', 
                   [])
    ## lte-sl-enb-rrc.h (module 'lte'): static ns3::TypeId ns3::LteSlEnbRrc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-enb-rrc.h (module 'lte'): bool ns3::LteSlEnbRrc::IsDiscEnabled() [member function]
    cls.add_method('IsDiscEnabled', 
                   'bool', 
                   [])
    ## lte-sl-enb-rrc.h (module 'lte'): bool ns3::LteSlEnbRrc::IsSlEnabled() [member function]
    cls.add_method('IsSlEnabled', 
                   'bool', 
                   [])
    ## lte-sl-enb-rrc.h (module 'lte'): void ns3::LteSlEnbRrc::SetCommTxPoolExceptional(ns3::LteRrcSap::SlCommTxPoolList pool) [member function]
    cls.add_method('SetCommTxPoolExceptional', 
                   'void', 
                   [param('ns3::LteRrcSap::SlCommTxPoolList', 'pool')])
    ## lte-sl-enb-rrc.h (module 'lte'): void ns3::LteSlEnbRrc::SetDefaultPool(ns3::LteRrcSap::SlCommTxResourcesSetup pool) [member function]
    cls.add_method('SetDefaultPool', 
                   'void', 
                   [param('ns3::LteRrcSap::SlCommTxResourcesSetup', 'pool')])
    ## lte-sl-enb-rrc.h (module 'lte'): void ns3::LteSlEnbRrc::SetDiscConfigRelay(ns3::LteRrcSap::Sib19DiscConfigRelay config) [member function]
    cls.add_method('SetDiscConfigRelay', 
                   'void', 
                   [param('ns3::LteRrcSap::Sib19DiscConfigRelay', 'config')])
    ## lte-sl-enb-rrc.h (module 'lte'): void ns3::LteSlEnbRrc::SetDiscEnabled(bool status) [member function]
    cls.add_method('SetDiscEnabled', 
                   'void', 
                   [param('bool', 'status')])
    ## lte-sl-enb-rrc.h (module 'lte'): void ns3::LteSlEnbRrc::SetSlEnabled(bool status) [member function]
    cls.add_method('SetSlEnabled', 
                   'void', 
                   [param('bool', 'status')])
    ## lte-sl-enb-rrc.h (module 'lte'): void ns3::LteSlEnbRrc::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## lte-sl-enb-rrc.h (module 'lte'): void ns3::LteSlEnbRrc::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3LteSlHarqPhy_methods(root_module, cls):
    ## lte-sl-harq-phy.h (module 'lte'): ns3::LteSlHarqPhy::LteSlHarqPhy(ns3::LteSlHarqPhy const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlHarqPhy const &', 'arg0')])
    ## lte-sl-harq-phy.h (module 'lte'): ns3::LteSlHarqPhy::LteSlHarqPhy() [constructor]
    cls.add_constructor([])
    ## lte-sl-harq-phy.h (module 'lte'): double ns3::LteSlHarqPhy::GetAccumulatedMiSl(uint16_t rnti, uint8_t l1dst) [member function]
    cls.add_method('GetAccumulatedMiSl', 
                   'double', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst')])
    ## lte-sl-harq-phy.h (module 'lte'): ns3::HarqProcessInfoList_t ns3::LteSlHarqPhy::GetHarqProcessInfoDisc(uint16_t rnti, uint8_t resPsdch) [member function]
    cls.add_method('GetHarqProcessInfoDisc', 
                   'ns3::HarqProcessInfoList_t', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'resPsdch')])
    ## lte-sl-harq-phy.h (module 'lte'): ns3::HarqProcessInfoList_t ns3::LteSlHarqPhy::GetHarqProcessInfoSl(uint16_t rnti, uint8_t l1dst) [member function]
    cls.add_method('GetHarqProcessInfoSl', 
                   'ns3::HarqProcessInfoList_t', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst')])
    ## lte-sl-harq-phy.h (module 'lte'): uint32_t ns3::LteSlHarqPhy::GetTbIdx(uint16_t rnti, uint8_t l1dst) [member function]
    cls.add_method('GetTbIdx', 
                   'uint32_t', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::IncreaseTbIdx(uint16_t rnti, uint8_t l1dst) [member function]
    cls.add_method('IncreaseTbIdx', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::IndicateDiscTbPrevDecoded(uint16_t rnti, uint8_t resPsdch) [member function]
    cls.add_method('IndicateDiscTbPrevDecoded', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'resPsdch')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::IndicatePrevDecoded(uint16_t rnti, uint8_t l1dst) [member function]
    cls.add_method('IndicatePrevDecoded', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst')])
    ## lte-sl-harq-phy.h (module 'lte'): bool ns3::LteSlHarqPhy::IsDiscTbPrevDecoded(uint16_t rnti, uint8_t resPsdch) [member function]
    cls.add_method('IsDiscTbPrevDecoded', 
                   'bool', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'resPsdch')])
    ## lte-sl-harq-phy.h (module 'lte'): bool ns3::LteSlHarqPhy::IsPrevDecoded(uint16_t rnti, uint8_t l1dst) [member function]
    cls.add_method('IsPrevDecoded', 
                   'bool', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::ResetDiscHarqProcessStatus(uint16_t rnti, uint8_t resPsdch) [member function]
    cls.add_method('ResetDiscHarqProcessStatus', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'resPsdch')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::ResetDiscTbPrevDecoded(uint16_t rnti, uint8_t resPsdch) [member function]
    cls.add_method('ResetDiscTbPrevDecoded', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'resPsdch')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::ResetPrevDecoded(uint16_t rnti, uint8_t l1dst) [member function]
    cls.add_method('ResetPrevDecoded', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::ResetSlHarqProcessStatus(uint16_t rnti, uint8_t l1dst) [member function]
    cls.add_method('ResetSlHarqProcessStatus', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::ResetTbIdx(uint16_t rnti, uint8_t l1dst) [member function]
    cls.add_method('ResetTbIdx', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::SetDiscNumRetx(uint8_t retx) [member function]
    cls.add_method('SetDiscNumRetx', 
                   'void', 
                   [param('uint8_t', 'retx')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::UpdateDiscHarqProcessStatus(uint16_t rnti, uint8_t resPsdch, double sinr) [member function]
    cls.add_method('UpdateDiscHarqProcessStatus', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'resPsdch'), param('double', 'sinr')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::UpdateSlHarqProcessStatus(uint16_t rnti, uint8_t l1dst, double mi, uint16_t infoBytes, uint16_t codeBytes) [member function]
    cls.add_method('UpdateSlHarqProcessStatus', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst'), param('double', 'mi'), param('uint16_t', 'infoBytes'), param('uint16_t', 'codeBytes')])
    ## lte-sl-harq-phy.h (module 'lte'): void ns3::LteSlHarqPhy::UpdateSlHarqProcessStatus(uint16_t rnti, uint8_t l1dst, double sinr) [member function]
    cls.add_method('UpdateSlHarqProcessStatus', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst'), param('double', 'sinr')])
    return

def register_Ns3LteSlInterference_methods(root_module, cls):
    ## lte-sl-interference.h (module 'lte'): ns3::LteSlInterference::LteSlInterference(ns3::LteSlInterference const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlInterference const &', 'arg0')])
    ## lte-sl-interference.h (module 'lte'): ns3::LteSlInterference::LteSlInterference() [constructor]
    cls.add_constructor([])
    ## lte-sl-interference.h (module 'lte'): void ns3::LteSlInterference::AddInterferenceChunkProcessor(ns3::Ptr<ns3::LteSlChunkProcessor> p) [member function]
    cls.add_method('AddInterferenceChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSlChunkProcessor >', 'p')])
    ## lte-sl-interference.h (module 'lte'): void ns3::LteSlInterference::AddRsPowerChunkProcessor(ns3::Ptr<ns3::LteSlChunkProcessor> p) [member function]
    cls.add_method('AddRsPowerChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSlChunkProcessor >', 'p')])
    ## lte-sl-interference.h (module 'lte'): void ns3::LteSlInterference::AddSignal(ns3::Ptr<const ns3::SpectrumValue> spd, ns3::Time const duration) [member function]
    cls.add_method('AddSignal', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'spd'), param('ns3::Time const', 'duration')])
    ## lte-sl-interference.h (module 'lte'): void ns3::LteSlInterference::AddSinrChunkProcessor(ns3::Ptr<ns3::LteSlChunkProcessor> p) [member function]
    cls.add_method('AddSinrChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSlChunkProcessor >', 'p')])
    ## lte-sl-interference.h (module 'lte'): void ns3::LteSlInterference::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-sl-interference.h (module 'lte'): void ns3::LteSlInterference::EndRx() [member function]
    cls.add_method('EndRx', 
                   'void', 
                   [])
    ## lte-sl-interference.h (module 'lte'): static ns3::TypeId ns3::LteSlInterference::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-interference.h (module 'lte'): void ns3::LteSlInterference::SetNoisePowerSpectralDensity(ns3::Ptr<const ns3::SpectrumValue> noisePsd) [member function]
    cls.add_method('SetNoisePowerSpectralDensity', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'noisePsd')])
    ## lte-sl-interference.h (module 'lte'): void ns3::LteSlInterference::StartRx(ns3::Ptr<const ns3::SpectrumValue> rxPsd) [member function]
    cls.add_method('StartRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'rxPsd')])
    return

def register_Ns3LteSlO2oCommParams_methods(root_module, cls):
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::LteSlO2oCommParams(ns3::LteSlO2oCommParams const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlO2oCommParams const &', 'arg0')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::LteSlO2oCommParams() [constructor]
    cls.add_constructor([])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::ClearTimers() [member function]
    cls.add_method('ClearTimers', 
                   'void', 
                   [])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::LteSlPc5ContextId ns3::LteSlO2oCommParams::GetContextId() [member function]
    cls.add_method('GetContextId', 
                   'ns3::LteSlO2oCommParams::LteSlPc5ContextId', 
                   [])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::DirectCommunicationKeepalive ns3::LteSlO2oCommParams::GetDckRetrans() const [member function]
    cls.add_method('GetDckRetrans', 
                   'ns3::DirectCommunicationKeepalive', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::DirectCommunicationRelease ns3::LteSlO2oCommParams::GetDcrRetrans() const [member function]
    cls.add_method('GetDcrRetrans', 
                   'ns3::DirectCommunicationRelease', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::DirectCommunicationRequest ns3::LteSlO2oCommParams::GetDcrqRetrans() const [member function]
    cls.add_method('GetDcrqRetrans', 
                   'ns3::DirectCommunicationRequest', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::DirectSecurityModeCommand ns3::LteSlO2oCommParams::GetDsmcmRetrans() const [member function]
    cls.add_method('GetDsmcmRetrans', 
                   'ns3::DirectSecurityModeCommand', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint16_t ns3::LteSlO2oCommParams::GetRelayDcrCount() const [member function]
    cls.add_method('GetRelayDcrCount', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint32_t ns3::LteSlO2oCommParams::GetRelayDcrMax() const [member function]
    cls.add_method('GetRelayDcrMax', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint16_t ns3::LteSlO2oCommParams::GetRelayRuirCount() const [member function]
    cls.add_method('GetRelayRuirCount', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint32_t ns3::LteSlO2oCommParams::GetRelayRuirMax() const [member function]
    cls.add_method('GetRelayRuirMax', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::Timer * ns3::LteSlO2oCommParams::GetRelayT4103() [member function]
    cls.add_method('GetRelayT4103', 
                   'ns3::Timer *', 
                   [])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::Timer * ns3::LteSlO2oCommParams::GetRelayT4108() [member function]
    cls.add_method('GetRelayT4108', 
                   'ns3::Timer *', 
                   [])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::Timer * ns3::LteSlO2oCommParams::GetRelayT4111() [member function]
    cls.add_method('GetRelayT4111', 
                   'ns3::Timer *', 
                   [])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::Timer * ns3::LteSlO2oCommParams::GetRelayTRUIR() [member function]
    cls.add_method('GetRelayTRUIR', 
                   'ns3::Timer *', 
                   [])
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint16_t ns3::LteSlO2oCommParams::GetRemoteDckCount() const [member function]
    cls.add_method('GetRemoteDckCount', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint32_t ns3::LteSlO2oCommParams::GetRemoteDckMax() const [member function]
    cls.add_method('GetRemoteDckMax', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint16_t ns3::LteSlO2oCommParams::GetRemoteDcrCount() const [member function]
    cls.add_method('GetRemoteDcrCount', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint32_t ns3::LteSlO2oCommParams::GetRemoteDcrMax() const [member function]
    cls.add_method('GetRemoteDcrMax', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint16_t ns3::LteSlO2oCommParams::GetRemoteDcrqCount() const [member function]
    cls.add_method('GetRemoteDcrqCount', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint32_t ns3::LteSlO2oCommParams::GetRemoteDcrqMax() const [member function]
    cls.add_method('GetRemoteDcrqMax', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint16_t ns3::LteSlO2oCommParams::GetRemoteKaCount() const [member function]
    cls.add_method('GetRemoteKaCount', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::Timer * ns3::LteSlO2oCommParams::GetRemoteT4100() [member function]
    cls.add_method('GetRemoteT4100', 
                   'ns3::Timer *', 
                   [])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::Timer * ns3::LteSlO2oCommParams::GetRemoteT4101() [member function]
    cls.add_method('GetRemoteT4101', 
                   'ns3::Timer *', 
                   [])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::Timer * ns3::LteSlO2oCommParams::GetRemoteT4102() [member function]
    cls.add_method('GetRemoteT4102', 
                   'ns3::Timer *', 
                   [])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::Timer * ns3::LteSlO2oCommParams::GetRemoteT4103() [member function]
    cls.add_method('GetRemoteT4103', 
                   'ns3::Timer *', 
                   [])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::RemoteUeInfoRequest ns3::LteSlO2oCommParams::GetRuirqRetrans() const [member function]
    cls.add_method('GetRuirqRetrans', 
                   'ns3::RemoteUeInfoRequest', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): uint8_t ns3::LteSlO2oCommParams::GetSecurityModeId() const [member function]
    cls.add_method('GetSecurityModeId', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::DirectSecurityModeState ns3::LteSlO2oCommParams::GetSecurityModeState() const [member function]
    cls.add_method('GetSecurityModeState', 
                   'ns3::LteSlO2oCommParams::DirectSecurityModeState', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::UeO2OCommState ns3::LteSlO2oCommParams::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::LteSlO2oCommParams::UeO2OCommState', 
                   [], 
                   is_const=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): std::string ns3::LteSlO2oCommParams::GetStateString(ns3::LteSlO2oCommParams::UeO2OCommState state) [member function]
    cls.add_method('GetStateString', 
                   'std::string', 
                   [param('ns3::LteSlO2oCommParams::UeO2OCommState', 'state')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): static ns3::TypeId ns3::LteSlO2oCommParams::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetContextId(ns3::LteSlO2oCommParams::LteSlPc5ContextId contextId) [member function]
    cls.add_method('SetContextId', 
                   'void', 
                   [param('ns3::LteSlO2oCommParams::LteSlPc5ContextId', 'contextId')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetDckRetrans(ns3::DirectCommunicationKeepalive value) [member function]
    cls.add_method('SetDckRetrans', 
                   'void', 
                   [param('ns3::DirectCommunicationKeepalive', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetDcrRetrans(ns3::DirectCommunicationRelease value) [member function]
    cls.add_method('SetDcrRetrans', 
                   'void', 
                   [param('ns3::DirectCommunicationRelease', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetDcrqRetrans(ns3::DirectCommunicationRequest value) [member function]
    cls.add_method('SetDcrqRetrans', 
                   'void', 
                   [param('ns3::DirectCommunicationRequest', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetDsmcmRetrans(ns3::DirectSecurityModeCommand value) [member function]
    cls.add_method('SetDsmcmRetrans', 
                   'void', 
                   [param('ns3::DirectSecurityModeCommand', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetDsmcmRetransLsb(uint8_t lsb) [member function]
    cls.add_method('SetDsmcmRetransLsb', 
                   'void', 
                   [param('uint8_t', 'lsb')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRelayDcrCount(uint16_t value) [member function]
    cls.add_method('SetRelayDcrCount', 
                   'void', 
                   [param('uint16_t', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRelayRuirCount(uint16_t value) [member function]
    cls.add_method('SetRelayRuirCount', 
                   'void', 
                   [param('uint16_t', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRelayT4103Duration(uint32_t duration) [member function]
    cls.add_method('SetRelayT4103Duration', 
                   'void', 
                   [param('uint32_t', 'duration')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRelayT4108Duration(uint32_t duration) [member function]
    cls.add_method('SetRelayT4108Duration', 
                   'void', 
                   [param('uint32_t', 'duration')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRelayT4111Duration(uint32_t duration) [member function]
    cls.add_method('SetRelayT4111Duration', 
                   'void', 
                   [param('uint32_t', 'duration')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRelayTRUIRDuration(uint32_t duration) [member function]
    cls.add_method('SetRelayTRUIRDuration', 
                   'void', 
                   [param('uint32_t', 'duration')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRemoteDckCount(uint16_t value) [member function]
    cls.add_method('SetRemoteDckCount', 
                   'void', 
                   [param('uint16_t', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRemoteDcrCount(uint16_t value) [member function]
    cls.add_method('SetRemoteDcrCount', 
                   'void', 
                   [param('uint16_t', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRemoteDcrqCount(uint16_t value) [member function]
    cls.add_method('SetRemoteDcrqCount', 
                   'void', 
                   [param('uint16_t', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRemoteKaCount(uint16_t value) [member function]
    cls.add_method('SetRemoteKaCount', 
                   'void', 
                   [param('uint16_t', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRemoteT4100Duration(uint32_t duration) [member function]
    cls.add_method('SetRemoteT4100Duration', 
                   'void', 
                   [param('uint32_t', 'duration')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRemoteT4101Duration(uint32_t duration) [member function]
    cls.add_method('SetRemoteT4101Duration', 
                   'void', 
                   [param('uint32_t', 'duration')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRemoteT4102Duration(uint32_t duration) [member function]
    cls.add_method('SetRemoteT4102Duration', 
                   'void', 
                   [param('uint32_t', 'duration')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRemoteT4103Duration(uint32_t duration) [member function]
    cls.add_method('SetRemoteT4103Duration', 
                   'void', 
                   [param('uint32_t', 'duration')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetRuirqRetrans(ns3::RemoteUeInfoRequest value) [member function]
    cls.add_method('SetRuirqRetrans', 
                   'void', 
                   [param('ns3::RemoteUeInfoRequest', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetSecurityModeId(uint8_t value) [member function]
    cls.add_method('SetSecurityModeId', 
                   'void', 
                   [param('uint8_t', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetSecurityModeState(ns3::LteSlO2oCommParams::DirectSecurityModeState value) [member function]
    cls.add_method('SetSecurityModeState', 
                   'void', 
                   [param('ns3::LteSlO2oCommParams::DirectSecurityModeState', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::SetState(ns3::LteSlO2oCommParams::UeO2OCommState value) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::LteSlO2oCommParams::UeO2OCommState', 'value')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## lte-sl-o2o-comm-params.h (module 'lte'): void ns3::LteSlO2oCommParams::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3LteSlO2oCommParamsLteSlPc5ContextId_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::LteSlPc5ContextId::LteSlPc5ContextId() [constructor]
    cls.add_constructor([])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::LteSlPc5ContextId::LteSlPc5ContextId(ns3::LteSlO2oCommParams::LteSlPc5ContextId const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlO2oCommParams::LteSlPc5ContextId const &', 'arg0')])
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::LteSlPc5ContextId::contextId [variable]
    cls.add_instance_attribute('contextId', 'uint32_t', is_const=False)
    ## lte-sl-o2o-comm-params.h (module 'lte'): ns3::LteSlO2oCommParams::LteSlPc5ContextId::peerL2Id [variable]
    cls.add_instance_attribute('peerL2Id', 'uint32_t', is_const=False)
    return

def register_Ns3LteSlTft_methods(root_module, cls):
    ## lte-sl-tft.h (module 'lte'): ns3::LteSlTft::LteSlTft(ns3::LteSlTft const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlTft const &', 'arg0')])
    ## lte-sl-tft.h (module 'lte'): ns3::LteSlTft::LteSlTft(ns3::LteSlTft::Direction d, ns3::LteSlTft::AddressType type, ns3::Ipv4Address addr, uint32_t remoteL2) [constructor]
    cls.add_constructor([param('ns3::LteSlTft::Direction', 'd'), param('ns3::LteSlTft::AddressType', 'type'), param('ns3::Ipv4Address', 'addr'), param('uint32_t', 'remoteL2')])
    ## lte-sl-tft.h (module 'lte'): ns3::LteSlTft::LteSlTft(ns3::LteSlTft::Direction d, ns3::Ipv4Address addr, uint32_t remoteL2) [constructor]
    cls.add_constructor([param('ns3::LteSlTft::Direction', 'd'), param('ns3::Ipv4Address', 'addr'), param('uint32_t', 'remoteL2')])
    ## lte-sl-tft.h (module 'lte'): ns3::LteSlTft::LteSlTft(ns3::LteSlTft::Direction d, ns3::LteSlTft::AddressType type, ns3::Ipv4Address addr, ns3::Ipv4Mask mask, uint32_t remoteL2) [constructor]
    cls.add_constructor([param('ns3::LteSlTft::Direction', 'd'), param('ns3::LteSlTft::AddressType', 'type'), param('ns3::Ipv4Address', 'addr'), param('ns3::Ipv4Mask', 'mask'), param('uint32_t', 'remoteL2')])
    ## lte-sl-tft.h (module 'lte'): ns3::LteSlTft::LteSlTft(ns3::LteSlTft::Direction d, ns3::LteSlTft::AddressType type, ns3::Ipv6Address addr, uint32_t remoteL2) [constructor]
    cls.add_constructor([param('ns3::LteSlTft::Direction', 'd'), param('ns3::LteSlTft::AddressType', 'type'), param('ns3::Ipv6Address', 'addr'), param('uint32_t', 'remoteL2')])
    ## lte-sl-tft.h (module 'lte'): ns3::LteSlTft::LteSlTft(ns3::LteSlTft::Direction d, ns3::Ipv6Address addr, uint32_t remoteL2) [constructor]
    cls.add_constructor([param('ns3::LteSlTft::Direction', 'd'), param('ns3::Ipv6Address', 'addr'), param('uint32_t', 'remoteL2')])
    ## lte-sl-tft.h (module 'lte'): ns3::LteSlTft::LteSlTft(ns3::LteSlTft::Direction d, ns3::LteSlTft::AddressType type, ns3::Ipv6Address addr, ns3::Ipv6Prefix prefix, uint32_t remoteL2) [constructor]
    cls.add_constructor([param('ns3::LteSlTft::Direction', 'd'), param('ns3::LteSlTft::AddressType', 'type'), param('ns3::Ipv6Address', 'addr'), param('ns3::Ipv6Prefix', 'prefix'), param('uint32_t', 'remoteL2')])
    ## lte-sl-tft.h (module 'lte'): ns3::LteSlTft::LteSlTft(ns3::Ptr<ns3::LteSlTft> tft) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::LteSlTft >', 'tft')])
    ## lte-sl-tft.h (module 'lte'): bool ns3::LteSlTft::Equals(ns3::Ptr<ns3::LteSlTft> tft) [member function]
    cls.add_method('Equals', 
                   'bool', 
                   [param('ns3::Ptr< ns3::LteSlTft >', 'tft')])
    ## lte-sl-tft.h (module 'lte'): uint32_t ns3::LteSlTft::GetRemoteL2Address() [member function]
    cls.add_method('GetRemoteL2Address', 
                   'uint32_t', 
                   [])
    ## lte-sl-tft.h (module 'lte'): bool ns3::LteSlTft::Matches(ns3::Ipv4Address la, ns3::Ipv4Address ra) [member function]
    cls.add_method('Matches', 
                   'bool', 
                   [param('ns3::Ipv4Address', 'la'), param('ns3::Ipv4Address', 'ra')])
    ## lte-sl-tft.h (module 'lte'): bool ns3::LteSlTft::Matches(ns3::Ipv6Address la, ns3::Ipv6Address ra) [member function]
    cls.add_method('Matches', 
                   'bool', 
                   [param('ns3::Ipv6Address', 'la'), param('ns3::Ipv6Address', 'ra')])
    ## lte-sl-tft.h (module 'lte'): bool ns3::LteSlTft::isReceive() [member function]
    cls.add_method('isReceive', 
                   'bool', 
                   [])
    ## lte-sl-tft.h (module 'lte'): bool ns3::LteSlTft::isTransmit() [member function]
    cls.add_method('isTransmit', 
                   'bool', 
                   [])
    return

def register_Ns3LteSlUeRrc_methods(root_module, cls):
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::LteSlUeRrc(ns3::LteSlUeRrc const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlUeRrc const &', 'arg0')])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::LteSlUeRrc() [constructor]
    cls.add_constructor([])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::AddSidelinkRadioBearer(ns3::Ptr<ns3::LteSidelinkRadioBearerInfo> slb) [member function]
    cls.add_method('AddSidelinkRadioBearer', 
                   'bool', 
                   [param('ns3::Ptr< ns3::LteSidelinkRadioBearerInfo >', 'slb')])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::Ptr<ns3::LteSlUeRrc> ns3::LteSlUeRrc::Copy() [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::LteSlUeRrc >', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::DeleteSidelinkRadioBearer(uint32_t src, uint32_t group) [member function]
    cls.add_method('DeleteSidelinkRadioBearer', 
                   'bool', 
                   [param('uint32_t', 'src'), param('uint32_t', 'group')])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::Ptr<ns3::SidelinkTxDiscResourcePool> ns3::LteSlUeRrc::GetActiveTxDiscoveryPool() [member function]
    cls.add_method('GetActiveTxDiscoveryPool', 
                   'ns3::Ptr< ns3::SidelinkTxDiscResourcePool >', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): uint16_t ns3::LteSlUeRrc::GetDiscInterFreq() [member function]
    cls.add_method('GetDiscInterFreq', 
                   'uint16_t', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): uint8_t ns3::LteSlUeRrc::GetDiscTxResources() [member function]
    cls.add_method('GetDiscTxResources', 
                   'uint8_t', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeCtrlSapUser * ns3::LteSlUeRrc::GetLteSlUeCtrlSapUser() [member function]
    cls.add_method('GetLteSlUeCtrlSapUser', 
                   'ns3::LteSlUeCtrlSapUser *', 
                   [], 
                   is_virtual=True)
    ## lte-sl-ue-rrc.h (module 'lte'): uint8_t ns3::LteSlUeRrc::GetNextLcid(uint32_t dstL2Id) [member function]
    cls.add_method('GetNextLcid', 
                   'uint8_t', 
                   [param('uint32_t', 'dstL2Id')])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::Ptr<ns3::LteSidelinkRadioBearerInfo> ns3::LteSlUeRrc::GetSidelinkRadioBearer(uint32_t src, uint32_t group) [member function]
    cls.add_method('GetSidelinkRadioBearer', 
                   'ns3::Ptr< ns3::LteSidelinkRadioBearerInfo >', 
                   [param('uint32_t', 'src'), param('uint32_t', 'group')])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::Ptr<ns3::LteSidelinkRadioBearerInfo> ns3::LteSlUeRrc::GetSidelinkRadioBearer(uint32_t group) [member function]
    cls.add_method('GetSidelinkRadioBearer', 
                   'ns3::Ptr< ns3::LteSidelinkRadioBearerInfo >', 
                   [param('uint32_t', 'group')])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteRrcSap::SlPreconfiguration ns3::LteSlUeRrc::GetSlPreconfiguration() [member function]
    cls.add_method('GetSlPreconfiguration', 
                   'ns3::LteRrcSap::SlPreconfiguration', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): uint32_t ns3::LteSlUeRrc::GetSourceL2Id() [member function]
    cls.add_method('GetSourceL2Id', 
                   'uint32_t', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): double ns3::LteSlUeRrc::GetTimeSinceLastTransmissionOfSidelinkUeInformation() [member function]
    cls.add_method('GetTimeSinceLastTransmissionOfSidelinkUeInformation', 
                   'double', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): std::list<unsigned int, std::allocator<unsigned int>> ns3::LteSlUeRrc::GetTxDestinations() [member function]
    cls.add_method('GetTxDestinations', 
                   'std::list< unsigned int >', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): static ns3::TypeId ns3::LteSlUeRrc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsAnnouncingApp(uint32_t appCode) [member function]
    cls.add_method('IsAnnouncingApp', 
                   'bool', 
                   [param('uint32_t', 'appCode')])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsAnnouncingInterested() [member function]
    cls.add_method('IsAnnouncingInterested', 
                   'bool', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsCellBroadcastingSIB18(uint16_t cellId) [member function]
    cls.add_method('IsCellBroadcastingSIB18', 
                   'bool', 
                   [param('uint16_t', 'cellId')])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsCellBroadcastingSIB19(uint16_t cellId) [member function]
    cls.add_method('IsCellBroadcastingSIB19', 
                   'bool', 
                   [param('uint16_t', 'cellId')])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsDiscEnabled() [member function]
    cls.add_method('IsDiscEnabled', 
                   'bool', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsMonitoringApp(uint8_t msgType, uint32_t appCode) [member function]
    cls.add_method('IsMonitoringApp', 
                   'bool', 
                   [param('uint8_t', 'msgType'), param('uint32_t', 'appCode')])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsMonitoringInterested() [member function]
    cls.add_method('IsMonitoringInterested', 
                   'bool', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsMonitoringRelayServiceCode(uint8_t msgType, uint32_t serviceCode) [member function]
    cls.add_method('IsMonitoringRelayServiceCode', 
                   'bool', 
                   [param('uint8_t', 'msgType'), param('uint32_t', 'serviceCode')])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsRxInterested() [member function]
    cls.add_method('IsRxInterested', 
                   'bool', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsSlEnabled() [member function]
    cls.add_method('IsSlEnabled', 
                   'bool', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsTxInterested() [member function]
    cls.add_method('IsTxInterested', 
                   'bool', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::RecordTransmissionOfSidelinkUeInformation() [member function]
    cls.add_method('RecordTransmissionOfSidelinkUeInformation', 
                   'void', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::RelayUeSelection(std::map<std::pair<unsigned long, unsigned int>, double, std::less<std::pair<unsigned long, unsigned int>>, std::allocator<std::pair<const std::pair<unsigned long, unsigned int>, double>>> validRelays) [member function]
    cls.add_method('RelayUeSelection', 
                   'void', 
                   [param('std::map< std::pair< unsigned long, unsigned int >, double >', 'validRelays')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::SetActiveTxDiscoveryPool(ns3::Ptr<ns3::SidelinkTxDiscResourcePool> pool) [member function]
    cls.add_method('SetActiveTxDiscoveryPool', 
                   'void', 
                   [param('ns3::Ptr< ns3::SidelinkTxDiscResourcePool >', 'pool')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::SetDiscEnabled(bool status) [member function]
    cls.add_method('SetDiscEnabled', 
                   'void', 
                   [param('bool', 'status')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::SetDiscInterFreq(uint16_t ulEarfcn) [member function]
    cls.add_method('SetDiscInterFreq', 
                   'void', 
                   [param('uint16_t', 'ulEarfcn')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::SetDiscTxResources(uint8_t numDiscTxRes) [member function]
    cls.add_method('SetDiscTxResources', 
                   'void', 
                   [param('uint8_t', 'numDiscTxRes')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::SetLteSlUeCtrlSapProvider(ns3::LteSlUeCtrlSapProvider * s) [member function]
    cls.add_method('SetLteSlUeCtrlSapProvider', 
                   'void', 
                   [param('ns3::LteSlUeCtrlSapProvider *', 's')], 
                   is_virtual=True)
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::SetSlEnabled(bool status) [member function]
    cls.add_method('SetSlEnabled', 
                   'void', 
                   [param('bool', 'status')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::SetSlPreconfiguration(ns3::LteRrcSap::SlPreconfiguration preconfiguration) [member function]
    cls.add_method('SetSlPreconfiguration', 
                   'void', 
                   [param('ns3::LteRrcSap::SlPreconfiguration', 'preconfiguration')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::SetSourceL2Id(uint32_t src) [member function]
    cls.add_method('SetSourceL2Id', 
                   'void', 
                   [param('uint32_t', 'src')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::StartAnnouncing() [member function]
    cls.add_method('StartAnnouncing', 
                   'void', 
                   [])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::StartDiscoveryApps(std::list<unsigned int, std::allocator<unsigned int>> payloads, ns3::LteSlUeRrc::DiscoveryRole role) [member function]
    cls.add_method('StartDiscoveryApps', 
                   'void', 
                   [param('std::list< unsigned int >', 'payloads'), param('ns3::LteSlUeRrc::DiscoveryRole', 'role')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::StartRelayDirectCommunication(uint32_t serviceCode, uint32_t proseRelayUeId) [member function]
    cls.add_method('StartRelayDirectCommunication', 
                   'void', 
                   [param('uint32_t', 'serviceCode'), param('uint32_t', 'proseRelayUeId')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::StartRelayService(uint32_t serviceCode, ns3::LteSlUeRrc::DiscoveryModel model, ns3::LteSlUeRrc::RelayRole role) [member function]
    cls.add_method('StartRelayService', 
                   'void', 
                   [param('uint32_t', 'serviceCode'), param('ns3::LteSlUeRrc::DiscoveryModel', 'model'), param('ns3::LteSlUeRrc::RelayRole', 'role')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::StopDiscoveryApps(std::list<unsigned int, std::allocator<unsigned int>> payloads, ns3::LteSlUeRrc::DiscoveryRole role) [member function]
    cls.add_method('StopDiscoveryApps', 
                   'void', 
                   [param('std::list< unsigned int >', 'payloads'), param('ns3::LteSlUeRrc::DiscoveryRole', 'role')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::StopRelayService(uint32_t serviceCode) [member function]
    cls.add_method('StopRelayService', 
                   'void', 
                   [param('uint32_t', 'serviceCode')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::TransmitApp(uint32_t appCode) [member function]
    cls.add_method('TransmitApp', 
                   'void', 
                   [param('uint32_t', 'appCode')])
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::TransmitRelayMessage(uint32_t serviceCode) [member function]
    cls.add_method('TransmitRelayMessage', 
                   'void', 
                   [param('uint32_t', 'serviceCode')])
    ## lte-sl-ue-rrc.h (module 'lte'): int64_t ns3::LteSlUeRrc::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): std::map<ns3::LteSlO2oCommParams::LteSlPc5ContextId, ns3::Ptr<ns3::LteSlO2oCommParams>, std::less<ns3::LteSlO2oCommParams::LteSlPc5ContextId>, std::allocator<std::pair<const ns3::LteSlO2oCommParams::LteSlPc5ContextId, ns3::Ptr<ns3::LteSlO2oCommParams>>>>::iterator ns3::LteSlUeRrc::GetO2OContext(uint32_t peerUeId, uint32_t contextId) [member function]
    cls.add_method('GetO2OContext', 
                   'std::map< ns3::LteSlO2oCommParams::LteSlPc5ContextId, ns3::Ptr< ns3::LteSlO2oCommParams > > iterator', 
                   [param('uint32_t', 'peerUeId'), param('uint32_t', 'contextId')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): bool ns3::LteSlUeRrc::IsOneToOnePeer(uint32_t proseUeId) [member function]
    cls.add_method('IsOneToOnePeer', 
                   'bool', 
                   [param('uint32_t', 'proseUeId')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::NotifySidelinkRadioBearerActivated(uint32_t proseUeId) [member function]
    cls.add_method('NotifySidelinkRadioBearerActivated', 
                   'void', 
                   [param('uint32_t', 'proseUeId')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectCommunicationAccept(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectCommunicationAccept', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectCommunicationKeepalive(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectCommunicationKeepalive', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectCommunicationKeepaliveAck(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectCommunicationKeepaliveAck', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectCommunicationReject(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectCommunicationReject', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectCommunicationRelease(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectCommunicationRelease', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectCommunicationReleaseAccept(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectCommunicationReleaseAccept', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectCommunicationRequest(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectCommunicationRequest', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectRekeyingRequest(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectRekeyingRequest', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectRekeyingResponse(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectRekeyingResponse', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectRekeyingTrigger(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectRekeyingTrigger', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectSecurityModeCommand(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectSecurityModeCommand', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectSecurityModeComplete(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectSecurityModeComplete', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessDirectSecurityModeReject(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessDirectSecurityModeReject', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessRemoteUeInfoRequest(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessRemoteUeInfoRequest', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ProcessRemoteUeInfoResponse(uint32_t L2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('ProcessRemoteUeInfoResponse', 
                   'void', 
                   [param('uint32_t', 'L2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::RecvApplicationServiceDiscovery(uint8_t msgType, uint32_t appCode) [member function]
    cls.add_method('RecvApplicationServiceDiscovery', 
                   'void', 
                   [param('uint8_t', 'msgType'), param('uint32_t', 'appCode')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::RecvPc5DataMessage(uint32_t srcL2Id, uint32_t dstL2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('RecvPc5DataMessage', 
                   'void', 
                   [param('uint32_t', 'srcL2Id'), param('uint32_t', 'dstL2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::RecvPc5SignalingMessage(uint32_t srcL2Id, uint32_t dstL2Id, ns3::Ptr<ns3::Packet> pdcpSdu) [member function]
    cls.add_method('RecvPc5SignalingMessage', 
                   'void', 
                   [param('uint32_t', 'srcL2Id'), param('uint32_t', 'dstL2Id'), param('ns3::Ptr< ns3::Packet >', 'pdcpSdu')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::RecvRelayServiceDiscovery(uint32_t serviceCode, uint64_t announcerInfo, uint32_t proseRelayUeId, uint8_t statusIndicator) [member function]
    cls.add_method('RecvRelayServiceDiscovery', 
                   'void', 
                   [param('uint32_t', 'serviceCode'), param('uint64_t', 'announcerInfo'), param('uint32_t', 'proseRelayUeId'), param('uint8_t', 'statusIndicator')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::RecvRelayServiceDiscovery(uint32_t serviceCode, uint64_t discovererInfo, uint8_t urdsComposition, uint32_t proseRelayUeId) [member function]
    cls.add_method('RecvRelayServiceDiscovery', 
                   'void', 
                   [param('uint32_t', 'serviceCode'), param('uint64_t', 'discovererInfo'), param('uint8_t', 'urdsComposition'), param('uint32_t', 'proseRelayUeId')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::ReleaseO2OConnection(ns3::Ptr<ns3::LteSlO2oCommParams> context, ns3::LteSlO2oCommParams::UeO2OReleaseReason reason) [member function]
    cls.add_method('ReleaseO2OConnection', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSlO2oCommParams >', 'context'), param('ns3::LteSlO2oCommParams::UeO2OReleaseReason', 'reason')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::Timer4100Expiry(ns3::LteSlO2oCommParams::LteSlPc5ContextId cId) [member function]
    cls.add_method('Timer4100Expiry', 
                   'void', 
                   [param('ns3::LteSlO2oCommParams::LteSlPc5ContextId', 'cId')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::Timer4101Expiry(ns3::LteSlO2oCommParams::LteSlPc5ContextId cId) [member function]
    cls.add_method('Timer4101Expiry', 
                   'void', 
                   [param('ns3::LteSlO2oCommParams::LteSlPc5ContextId', 'cId')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::Timer4102Expiry(ns3::LteSlO2oCommParams::LteSlPc5ContextId cId) [member function]
    cls.add_method('Timer4102Expiry', 
                   'void', 
                   [param('ns3::LteSlO2oCommParams::LteSlPc5ContextId', 'cId')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::Timer4103Expiry(ns3::LteSlO2oCommParams::LteSlPc5ContextId cId) [member function]
    cls.add_method('Timer4103Expiry', 
                   'void', 
                   [param('ns3::LteSlO2oCommParams::LteSlPc5ContextId', 'cId')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::Timer4108Expiry(ns3::LteSlO2oCommParams::LteSlPc5ContextId cId) [member function]
    cls.add_method('Timer4108Expiry', 
                   'void', 
                   [param('ns3::LteSlO2oCommParams::LteSlPc5ContextId', 'cId')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::Timer4111Expiry(ns3::LteSlO2oCommParams::LteSlPc5ContextId cId) [member function]
    cls.add_method('Timer4111Expiry', 
                   'void', 
                   [param('ns3::LteSlO2oCommParams::LteSlPc5ContextId', 'cId')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::TimerRUIRExpiry(ns3::LteSlO2oCommParams::LteSlPc5ContextId cId) [member function]
    cls.add_method('TimerRUIRExpiry', 
                   'void', 
                   [param('ns3::LteSlO2oCommParams::LteSlPc5ContextId', 'cId')], 
                   visibility='protected')
    ## lte-sl-ue-rrc.h (module 'lte'): void ns3::LteSlUeRrc::UpdateKeepAlive(ns3::Ptr<ns3::LteSlO2oCommParams> context) [member function]
    cls.add_method('UpdateKeepAlive', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSlO2oCommParams >', 'context')], 
                   visibility='protected')
    return

def register_Ns3LteSlUeRrcAppServiceInfo_methods(root_module, cls):
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::AppServiceInfo::AppServiceInfo() [constructor]
    cls.add_constructor([])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::AppServiceInfo::AppServiceInfo(ns3::LteSlUeRrc::AppServiceInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlUeRrc::AppServiceInfo const &', 'arg0')])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::AppServiceInfo::appCode [variable]
    cls.add_instance_attribute('appCode', 'uint32_t', is_const=False)
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::AppServiceInfo::lastRspTimestamp [variable]
    cls.add_instance_attribute('lastRspTimestamp', 'ns3::Time', is_const=False)
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::AppServiceInfo::model [variable]
    cls.add_instance_attribute('model', 'ns3::LteSlUeRrc::DiscoveryModel', is_const=False)
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::AppServiceInfo::role [variable]
    cls.add_instance_attribute('role', 'ns3::LteSlUeRrc::DiscoveryRole', is_const=False)
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::AppServiceInfo::txTimer [variable]
    cls.add_instance_attribute('txTimer', 'ns3::EventId', is_const=False)
    return

def register_Ns3LteSlUeRrcRelayServiceInfo_methods(root_module, cls):
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::RelayServiceInfo::RelayServiceInfo() [constructor]
    cls.add_constructor([])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::RelayServiceInfo::RelayServiceInfo(ns3::LteSlUeRrc::RelayServiceInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteSlUeRrc::RelayServiceInfo const &', 'arg0')])
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::RelayServiceInfo::lastRspTimestamp [variable]
    cls.add_instance_attribute('lastRspTimestamp', 'ns3::Time', is_const=False)
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::RelayServiceInfo::model [variable]
    cls.add_instance_attribute('model', 'ns3::LteSlUeRrc::DiscoveryModel', is_const=False)
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::RelayServiceInfo::role [variable]
    cls.add_instance_attribute('role', 'ns3::LteSlUeRrc::RelayRole', is_const=False)
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::RelayServiceInfo::serviceCode [variable]
    cls.add_instance_attribute('serviceCode', 'uint32_t', is_const=False)
    ## lte-sl-ue-rrc.h (module 'lte'): ns3::LteSlUeRrc::RelayServiceInfo::txTimer [variable]
    cls.add_instance_attribute('txTimer', 'ns3::EventId', is_const=False)
    return

def register_Ns3LteSpectrumPhy_methods(root_module, cls):
    ## lte-spectrum-phy.h (module 'lte'): ns3::LteSpectrumPhy::LteSpectrumPhy() [constructor]
    cls.add_constructor([])
    ## lte-spectrum-phy.h (module 'lte'): static ns3::TypeId ns3::LteSpectrumPhy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetChannel(ns3::Ptr<ns3::SpectrumChannel> c) [member function]
    cls.add_method('SetChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumChannel >', 'c')], 
                   is_virtual=True)
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetMobility(ns3::Ptr<ns3::MobilityModel> m) [member function]
    cls.add_method('SetMobility', 
                   'void', 
                   [param('ns3::Ptr< ns3::MobilityModel >', 'm')], 
                   is_virtual=True)
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetDevice(ns3::Ptr<ns3::NetDevice> d) [member function]
    cls.add_method('SetDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'd')], 
                   is_virtual=True)
    ## lte-spectrum-phy.h (module 'lte'): ns3::Ptr<ns3::MobilityModel> ns3::LteSpectrumPhy::GetMobility() const [member function]
    cls.add_method('GetMobility', 
                   'ns3::Ptr< ns3::MobilityModel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-spectrum-phy.h (module 'lte'): ns3::Ptr<ns3::NetDevice> ns3::LteSpectrumPhy::GetDevice() const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-spectrum-phy.h (module 'lte'): ns3::Ptr<const ns3::SpectrumModel> ns3::LteSpectrumPhy::GetRxSpectrumModel() const [member function]
    cls.add_method('GetRxSpectrumModel', 
                   'ns3::Ptr< ns3::SpectrumModel const >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-spectrum-phy.h (module 'lte'): ns3::Ptr<ns3::Object> ns3::LteSpectrumPhy::GetAntenna() const [member function]
    cls.add_method('GetAntenna', 
                   'ns3::Ptr< ns3::Object >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::StartRx(ns3::Ptr<ns3::SpectrumSignalParameters> params) [member function]
    cls.add_method('StartRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumSignalParameters >', 'params')], 
                   is_virtual=True)
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::StartRxData(ns3::Ptr<ns3::LteSpectrumSignalParametersDataFrame> params) [member function]
    cls.add_method('StartRxData', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSpectrumSignalParametersDataFrame >', 'params')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::StartRxDlCtrl(ns3::Ptr<ns3::LteSpectrumSignalParametersDlCtrlFrame> lteDlCtrlRxParams) [member function]
    cls.add_method('StartRxDlCtrl', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSpectrumSignalParametersDlCtrlFrame >', 'lteDlCtrlRxParams')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::StartRxUlSrs(ns3::Ptr<ns3::LteSpectrumSignalParametersUlSrsFrame> lteUlSrsRxParams) [member function]
    cls.add_method('StartRxUlSrs', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSpectrumSignalParametersUlSrsFrame >', 'lteUlSrsRxParams')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::StartRxSlFrame(ns3::Ptr<ns3::LteSpectrumSignalParametersSlFrame> lteSlRxParams) [member function]
    cls.add_method('StartRxSlFrame', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSpectrumSignalParametersSlFrame >', 'lteSlRxParams')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetHarqPhyModule(ns3::Ptr<ns3::LteHarqPhy> harq) [member function]
    cls.add_method('SetHarqPhyModule', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteHarqPhy >', 'harq')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetSlHarqPhyModule(ns3::Ptr<ns3::LteSlHarqPhy> lteSlHarq) [member function]
    cls.add_method('SetSlHarqPhyModule', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSlHarqPhy >', 'lteSlHarq')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetTxPowerSpectralDensity(ns3::Ptr<ns3::SpectrumValue> txPsd) [member function]
    cls.add_method('SetTxPowerSpectralDensity', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue >', 'txPsd')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetNoisePowerSpectralDensity(ns3::Ptr<const ns3::SpectrumValue> noisePsd) [member function]
    cls.add_method('SetNoisePowerSpectralDensity', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumValue const >', 'noisePsd')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::ClearExpectedSlTb() [member function]
    cls.add_method('ClearExpectedSlTb', 
                   'void', 
                   [])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::ClearExpectedDiscTb() [member function]
    cls.add_method('ClearExpectedDiscTb', 
                   'void', 
                   [])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetAntenna(ns3::Ptr<ns3::AntennaModel> a) [member function]
    cls.add_method('SetAntenna', 
                   'void', 
                   [param('ns3::Ptr< ns3::AntennaModel >', 'a')])
    ## lte-spectrum-phy.h (module 'lte'): bool ns3::LteSpectrumPhy::StartTxDataFrame(ns3::Ptr<ns3::PacketBurst> pb, std::list<ns3::Ptr<ns3::LteControlMessage>, std::allocator<ns3::Ptr<ns3::LteControlMessage>>> ctrlMsgList, ns3::Time duration) [member function]
    cls.add_method('StartTxDataFrame', 
                   'bool', 
                   [param('ns3::Ptr< ns3::PacketBurst >', 'pb'), param('std::list< ns3::Ptr< ns3::LteControlMessage > >', 'ctrlMsgList'), param('ns3::Time', 'duration')])
    ## lte-spectrum-phy.h (module 'lte'): bool ns3::LteSpectrumPhy::StartTxSlMibFrame(ns3::Ptr<ns3::PacketBurst> pb, ns3::Time duration) [member function]
    cls.add_method('StartTxSlMibFrame', 
                   'bool', 
                   [param('ns3::Ptr< ns3::PacketBurst >', 'pb'), param('ns3::Time', 'duration')])
    ## lte-spectrum-phy.h (module 'lte'): bool ns3::LteSpectrumPhy::StartTxSlCtrlFrame(ns3::Ptr<ns3::PacketBurst> pb, ns3::Time duration) [member function]
    cls.add_method('StartTxSlCtrlFrame', 
                   'bool', 
                   [param('ns3::Ptr< ns3::PacketBurst >', 'pb'), param('ns3::Time', 'duration')])
    ## lte-spectrum-phy.h (module 'lte'): bool ns3::LteSpectrumPhy::StartTxSlDataFrame(ns3::Ptr<ns3::PacketBurst> pb, ns3::Time duration, uint8_t groupId) [member function]
    cls.add_method('StartTxSlDataFrame', 
                   'bool', 
                   [param('ns3::Ptr< ns3::PacketBurst >', 'pb'), param('ns3::Time', 'duration'), param('uint8_t', 'groupId')])
    ## lte-spectrum-phy.h (module 'lte'): bool ns3::LteSpectrumPhy::StartTxSlDiscFrame(ns3::Ptr<ns3::PacketBurst> pb, uint32_t resNo, uint8_t rv, ns3::Time duration) [member function]
    cls.add_method('StartTxSlDiscFrame', 
                   'bool', 
                   [param('ns3::Ptr< ns3::PacketBurst >', 'pb'), param('uint32_t', 'resNo'), param('uint8_t', 'rv'), param('ns3::Time', 'duration')])
    ## lte-spectrum-phy.h (module 'lte'): bool ns3::LteSpectrumPhy::StartTxSlMibFrame(ns3::Ptr<ns3::PacketBurst> pb, std::list<ns3::Ptr<ns3::LteControlMessage>, std::allocator<ns3::Ptr<ns3::LteControlMessage>>> ctrlMsgList, ns3::Time duration) [member function]
    cls.add_method('StartTxSlMibFrame', 
                   'bool', 
                   [param('ns3::Ptr< ns3::PacketBurst >', 'pb'), param('std::list< ns3::Ptr< ns3::LteControlMessage > >', 'ctrlMsgList'), param('ns3::Time', 'duration')])
    ## lte-spectrum-phy.h (module 'lte'): bool ns3::LteSpectrumPhy::StartTxDlCtrlFrame(std::list<ns3::Ptr<ns3::LteControlMessage>, std::allocator<ns3::Ptr<ns3::LteControlMessage>>> ctrlMsgList, bool pss) [member function]
    cls.add_method('StartTxDlCtrlFrame', 
                   'bool', 
                   [param('std::list< ns3::Ptr< ns3::LteControlMessage > >', 'ctrlMsgList'), param('bool', 'pss')])
    ## lte-spectrum-phy.h (module 'lte'): bool ns3::LteSpectrumPhy::StartTxUlSrsFrame() [member function]
    cls.add_method('StartTxUlSrsFrame', 
                   'bool', 
                   [])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyRxDataEndErrorCallback(ns3::LtePhyRxDataEndErrorCallback c) [member function]
    cls.add_method('SetLtePhyRxDataEndErrorCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyRxDataEndOkCallback(ns3::LtePhyRxDataEndOkCallback c) [member function]
    cls.add_method('SetLtePhyRxDataEndOkCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyRxPscchEndOkCallback(ns3::LtePhyRxDataEndOkCallback c) [member function]
    cls.add_method('SetLtePhyRxPscchEndOkCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyRxPsdchEndOkCallback(ns3::LtePhyRxDataEndOkCallback c) [member function]
    cls.add_method('SetLtePhyRxPsdchEndOkCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyRxPsbchEndOkCallback(ns3::LtePhyRxPsbchEndOkCallback c) [member function]
    cls.add_method('SetLtePhyRxPsbchEndOkCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyRxCtrlEndOkCallback(ns3::LtePhyRxCtrlEndOkCallback c) [member function]
    cls.add_method('SetLtePhyRxCtrlEndOkCallback', 
                   'void', 
                   [param('ns3::Callback< void, std::list< ns3::Ptr< ns3::LteControlMessage > >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyRxCtrlEndErrorCallback(ns3::LtePhyRxCtrlEndErrorCallback c) [member function]
    cls.add_method('SetLtePhyRxCtrlEndErrorCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyRxPssCallback(ns3::LtePhyRxPssCallback c) [member function]
    cls.add_method('SetLtePhyRxPssCallback', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyDlHarqFeedbackCallback(ns3::LtePhyDlHarqFeedbackCallback c) [member function]
    cls.add_method('SetLtePhyDlHarqFeedbackCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::DlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyUlHarqFeedbackCallback(ns3::LtePhyUlHarqFeedbackCallback c) [member function]
    cls.add_method('SetLtePhyUlHarqFeedbackCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::UlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetState(ns3::LteSpectrumPhy::State newState) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::LteSpectrumPhy::State', 'newState')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetCellId(uint16_t cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddL1GroupId(uint8_t groupId) [member function]
    cls.add_method('AddL1GroupId', 
                   'void', 
                   [param('uint8_t', 'groupId')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::RemoveL1GroupId(uint8_t groupId) [member function]
    cls.add_method('RemoveL1GroupId', 
                   'void', 
                   [param('uint8_t', 'groupId')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetComponentCarrierId(uint8_t componentCarrierId) [member function]
    cls.add_method('SetComponentCarrierId', 
                   'void', 
                   [param('uint8_t', 'componentCarrierId')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddRsPowerChunkProcessor(ns3::Ptr<ns3::LteChunkProcessor> p) [member function]
    cls.add_method('AddRsPowerChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteChunkProcessor >', 'p')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddDataPowerChunkProcessor(ns3::Ptr<ns3::LteChunkProcessor> p) [member function]
    cls.add_method('AddDataPowerChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteChunkProcessor >', 'p')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddDataSinrChunkProcessor(ns3::Ptr<ns3::LteChunkProcessor> p) [member function]
    cls.add_method('AddDataSinrChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteChunkProcessor >', 'p')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddInterferenceCtrlChunkProcessor(ns3::Ptr<ns3::LteChunkProcessor> p) [member function]
    cls.add_method('AddInterferenceCtrlChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteChunkProcessor >', 'p')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddInterferenceDataChunkProcessor(ns3::Ptr<ns3::LteChunkProcessor> p) [member function]
    cls.add_method('AddInterferenceDataChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteChunkProcessor >', 'p')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddCtrlSinrChunkProcessor(ns3::Ptr<ns3::LteChunkProcessor> p) [member function]
    cls.add_method('AddCtrlSinrChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteChunkProcessor >', 'p')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddSlSinrChunkProcessor(ns3::Ptr<ns3::LteSlChunkProcessor> p) [member function]
    cls.add_method('AddSlSinrChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSlChunkProcessor >', 'p')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddSlSignalChunkProcessor(ns3::Ptr<ns3::LteSlChunkProcessor> p) [member function]
    cls.add_method('AddSlSignalChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSlChunkProcessor >', 'p')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddSlInterferenceChunkProcessor(ns3::Ptr<ns3::LteSlChunkProcessor> p) [member function]
    cls.add_method('AddSlInterferenceChunkProcessor', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSlChunkProcessor >', 'p')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddExpectedTb(uint16_t rnti, uint8_t ndi, uint16_t size, uint8_t mcs, std::vector<int, std::allocator<int>> map, uint8_t layer, uint8_t harqId, uint8_t rv, bool downlink) [member function]
    cls.add_method('AddExpectedTb', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'ndi'), param('uint16_t', 'size'), param('uint8_t', 'mcs'), param('std::vector< int >', 'map'), param('uint8_t', 'layer'), param('uint8_t', 'harqId'), param('uint8_t', 'rv'), param('bool', 'downlink')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::RemoveExpectedTb(uint16_t rnti) [member function]
    cls.add_method('RemoveExpectedTb', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddExpectedTb(uint16_t rnti, uint8_t l1dst, uint8_t ndi, uint16_t size, uint8_t mcs, std::vector<int, std::allocator<int>> map, uint8_t rv) [member function]
    cls.add_method('AddExpectedTb', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'l1dst'), param('uint8_t', 'ndi'), param('uint16_t', 'size'), param('uint8_t', 'mcs'), param('std::vector< int >', 'map'), param('uint8_t', 'rv')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::AddExpectedTb(uint16_t rnti, uint8_t resPsdch, uint8_t ndi, std::vector<int, std::allocator<int>> map, uint8_t rv, int index) [member function]
    cls.add_method('AddExpectedTb', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('uint8_t', 'resPsdch'), param('uint8_t', 'ndi'), param('std::vector< int >', 'map'), param('uint8_t', 'rv'), param('int', 'index')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::UpdateSinrPerceived(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('UpdateSinrPerceived', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::UpdateSlSinrPerceived(std::vector<ns3::SpectrumValue, std::allocator<ns3::SpectrumValue>> sinr) [member function]
    cls.add_method('UpdateSlSinrPerceived', 
                   'void', 
                   [param('std::vector< ns3::SpectrumValue >', 'sinr')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::UpdateSlSigPerceived(std::vector<ns3::SpectrumValue, std::allocator<ns3::SpectrumValue>> signal) [member function]
    cls.add_method('UpdateSlSigPerceived', 
                   'void', 
                   [param('std::vector< ns3::SpectrumValue >', 'signal')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::UpdateSlIntPerceived(std::vector<ns3::SpectrumValue, std::allocator<ns3::SpectrumValue>> interference) [member function]
    cls.add_method('UpdateSlIntPerceived', 
                   'void', 
                   [param('std::vector< ns3::SpectrumValue >', 'interference')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetTransmissionMode(uint8_t txMode) [member function]
    cls.add_method('SetTransmissionMode', 
                   'void', 
                   [param('uint8_t', 'txMode')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::Ptr<ns3::SpectrumChannel> ns3::LteSpectrumPhy::GetChannel() [member function]
    cls.add_method('GetChannel', 
                   'ns3::Ptr< ns3::SpectrumChannel >', 
                   [])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetSlssid(uint64_t slssid) [member function]
    cls.add_method('SetSlssid', 
                   'void', 
                   [param('uint64_t', 'slssid')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyRxSlssCallback(ns3::LtePhyRxSlssCallback c) [member function]
    cls.add_method('SetLtePhyRxSlssCallback', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetLtePhyRxPsdchSdRsrpCallback(ns3::LtePhyRxPsdchSdRsrpCallback c) [member function]
    cls.add_method('SetLtePhyRxPsdchSdRsrpCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ptr< ns3::SpectrumValue >, std::vector< int, std::allocator< int > > const, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'c')])
    ## lte-spectrum-phy.h (module 'lte'): int64_t ns3::LteSpectrumPhy::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')])
    ## lte-spectrum-phy.h (module 'lte'): ns3::LteSpectrumPhy::State ns3::LteSpectrumPhy::GetState() [member function]
    cls.add_method('GetState', 
                   'ns3::LteSpectrumPhy::State', 
                   [])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetRxPool(ns3::Ptr<ns3::SidelinkDiscResourcePool> newpool) [member function]
    cls.add_method('SetRxPool', 
                   'void', 
                   [param('ns3::Ptr< ns3::SidelinkDiscResourcePool >', 'newpool')])
    ## lte-spectrum-phy.h (module 'lte'): void ns3::LteSpectrumPhy::SetDiscNumRetx(uint8_t retx) [member function]
    cls.add_method('SetDiscNumRetx', 
                   'void', 
                   [param('uint8_t', 'retx')])
    return

def register_Ns3LteStatsCalculator_methods(root_module, cls):
    ## lte-stats-calculator.h (module 'lte'): ns3::LteStatsCalculator::LteStatsCalculator(ns3::LteStatsCalculator const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteStatsCalculator const &', 'arg0')])
    ## lte-stats-calculator.h (module 'lte'): ns3::LteStatsCalculator::LteStatsCalculator() [constructor]
    cls.add_constructor([])
    ## lte-stats-calculator.h (module 'lte'): bool ns3::LteStatsCalculator::ExistsCellIdPath(std::string path) [member function]
    cls.add_method('ExistsCellIdPath', 
                   'bool', 
                   [param('std::string', 'path')])
    ## lte-stats-calculator.h (module 'lte'): bool ns3::LteStatsCalculator::ExistsImsiPath(std::string path) [member function]
    cls.add_method('ExistsImsiPath', 
                   'bool', 
                   [param('std::string', 'path')])
    ## lte-stats-calculator.h (module 'lte'): uint16_t ns3::LteStatsCalculator::GetCellIdPath(std::string path) [member function]
    cls.add_method('GetCellIdPath', 
                   'uint16_t', 
                   [param('std::string', 'path')])
    ## lte-stats-calculator.h (module 'lte'): std::string ns3::LteStatsCalculator::GetDlOutputFilename() [member function]
    cls.add_method('GetDlOutputFilename', 
                   'std::string', 
                   [])
    ## lte-stats-calculator.h (module 'lte'): uint64_t ns3::LteStatsCalculator::GetImsiPath(std::string path) [member function]
    cls.add_method('GetImsiPath', 
                   'uint64_t', 
                   [param('std::string', 'path')])
    ## lte-stats-calculator.h (module 'lte'): std::string ns3::LteStatsCalculator::GetSlOutputFilename() [member function]
    cls.add_method('GetSlOutputFilename', 
                   'std::string', 
                   [])
    ## lte-stats-calculator.h (module 'lte'): std::string ns3::LteStatsCalculator::GetSlPscchOutputFilename() [member function]
    cls.add_method('GetSlPscchOutputFilename', 
                   'std::string', 
                   [])
    ## lte-stats-calculator.h (module 'lte'): std::string ns3::LteStatsCalculator::GetSlPsdchOutputFilename() [member function]
    cls.add_method('GetSlPsdchOutputFilename', 
                   'std::string', 
                   [])
    ## lte-stats-calculator.h (module 'lte'): static ns3::TypeId ns3::LteStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-stats-calculator.h (module 'lte'): std::string ns3::LteStatsCalculator::GetUlOutputFilename() [member function]
    cls.add_method('GetUlOutputFilename', 
                   'std::string', 
                   [])
    ## lte-stats-calculator.h (module 'lte'): void ns3::LteStatsCalculator::SetCellIdPath(std::string path, uint16_t cellId) [member function]
    cls.add_method('SetCellIdPath', 
                   'void', 
                   [param('std::string', 'path'), param('uint16_t', 'cellId')])
    ## lte-stats-calculator.h (module 'lte'): void ns3::LteStatsCalculator::SetDlOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetDlOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## lte-stats-calculator.h (module 'lte'): void ns3::LteStatsCalculator::SetImsiPath(std::string path, uint64_t imsi) [member function]
    cls.add_method('SetImsiPath', 
                   'void', 
                   [param('std::string', 'path'), param('uint64_t', 'imsi')])
    ## lte-stats-calculator.h (module 'lte'): void ns3::LteStatsCalculator::SetSlOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetSlOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## lte-stats-calculator.h (module 'lte'): void ns3::LteStatsCalculator::SetSlPscchOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetSlPscchOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## lte-stats-calculator.h (module 'lte'): void ns3::LteStatsCalculator::SetSlPsdchOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetSlPsdchOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## lte-stats-calculator.h (module 'lte'): void ns3::LteStatsCalculator::SetUlOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetUlOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## lte-stats-calculator.h (module 'lte'): static uint16_t ns3::LteStatsCalculator::FindCellIdFromEnbMac(std::string path, uint16_t rnti) [member function]
    cls.add_method('FindCellIdFromEnbMac', 
                   'uint16_t', 
                   [param('std::string', 'path'), param('uint16_t', 'rnti')], 
                   is_static=True, visibility='protected')
    ## lte-stats-calculator.h (module 'lte'): static uint16_t ns3::LteStatsCalculator::FindCellIdFromEnbRlcPath(std::string path) [member function]
    cls.add_method('FindCellIdFromEnbRlcPath', 
                   'uint16_t', 
                   [param('std::string', 'path')], 
                   is_static=True, visibility='protected')
    ## lte-stats-calculator.h (module 'lte'): static uint64_t ns3::LteStatsCalculator::FindImsiForEnb(std::string path, uint16_t rnti) [member function]
    cls.add_method('FindImsiForEnb', 
                   'uint64_t', 
                   [param('std::string', 'path'), param('uint16_t', 'rnti')], 
                   is_static=True, visibility='protected')
    ## lte-stats-calculator.h (module 'lte'): static uint64_t ns3::LteStatsCalculator::FindImsiForUe(std::string path, uint16_t rnti) [member function]
    cls.add_method('FindImsiForUe', 
                   'uint64_t', 
                   [param('std::string', 'path'), param('uint16_t', 'rnti')], 
                   is_static=True, visibility='protected')
    ## lte-stats-calculator.h (module 'lte'): static uint64_t ns3::LteStatsCalculator::FindImsiFromEnbMac(std::string path, uint16_t rnti) [member function]
    cls.add_method('FindImsiFromEnbMac', 
                   'uint64_t', 
                   [param('std::string', 'path'), param('uint16_t', 'rnti')], 
                   is_static=True, visibility='protected')
    ## lte-stats-calculator.h (module 'lte'): static uint64_t ns3::LteStatsCalculator::FindImsiFromEnbRlcPath(std::string path) [member function]
    cls.add_method('FindImsiFromEnbRlcPath', 
                   'uint64_t', 
                   [param('std::string', 'path')], 
                   is_static=True, visibility='protected')
    ## lte-stats-calculator.h (module 'lte'): static uint64_t ns3::LteStatsCalculator::FindImsiFromLteNetDevice(std::string path) [member function]
    cls.add_method('FindImsiFromLteNetDevice', 
                   'uint64_t', 
                   [param('std::string', 'path')], 
                   is_static=True, visibility='protected')
    ## lte-stats-calculator.h (module 'lte'): static uint64_t ns3::LteStatsCalculator::FindImsiFromUePhy(std::string path) [member function]
    cls.add_method('FindImsiFromUePhy', 
                   'uint64_t', 
                   [param('std::string', 'path')], 
                   is_static=True, visibility='protected')
    return

def register_Ns3LteUePhy_methods(root_module, cls):
    ## lte-ue-phy.h (module 'lte'): ns3::LteUePhy::LteUePhy(ns3::LteUePhy const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUePhy const &', 'arg0')])
    ## lte-ue-phy.h (module 'lte'): ns3::LteUePhy::LteUePhy() [constructor]
    cls.add_constructor([])
    ## lte-ue-phy.h (module 'lte'): ns3::LteUePhy::LteUePhy(ns3::Ptr<ns3::LteSpectrumPhy> dlPhy, ns3::Ptr<ns3::LteSpectrumPhy> ulPhy) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::LteSpectrumPhy >', 'dlPhy'), param('ns3::Ptr< ns3::LteSpectrumPhy >', 'ulPhy')])
    ## lte-ue-phy.h (module 'lte'): int64_t ns3::LteUePhy::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')])
    ## lte-ue-phy.h (module 'lte'): ns3::Ptr<ns3::DlCqiLteControlMessage> ns3::LteUePhy::CreateDlCqiFeedbackMessage(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('CreateDlCqiFeedbackMessage', 
                   'ns3::Ptr< ns3::DlCqiLteControlMessage >', 
                   [param('ns3::SpectrumValue const &', 'sinr')])
    ## lte-ue-phy.h (module 'lte'): ns3::Ptr<ns3::SpectrumValue> ns3::LteUePhy::CreateTxPowerSpectralDensity() [member function]
    cls.add_method('CreateTxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::EnqueueDlHarqFeedback(ns3::DlInfoListElement_s mes) [member function]
    cls.add_method('EnqueueDlHarqFeedback', 
                   'void', 
                   [param('ns3::DlInfoListElement_s', 'mes')], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::GenerateCtrlCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateCtrlCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::GenerateDataCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateDataCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::GenerateMixedCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateMixedCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): ns3::Ptr<ns3::LteSpectrumPhy> ns3::LteUePhy::GetDlSpectrumPhy() const [member function]
    cls.add_method('GetDlSpectrumPhy', 
                   'ns3::Ptr< ns3::LteSpectrumPhy >', 
                   [], 
                   is_const=True)
    ## lte-ue-phy.h (module 'lte'): ns3::Time ns3::LteUePhy::GetFirstScanningTime() [member function]
    cls.add_method('GetFirstScanningTime', 
                   'ns3::Time', 
                   [])
    ## lte-ue-phy.h (module 'lte'): ns3::LteUeCphySapProvider * ns3::LteUePhy::GetLteUeCphySapProvider() [member function]
    cls.add_method('GetLteUeCphySapProvider', 
                   'ns3::LteUeCphySapProvider *', 
                   [])
    ## lte-ue-phy.h (module 'lte'): ns3::LteUePhySapProvider * ns3::LteUePhy::GetLteUePhySapProvider() [member function]
    cls.add_method('GetLteUePhySapProvider', 
                   'ns3::LteUePhySapProvider *', 
                   [])
    ## lte-ue-phy.h (module 'lte'): uint8_t ns3::LteUePhy::GetMacChDelay() const [member function]
    cls.add_method('GetMacChDelay', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-ue-phy.h (module 'lte'): double ns3::LteUePhy::GetNoiseFigure() const [member function]
    cls.add_method('GetNoiseFigure', 
                   'double', 
                   [], 
                   is_const=True)
    ## lte-ue-phy.h (module 'lte'): ns3::Ptr<ns3::LteSpectrumPhy> ns3::LteUePhy::GetSlSpectrumPhy() const [member function]
    cls.add_method('GetSlSpectrumPhy', 
                   'ns3::Ptr< ns3::LteSpectrumPhy >', 
                   [], 
                   is_const=True)
    ## lte-ue-phy.h (module 'lte'): ns3::LteUePhy::State ns3::LteUePhy::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::LteUePhy::State', 
                   [], 
                   is_const=True)
    ## lte-ue-phy.h (module 'lte'): std::vector<int, std::allocator<int>> ns3::LteUePhy::GetSubChannelsForReception() [member function]
    cls.add_method('GetSubChannelsForReception', 
                   'std::vector< int >', 
                   [])
    ## lte-ue-phy.h (module 'lte'): std::vector<int, std::allocator<int>> ns3::LteUePhy::GetSubChannelsForTransmission() [member function]
    cls.add_method('GetSubChannelsForTransmission', 
                   'std::vector< int >', 
                   [])
    ## lte-ue-phy.h (module 'lte'): double ns3::LteUePhy::GetTxPower() const [member function]
    cls.add_method('GetTxPower', 
                   'double', 
                   [], 
                   is_const=True)
    ## lte-ue-phy.h (module 'lte'): static ns3::TypeId ns3::LteUePhy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-ue-phy.h (module 'lte'): ns3::Ptr<ns3::LteSpectrumPhy> ns3::LteUePhy::GetUlSpectrumPhy() const [member function]
    cls.add_method('GetUlSpectrumPhy', 
                   'ns3::Ptr< ns3::LteSpectrumPhy >', 
                   [], 
                   is_const=True)
    ## lte-ue-phy.h (module 'lte'): ns3::Ptr<ns3::LteUePowerControl> ns3::LteUePhy::GetUplinkPowerControl() const [member function]
    cls.add_method('GetUplinkPowerControl', 
                   'ns3::Ptr< ns3::LteUePowerControl >', 
                   [], 
                   is_const=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::PhyPduReceived(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('PhyPduReceived', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::PhyPsbchPduReceived(ns3::Ptr<ns3::Packet> p, uint16_t slssid) [member function]
    cls.add_method('PhyPsbchPduReceived', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint16_t', 'slssid')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::PhyPscchPduReceived(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('PhyPscchPduReceived', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::PhyPsdchPduReceived(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('PhyPsdchPduReceived', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::ReceiveLteControlMessageList(std::list<ns3::Ptr<ns3::LteControlMessage>, std::allocator<ns3::Ptr<ns3::LteControlMessage>>> msgList) [member function]
    cls.add_method('ReceiveLteControlMessageList', 
                   'void', 
                   [param('std::list< ns3::Ptr< ns3::LteControlMessage > >', 'msgList')], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::ReceivePsdchSdRsrp(ns3::Ptr<ns3::Packet> p, ns3::Ptr<ns3::SpectrumValue> psd, std::vector<int, std::allocator<int>> const & rbs) [member function]
    cls.add_method('ReceivePsdchSdRsrp', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ptr< ns3::SpectrumValue >', 'psd'), param('std::vector< int > const &', 'rbs')], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::ReceivePss(uint16_t cellId, ns3::Ptr<ns3::SpectrumValue> p) [member function]
    cls.add_method('ReceivePss', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('ns3::Ptr< ns3::SpectrumValue >', 'p')], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::ReceiveSlss(uint16_t slssid, ns3::Ptr<ns3::SpectrumValue> p) [member function]
    cls.add_method('ReceiveSlss', 
                   'void', 
                   [param('uint16_t', 'slssid'), param('ns3::Ptr< ns3::SpectrumValue >', 'p')], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::ReportDataInterference(ns3::SpectrumValue const & interf) [member function]
    cls.add_method('ReportDataInterference', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'interf')], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::ReportInterference(ns3::SpectrumValue const & interf) [member function]
    cls.add_method('ReportInterference', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'interf')], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::ReportRsReceivedPower(ns3::SpectrumValue const & power) [member function]
    cls.add_method('ReportRsReceivedPower', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'power')], 
                   is_virtual=True)
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::SendSrs() [member function]
    cls.add_method('SendSrs', 
                   'void', 
                   [])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::SetFirstScanningTime(ns3::Time t) [member function]
    cls.add_method('SetFirstScanningTime', 
                   'void', 
                   [param('ns3::Time', 't')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::SetHarqPhyModule(ns3::Ptr<ns3::LteHarqPhy> harq) [member function]
    cls.add_method('SetHarqPhyModule', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteHarqPhy >', 'harq')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::SetLteUeCphySapUser(ns3::LteUeCphySapUser * s) [member function]
    cls.add_method('SetLteUeCphySapUser', 
                   'void', 
                   [param('ns3::LteUeCphySapUser *', 's')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::SetLteUePhySapUser(ns3::LteUePhySapUser * s) [member function]
    cls.add_method('SetLteUePhySapUser', 
                   'void', 
                   [param('ns3::LteUePhySapUser *', 's')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::SetNoiseFigure(double nf) [member function]
    cls.add_method('SetNoiseFigure', 
                   'void', 
                   [param('double', 'nf')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::SetSlSpectrumPhy(ns3::Ptr<ns3::LteSpectrumPhy> phy) [member function]
    cls.add_method('SetSlSpectrumPhy', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSpectrumPhy >', 'phy')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::SetSubChannelsForReception(std::vector<int, std::allocator<int>> mask) [member function]
    cls.add_method('SetSubChannelsForReception', 
                   'void', 
                   [param('std::vector< int >', 'mask')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::SetSubChannelsForTransmission(std::vector<int, std::allocator<int>> mask) [member function]
    cls.add_method('SetSubChannelsForTransmission', 
                   'void', 
                   [param('std::vector< int >', 'mask')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::SetTxPower(double pow) [member function]
    cls.add_method('SetTxPower', 
                   'void', 
                   [param('double', 'pow')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::StartRandomInitialSubframeIndication() [member function]
    cls.add_method('StartRandomInitialSubframeIndication', 
                   'void', 
                   [])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::SubframeIndication(uint32_t frameNo, uint32_t subframeNo) [member function]
    cls.add_method('SubframeIndication', 
                   'void', 
                   [param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo')])
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::DoNotifyConnectionSuccessful() [member function]
    cls.add_method('DoNotifyConnectionSuccessful', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::DoSendLteControlMessage(ns3::Ptr<ns3::LteControlMessage> msg) [member function]
    cls.add_method('DoSendLteControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteControlMessage >', 'msg')], 
                   is_virtual=True, visibility='private')
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::DoSendMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoSendMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True, visibility='private')
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::DoSendRachPreamble(uint32_t prachId, uint32_t raRnti) [member function]
    cls.add_method('DoSendRachPreamble', 
                   'void', 
                   [param('uint32_t', 'prachId'), param('uint32_t', 'raRnti')], 
                   is_virtual=True, visibility='private')
    ## lte-ue-phy.h (module 'lte'): void ns3::LteUePhy::DoSendSlMacPdu(ns3::Ptr<ns3::Packet> p, ns3::LteUePhySapProvider::TransmitSlPhySduParameters params) [member function]
    cls.add_method('DoSendSlMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::LteUePhySapProvider::TransmitSlPhySduParameters', 'params')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3LteUePowerControl_methods(root_module, cls):
    ## lte-ue-power-control.h (module 'lte'): ns3::LteUePowerControl::LteUePowerControl(ns3::LteUePowerControl const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUePowerControl const &', 'arg0')])
    ## lte-ue-power-control.h (module 'lte'): ns3::LteUePowerControl::LteUePowerControl() [constructor]
    cls.add_constructor([])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::CalculatePucchTxPower() [member function]
    cls.add_method('CalculatePucchTxPower', 
                   'void', 
                   [])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::CalculatePuschTxPower() [member function]
    cls.add_method('CalculatePuschTxPower', 
                   'void', 
                   [])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::CalculateSrsTxPower() [member function]
    cls.add_method('CalculateSrsTxPower', 
                   'void', 
                   [])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::ConfigureReferenceSignalPower(int8_t referenceSignalPower) [member function]
    cls.add_method('ConfigureReferenceSignalPower', 
                   'void', 
                   [param('int8_t', 'referenceSignalPower')])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-ue-power-control.h (module 'lte'): double ns3::LteUePowerControl::GetPcmax() [member function]
    cls.add_method('GetPcmax', 
                   'double', 
                   [])
    ## lte-ue-power-control.h (module 'lte'): double ns3::LteUePowerControl::GetPscchTxPower(std::vector<int, std::allocator<int>> rb) [member function]
    cls.add_method('GetPscchTxPower', 
                   'double', 
                   [param('std::vector< int >', 'rb')])
    ## lte-ue-power-control.h (module 'lte'): double ns3::LteUePowerControl::GetPsdchTxPower(std::vector<int, std::allocator<int>> rb) [member function]
    cls.add_method('GetPsdchTxPower', 
                   'double', 
                   [param('std::vector< int >', 'rb')])
    ## lte-ue-power-control.h (module 'lte'): double ns3::LteUePowerControl::GetPsschTxPower(std::vector<int, std::allocator<int>> rb) [member function]
    cls.add_method('GetPsschTxPower', 
                   'double', 
                   [param('std::vector< int >', 'rb')])
    ## lte-ue-power-control.h (module 'lte'): double ns3::LteUePowerControl::GetPucchTxPower(std::vector<int, std::allocator<int>> rb) [member function]
    cls.add_method('GetPucchTxPower', 
                   'double', 
                   [param('std::vector< int >', 'rb')])
    ## lte-ue-power-control.h (module 'lte'): double ns3::LteUePowerControl::GetPuschTxPower(std::vector<int, std::allocator<int>> rb) [member function]
    cls.add_method('GetPuschTxPower', 
                   'double', 
                   [param('std::vector< int >', 'rb')])
    ## lte-ue-power-control.h (module 'lte'): double ns3::LteUePowerControl::GetSrsTxPower(std::vector<int, std::allocator<int>> rb) [member function]
    cls.add_method('GetSrsTxPower', 
                   'double', 
                   [param('std::vector< int >', 'rb')])
    ## lte-ue-power-control.h (module 'lte'): static ns3::TypeId ns3::LteUePowerControl::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::ReportTpc(uint8_t tpc) [member function]
    cls.add_method('ReportTpc', 
                   'void', 
                   [param('uint8_t', 'tpc')])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::SetAlpha(double value) [member function]
    cls.add_method('SetAlpha', 
                   'void', 
                   [param('double', 'value')])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::SetCellId(uint16_t cellId) [member function]
    cls.add_method('SetCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::SetPcmax(double value) [member function]
    cls.add_method('SetPcmax', 
                   'void', 
                   [param('double', 'value')])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::SetPoNominalPusch(int16_t value) [member function]
    cls.add_method('SetPoNominalPusch', 
                   'void', 
                   [param('int16_t', 'value')])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::SetPoUePusch(int16_t value) [member function]
    cls.add_method('SetPoUePusch', 
                   'void', 
                   [param('int16_t', 'value')])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::SetRnti(uint16_t rnti) [member function]
    cls.add_method('SetRnti', 
                   'void', 
                   [param('uint16_t', 'rnti')])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::SetRsrp(double value) [member function]
    cls.add_method('SetRsrp', 
                   'void', 
                   [param('double', 'value')])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::SetRsrpFilterCoefficient(uint8_t rsrpFilterCoefficient) [member function]
    cls.add_method('SetRsrpFilterCoefficient', 
                   'void', 
                   [param('uint8_t', 'rsrpFilterCoefficient')])
    ## lte-ue-power-control.h (module 'lte'): void ns3::LteUePowerControl::SetTxPower(double value) [member function]
    cls.add_method('SetTxPower', 
                   'void', 
                   [param('double', 'value')])
    return

def register_Ns3LteUeRrc_methods(root_module, cls):
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::LteUeRrc(ns3::LteUeRrc const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeRrc const &', 'arg0')])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::LteUeRrc() [constructor]
    cls.add_constructor([])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::ActivateSidelinkRadioBearer(uint32_t destination, bool tx, bool rx) [member function]
    cls.add_method('ActivateSidelinkRadioBearer', 
                   'void', 
                   [param('uint32_t', 'destination'), param('bool', 'tx'), param('bool', 'rx')])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteAsSapProvider * ns3::LteUeRrc::GetAsSapProvider() [member function]
    cls.add_method('GetAsSapProvider', 
                   'ns3::LteAsSapProvider *', 
                   [])
    ## lte-ue-rrc.h (module 'lte'): uint16_t ns3::LteUeRrc::GetCellId() const [member function]
    cls.add_method('GetCellId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-ue-rrc.h (module 'lte'): uint8_t ns3::LteUeRrc::GetDlBandwidth() const [member function]
    cls.add_method('GetDlBandwidth', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-ue-rrc.h (module 'lte'): uint32_t ns3::LteUeRrc::GetDlEarfcn() const [member function]
    cls.add_method('GetDlEarfcn', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-ue-rrc.h (module 'lte'): uint64_t ns3::LteUeRrc::GetFrameNumber() [member function]
    cls.add_method('GetFrameNumber', 
                   'uint64_t', 
                   [])
    ## lte-ue-rrc.h (module 'lte'): uint64_t ns3::LteUeRrc::GetImsi() const [member function]
    cls.add_method('GetImsi', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeCcmRrcSapUser * ns3::LteUeRrc::GetLteCcmRrcSapUser() [member function]
    cls.add_method('GetLteCcmRrcSapUser', 
                   'ns3::LteUeCcmRrcSapUser *', 
                   [])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeCmacSapUser * ns3::LteUeRrc::GetLteUeCmacSapUser() [member function]
    cls.add_method('GetLteUeCmacSapUser', 
                   'ns3::LteUeCmacSapUser *', 
                   [])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeCmacSapUser * ns3::LteUeRrc::GetLteUeCmacSapUser(uint8_t index) [member function]
    cls.add_method('GetLteUeCmacSapUser', 
                   'ns3::LteUeCmacSapUser *', 
                   [param('uint8_t', 'index')])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeCphySapUser * ns3::LteUeRrc::GetLteUeCphySapUser() [member function]
    cls.add_method('GetLteUeCphySapUser', 
                   'ns3::LteUeCphySapUser *', 
                   [])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeCphySapUser * ns3::LteUeRrc::GetLteUeCphySapUser(uint8_t index) [member function]
    cls.add_method('GetLteUeCphySapUser', 
                   'ns3::LteUeCphySapUser *', 
                   [param('uint8_t', 'index')])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrcSapProvider * ns3::LteUeRrc::GetLteUeRrcSapProvider() [member function]
    cls.add_method('GetLteUeRrcSapProvider', 
                   'ns3::LteUeRrcSapProvider *', 
                   [])
    ## lte-ue-rrc.h (module 'lte'): uint16_t ns3::LteUeRrc::GetPreviousCellId() const [member function]
    cls.add_method('GetPreviousCellId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-ue-rrc.h (module 'lte'): uint16_t ns3::LteUeRrc::GetRnti() const [member function]
    cls.add_method('GetRnti', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-ue-rrc.h (module 'lte'): uint64_t ns3::LteUeRrc::GetSlssid() [member function]
    cls.add_method('GetSlssid', 
                   'uint64_t', 
                   [])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::State ns3::LteUeRrc::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::LteUeRrc::State', 
                   [], 
                   is_const=True)
    ## lte-ue-rrc.h (module 'lte'): uint64_t ns3::LteUeRrc::GetSubFrameNumber() [member function]
    cls.add_method('GetSubFrameNumber', 
                   'uint64_t', 
                   [])
    ## lte-ue-rrc.h (module 'lte'): static ns3::TypeId ns3::LteUeRrc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-ue-rrc.h (module 'lte'): uint8_t ns3::LteUeRrc::GetUlBandwidth() const [member function]
    cls.add_method('GetUlBandwidth', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-ue-rrc.h (module 'lte'): uint32_t ns3::LteUeRrc::GetUlEarfcn() const [member function]
    cls.add_method('GetUlEarfcn', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::InitializeSap() [member function]
    cls.add_method('InitializeSap', 
                   'void', 
                   [])
    ## lte-ue-rrc.h (module 'lte'): bool ns3::LteUeRrc::IsServingCell(uint16_t cellId) const [member function]
    cls.add_method('IsServingCell', 
                   'bool', 
                   [param('uint16_t', 'cellId')], 
                   is_const=True)
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SendPc5Signaling(ns3::Ptr<ns3::Packet> packet, uint32_t destination) [member function]
    cls.add_method('SendPc5Signaling', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint32_t', 'destination')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SetAsSapUser(ns3::LteAsSapUser * s) [member function]
    cls.add_method('SetAsSapUser', 
                   'void', 
                   [param('ns3::LteAsSapUser *', 's')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SetImsi(uint64_t imsi) [member function]
    cls.add_method('SetImsi', 
                   'void', 
                   [param('uint64_t', 'imsi')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SetLteCcmRrcSapProvider(ns3::LteUeCcmRrcSapProvider * s) [member function]
    cls.add_method('SetLteCcmRrcSapProvider', 
                   'void', 
                   [param('ns3::LteUeCcmRrcSapProvider *', 's')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SetLteMacSapProvider(ns3::LteMacSapProvider * s) [member function]
    cls.add_method('SetLteMacSapProvider', 
                   'void', 
                   [param('ns3::LteMacSapProvider *', 's')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SetLteUeCmacSapProvider(ns3::LteUeCmacSapProvider * s) [member function]
    cls.add_method('SetLteUeCmacSapProvider', 
                   'void', 
                   [param('ns3::LteUeCmacSapProvider *', 's')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SetLteUeCmacSapProvider(ns3::LteUeCmacSapProvider * s, uint8_t index) [member function]
    cls.add_method('SetLteUeCmacSapProvider', 
                   'void', 
                   [param('ns3::LteUeCmacSapProvider *', 's'), param('uint8_t', 'index')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SetLteUeCphySapProvider(ns3::LteUeCphySapProvider * s) [member function]
    cls.add_method('SetLteUeCphySapProvider', 
                   'void', 
                   [param('ns3::LteUeCphySapProvider *', 's')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SetLteUeCphySapProvider(ns3::LteUeCphySapProvider * s, uint8_t index) [member function]
    cls.add_method('SetLteUeCphySapProvider', 
                   'void', 
                   [param('ns3::LteUeCphySapProvider *', 's'), param('uint8_t', 'index')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SetLteUeRrcSapUser(ns3::LteUeRrcSapUser * s) [member function]
    cls.add_method('SetLteUeRrcSapUser', 
                   'void', 
                   [param('ns3::LteUeRrcSapUser *', 's')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SetSlssid(uint64_t slssid) [member function]
    cls.add_method('SetSlssid', 
                   'void', 
                   [param('uint64_t', 'slssid')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::SetUseRlcSm(bool val) [member function]
    cls.add_method('SetUseRlcSm', 
                   'void', 
                   [param('bool', 'val')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::StartDiscoveryApps(std::list<unsigned int, std::allocator<unsigned int>> appCodes, ns3::LteSlUeRrc::DiscoveryRole role) [member function]
    cls.add_method('StartDiscoveryApps', 
                   'void', 
                   [param('std::list< unsigned int >', 'appCodes'), param('ns3::LteSlUeRrc::DiscoveryRole', 'role')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::StartRelayService(uint32_t serviceCode, ns3::LteSlUeRrc::DiscoveryModel model, ns3::LteSlUeRrc::RelayRole role) [member function]
    cls.add_method('StartRelayService', 
                   'void', 
                   [param('uint32_t', 'serviceCode'), param('ns3::LteSlUeRrc::DiscoveryModel', 'model'), param('ns3::LteSlUeRrc::RelayRole', 'role')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::StopDiscoveryApps(std::list<unsigned int, std::allocator<unsigned int>> appCodes, ns3::LteSlUeRrc::DiscoveryRole role) [member function]
    cls.add_method('StopDiscoveryApps', 
                   'void', 
                   [param('std::list< unsigned int >', 'appCodes'), param('ns3::LteSlUeRrc::DiscoveryRole', 'role')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::StopRelayService(uint32_t serviceCode) [member function]
    cls.add_method('StopRelayService', 
                   'void', 
                   [param('uint32_t', 'serviceCode')])
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::StorePreviousCellId(uint16_t cellId) [member function]
    cls.add_method('StorePreviousCellId', 
                   'void', 
                   [param('uint16_t', 'cellId')])
    ## lte-ue-rrc.h (module 'lte'): static std::string const ns3::LteUeRrc::ToString(ns3::LteUeRrc::State s) [member function]
    cls.add_method('ToString', 
                   'std::string const', 
                   [param('ns3::LteUeRrc::State', 's')], 
                   is_static=True)
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::TransmitDiscoveryMessage(ns3::LteSlDiscHeader discHeader) [member function]
    cls.add_method('TransmitDiscoveryMessage', 
                   'void', 
                   [param('ns3::LteSlDiscHeader', 'discHeader')])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::m_numberOfComponentCarriers [variable]
    cls.add_instance_attribute('m_numberOfComponentCarriers', 'uint16_t', is_const=False)
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## lte-ue-rrc.h (module 'lte'): void ns3::LteUeRrc::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3LteUeRrcSlChangeOfSyncRefStatParameters_methods(root_module, cls):
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters::SlChangeOfSyncRefStatParameters() [constructor]
    cls.add_constructor([])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters::SlChangeOfSyncRefStatParameters(ns3::LteUeRrc::SlChangeOfSyncRefStatParameters const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteUeRrc::SlChangeOfSyncRefStatParameters const &', 'arg0')])
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters::currFrameNo [variable]
    cls.add_instance_attribute('currFrameNo', 'uint16_t', is_const=False)
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters::currRxOffset [variable]
    cls.add_instance_attribute('currRxOffset', 'uint16_t', is_const=False)
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters::currSlssid [variable]
    cls.add_instance_attribute('currSlssid', 'uint64_t', is_const=False)
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters::currSubframeNo [variable]
    cls.add_instance_attribute('currSubframeNo', 'uint16_t', is_const=False)
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters::imsi [variable]
    cls.add_instance_attribute('imsi', 'uint64_t', is_const=False)
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters::prevFrameNo [variable]
    cls.add_instance_attribute('prevFrameNo', 'uint16_t', is_const=False)
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters::prevRxOffset [variable]
    cls.add_instance_attribute('prevRxOffset', 'uint16_t', is_const=False)
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters::prevSlssid [variable]
    cls.add_instance_attribute('prevSlssid', 'uint64_t', is_const=False)
    ## lte-ue-rrc.h (module 'lte'): ns3::LteUeRrc::SlChangeOfSyncRefStatParameters::prevSubframeNo [variable]
    cls.add_instance_attribute('prevSubframeNo', 'uint16_t', is_const=False)
    return

def register_Ns3Mac48AddressChecker_methods(root_module, cls):
    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker() [constructor]
    cls.add_constructor([])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker(ns3::Mac48AddressChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Mac48AddressChecker const &', 'arg0')])
    return

def register_Ns3Mac48AddressValue_methods(root_module, cls):
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue() [constructor]
    cls.add_constructor([])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48Address const & value) [constructor]
    cls.add_constructor([param('ns3::Mac48Address const &', 'value')])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48AddressValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Mac48AddressValue const &', 'arg0')])
    ## mac48-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Mac48AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mac48-address.h (module 'network'): bool ns3::Mac48AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## mac48-address.h (module 'network'): ns3::Mac48Address ns3::Mac48AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Mac48Address', 
                   [], 
                   is_const=True)
    ## mac48-address.h (module 'network'): std::string ns3::Mac48AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## mac48-address.h (module 'network'): void ns3::Mac48AddressValue::Set(ns3::Mac48Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Mac48Address const &', 'value')])
    return

def register_Ns3Mac64AddressChecker_methods(root_module, cls):
    ## mac64-address.h (module 'network'): ns3::Mac64AddressChecker::Mac64AddressChecker() [constructor]
    cls.add_constructor([])
    ## mac64-address.h (module 'network'): ns3::Mac64AddressChecker::Mac64AddressChecker(ns3::Mac64AddressChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Mac64AddressChecker const &', 'arg0')])
    return

def register_Ns3Mac64AddressValue_methods(root_module, cls):
    ## mac64-address.h (module 'network'): ns3::Mac64AddressValue::Mac64AddressValue() [constructor]
    cls.add_constructor([])
    ## mac64-address.h (module 'network'): ns3::Mac64AddressValue::Mac64AddressValue(ns3::Mac64Address const & value) [constructor]
    cls.add_constructor([param('ns3::Mac64Address const &', 'value')])
    ## mac64-address.h (module 'network'): ns3::Mac64AddressValue::Mac64AddressValue(ns3::Mac64AddressValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Mac64AddressValue const &', 'arg0')])
    ## mac64-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Mac64AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mac64-address.h (module 'network'): bool ns3::Mac64AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## mac64-address.h (module 'network'): ns3::Mac64Address ns3::Mac64AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Mac64Address', 
                   [], 
                   is_const=True)
    ## mac64-address.h (module 'network'): std::string ns3::Mac64AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## mac64-address.h (module 'network'): void ns3::Mac64AddressValue::Set(ns3::Mac64Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Mac64Address const &', 'value')])
    return

def register_Ns3MacStatsCalculator_methods(root_module, cls):
    ## mac-stats-calculator.h (module 'lte'): ns3::MacStatsCalculator::MacStatsCalculator() [constructor]
    cls.add_constructor([])
    ## mac-stats-calculator.h (module 'lte'): static ns3::TypeId ns3::MacStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mac-stats-calculator.h (module 'lte'): void ns3::MacStatsCalculator::SetUlOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetUlOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## mac-stats-calculator.h (module 'lte'): std::string ns3::MacStatsCalculator::GetUlOutputFilename() [member function]
    cls.add_method('GetUlOutputFilename', 
                   'std::string', 
                   [])
    ## mac-stats-calculator.h (module 'lte'): void ns3::MacStatsCalculator::SetDlOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetDlOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## mac-stats-calculator.h (module 'lte'): std::string ns3::MacStatsCalculator::GetDlOutputFilename() [member function]
    cls.add_method('GetDlOutputFilename', 
                   'std::string', 
                   [])
    ## mac-stats-calculator.h (module 'lte'): void ns3::MacStatsCalculator::SetSlUeCchOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetSlUeCchOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## mac-stats-calculator.h (module 'lte'): std::string ns3::MacStatsCalculator::GetSlUeCchOutputFilename() [member function]
    cls.add_method('GetSlUeCchOutputFilename', 
                   'std::string', 
                   [])
    ## mac-stats-calculator.h (module 'lte'): void ns3::MacStatsCalculator::SetSlUeSchOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetSlUeSchOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## mac-stats-calculator.h (module 'lte'): std::string ns3::MacStatsCalculator::GetSlUeSchOutputFilename() [member function]
    cls.add_method('GetSlUeSchOutputFilename', 
                   'std::string', 
                   [])
    ## mac-stats-calculator.h (module 'lte'): void ns3::MacStatsCalculator::SetSlUeDchOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetSlUeDchOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## mac-stats-calculator.h (module 'lte'): std::string ns3::MacStatsCalculator::GetSlUeDchOutputFilename() [member function]
    cls.add_method('GetSlUeDchOutputFilename', 
                   'std::string', 
                   [])
    ## mac-stats-calculator.h (module 'lte'): void ns3::MacStatsCalculator::DlScheduling(uint16_t cellId, uint64_t imsi, ns3::DlSchedulingCallbackInfo dlSchedulingCallbackInfo) [member function]
    cls.add_method('DlScheduling', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('ns3::DlSchedulingCallbackInfo', 'dlSchedulingCallbackInfo')])
    ## mac-stats-calculator.h (module 'lte'): void ns3::MacStatsCalculator::UlScheduling(uint16_t cellId, uint64_t imsi, uint32_t frameNo, uint32_t subframeNo, uint16_t rnti, uint8_t mcsTb, uint16_t sizeTb, uint8_t componentCarrierId) [member function]
    cls.add_method('UlScheduling', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo'), param('uint16_t', 'rnti'), param('uint8_t', 'mcsTb'), param('uint16_t', 'sizeTb'), param('uint8_t', 'componentCarrierId')])
    ## mac-stats-calculator.h (module 'lte'): static void ns3::MacStatsCalculator::DlSchedulingCallback(ns3::Ptr<ns3::MacStatsCalculator> macStats, std::string path, ns3::DlSchedulingCallbackInfo dlSchedulingCallbackInfo) [member function]
    cls.add_method('DlSchedulingCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::MacStatsCalculator >', 'macStats'), param('std::string', 'path'), param('ns3::DlSchedulingCallbackInfo', 'dlSchedulingCallbackInfo')], 
                   is_static=True)
    ## mac-stats-calculator.h (module 'lte'): static void ns3::MacStatsCalculator::UlSchedulingCallback(ns3::Ptr<ns3::MacStatsCalculator> macStats, std::string path, uint32_t frameNo, uint32_t subframeNo, uint16_t rnti, uint8_t mcs, uint16_t size, uint8_t componentCarrierId) [member function]
    cls.add_method('UlSchedulingCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::MacStatsCalculator >', 'macStats'), param('std::string', 'path'), param('uint32_t', 'frameNo'), param('uint32_t', 'subframeNo'), param('uint16_t', 'rnti'), param('uint8_t', 'mcs'), param('uint16_t', 'size'), param('uint8_t', 'componentCarrierId')], 
                   is_static=True)
    ## mac-stats-calculator.h (module 'lte'): static void ns3::MacStatsCalculator::SlUeCchSchedulingCallback(ns3::Ptr<ns3::MacStatsCalculator> macStats, std::string path, ns3::SlUeMacStatParameters params) [member function]
    cls.add_method('SlUeCchSchedulingCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::MacStatsCalculator >', 'macStats'), param('std::string', 'path'), param('ns3::SlUeMacStatParameters', 'params')], 
                   is_static=True)
    ## mac-stats-calculator.h (module 'lte'): static void ns3::MacStatsCalculator::SlUeSchSchedulingCallback(ns3::Ptr<ns3::MacStatsCalculator> macStats, std::string path, ns3::SlUeMacStatParameters params) [member function]
    cls.add_method('SlUeSchSchedulingCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::MacStatsCalculator >', 'macStats'), param('std::string', 'path'), param('ns3::SlUeMacStatParameters', 'params')], 
                   is_static=True)
    ## mac-stats-calculator.h (module 'lte'): static void ns3::MacStatsCalculator::SlUeDchSchedulingCallback(ns3::Ptr<ns3::MacStatsCalculator> macStats, std::string path, ns3::SlUeMacStatParameters params, ns3::LteSlDiscHeader discMsg) [member function]
    cls.add_method('SlUeDchSchedulingCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::MacStatsCalculator >', 'macStats'), param('std::string', 'path'), param('ns3::SlUeMacStatParameters', 'params'), param('ns3::LteSlDiscHeader', 'discMsg')], 
                   is_static=True)
    ## mac-stats-calculator.h (module 'lte'): void ns3::MacStatsCalculator::SlUeCchScheduling(ns3::SlUeMacStatParameters params) [member function]
    cls.add_method('SlUeCchScheduling', 
                   'void', 
                   [param('ns3::SlUeMacStatParameters', 'params')])
    ## mac-stats-calculator.h (module 'lte'): void ns3::MacStatsCalculator::SlUeSchScheduling(ns3::SlUeMacStatParameters params) [member function]
    cls.add_method('SlUeSchScheduling', 
                   'void', 
                   [param('ns3::SlUeMacStatParameters', 'params')])
    ## mac-stats-calculator.h (module 'lte'): void ns3::MacStatsCalculator::SlUeDchScheduling(ns3::SlUeMacStatParameters params, ns3::LteSlDiscHeader discMsg) [member function]
    cls.add_method('SlUeDchScheduling', 
                   'void', 
                   [param('ns3::SlUeMacStatParameters', 'params'), param('ns3::LteSlDiscHeader', 'discMsg')])
    return

def register_Ns3MatrixPropagationLossModel_methods(root_module, cls):
    ## propagation-loss-model.h (module 'propagation'): static ns3::TypeId ns3::MatrixPropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-loss-model.h (module 'propagation'): ns3::MatrixPropagationLossModel::MatrixPropagationLossModel() [constructor]
    cls.add_constructor([])
    ## propagation-loss-model.h (module 'propagation'): void ns3::MatrixPropagationLossModel::SetLoss(ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b, double loss, bool symmetric=true) [member function]
    cls.add_method('SetLoss', 
                   'void', 
                   [param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b'), param('double', 'loss'), param('bool', 'symmetric', default_value='true')])
    ## propagation-loss-model.h (module 'propagation'): void ns3::MatrixPropagationLossModel::SetDefaultLoss(double defaultLoss) [member function]
    cls.add_method('SetDefaultLoss', 
                   'void', 
                   [param('double', 'defaultLoss')])
    ## propagation-loss-model.h (module 'propagation'): double ns3::MatrixPropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPower', 
                   'double', 
                   [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_virtual=True, visibility='private')
    ## propagation-loss-model.h (module 'propagation'): int64_t ns3::MatrixPropagationLossModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3MibLteControlMessage_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::MibLteControlMessage::MibLteControlMessage(ns3::MibLteControlMessage const & arg0) [constructor]
    cls.add_constructor([param('ns3::MibLteControlMessage const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::MibLteControlMessage::MibLteControlMessage() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): ns3::LteRrcSap::MasterInformationBlock ns3::MibLteControlMessage::GetMib() const [member function]
    cls.add_method('GetMib', 
                   'ns3::LteRrcSap::MasterInformationBlock', 
                   [], 
                   is_const=True)
    ## lte-control-messages.h (module 'lte'): void ns3::MibLteControlMessage::SetMib(ns3::LteRrcSap::MasterInformationBlock mib) [member function]
    cls.add_method('SetMib', 
                   'void', 
                   [param('ns3::LteRrcSap::MasterInformationBlock', 'mib')])
    return

def register_Ns3MinMaxAvgTotalCalculator__Unsigned_int_methods(root_module, cls):
    ## basic-data-calculators.h (module 'stats'): ns3::MinMaxAvgTotalCalculator<unsigned int>::MinMaxAvgTotalCalculator(ns3::MinMaxAvgTotalCalculator<unsigned int> const & arg0) [constructor]
    cls.add_constructor([param('ns3::MinMaxAvgTotalCalculator< unsigned int > const &', 'arg0')])
    ## basic-data-calculators.h (module 'stats'): ns3::MinMaxAvgTotalCalculator<unsigned int>::MinMaxAvgTotalCalculator() [constructor]
    cls.add_constructor([])
    ## basic-data-calculators.h (module 'stats'): static ns3::TypeId ns3::MinMaxAvgTotalCalculator<unsigned int>::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## basic-data-calculators.h (module 'stats'): void ns3::MinMaxAvgTotalCalculator<unsigned int>::Output(ns3::DataOutputCallback & callback) const [member function]
    cls.add_method('Output', 
                   'void', 
                   [param('ns3::DataOutputCallback &', 'callback')], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): void ns3::MinMaxAvgTotalCalculator<unsigned int>::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [])
    ## basic-data-calculators.h (module 'stats'): void ns3::MinMaxAvgTotalCalculator<unsigned int>::Update(unsigned int const i) [member function]
    cls.add_method('Update', 
                   'void', 
                   [param('unsigned int const', 'i')])
    ## basic-data-calculators.h (module 'stats'): long int ns3::MinMaxAvgTotalCalculator<unsigned int>::getCount() const [member function]
    cls.add_method('getCount', 
                   'long int', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned int>::getMax() const [member function]
    cls.add_method('getMax', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned int>::getMean() const [member function]
    cls.add_method('getMean', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned int>::getMin() const [member function]
    cls.add_method('getMin', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned int>::getSqrSum() const [member function]
    cls.add_method('getSqrSum', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned int>::getStddev() const [member function]
    cls.add_method('getStddev', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned int>::getSum() const [member function]
    cls.add_method('getSum', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned int>::getVariance() const [member function]
    cls.add_method('getVariance', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): void ns3::MinMaxAvgTotalCalculator<unsigned int>::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3MinMaxAvgTotalCalculator__Unsigned_long_methods(root_module, cls):
    ## basic-data-calculators.h (module 'stats'): ns3::MinMaxAvgTotalCalculator<unsigned long>::MinMaxAvgTotalCalculator(ns3::MinMaxAvgTotalCalculator<unsigned long> const & arg0) [constructor]
    cls.add_constructor([param('ns3::MinMaxAvgTotalCalculator< unsigned long > const &', 'arg0')])
    ## basic-data-calculators.h (module 'stats'): ns3::MinMaxAvgTotalCalculator<unsigned long>::MinMaxAvgTotalCalculator() [constructor]
    cls.add_constructor([])
    ## basic-data-calculators.h (module 'stats'): static ns3::TypeId ns3::MinMaxAvgTotalCalculator<unsigned long>::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## basic-data-calculators.h (module 'stats'): void ns3::MinMaxAvgTotalCalculator<unsigned long>::Output(ns3::DataOutputCallback & callback) const [member function]
    cls.add_method('Output', 
                   'void', 
                   [param('ns3::DataOutputCallback &', 'callback')], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): void ns3::MinMaxAvgTotalCalculator<unsigned long>::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [])
    ## basic-data-calculators.h (module 'stats'): void ns3::MinMaxAvgTotalCalculator<unsigned long>::Update(long unsigned int const i) [member function]
    cls.add_method('Update', 
                   'void', 
                   [param('long unsigned int const', 'i')])
    ## basic-data-calculators.h (module 'stats'): long int ns3::MinMaxAvgTotalCalculator<unsigned long>::getCount() const [member function]
    cls.add_method('getCount', 
                   'long int', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned long>::getMax() const [member function]
    cls.add_method('getMax', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned long>::getMean() const [member function]
    cls.add_method('getMean', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned long>::getMin() const [member function]
    cls.add_method('getMin', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned long>::getSqrSum() const [member function]
    cls.add_method('getSqrSum', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned long>::getStddev() const [member function]
    cls.add_method('getStddev', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned long>::getSum() const [member function]
    cls.add_method('getSum', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): double ns3::MinMaxAvgTotalCalculator<unsigned long>::getVariance() const [member function]
    cls.add_method('getVariance', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## basic-data-calculators.h (module 'stats'): void ns3::MinMaxAvgTotalCalculator<unsigned long>::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3MobilityModel_methods(root_module, cls):
    ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel(ns3::MobilityModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::MobilityModel const &', 'arg0')])
    ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel() [constructor]
    cls.add_constructor([])
    ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')])
    ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetDistanceFrom(ns3::Ptr<const ns3::MobilityModel> position) const [member function]
    cls.add_method('GetDistanceFrom', 
                   'double', 
                   [param('ns3::Ptr< ns3::MobilityModel const >', 'position')], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetPosition() const [member function]
    cls.add_method('GetPosition', 
                   'ns3::Vector', 
                   [], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetPositionWithReference(ns3::Vector const & referencePosition) const [member function]
    cls.add_method('GetPositionWithReference', 
                   'ns3::Vector', 
                   [param('ns3::Vector const &', 'referencePosition')], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetRelativeSpeed(ns3::Ptr<const ns3::MobilityModel> other) const [member function]
    cls.add_method('GetRelativeSpeed', 
                   'double', 
                   [param('ns3::Ptr< ns3::MobilityModel const >', 'other')], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): static ns3::TypeId ns3::MobilityModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetVelocity() const [member function]
    cls.add_method('GetVelocity', 
                   'ns3::Vector', 
                   [], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::SetPosition(ns3::Vector const & position) [member function]
    cls.add_method('SetPosition', 
                   'void', 
                   [param('ns3::Vector const &', 'position')])
    ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::NotifyCourseChange() const [member function]
    cls.add_method('NotifyCourseChange', 
                   'void', 
                   [], 
                   is_const=True, visibility='protected')
    ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::DoAssignStreams(int64_t start) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'start')], 
                   is_virtual=True, visibility='private')
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetPosition() const [member function]
    cls.add_method('DoGetPosition', 
                   'ns3::Vector', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetPositionWithReference(ns3::Vector const & referencePosition) const [member function]
    cls.add_method('DoGetPositionWithReference', 
                   'ns3::Vector', 
                   [param('ns3::Vector const &', 'referencePosition')], 
                   is_const=True, is_virtual=True, visibility='private')
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetVelocity() const [member function]
    cls.add_method('DoGetVelocity', 
                   'ns3::Vector', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
    ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::DoSetPosition(ns3::Vector const & position) [member function]
    cls.add_method('DoSetPosition', 
                   'void', 
                   [param('ns3::Vector const &', 'position')], 
                   is_pure_virtual=True, is_virtual=True, visibility='private')
    return

def register_Ns3NakagamiPropagationLossModel_methods(root_module, cls):
    ## propagation-loss-model.h (module 'propagation'): static ns3::TypeId ns3::NakagamiPropagationLossModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## propagation-loss-model.h (module 'propagation'): ns3::NakagamiPropagationLossModel::NakagamiPropagationLossModel() [constructor]
    cls.add_constructor([])
    ## propagation-loss-model.h (module 'propagation'): double ns3::NakagamiPropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
    cls.add_method('DoCalcRxPower', 
                   'double', 
                   [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
                   is_const=True, is_virtual=True, visibility='private')
    ## propagation-loss-model.h (module 'propagation'): int64_t ns3::NakagamiPropagationLossModel::DoAssignStreams(int64_t stream) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3NetDevice_methods(root_module, cls):
    ## net-device.h (module 'network'): ns3::NetDevice::NetDevice() [constructor]
    cls.add_constructor([])
    ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [constructor]
    cls.add_constructor([param('ns3::NetDevice const &', 'arg0')])
    ## net-device.h (module 'network'): void ns3::NetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
    cls.add_method('AddLinkChangeCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetAddress() const [member function]
    cls.add_method('GetAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetBroadcast() const [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Ptr<ns3::Channel> ns3::NetDevice::GetChannel() const [member function]
    cls.add_method('GetChannel', 
                   'ns3::Ptr< ns3::Channel >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): uint32_t ns3::NetDevice::GetIfIndex() const [member function]
    cls.add_method('GetIfIndex', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): uint16_t ns3::NetDevice::GetMtu() const [member function]
    cls.add_method('GetMtu', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetMulticast(ns3::Ipv4Address multicastGroup) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv4Address', 'multicastGroup')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetMulticast(ns3::Ipv6Address addr) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv6Address', 'addr')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Ptr<ns3::Node> ns3::NetDevice::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): static ns3::TypeId ns3::NetDevice::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsBridge() const [member function]
    cls.add_method('IsBridge', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsLinkUp() const [member function]
    cls.add_method('IsLinkUp', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsPointToPoint() const [member function]
    cls.add_method('IsPointToPoint', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::NeedsArp() const [member function]
    cls.add_method('NeedsArp', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::Send(ns3::Ptr<ns3::Packet> packet, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('Send', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::SendFrom(ns3::Ptr<ns3::Packet> packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('SendFrom', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetAddress(ns3::Address address) [member function]
    cls.add_method('SetAddress', 
                   'void', 
                   [param('ns3::Address', 'address')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetIfIndex(uint32_t const index) [member function]
    cls.add_method('SetIfIndex', 
                   'void', 
                   [param('uint32_t const', 'index')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::SetMtu(uint16_t const mtu) [member function]
    cls.add_method('SetMtu', 
                   'bool', 
                   [param('uint16_t const', 'mtu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
    cls.add_method('SetPromiscReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
    cls.add_method('SetReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::SupportsSendFrom() const [member function]
    cls.add_method('SupportsSendFrom', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NixVector_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## nix-vector.h (module 'network'): ns3::NixVector::NixVector() [constructor]
    cls.add_constructor([])
    ## nix-vector.h (module 'network'): ns3::NixVector::NixVector(ns3::NixVector const & o) [constructor]
    cls.add_constructor([param('ns3::NixVector const &', 'o')])
    ## nix-vector.h (module 'network'): void ns3::NixVector::AddNeighborIndex(uint32_t newBits, uint32_t numberOfBits) [member function]
    cls.add_method('AddNeighborIndex', 
                   'void', 
                   [param('uint32_t', 'newBits'), param('uint32_t', 'numberOfBits')])
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::BitCount(uint32_t numberOfNeighbors) const [member function]
    cls.add_method('BitCount', 
                   'uint32_t', 
                   [param('uint32_t', 'numberOfNeighbors')], 
                   is_const=True)
    ## nix-vector.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::NixVector::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::NixVector >', 
                   [], 
                   is_const=True)
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::ExtractNeighborIndex(uint32_t numberOfBits) [member function]
    cls.add_method('ExtractNeighborIndex', 
                   'uint32_t', 
                   [param('uint32_t', 'numberOfBits')])
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetEpoch() const [member function]
    cls.add_method('GetEpoch', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetRemainingBits() const [member function]
    cls.add_method('GetRemainingBits', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    ## nix-vector.h (module 'network'): void ns3::NixVector::SetEpoch(uint32_t epoch) [member function]
    cls.add_method('SetEpoch', 
                   'void', 
                   [param('uint32_t', 'epoch')])
    return

def register_Ns3Node_methods(root_module, cls):
    ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [constructor]
    cls.add_constructor([param('ns3::Node const &', 'arg0')])
    ## node.h (module 'network'): ns3::Node::Node() [constructor]
    cls.add_constructor([])
    ## node.h (module 'network'): ns3::Node::Node(uint32_t systemId) [constructor]
    cls.add_constructor([param('uint32_t', 'systemId')])
    ## node.h (module 'network'): uint32_t ns3::Node::AddApplication(ns3::Ptr<ns3::Application> application) [member function]
    cls.add_method('AddApplication', 
                   'uint32_t', 
                   [param('ns3::Ptr< ns3::Application >', 'application')])
    ## node.h (module 'network'): uint32_t ns3::Node::AddDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
    cls.add_method('AddDevice', 
                   'uint32_t', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device')])
    ## node.h (module 'network'): static bool ns3::Node::ChecksumEnabled() [member function]
    cls.add_method('ChecksumEnabled', 
                   'bool', 
                   [], 
                   is_static=True)
    ## node.h (module 'network'): ns3::Ptr<ns3::Application> ns3::Node::GetApplication(uint32_t index) const [member function]
    cls.add_method('GetApplication', 
                   'ns3::Ptr< ns3::Application >', 
                   [param('uint32_t', 'index')], 
                   is_const=True)
    ## node.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Node::GetDevice(uint32_t index) const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [param('uint32_t', 'index')], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetId() const [member function]
    cls.add_method('GetId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): ns3::Time ns3::Node::GetLocalTime() const [member function]
    cls.add_method('GetLocalTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetNApplications() const [member function]
    cls.add_method('GetNApplications', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetNDevices() const [member function]
    cls.add_method('GetNDevices', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetSystemId() const [member function]
    cls.add_method('GetSystemId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): static ns3::TypeId ns3::Node::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
    cls.add_method('RegisterDeviceAdditionListener', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'listener')])
    ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Node::ProtocolHandler handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
    cls.add_method('RegisterProtocolHandler', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler'), param('uint16_t', 'protocolType'), param('ns3::Ptr< ns3::NetDevice >', 'device'), param('bool', 'promiscuous', default_value='false')])
    ## node.h (module 'network'): void ns3::Node::RemoveDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
    cls.add_method('RemoveDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device')])
    ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
    cls.add_method('UnregisterDeviceAdditionListener', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'listener')])
    ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Node::ProtocolHandler handler) [member function]
    cls.add_method('UnregisterProtocolHandler', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler')])
    ## node.h (module 'network'): void ns3::Node::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## node.h (module 'network'): void ns3::Node::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3NormalRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): ns3::NormalRandomVariable::INFINITE_VALUE [variable]
    cls.add_static_attribute('INFINITE_VALUE', 'double const', is_const=True)
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::NormalRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::NormalRandomVariable::NormalRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetMean() const [member function]
    cls.add_method('GetMean', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetVariance() const [member function]
    cls.add_method('GetVariance', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetValue(double mean, double variance, double bound=ns3::NormalRandomVariable::INFINITE_VALUE) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mean'), param('double', 'variance'), param('double', 'bound', default_value='ns3::NormalRandomVariable::INFINITE_VALUE')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::NormalRandomVariable::GetInteger(uint32_t mean, uint32_t variance, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mean'), param('uint32_t', 'variance'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::NormalRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3ObjectFactoryChecker_methods(root_module, cls):
    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker() [constructor]
    cls.add_constructor([])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::ObjectFactoryChecker const &', 'arg0')])
    return

def register_Ns3ObjectFactoryValue_methods(root_module, cls):
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue() [constructor]
    cls.add_constructor([])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactory const & value) [constructor]
    cls.add_constructor([param('ns3::ObjectFactory const &', 'value')])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
    ## object-factory.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::ObjectFactoryValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## object-factory.h (module 'core'): ns3::ObjectFactory ns3::ObjectFactoryValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::ObjectFactory', 
                   [], 
                   is_const=True)
    ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## object-factory.h (module 'core'): void ns3::ObjectFactoryValue::Set(ns3::ObjectFactory const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::ObjectFactory const &', 'value')])
    return

def register_Ns3OutputStreamWrapper_methods(root_module, cls):
    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(ns3::OutputStreamWrapper const & arg0) [constructor]
    cls.add_constructor([param('ns3::OutputStreamWrapper const &', 'arg0')])
    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::string filename, std::ios_base::openmode filemode) [constructor]
    cls.add_constructor([param('std::string', 'filename'), param('std::ios_base::openmode', 'filemode')])
    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::ostream * os) [constructor]
    cls.add_constructor([param('std::ostream *', 'os')])
    ## output-stream-wrapper.h (module 'network'): std::ostream * ns3::OutputStreamWrapper::GetStream() [member function]
    cls.add_method('GetStream', 
                   'std::ostream *', 
                   [])
    return

def register_Ns3Packet_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## packet.h (module 'network'): ns3::Packet::Packet() [constructor]
    cls.add_constructor([])
    ## packet.h (module 'network'): ns3::Packet::Packet(ns3::Packet const & o) [constructor]
    cls.add_constructor([param('ns3::Packet const &', 'o')])
    ## packet.h (module 'network'): ns3::Packet::Packet(uint32_t size) [constructor]
    cls.add_constructor([param('uint32_t', 'size')])
    ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size, bool magic) [constructor]
    cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size'), param('bool', 'magic')])
    ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size) [constructor]
    cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## packet.h (module 'network'): void ns3::Packet::AddAtEnd(ns3::Ptr<const ns3::Packet> packet) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet const >', 'packet')])
    ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag) const [member function]
    cls.add_method('AddByteTag', 
                   'void', 
                   [param('ns3::Tag const &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
    cls.add_method('AddByteTag', 
                   'void', 
                   [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::AddHeader(ns3::Header const & header) [member function]
    cls.add_method('AddHeader', 
                   'void', 
                   [param('ns3::Header const &', 'header')])
    ## packet.h (module 'network'): void ns3::Packet::AddPacketTag(ns3::Tag const & tag) const [member function]
    cls.add_method('AddPacketTag', 
                   'void', 
                   [param('ns3::Tag const &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::AddPaddingAtEnd(uint32_t size) [member function]
    cls.add_method('AddPaddingAtEnd', 
                   'void', 
                   [param('uint32_t', 'size')])
    ## packet.h (module 'network'): void ns3::Packet::AddTrailer(ns3::Trailer const & trailer) [member function]
    cls.add_method('AddTrailer', 
                   'void', 
                   [param('ns3::Trailer const &', 'trailer')])
    ## packet.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::Packet::BeginItem() const [member function]
    cls.add_method('BeginItem', 
                   'ns3::PacketMetadata::ItemIterator', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::Packet >', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::CopyData(uint8_t * buffer, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::CopyData(std::ostream * os, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'void', 
                   [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::CreateFragment(uint32_t start, uint32_t length) const [member function]
    cls.add_method('CreateFragment', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('uint32_t', 'start'), param('uint32_t', 'length')], 
                   is_const=True)
    ## packet.h (module 'network'): static void ns3::Packet::EnableChecking() [member function]
    cls.add_method('EnableChecking', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet.h (module 'network'): static void ns3::Packet::EnablePrinting() [member function]
    cls.add_method('EnablePrinting', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet.h (module 'network'): bool ns3::Packet::FindFirstMatchingByteTag(ns3::Tag & tag) const [member function]
    cls.add_method('FindFirstMatchingByteTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::ByteTagIterator ns3::Packet::GetByteTagIterator() const [member function]
    cls.add_method('GetByteTagIterator', 
                   'ns3::ByteTagIterator', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::Packet::GetNixVector() const [member function]
    cls.add_method('GetNixVector', 
                   'ns3::Ptr< ns3::NixVector >', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::PacketTagIterator ns3::Packet::GetPacketTagIterator() const [member function]
    cls.add_method('GetPacketTagIterator', 
                   'ns3::PacketTagIterator', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint64_t ns3::Packet::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header) const [member function]
    cls.add_method('PeekHeader', 
                   'uint32_t', 
                   [param('ns3::Header &', 'header')], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header, uint32_t size) const [member function]
    cls.add_method('PeekHeader', 
                   'uint32_t', 
                   [param('ns3::Header &', 'header'), param('uint32_t', 'size')], 
                   is_const=True)
    ## packet.h (module 'network'): bool ns3::Packet::PeekPacketTag(ns3::Tag & tag) const [member function]
    cls.add_method('PeekPacketTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekTrailer(ns3::Trailer & trailer) [member function]
    cls.add_method('PeekTrailer', 
                   'uint32_t', 
                   [param('ns3::Trailer &', 'trailer')])
    ## packet.h (module 'network'): void ns3::Packet::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::PrintByteTags(std::ostream & os) const [member function]
    cls.add_method('PrintByteTags', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::PrintPacketTags(std::ostream & os) const [member function]
    cls.add_method('PrintPacketTags', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::RemoveAllByteTags() [member function]
    cls.add_method('RemoveAllByteTags', 
                   'void', 
                   [])
    ## packet.h (module 'network'): void ns3::Packet::RemoveAllPacketTags() [member function]
    cls.add_method('RemoveAllPacketTags', 
                   'void', 
                   [])
    ## packet.h (module 'network'): void ns3::Packet::RemoveAtEnd(uint32_t size) [member function]
    cls.add_method('RemoveAtEnd', 
                   'void', 
                   [param('uint32_t', 'size')])
    ## packet.h (module 'network'): void ns3::Packet::RemoveAtStart(uint32_t size) [member function]
    cls.add_method('RemoveAtStart', 
                   'void', 
                   [param('uint32_t', 'size')])
    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header) [member function]
    cls.add_method('RemoveHeader', 
                   'uint32_t', 
                   [param('ns3::Header &', 'header')])
    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header, uint32_t size) [member function]
    cls.add_method('RemoveHeader', 
                   'uint32_t', 
                   [param('ns3::Header &', 'header'), param('uint32_t', 'size')])
    ## packet.h (module 'network'): bool ns3::Packet::RemovePacketTag(ns3::Tag & tag) [member function]
    cls.add_method('RemovePacketTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveTrailer(ns3::Trailer & trailer) [member function]
    cls.add_method('RemoveTrailer', 
                   'uint32_t', 
                   [param('ns3::Trailer &', 'trailer')])
    ## packet.h (module 'network'): bool ns3::Packet::ReplacePacketTag(ns3::Tag & tag) [member function]
    cls.add_method('ReplacePacketTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    ## packet.h (module 'network'): uint32_t ns3::Packet::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::SetNixVector(ns3::Ptr<ns3::NixVector> nixVector) const [member function]
    cls.add_method('SetNixVector', 
                   'void', 
                   [param('ns3::Ptr< ns3::NixVector >', 'nixVector')], 
                   is_const=True)
    ## packet.h (module 'network'): std::string ns3::Packet::ToString() const [member function]
    cls.add_method('ToString', 
                   'std::string', 
                   [], 
                   is_const=True)
    return

def register_Ns3ParetoRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ParetoRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ParetoRandomVariable::ParetoRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetScale() const [member function]
    cls.add_method('GetScale', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetShape() const [member function]
    cls.add_method('GetShape', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue(double scale, double shape, double bound) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'scale'), param('double', 'shape'), param('double', 'bound')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger(uint32_t scale, uint32_t shape, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'scale'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PhyRxStatsCalculator_methods(root_module, cls):
    ## phy-rx-stats-calculator.h (module 'lte'): ns3::PhyRxStatsCalculator::PhyRxStatsCalculator() [constructor]
    cls.add_constructor([])
    ## phy-rx-stats-calculator.h (module 'lte'): static ns3::TypeId ns3::PhyRxStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## phy-rx-stats-calculator.h (module 'lte'): void ns3::PhyRxStatsCalculator::SetUlRxOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetUlRxOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## phy-rx-stats-calculator.h (module 'lte'): std::string ns3::PhyRxStatsCalculator::GetUlRxOutputFilename() [member function]
    cls.add_method('GetUlRxOutputFilename', 
                   'std::string', 
                   [])
    ## phy-rx-stats-calculator.h (module 'lte'): void ns3::PhyRxStatsCalculator::SetDlRxOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetDlRxOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## phy-rx-stats-calculator.h (module 'lte'): std::string ns3::PhyRxStatsCalculator::GetDlRxOutputFilename() [member function]
    cls.add_method('GetDlRxOutputFilename', 
                   'std::string', 
                   [])
    ## phy-rx-stats-calculator.h (module 'lte'): void ns3::PhyRxStatsCalculator::DlPhyReception(ns3::PhyReceptionStatParameters params) [member function]
    cls.add_method('DlPhyReception', 
                   'void', 
                   [param('ns3::PhyReceptionStatParameters', 'params')])
    ## phy-rx-stats-calculator.h (module 'lte'): void ns3::PhyRxStatsCalculator::UlPhyReception(ns3::PhyReceptionStatParameters params) [member function]
    cls.add_method('UlPhyReception', 
                   'void', 
                   [param('ns3::PhyReceptionStatParameters', 'params')])
    ## phy-rx-stats-calculator.h (module 'lte'): void ns3::PhyRxStatsCalculator::SetSlRxOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetSlRxOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## phy-rx-stats-calculator.h (module 'lte'): std::string ns3::PhyRxStatsCalculator::GetSlRxOutputFilename() [member function]
    cls.add_method('GetSlRxOutputFilename', 
                   'std::string', 
                   [])
    ## phy-rx-stats-calculator.h (module 'lte'): void ns3::PhyRxStatsCalculator::SetSlPscchRxOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetSlPscchRxOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## phy-rx-stats-calculator.h (module 'lte'): std::string ns3::PhyRxStatsCalculator::GetSlPscchRxOutputFilename() [member function]
    cls.add_method('GetSlPscchRxOutputFilename', 
                   'std::string', 
                   [])
    ## phy-rx-stats-calculator.h (module 'lte'): void ns3::PhyRxStatsCalculator::SlPhyReception(ns3::PhyReceptionStatParameters params) [member function]
    cls.add_method('SlPhyReception', 
                   'void', 
                   [param('ns3::PhyReceptionStatParameters', 'params')])
    ## phy-rx-stats-calculator.h (module 'lte'): void ns3::PhyRxStatsCalculator::SlPscchReception(ns3::SlPhyReceptionStatParameters params) [member function]
    cls.add_method('SlPscchReception', 
                   'void', 
                   [param('ns3::SlPhyReceptionStatParameters', 'params')])
    ## phy-rx-stats-calculator.h (module 'lte'): static void ns3::PhyRxStatsCalculator::DlPhyReceptionCallback(ns3::Ptr<ns3::PhyRxStatsCalculator> phyRxStats, std::string path, ns3::PhyReceptionStatParameters params) [member function]
    cls.add_method('DlPhyReceptionCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::PhyRxStatsCalculator >', 'phyRxStats'), param('std::string', 'path'), param('ns3::PhyReceptionStatParameters', 'params')], 
                   is_static=True)
    ## phy-rx-stats-calculator.h (module 'lte'): static void ns3::PhyRxStatsCalculator::UlPhyReceptionCallback(ns3::Ptr<ns3::PhyRxStatsCalculator> phyRxStats, std::string path, ns3::PhyReceptionStatParameters params) [member function]
    cls.add_method('UlPhyReceptionCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::PhyRxStatsCalculator >', 'phyRxStats'), param('std::string', 'path'), param('ns3::PhyReceptionStatParameters', 'params')], 
                   is_static=True)
    ## phy-rx-stats-calculator.h (module 'lte'): static void ns3::PhyRxStatsCalculator::SlPhyReceptionCallback(ns3::Ptr<ns3::PhyRxStatsCalculator> phyRxStats, std::string path, ns3::PhyReceptionStatParameters params) [member function]
    cls.add_method('SlPhyReceptionCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::PhyRxStatsCalculator >', 'phyRxStats'), param('std::string', 'path'), param('ns3::PhyReceptionStatParameters', 'params')], 
                   is_static=True)
    ## phy-rx-stats-calculator.h (module 'lte'): static void ns3::PhyRxStatsCalculator::SlPscchReceptionCallback(ns3::Ptr<ns3::PhyRxStatsCalculator> phyRxStats, std::string path, ns3::SlPhyReceptionStatParameters params) [member function]
    cls.add_method('SlPscchReceptionCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::PhyRxStatsCalculator >', 'phyRxStats'), param('std::string', 'path'), param('ns3::SlPhyReceptionStatParameters', 'params')], 
                   is_static=True)
    return

def register_Ns3PhyStatsCalculator_methods(root_module, cls):
    ## phy-stats-calculator.h (module 'lte'): ns3::PhyStatsCalculator::PhyStatsCalculator() [constructor]
    cls.add_constructor([])
    ## phy-stats-calculator.h (module 'lte'): static ns3::TypeId ns3::PhyStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## phy-stats-calculator.h (module 'lte'): void ns3::PhyStatsCalculator::SetCurrentCellRsrpSinrFilename(std::string filename) [member function]
    cls.add_method('SetCurrentCellRsrpSinrFilename', 
                   'void', 
                   [param('std::string', 'filename')])
    ## phy-stats-calculator.h (module 'lte'): std::string ns3::PhyStatsCalculator::GetCurrentCellRsrpSinrFilename() [member function]
    cls.add_method('GetCurrentCellRsrpSinrFilename', 
                   'std::string', 
                   [])
    ## phy-stats-calculator.h (module 'lte'): void ns3::PhyStatsCalculator::SetUeSinrFilename(std::string filename) [member function]
    cls.add_method('SetUeSinrFilename', 
                   'void', 
                   [param('std::string', 'filename')])
    ## phy-stats-calculator.h (module 'lte'): std::string ns3::PhyStatsCalculator::GetUeSinrFilename() [member function]
    cls.add_method('GetUeSinrFilename', 
                   'std::string', 
                   [])
    ## phy-stats-calculator.h (module 'lte'): void ns3::PhyStatsCalculator::SetInterferenceFilename(std::string filename) [member function]
    cls.add_method('SetInterferenceFilename', 
                   'void', 
                   [param('std::string', 'filename')])
    ## phy-stats-calculator.h (module 'lte'): std::string ns3::PhyStatsCalculator::GetInterferenceFilename() [member function]
    cls.add_method('GetInterferenceFilename', 
                   'std::string', 
                   [])
    ## phy-stats-calculator.h (module 'lte'): void ns3::PhyStatsCalculator::ReportCurrentCellRsrpSinr(uint16_t cellId, uint64_t imsi, uint16_t rnti, double rsrp, double sinr, uint8_t componentCarrierId) [member function]
    cls.add_method('ReportCurrentCellRsrpSinr', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('double', 'rsrp'), param('double', 'sinr'), param('uint8_t', 'componentCarrierId')])
    ## phy-stats-calculator.h (module 'lte'): void ns3::PhyStatsCalculator::ReportUeSinr(uint16_t cellId, uint64_t imsi, uint16_t rnti, double sinrLinear, uint8_t componentCarrierId) [member function]
    cls.add_method('ReportUeSinr', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('double', 'sinrLinear'), param('uint8_t', 'componentCarrierId')])
    ## phy-stats-calculator.h (module 'lte'): void ns3::PhyStatsCalculator::ReportInterference(uint16_t cellId, ns3::Ptr<ns3::SpectrumValue> interference) [member function]
    cls.add_method('ReportInterference', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('ns3::Ptr< ns3::SpectrumValue >', 'interference')])
    ## phy-stats-calculator.h (module 'lte'): static void ns3::PhyStatsCalculator::ReportCurrentCellRsrpSinrCallback(ns3::Ptr<ns3::PhyStatsCalculator> phyStats, std::string path, uint16_t cellId, uint16_t rnti, double rsrp, double sinr, uint8_t componentCarrierId) [member function]
    cls.add_method('ReportCurrentCellRsrpSinrCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::PhyStatsCalculator >', 'phyStats'), param('std::string', 'path'), param('uint16_t', 'cellId'), param('uint16_t', 'rnti'), param('double', 'rsrp'), param('double', 'sinr'), param('uint8_t', 'componentCarrierId')], 
                   is_static=True)
    ## phy-stats-calculator.h (module 'lte'): static void ns3::PhyStatsCalculator::ReportUeSinr(ns3::Ptr<ns3::PhyStatsCalculator> phyStats, std::string path, uint16_t cellId, uint16_t rnti, double sinrLinear, uint8_t componentCarrierId) [member function]
    cls.add_method('ReportUeSinr', 
                   'void', 
                   [param('ns3::Ptr< ns3::PhyStatsCalculator >', 'phyStats'), param('std::string', 'path'), param('uint16_t', 'cellId'), param('uint16_t', 'rnti'), param('double', 'sinrLinear'), param('uint8_t', 'componentCarrierId')], 
                   is_static=True)
    ## phy-stats-calculator.h (module 'lte'): static void ns3::PhyStatsCalculator::ReportInterference(ns3::Ptr<ns3::PhyStatsCalculator> phyStats, std::string path, uint16_t cellId, ns3::Ptr<ns3::SpectrumValue> interference) [member function]
    cls.add_method('ReportInterference', 
                   'void', 
                   [param('ns3::Ptr< ns3::PhyStatsCalculator >', 'phyStats'), param('std::string', 'path'), param('uint16_t', 'cellId'), param('ns3::Ptr< ns3::SpectrumValue >', 'interference')], 
                   is_static=True)
    return

def register_Ns3PhyTxStatsCalculator_methods(root_module, cls):
    ## phy-tx-stats-calculator.h (module 'lte'): ns3::PhyTxStatsCalculator::PhyTxStatsCalculator() [constructor]
    cls.add_constructor([])
    ## phy-tx-stats-calculator.h (module 'lte'): static ns3::TypeId ns3::PhyTxStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## phy-tx-stats-calculator.h (module 'lte'): void ns3::PhyTxStatsCalculator::SetUlTxOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetUlTxOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## phy-tx-stats-calculator.h (module 'lte'): std::string ns3::PhyTxStatsCalculator::GetUlTxOutputFilename() [member function]
    cls.add_method('GetUlTxOutputFilename', 
                   'std::string', 
                   [])
    ## phy-tx-stats-calculator.h (module 'lte'): void ns3::PhyTxStatsCalculator::SetDlTxOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetDlTxOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## phy-tx-stats-calculator.h (module 'lte'): std::string ns3::PhyTxStatsCalculator::GetDlTxOutputFilename() [member function]
    cls.add_method('GetDlTxOutputFilename', 
                   'std::string', 
                   [])
    ## phy-tx-stats-calculator.h (module 'lte'): void ns3::PhyTxStatsCalculator::DlPhyTransmission(ns3::PhyTransmissionStatParameters params) [member function]
    cls.add_method('DlPhyTransmission', 
                   'void', 
                   [param('ns3::PhyTransmissionStatParameters', 'params')])
    ## phy-tx-stats-calculator.h (module 'lte'): void ns3::PhyTxStatsCalculator::UlPhyTransmission(ns3::PhyTransmissionStatParameters params) [member function]
    cls.add_method('UlPhyTransmission', 
                   'void', 
                   [param('ns3::PhyTransmissionStatParameters', 'params')])
    ## phy-tx-stats-calculator.h (module 'lte'): static void ns3::PhyTxStatsCalculator::DlPhyTransmissionCallback(ns3::Ptr<ns3::PhyTxStatsCalculator> phyTxStats, std::string path, ns3::PhyTransmissionStatParameters params) [member function]
    cls.add_method('DlPhyTransmissionCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::PhyTxStatsCalculator >', 'phyTxStats'), param('std::string', 'path'), param('ns3::PhyTransmissionStatParameters', 'params')], 
                   is_static=True)
    ## phy-tx-stats-calculator.h (module 'lte'): static void ns3::PhyTxStatsCalculator::UlPhyTransmissionCallback(ns3::Ptr<ns3::PhyTxStatsCalculator> phyTxStats, std::string path, ns3::PhyTransmissionStatParameters params) [member function]
    cls.add_method('UlPhyTransmissionCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::PhyTxStatsCalculator >', 'phyTxStats'), param('std::string', 'path'), param('ns3::PhyTransmissionStatParameters', 'params')], 
                   is_static=True)
    return

def register_Ns3PointToPointNetDevice_methods(root_module, cls):
    ## point-to-point-net-device.h (module 'point-to-point'): static ns3::TypeId ns3::PointToPointNetDevice::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::PointToPointNetDevice::PointToPointNetDevice() [constructor]
    cls.add_constructor([])
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetDataRate(ns3::DataRate bps) [member function]
    cls.add_method('SetDataRate', 
                   'void', 
                   [param('ns3::DataRate', 'bps')])
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetInterframeGap(ns3::Time t) [member function]
    cls.add_method('SetInterframeGap', 
                   'void', 
                   [param('ns3::Time', 't')])
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::Attach(ns3::Ptr<ns3::PointToPointChannel> ch) [member function]
    cls.add_method('Attach', 
                   'bool', 
                   [param('ns3::Ptr< ns3::PointToPointChannel >', 'ch')])
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetQueue(ns3::Ptr<ns3::Queue<ns3::Packet>> queue) [member function]
    cls.add_method('SetQueue', 
                   'void', 
                   [param('ns3::Ptr< ns3::Queue< ns3::Packet > >', 'queue')])
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Ptr<ns3::Queue<ns3::Packet>> ns3::PointToPointNetDevice::GetQueue() const [member function]
    cls.add_method('GetQueue', 
                   'ns3::Ptr< ns3::Queue< ns3::Packet > >', 
                   [], 
                   is_const=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetReceiveErrorModel(ns3::Ptr<ns3::ErrorModel> em) [member function]
    cls.add_method('SetReceiveErrorModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::ErrorModel >', 'em')])
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::Receive(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetIfIndex(uint32_t const index) [member function]
    cls.add_method('SetIfIndex', 
                   'void', 
                   [param('uint32_t const', 'index')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): uint32_t ns3::PointToPointNetDevice::GetIfIndex() const [member function]
    cls.add_method('GetIfIndex', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Ptr<ns3::Channel> ns3::PointToPointNetDevice::GetChannel() const [member function]
    cls.add_method('GetChannel', 
                   'ns3::Ptr< ns3::Channel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetAddress(ns3::Address address) [member function]
    cls.add_method('SetAddress', 
                   'void', 
                   [param('ns3::Address', 'address')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Address ns3::PointToPointNetDevice::GetAddress() const [member function]
    cls.add_method('GetAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::SetMtu(uint16_t const mtu) [member function]
    cls.add_method('SetMtu', 
                   'bool', 
                   [param('uint16_t const', 'mtu')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): uint16_t ns3::PointToPointNetDevice::GetMtu() const [member function]
    cls.add_method('GetMtu', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::IsLinkUp() const [member function]
    cls.add_method('IsLinkUp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
    cls.add_method('AddLinkChangeCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Address ns3::PointToPointNetDevice::GetBroadcast() const [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Address ns3::PointToPointNetDevice::GetMulticast(ns3::Ipv4Address multicastGroup) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv4Address', 'multicastGroup')], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::IsPointToPoint() const [member function]
    cls.add_method('IsPointToPoint', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::IsBridge() const [member function]
    cls.add_method('IsBridge', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::Send(ns3::Ptr<ns3::Packet> packet, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('Send', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::SendFrom(ns3::Ptr<ns3::Packet> packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('SendFrom', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Ptr<ns3::Node> ns3::PointToPointNetDevice::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::NeedsArp() const [member function]
    cls.add_method('NeedsArp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
    cls.add_method('SetReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Address ns3::PointToPointNetDevice::GetMulticast(ns3::Ipv6Address addr) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv6Address', 'addr')], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
    cls.add_method('SetPromiscReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::SupportsSendFrom() const [member function]
    cls.add_method('SupportsSendFrom', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::DoMpiReceive(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoMpiReceive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   visibility='protected')
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PointerChecker_methods(root_module, cls):
    ## pointer.h (module 'core'): ns3::PointerChecker::PointerChecker() [constructor]
    cls.add_constructor([])
    ## pointer.h (module 'core'): ns3::PointerChecker::PointerChecker(ns3::PointerChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::PointerChecker const &', 'arg0')])
    ## pointer.h (module 'core'): ns3::TypeId ns3::PointerChecker::GetPointeeTypeId() const [member function]
    cls.add_method('GetPointeeTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PointerValue_methods(root_module, cls):
    ## pointer.h (module 'core'): ns3::PointerValue::PointerValue(ns3::PointerValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::PointerValue const &', 'arg0')])
    ## pointer.h (module 'core'): ns3::PointerValue::PointerValue() [constructor]
    cls.add_constructor([])
    ## pointer.h (module 'core'): ns3::PointerValue::PointerValue(ns3::Ptr<ns3::Object> object) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Object >', 'object')])
    ## pointer.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::PointerValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## pointer.h (module 'core'): bool ns3::PointerValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## pointer.h (module 'core'): ns3::Ptr<ns3::Object> ns3::PointerValue::GetObject() const [member function]
    cls.add_method('GetObject', 
                   'ns3::Ptr< ns3::Object >', 
                   [], 
                   is_const=True)
    ## pointer.h (module 'core'): std::string ns3::PointerValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## pointer.h (module 'core'): void ns3::PointerValue::SetObject(ns3::Ptr<ns3::Object> object) [member function]
    cls.add_method('SetObject', 
                   'void', 
                   [param('ns3::Ptr< ns3::Object >', 'object')])
    return

def register_Ns3RachPreambleLteControlMessage_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::RachPreambleLteControlMessage::RachPreambleLteControlMessage(ns3::RachPreambleLteControlMessage const & arg0) [constructor]
    cls.add_constructor([param('ns3::RachPreambleLteControlMessage const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::RachPreambleLteControlMessage::RachPreambleLteControlMessage() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): uint32_t ns3::RachPreambleLteControlMessage::GetRapId() const [member function]
    cls.add_method('GetRapId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-control-messages.h (module 'lte'): void ns3::RachPreambleLteControlMessage::SetRapId(uint32_t rapid) [member function]
    cls.add_method('SetRapId', 
                   'void', 
                   [param('uint32_t', 'rapid')])
    return

def register_Ns3RadioBearerStatsCalculator_methods(root_module, cls):
    ## radio-bearer-stats-calculator.h (module 'lte'): ns3::RadioBearerStatsCalculator::RadioBearerStatsCalculator(ns3::RadioBearerStatsCalculator const & arg0) [constructor]
    cls.add_constructor([param('ns3::RadioBearerStatsCalculator const &', 'arg0')])
    ## radio-bearer-stats-calculator.h (module 'lte'): ns3::RadioBearerStatsCalculator::RadioBearerStatsCalculator() [constructor]
    cls.add_constructor([])
    ## radio-bearer-stats-calculator.h (module 'lte'): ns3::RadioBearerStatsCalculator::RadioBearerStatsCalculator(std::string protocolType) [constructor]
    cls.add_constructor([param('std::string', 'protocolType')])
    ## radio-bearer-stats-calculator.h (module 'lte'): void ns3::RadioBearerStatsCalculator::DlRxPdu(uint16_t cellId, uint64_t imsi, uint16_t rnti, uint8_t lcid, uint32_t packetSize, uint64_t delay) [member function]
    cls.add_method('DlRxPdu', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid'), param('uint32_t', 'packetSize'), param('uint64_t', 'delay')])
    ## radio-bearer-stats-calculator.h (module 'lte'): void ns3::RadioBearerStatsCalculator::DlTxPdu(uint16_t cellId, uint64_t imsi, uint16_t rnti, uint8_t lcid, uint32_t packetSize) [member function]
    cls.add_method('DlTxPdu', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid'), param('uint32_t', 'packetSize')])
    ## radio-bearer-stats-calculator.h (module 'lte'): void ns3::RadioBearerStatsCalculator::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## radio-bearer-stats-calculator.h (module 'lte'): uint32_t ns3::RadioBearerStatsCalculator::GetDlCellId(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlCellId', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): double ns3::RadioBearerStatsCalculator::GetDlDelay(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlDelay', 
                   'double', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): std::vector<double, std::allocator<double>> ns3::RadioBearerStatsCalculator::GetDlDelayStats(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlDelayStats', 
                   'std::vector< double >', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): std::string ns3::RadioBearerStatsCalculator::GetDlOutputFilename() [member function]
    cls.add_method('GetDlOutputFilename', 
                   'std::string', 
                   [])
    ## radio-bearer-stats-calculator.h (module 'lte'): std::string ns3::RadioBearerStatsCalculator::GetDlPdcpOutputFilename() [member function]
    cls.add_method('GetDlPdcpOutputFilename', 
                   'std::string', 
                   [])
    ## radio-bearer-stats-calculator.h (module 'lte'): std::vector<double, std::allocator<double>> ns3::RadioBearerStatsCalculator::GetDlPduSizeStats(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlPduSizeStats', 
                   'std::vector< double >', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): uint64_t ns3::RadioBearerStatsCalculator::GetDlRxData(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlRxData', 
                   'uint64_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): uint32_t ns3::RadioBearerStatsCalculator::GetDlRxPackets(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlRxPackets', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): uint64_t ns3::RadioBearerStatsCalculator::GetDlTxData(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlTxData', 
                   'uint64_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): uint32_t ns3::RadioBearerStatsCalculator::GetDlTxPackets(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetDlTxPackets', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): ns3::Time ns3::RadioBearerStatsCalculator::GetEpoch() const [member function]
    cls.add_method('GetEpoch', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## radio-bearer-stats-calculator.h (module 'lte'): ns3::Time ns3::RadioBearerStatsCalculator::GetStartTime() const [member function]
    cls.add_method('GetStartTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## radio-bearer-stats-calculator.h (module 'lte'): static ns3::TypeId ns3::RadioBearerStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## radio-bearer-stats-calculator.h (module 'lte'): uint32_t ns3::RadioBearerStatsCalculator::GetUlCellId(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlCellId', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): double ns3::RadioBearerStatsCalculator::GetUlDelay(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlDelay', 
                   'double', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): std::vector<double, std::allocator<double>> ns3::RadioBearerStatsCalculator::GetUlDelayStats(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlDelayStats', 
                   'std::vector< double >', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): std::string ns3::RadioBearerStatsCalculator::GetUlOutputFilename() [member function]
    cls.add_method('GetUlOutputFilename', 
                   'std::string', 
                   [])
    ## radio-bearer-stats-calculator.h (module 'lte'): std::string ns3::RadioBearerStatsCalculator::GetUlPdcpOutputFilename() [member function]
    cls.add_method('GetUlPdcpOutputFilename', 
                   'std::string', 
                   [])
    ## radio-bearer-stats-calculator.h (module 'lte'): std::vector<double, std::allocator<double>> ns3::RadioBearerStatsCalculator::GetUlPduSizeStats(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlPduSizeStats', 
                   'std::vector< double >', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): uint64_t ns3::RadioBearerStatsCalculator::GetUlRxData(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlRxData', 
                   'uint64_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): uint32_t ns3::RadioBearerStatsCalculator::GetUlRxPackets(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlRxPackets', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): uint64_t ns3::RadioBearerStatsCalculator::GetUlTxData(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlTxData', 
                   'uint64_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): uint32_t ns3::RadioBearerStatsCalculator::GetUlTxPackets(uint64_t imsi, uint8_t lcid) [member function]
    cls.add_method('GetUlTxPackets', 
                   'uint32_t', 
                   [param('uint64_t', 'imsi'), param('uint8_t', 'lcid')])
    ## radio-bearer-stats-calculator.h (module 'lte'): void ns3::RadioBearerStatsCalculator::SetDlPdcpOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetDlPdcpOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## radio-bearer-stats-calculator.h (module 'lte'): void ns3::RadioBearerStatsCalculator::SetEpoch(ns3::Time e) [member function]
    cls.add_method('SetEpoch', 
                   'void', 
                   [param('ns3::Time', 'e')])
    ## radio-bearer-stats-calculator.h (module 'lte'): void ns3::RadioBearerStatsCalculator::SetStartTime(ns3::Time t) [member function]
    cls.add_method('SetStartTime', 
                   'void', 
                   [param('ns3::Time', 't')])
    ## radio-bearer-stats-calculator.h (module 'lte'): void ns3::RadioBearerStatsCalculator::SetUlPdcpOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetUlPdcpOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    ## radio-bearer-stats-calculator.h (module 'lte'): void ns3::RadioBearerStatsCalculator::UlRxPdu(uint16_t cellId, uint64_t imsi, uint16_t rnti, uint8_t lcid, uint32_t packetSize, uint64_t delay) [member function]
    cls.add_method('UlRxPdu', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid'), param('uint32_t', 'packetSize'), param('uint64_t', 'delay')])
    ## radio-bearer-stats-calculator.h (module 'lte'): void ns3::RadioBearerStatsCalculator::UlTxPdu(uint16_t cellId, uint64_t imsi, uint16_t rnti, uint8_t lcid, uint32_t packetSize) [member function]
    cls.add_method('UlTxPdu', 
                   'void', 
                   [param('uint16_t', 'cellId'), param('uint64_t', 'imsi'), param('uint16_t', 'rnti'), param('uint8_t', 'lcid'), param('uint32_t', 'packetSize')])
    return

def register_Ns3RarLteControlMessage_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::RarLteControlMessage::RarLteControlMessage(ns3::RarLteControlMessage const & arg0) [constructor]
    cls.add_constructor([param('ns3::RarLteControlMessage const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::RarLteControlMessage::RarLteControlMessage() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): void ns3::RarLteControlMessage::AddRar(ns3::RarLteControlMessage::Rar rar) [member function]
    cls.add_method('AddRar', 
                   'void', 
                   [param('ns3::RarLteControlMessage::Rar', 'rar')])
    ## lte-control-messages.h (module 'lte'): uint16_t ns3::RarLteControlMessage::GetRaRnti() const [member function]
    cls.add_method('GetRaRnti', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## lte-control-messages.h (module 'lte'): std::list<ns3::RarLteControlMessage::Rar, std::allocator<ns3::RarLteControlMessage::Rar>>::const_iterator ns3::RarLteControlMessage::RarListBegin() const [member function]
    cls.add_method('RarListBegin', 
                   'std::list< ns3::RarLteControlMessage::Rar > const_iterator', 
                   [], 
                   is_const=True)
    ## lte-control-messages.h (module 'lte'): std::list<ns3::RarLteControlMessage::Rar, std::allocator<ns3::RarLteControlMessage::Rar>>::const_iterator ns3::RarLteControlMessage::RarListEnd() const [member function]
    cls.add_method('RarListEnd', 
                   'std::list< ns3::RarLteControlMessage::Rar > const_iterator', 
                   [], 
                   is_const=True)
    ## lte-control-messages.h (module 'lte'): void ns3::RarLteControlMessage::SetRaRnti(uint16_t raRnti) [member function]
    cls.add_method('SetRaRnti', 
                   'void', 
                   [param('uint16_t', 'raRnti')])
    return

def register_Ns3RarLteControlMessageRar_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::RarLteControlMessage::Rar::Rar() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): ns3::RarLteControlMessage::Rar::Rar(ns3::RarLteControlMessage::Rar const & arg0) [constructor]
    cls.add_constructor([param('ns3::RarLteControlMessage::Rar const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::RarLteControlMessage::Rar::rapId [variable]
    cls.add_instance_attribute('rapId', 'uint8_t', is_const=False)
    ## lte-control-messages.h (module 'lte'): ns3::RarLteControlMessage::Rar::rarPayload [variable]
    cls.add_instance_attribute('rarPayload', 'ns3::BuildRarListElement_s', is_const=False)
    return

def register_Ns3RectangleChecker_methods(root_module, cls):
    ## rectangle.h (module 'mobility'): ns3::RectangleChecker::RectangleChecker() [constructor]
    cls.add_constructor([])
    ## rectangle.h (module 'mobility'): ns3::RectangleChecker::RectangleChecker(ns3::RectangleChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::RectangleChecker const &', 'arg0')])
    return

def register_Ns3RectangleValue_methods(root_module, cls):
    ## rectangle.h (module 'mobility'): ns3::RectangleValue::RectangleValue() [constructor]
    cls.add_constructor([])
    ## rectangle.h (module 'mobility'): ns3::RectangleValue::RectangleValue(ns3::Rectangle const & value) [constructor]
    cls.add_constructor([param('ns3::Rectangle const &', 'value')])
    ## rectangle.h (module 'mobility'): ns3::RectangleValue::RectangleValue(ns3::RectangleValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::RectangleValue const &', 'arg0')])
    ## rectangle.h (module 'mobility'): ns3::Ptr<ns3::AttributeValue> ns3::RectangleValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## rectangle.h (module 'mobility'): bool ns3::RectangleValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## rectangle.h (module 'mobility'): ns3::Rectangle ns3::RectangleValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Rectangle', 
                   [], 
                   is_const=True)
    ## rectangle.h (module 'mobility'): std::string ns3::RectangleValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## rectangle.h (module 'mobility'): void ns3::RectangleValue::Set(ns3::Rectangle const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Rectangle const &', 'value')])
    return

def register_Ns3RrcStatsCalculator_methods(root_module, cls):
    ## rrc-stats-calculator.h (module 'lte'): ns3::RrcStatsCalculator::RrcStatsCalculator(ns3::RrcStatsCalculator const & arg0) [constructor]
    cls.add_constructor([param('ns3::RrcStatsCalculator const &', 'arg0')])
    ## rrc-stats-calculator.h (module 'lte'): ns3::RrcStatsCalculator::RrcStatsCalculator() [constructor]
    cls.add_constructor([])
    ## rrc-stats-calculator.h (module 'lte'): static void ns3::RrcStatsCalculator::DiscoveryMonitoringRrcTraceCallback(ns3::Ptr<ns3::RrcStatsCalculator> rrcStats, std::string path, uint64_t imsi, uint16_t cellId, uint16_t rnti, ns3::LteSlDiscHeader discMsg) [member function]
    cls.add_method('DiscoveryMonitoringRrcTraceCallback', 
                   'void', 
                   [param('ns3::Ptr< ns3::RrcStatsCalculator >', 'rrcStats'), param('std::string', 'path'), param('uint64_t', 'imsi'), param('uint16_t', 'cellId'), param('uint16_t', 'rnti'), param('ns3::LteSlDiscHeader', 'discMsg')], 
                   is_static=True)
    ## rrc-stats-calculator.h (module 'lte'): std::string ns3::RrcStatsCalculator::GetSlDiscRrcOutputFilename() [member function]
    cls.add_method('GetSlDiscRrcOutputFilename', 
                   'std::string', 
                   [])
    ## rrc-stats-calculator.h (module 'lte'): static ns3::TypeId ns3::RrcStatsCalculator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## rrc-stats-calculator.h (module 'lte'): void ns3::RrcStatsCalculator::RrcDiscoveryMonitoring(uint64_t imsi, uint16_t cellId, uint16_t rnti, ns3::LteSlDiscHeader discMsg) [member function]
    cls.add_method('RrcDiscoveryMonitoring', 
                   'void', 
                   [param('uint64_t', 'imsi'), param('uint16_t', 'cellId'), param('uint16_t', 'rnti'), param('ns3::LteSlDiscHeader', 'discMsg')])
    ## rrc-stats-calculator.h (module 'lte'): void ns3::RrcStatsCalculator::SetSlDiscRrcOutputFilename(std::string outputFilename) [member function]
    cls.add_method('SetSlDiscRrcOutputFilename', 
                   'void', 
                   [param('std::string', 'outputFilename')])
    return

def register_Ns3Sib1LteControlMessage_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::Sib1LteControlMessage::Sib1LteControlMessage(ns3::Sib1LteControlMessage const & arg0) [constructor]
    cls.add_constructor([param('ns3::Sib1LteControlMessage const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::Sib1LteControlMessage::Sib1LteControlMessage() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): ns3::LteRrcSap::SystemInformationBlockType1 ns3::Sib1LteControlMessage::GetSib1() const [member function]
    cls.add_method('GetSib1', 
                   'ns3::LteRrcSap::SystemInformationBlockType1', 
                   [], 
                   is_const=True)
    ## lte-control-messages.h (module 'lte'): void ns3::Sib1LteControlMessage::SetSib1(ns3::LteRrcSap::SystemInformationBlockType1 sib1) [member function]
    cls.add_method('SetSib1', 
                   'void', 
                   [param('ns3::LteRrcSap::SystemInformationBlockType1', 'sib1')])
    return

def register_Ns3SimpleDeviceEnergyModel_methods(root_module, cls):
    ## simple-device-energy-model.h (module 'energy'): ns3::SimpleDeviceEnergyModel::SimpleDeviceEnergyModel(ns3::SimpleDeviceEnergyModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::SimpleDeviceEnergyModel const &', 'arg0')])
    ## simple-device-energy-model.h (module 'energy'): ns3::SimpleDeviceEnergyModel::SimpleDeviceEnergyModel() [constructor]
    cls.add_constructor([])
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::ChangeState(int newState) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('int', 'newState')], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): ns3::Ptr<ns3::Node> ns3::SimpleDeviceEnergyModel::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): double ns3::SimpleDeviceEnergyModel::GetTotalEnergyConsumption() const [member function]
    cls.add_method('GetTotalEnergyConsumption', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): static ns3::TypeId ns3::SimpleDeviceEnergyModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::HandleEnergyChanged() [member function]
    cls.add_method('HandleEnergyChanged', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::HandleEnergyDepletion() [member function]
    cls.add_method('HandleEnergyDepletion', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::HandleEnergyRecharged() [member function]
    cls.add_method('HandleEnergyRecharged', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::SetCurrentA(double current) [member function]
    cls.add_method('SetCurrentA', 
                   'void', 
                   [param('double', 'current')])
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::SetEnergySource(ns3::Ptr<ns3::EnergySource> source) [member function]
    cls.add_method('SetEnergySource', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## simple-device-energy-model.h (module 'energy'): double ns3::SimpleDeviceEnergyModel::DoGetCurrentA() const [member function]
    cls.add_method('DoGetCurrentA', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3SlDciLteControlMessage_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::SlDciLteControlMessage::SlDciLteControlMessage(ns3::SlDciLteControlMessage const & arg0) [constructor]
    cls.add_constructor([param('ns3::SlDciLteControlMessage const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::SlDciLteControlMessage::SlDciLteControlMessage() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): ns3::SlDciListElement_s ns3::SlDciLteControlMessage::GetDci() [member function]
    cls.add_method('GetDci', 
                   'ns3::SlDciListElement_s', 
                   [])
    ## lte-control-messages.h (module 'lte'): void ns3::SlDciLteControlMessage::SetDci(ns3::SlDciListElement_s dci) [member function]
    cls.add_method('SetDci', 
                   'void', 
                   [param('ns3::SlDciListElement_s', 'dci')])
    return

def register_Ns3SpectrumChannel_methods(root_module, cls):
    ## spectrum-channel.h (module 'spectrum'): ns3::SpectrumChannel::SpectrumChannel(ns3::SpectrumChannel const & arg0) [constructor]
    cls.add_constructor([param('ns3::SpectrumChannel const &', 'arg0')])
    ## spectrum-channel.h (module 'spectrum'): ns3::SpectrumChannel::SpectrumChannel() [constructor]
    cls.add_constructor([])
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::AddPhasedArraySpectrumPropagationLossModel(ns3::Ptr<ns3::PhasedArraySpectrumPropagationLossModel> loss) [member function]
    cls.add_method('AddPhasedArraySpectrumPropagationLossModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::PhasedArraySpectrumPropagationLossModel >', 'loss')])
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::AddPropagationLossModel(ns3::Ptr<ns3::PropagationLossModel> loss) [member function]
    cls.add_method('AddPropagationLossModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::PropagationLossModel >', 'loss')])
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::AddRx(ns3::Ptr<ns3::SpectrumPhy> phy) [member function]
    cls.add_method('AddRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumPhy >', 'phy')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::AddSpectrumPropagationLossModel(ns3::Ptr<ns3::SpectrumPropagationLossModel> loss) [member function]
    cls.add_method('AddSpectrumPropagationLossModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumPropagationLossModel >', 'loss')])
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## spectrum-channel.h (module 'spectrum'): ns3::Ptr<ns3::PhasedArraySpectrumPropagationLossModel> ns3::SpectrumChannel::GetPhasedArraySpectrumPropagationLossModel() [member function]
    cls.add_method('GetPhasedArraySpectrumPropagationLossModel', 
                   'ns3::Ptr< ns3::PhasedArraySpectrumPropagationLossModel >', 
                   [])
    ## spectrum-channel.h (module 'spectrum'): ns3::Ptr<ns3::PropagationLossModel> ns3::SpectrumChannel::GetPropagationLossModel() [member function]
    cls.add_method('GetPropagationLossModel', 
                   'ns3::Ptr< ns3::PropagationLossModel >', 
                   [])
    ## spectrum-channel.h (module 'spectrum'): ns3::Ptr<ns3::SpectrumPropagationLossModel> ns3::SpectrumChannel::GetSpectrumPropagationLossModel() [member function]
    cls.add_method('GetSpectrumPropagationLossModel', 
                   'ns3::Ptr< ns3::SpectrumPropagationLossModel >', 
                   [])
    ## spectrum-channel.h (module 'spectrum'): static ns3::TypeId ns3::SpectrumChannel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::RemoveRx(ns3::Ptr<ns3::SpectrumPhy> phy) [member function]
    cls.add_method('RemoveRx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumPhy >', 'phy')], 
                   is_pure_virtual=True, is_virtual=True)
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::SetPropagationDelayModel(ns3::Ptr<ns3::PropagationDelayModel> delay) [member function]
    cls.add_method('SetPropagationDelayModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::PropagationDelayModel >', 'delay')])
    ## spectrum-channel.h (module 'spectrum'): void ns3::SpectrumChannel::StartTx(ns3::Ptr<ns3::SpectrumSignalParameters> params) [member function]
    cls.add_method('StartTx', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumSignalParameters >', 'params')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3StringChecker_methods(root_module, cls):
    ## string.h (module 'core'): ns3::StringChecker::StringChecker() [constructor]
    cls.add_constructor([])
    ## string.h (module 'core'): ns3::StringChecker::StringChecker(ns3::StringChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::StringChecker const &', 'arg0')])
    return

def register_Ns3StringValue_methods(root_module, cls):
    ## string.h (module 'core'): ns3::StringValue::StringValue() [constructor]
    cls.add_constructor([])
    ## string.h (module 'core'): ns3::StringValue::StringValue(std::string const & value) [constructor]
    cls.add_constructor([param('std::string const &', 'value')])
    ## string.h (module 'core'): ns3::StringValue::StringValue(ns3::StringValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::StringValue const &', 'arg0')])
    ## string.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::StringValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## string.h (module 'core'): bool ns3::StringValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## string.h (module 'core'): std::string ns3::StringValue::Get() const [member function]
    cls.add_method('Get', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## string.h (module 'core'): std::string ns3::StringValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## string.h (module 'core'): void ns3::StringValue::Set(std::string const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string const &', 'value')])
    return

def register_Ns3TimeValue_methods(root_module, cls):
    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue() [constructor]
    cls.add_constructor([])
    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::Time const & value) [constructor]
    cls.add_constructor([param('ns3::Time const &', 'value')])
    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
    ## nstime.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::TimeValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## nstime.h (module 'core'): ns3::Time ns3::TimeValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## nstime.h (module 'core'): void ns3::TimeValue::Set(ns3::Time const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Time const &', 'value')])
    return

def register_Ns3TypeIdChecker_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::TypeIdChecker const &', 'arg0')])
    return

def register_Ns3TypeIdValue_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeId const & value) [constructor]
    cls.add_constructor([param('ns3::TypeId const &', 'value')])
    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
    ## type-id.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::TypeIdValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeIdValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## type-id.h (module 'core'): void ns3::TypeIdValue::Set(ns3::TypeId const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::TypeId const &', 'value')])
    return

def register_Ns3UintegerValue_methods(root_module, cls):
    ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue() [constructor]
    cls.add_constructor([])
    ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue(uint64_t const & value) [constructor]
    cls.add_constructor([param('uint64_t const &', 'value')])
    ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue(ns3::UintegerValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::UintegerValue const &', 'arg0')])
    ## uinteger.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::UintegerValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## uinteger.h (module 'core'): bool ns3::UintegerValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## uinteger.h (module 'core'): uint64_t ns3::UintegerValue::Get() const [member function]
    cls.add_method('Get', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## uinteger.h (module 'core'): std::string ns3::UintegerValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## uinteger.h (module 'core'): void ns3::UintegerValue::Set(uint64_t const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint64_t const &', 'value')])
    return

def register_Ns3UlDciLteControlMessage_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::UlDciLteControlMessage::UlDciLteControlMessage(ns3::UlDciLteControlMessage const & arg0) [constructor]
    cls.add_constructor([param('ns3::UlDciLteControlMessage const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::UlDciLteControlMessage::UlDciLteControlMessage() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): ns3::UlDciListElement_s ns3::UlDciLteControlMessage::GetDci() [member function]
    cls.add_method('GetDci', 
                   'ns3::UlDciListElement_s', 
                   [])
    ## lte-control-messages.h (module 'lte'): void ns3::UlDciLteControlMessage::SetDci(ns3::UlDciListElement_s dci) [member function]
    cls.add_method('SetDci', 
                   'void', 
                   [param('ns3::UlDciListElement_s', 'dci')])
    return

def register_Ns3Vector2DChecker_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector2DChecker::Vector2DChecker() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector2DChecker::Vector2DChecker(ns3::Vector2DChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector2DChecker const &', 'arg0')])
    return

def register_Ns3Vector2DValue_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue(ns3::Vector2D const & value) [constructor]
    cls.add_constructor([param('ns3::Vector2D const &', 'value')])
    ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue(ns3::Vector2DValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector2DValue const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::Vector2DValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): bool ns3::Vector2DValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## vector.h (module 'core'): ns3::Vector2D ns3::Vector2DValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Vector2D', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): std::string ns3::Vector2DValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): void ns3::Vector2DValue::Set(ns3::Vector2D const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Vector2D const &', 'value')])
    return

def register_Ns3Vector3DChecker_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector3DChecker::Vector3DChecker() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector3DChecker::Vector3DChecker(ns3::Vector3DChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector3DChecker const &', 'arg0')])
    return

def register_Ns3Vector3DValue_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue(ns3::Vector3D const & value) [constructor]
    cls.add_constructor([param('ns3::Vector3D const &', 'value')])
    ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue(ns3::Vector3DValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector3DValue const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::Vector3DValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): bool ns3::Vector3DValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## vector.h (module 'core'): ns3::Vector3D ns3::Vector3DValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Vector3D', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): std::string ns3::Vector3DValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): void ns3::Vector3DValue::Set(ns3::Vector3D const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Vector3D const &', 'value')])
    return

def register_Ns3AddressChecker_methods(root_module, cls):
    ## address.h (module 'network'): ns3::AddressChecker::AddressChecker() [constructor]
    cls.add_constructor([])
    ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::AddressChecker const &', 'arg0')])
    return

def register_Ns3AddressValue_methods(root_module, cls):
    ## address.h (module 'network'): ns3::AddressValue::AddressValue() [constructor]
    cls.add_constructor([])
    ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::Address const & value) [constructor]
    cls.add_constructor([param('ns3::Address const &', 'value')])
    ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
    ## address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## address.h (module 'network'): ns3::Address ns3::AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Address', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## address.h (module 'network'): void ns3::AddressValue::Set(ns3::Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Address const &', 'value')])
    return

def register_Ns3BsrLteControlMessage_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::BsrLteControlMessage::BsrLteControlMessage(ns3::BsrLteControlMessage const & arg0) [constructor]
    cls.add_constructor([param('ns3::BsrLteControlMessage const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::BsrLteControlMessage::BsrLteControlMessage() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): ns3::MacCeListElement_s ns3::BsrLteControlMessage::GetBsr() [member function]
    cls.add_method('GetBsr', 
                   'ns3::MacCeListElement_s', 
                   [])
    ## lte-control-messages.h (module 'lte'): void ns3::BsrLteControlMessage::SetBsr(ns3::MacCeListElement_s bsr) [member function]
    cls.add_method('SetBsr', 
                   'void', 
                   [param('ns3::MacCeListElement_s', 'bsr')])
    return

def register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): bool ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
    cls.add_method('operator()', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): ns3::ObjectBase * ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
    cls.add_method('operator()', 
                   'ns3::ObjectBase *', 
                   [], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Bool_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(bool arg0, bool arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('bool', 'arg0'), param('bool', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(bool arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('bool', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Const_char___star___Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, char const *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(char const * arg0, ns3::sip::SipElement::TransactionState arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('char const *', 'arg0'), param('ns3::sip::SipElement::TransactionState', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Const_ns3Time___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Time const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Time const & arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Time const &', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Const_ns3PscMcpttEntityId___amp___Const_ns3PscMcpttEntityId___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::psc::McpttEntityId const & arg0, ns3::psc::McpttEntityId const & arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::psc::McpttEntityId const &', 'arg0'), param('ns3::psc::McpttEntityId const &', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Double_Double_Ns3Vector3D_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(double arg0, double arg1, ns3::Vector3D arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('double', 'arg0'), param('double', 'arg1'), param('ns3::Vector3D', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(double arg0, double arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('double', 'arg0'), param('double', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3DlSchedulingCallbackInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::DlSchedulingCallbackInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::DlSchedulingCallbackInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::DlSchedulingCallbackInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::DlSchedulingCallbackInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::DlSchedulingCallbackInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::DlSchedulingCallbackInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::DlSchedulingCallbackInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::DlSchedulingCallbackInfo arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::DlSchedulingCallbackInfo', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3LteUeRrcSlChangeOfSyncRefStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::LteUeRrc::SlChangeOfSyncRefStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::LteUeRrc::SlChangeOfSyncRefStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::LteUeRrc::SlChangeOfSyncRefStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::LteUeRrc::SlChangeOfSyncRefStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::LteUeRrc::SlChangeOfSyncRefStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::LteUeRrc::SlChangeOfSyncRefStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::LteUeRrc::SlChangeOfSyncRefStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::LteUeRrc::SlChangeOfSyncRefStatParameters arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::LteUeRrc::SlChangeOfSyncRefStatParameters', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3PhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::PhyReceptionStatParameters arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::PhyReceptionStatParameters', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3PhyTransmissionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::PhyTransmissionStatParameters arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::PhyTransmissionStatParameters', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Application__gt___Unsigned_short_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3TypeId___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Application const >, unsigned short, ns3::Ptr< ns3::Packet const >, ns3::TypeId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Application> arg0, short unsigned int arg1, ns3::Ptr<const ns3::Packet> arg2, ns3::TypeId const & arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Application const >', 'arg0'), param('short unsigned int', 'arg1'), param('ns3::Ptr< ns3::Packet const >', 'arg2'), param('ns3::TypeId const &', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::MobilityModel const >, ns3::Ptr< ns3::MobilityModel const >, double, double, double, double, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::MobilityModel> arg0, ns3::Ptr<const ns3::MobilityModel> arg1, double arg2, double arg3, double arg4, double arg5) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::MobilityModel const >', 'arg0'), param('ns3::Ptr< ns3::MobilityModel const >', 'arg1'), param('double', 'arg2'), param('double', 'arg3'), param('double', 'arg4'), param('double', 'arg5')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::MobilityModel const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::MobilityModel> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::MobilityModel const >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::Address const & arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::Address const &', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet const >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PacketBurst__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::PacketBurst const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::PacketBurst> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::PacketBurst const >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::SpectrumPhy const >, ns3::Ptr< ns3::SpectrumPhy const >, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::SpectrumPhy> arg0, ns3::Ptr<const ns3::SpectrumPhy> arg1, double arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumPhy const >', 'arg0'), param('ns3::Ptr< ns3::SpectrumPhy const >', 'arg1'), param('double', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PscUavMobilityEnergyModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::psc::UavMobilityEnergyModel const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::psc::UavMobilityEnergyModel> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::UavMobilityEnergyModel const >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3LteSpectrumPhy__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::LteSpectrumPhy>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::LteSpectrumPhy>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::LteSpectrumPhy>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::LteSpectrumPhy >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::LteSpectrumPhy>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::LteSpectrumPhy>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::LteSpectrumPhy>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::LteSpectrumPhy> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteSpectrumPhy >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3LteUeRrc__gt___StdList__lt__ns3LteRrcSapSCellToAddMod__stdAllocator__lt__ns3LteRrcSapSCellToAddMod__gt____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::LteUeRrc>, std::list<ns3::LteRrcSap::SCellToAddMod, std::allocator<ns3::LteRrcSap::SCellToAddMod>>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::LteUeRrc>, std::list<ns3::LteRrcSap::SCellToAddMod, std::allocator<ns3::LteRrcSap::SCellToAddMod>>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::LteUeRrc>, std::list<ns3::LteRrcSap::SCellToAddMod, std::allocator<ns3::LteRrcSap::SCellToAddMod>>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::LteUeRrc >, std::list< ns3::LteRrcSap::SCellToAddMod >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::LteUeRrc>, std::list<ns3::LteRrcSap::SCellToAddMod, std::allocator<ns3::LteRrcSap::SCellToAddMod>>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::LteUeRrc>, std::list<ns3::LteRrcSap::SCellToAddMod, std::allocator<ns3::LteRrcSap::SCellToAddMod>>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::LteUeRrc>, std::list<ns3::LteRrcSap::SCellToAddMod, std::allocator<ns3::LteRrcSap::SCellToAddMod>>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::LteUeRrc> arg0, std::list<ns3::LteRrcSap::SCellToAddMod, std::allocator<ns3::LteRrcSap::SCellToAddMod>> arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteUeRrc >', 'arg0'), param('std::list< ns3::LteRrcSap::SCellToAddMod >', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    cls.add_copy_constructor()
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3, ns3::Address const & arg4, ns3::NetDevice::PacketType arg5) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3'), param('ns3::Address const &', 'arg4'), param('ns3::NetDevice::PacketType', 'arg5')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3Address___amp___Const_ns3SipSipHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Address const & arg1, ns3::sip::SipHeader const & arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Address const &', 'arg1'), param('ns3::sip::SipHeader const &', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3SipSipHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::sip::SipHeader const & arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::sip::SipHeader const &', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3SipSipHeader___amp___Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::sip::SipHeader const & arg1, ns3::sip::SipElement::TransactionState arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::sip::SipHeader const &', 'arg1'), param('ns3::sip::SipElement::TransactionState', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Address arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Address', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, unsigned int arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('unsigned int', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::SpectrumSignalParameters >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::SpectrumSignalParameters> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::SpectrumSignalParameters >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3PscMcpttCall__gt___Ns3Ptr__lt__ns3PscMcpttCall__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::psc::McpttCall >, ns3::Ptr< ns3::psc::McpttCall >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::psc::McpttCall> arg0, ns3::Ptr<ns3::psc::McpttCall> arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'arg0'), param('ns3::Ptr< ns3::psc::McpttCall >', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3SlPhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::SlPhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::SlPhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::SlPhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::SlPhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::SlPhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::SlPhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::SlPhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::SlPhyReceptionStatParameters arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::SlPhyReceptionStatParameters', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Time arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Time', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Time_Unsigned_int_Unsigned_long_Unsigned_short_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned long, unsigned short, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned long, unsigned short, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned long, unsigned short, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Time, unsigned int, unsigned long, unsigned short, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned long, unsigned short, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned long, unsigned short, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned long, unsigned short, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Time arg0, unsigned int arg1, long unsigned int arg2, short unsigned int arg3, ns3::Time arg4) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Time', 'arg0'), param('unsigned int', 'arg1'), param('long unsigned int', 'arg2'), param('short unsigned int', 'arg3'), param('ns3::Time', 'arg4')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Time_Unsigned_int_Unsigned_short_StdBasic_string__lt__char__gt___Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned short, std::basic_string<char>, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned short, std::basic_string<char>, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned short, std::basic_string<char>, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Time, unsigned int, unsigned short, std::basic_string< char >, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned short, std::basic_string<char>, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned short, std::basic_string<char>, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Time, unsigned int, unsigned short, std::basic_string<char>, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Time arg0, unsigned int arg1, short unsigned int arg2, std::basic_string<char, std::char_traits<char>, std::allocator<char>> arg3, ns3::Time arg4) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Time', 'arg0'), param('unsigned int', 'arg1'), param('short unsigned int', 'arg2'), param('std::basic_string< char, std::char_traits< char >, std::allocator< char > >', 'arg3'), param('ns3::Time', 'arg4')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3PscUavMobilityEnergyModelState_Ns3PscUavMobilityEnergyModelState_Ns3Vector3D_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::psc::UavMobilityEnergyModel::State arg0, ns3::psc::UavMobilityEnergyModel::State arg1, ns3::Vector3D arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::psc::UavMobilityEnergyModel::State', 'arg0'), param('ns3::psc::UavMobilityEnergyModel::State', 'arg1'), param('ns3::Vector3D', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_StdBasic_string__lt__char__gt___Ns3SeqTsSizeHeader_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, std::basic_string<char>, ns3::SeqTsSizeHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, std::basic_string<char>, ns3::SeqTsSizeHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, std::basic_string<char>, ns3::SeqTsSizeHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, std::basic_string< char >, ns3::SeqTsSizeHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, std::basic_string<char>, ns3::SeqTsSizeHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, std::basic_string<char>, ns3::SeqTsSizeHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, std::basic_string<char>, ns3::SeqTsSizeHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(std::basic_string<char, std::char_traits<char>, std::allocator<char>> arg0, ns3::SeqTsSizeHeader arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('std::basic_string< char, std::char_traits< char >, std::allocator< char > >', 'arg0'), param('ns3::SeqTsSizeHeader', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_StdBasic_string__lt__char__gt___Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, std::basic_string<char>, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, std::basic_string<char>, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, std::basic_string<char>, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, std::basic_string< char >, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, std::basic_string<char>, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, std::basic_string<char>, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, std::basic_string<char>, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(std::basic_string<char, std::char_traits<char>, std::allocator<char>> arg0, ns3::Time arg1, ns3::Time arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('std::basic_string< char, std::char_traits< char >, std::allocator< char > >', 'arg0'), param('ns3::Time', 'arg1'), param('ns3::Time', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned char arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('unsigned char', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_int_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned int arg0, ns3::Time arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('unsigned int', 'arg0'), param('ns3::Time', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Ptr__lt__ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned int, unsigned int, ns3::Ptr< ns3::Packet >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned int arg0, unsigned int arg1, ns3::Ptr<ns3::Packet> arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('unsigned int', 'arg0'), param('unsigned int', 'arg1'), param('ns3::Ptr< ns3::Packet >', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned int, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned int arg0, unsigned int arg1, unsigned int arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('unsigned int', 'arg0'), param('unsigned int', 'arg1'), param('unsigned int', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_int_Unsigned_short_Unsigned_char_Unsigned_short_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned short, unsigned char, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned short, unsigned char, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned short, unsigned char, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned int, unsigned int, unsigned short, unsigned char, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned short, unsigned char, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned short, unsigned char, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned short, unsigned char, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned int arg0, unsigned int arg1, short unsigned int arg2, unsigned char arg3, short unsigned int arg4, unsigned char arg5) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('unsigned int', 'arg0'), param('unsigned int', 'arg1'), param('short unsigned int', 'arg2'), param('unsigned char', 'arg3'), param('short unsigned int', 'arg4'), param('unsigned char', 'arg5')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_short_Const_stdBasic_string__lt__char__gt_____amp___Const_char___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned int, unsigned short, std::basic_string< char > const, char const *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned int arg0, short unsigned int arg1, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const & arg2, char const * arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('std::basic_string< char, std::char_traits< char >, std::allocator< char > > const &', 'arg2'), param('char const *', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    cls.add_copy_constructor()
    return

def register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_short_Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned int, unsigned short, std::basic_string< char > const, std::basic_string< char > const, std::basic_string< char > const, std::basic_string< char > const, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned int arg0, short unsigned int arg1, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const & arg2, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const & arg3, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const & arg4, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const & arg5) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('std::basic_string< char, std::char_traits< char >, std::allocator< char > > const &', 'arg2'), param('std::basic_string< char, std::char_traits< char >, std::allocator< char > > const &', 'arg3'), param('std::basic_string< char, std::char_traits< char >, std::allocator< char > > const &', 'arg4'), param('std::basic_string< char, std::char_traits< char >, std::allocator< char > > const &', 'arg5')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    cls.add_copy_constructor()
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_long_Unsigned_short_Bool_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned long, unsigned short, bool, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned long, unsigned short, bool, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned long, unsigned short, bool, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned long, unsigned short, bool, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned long, unsigned short, bool, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned long, unsigned short, bool, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned long, unsigned short, bool, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, long unsigned int arg1, short unsigned int arg2, bool arg3, short unsigned int arg4, short unsigned int arg5) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('long unsigned int', 'arg1'), param('short unsigned int', 'arg2'), param('bool', 'arg3'), param('short unsigned int', 'arg4'), param('short unsigned int', 'arg5')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, short unsigned int arg1, double arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('double', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, short unsigned int arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('short unsigned int', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteRrcSapMeasurementReport_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteRrcSap::MeasurementReport, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteRrcSap::MeasurementReport, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteRrcSap::MeasurementReport, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::LteRrcSap::MeasurementReport, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteRrcSap::MeasurementReport, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteRrcSap::MeasurementReport, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteRrcSap::MeasurementReport, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, short unsigned int arg1, short unsigned int arg2, ns3::LteRrcSap::MeasurementReport arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::LteRrcSap::MeasurementReport', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteSlDiscHeader_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteSlDiscHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteSlDiscHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteSlDiscHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::LteSlDiscHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteSlDiscHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteSlDiscHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteSlDiscHeader, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, short unsigned int arg1, short unsigned int arg2, ns3::LteSlDiscHeader arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::LteSlDiscHeader', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteUeRrcState_Ns3LteUeRrcState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteUeRrc::State, ns3::LteUeRrc::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteUeRrc::State, ns3::LteUeRrc::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteUeRrc::State, ns3::LteUeRrc::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::LteUeRrc::State, ns3::LteUeRrc::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteUeRrc::State, ns3::LteUeRrc::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteUeRrc::State, ns3::LteUeRrc::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteUeRrc::State, ns3::LteUeRrc::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, short unsigned int arg1, short unsigned int arg2, ns3::LteUeRrc::State arg3, ns3::LteUeRrc::State arg4) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::LteUeRrc::State', 'arg3'), param('ns3::LteUeRrc::State', 'arg4')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3UeManagerState_Ns3UeManagerState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::UeManager::State, ns3::UeManager::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::UeManager::State, ns3::UeManager::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::UeManager::State, ns3::UeManager::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::UeManager::State, ns3::UeManager::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::UeManager::State, ns3::UeManager::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::UeManager::State, ns3::UeManager::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::UeManager::State, ns3::UeManager::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, short unsigned int arg1, short unsigned int arg2, ns3::UeManager::State arg3, ns3::UeManager::State arg4) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::UeManager::State', 'arg3'), param('ns3::UeManager::State', 'arg4')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, short unsigned int arg1, short unsigned int arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('short unsigned int', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_StdBasic_string__lt__char__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, std::basic_string< char >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, short unsigned int arg1, short unsigned int arg2, std::basic_string<char, std::char_traits<char>, std::allocator<char>> arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('short unsigned int', 'arg2'), param('std::basic_string< char, std::char_traits< char >, std::allocator< char > >', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_StdBasic_string__lt__char__gt___Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, std::basic_string< char >, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, std::basic_string<char>, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, short unsigned int arg1, short unsigned int arg2, std::basic_string<char, std::char_traits<char>, std::allocator<char>> arg3, unsigned char arg4) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('short unsigned int', 'arg2'), param('std::basic_string< char, std::char_traits< char >, std::allocator< char > >', 'arg3'), param('unsigned char', 'arg4')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, short unsigned int arg1, short unsigned int arg2, unsigned char arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('short unsigned int', 'arg2'), param('unsigned char', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(long unsigned int arg0, short unsigned int arg1, short unsigned int arg2, short unsigned int arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('long unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('short unsigned int', 'arg2'), param('short unsigned int', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Const_stdVector__lt__int__stdAllocator__lt__int__gt____gt_____amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, const std::vector<int, std::allocator<int>> &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, const std::vector<int, std::allocator<int>> &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, const std::vector<int, std::allocator<int>> &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, std::vector< int, std::allocator< int > > const, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, const std::vector<int, std::allocator<int>> &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, const std::vector<int, std::allocator<int>> &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, const std::vector<int, std::allocator<int>> &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, std::vector<int, std::allocator<int>> const & arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('std::vector< int > const &', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    cls.add_copy_constructor()
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Ns3Ptr__lt__ns3SpectrumValue__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, ns3::Ptr< ns3::SpectrumValue >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, ns3::Ptr<ns3::SpectrumValue> arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('ns3::Ptr< ns3::SpectrumValue >', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, unsigned char arg1, unsigned int arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('unsigned char', 'arg1'), param('unsigned int', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned char, unsigned int, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, unsigned char arg1, unsigned int arg2, long unsigned int arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('unsigned char', 'arg1'), param('unsigned int', 'arg2'), param('long unsigned int', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_int_Unsigned_int_Ns3SipSipElementDialogState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, unsigned int arg1, unsigned int arg2, ns3::sip::SipElement::DialogState arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('unsigned int', 'arg1'), param('unsigned int', 'arg2'), param('ns3::sip::SipElement::DialogState', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_int_Unsigned_int_Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, unsigned int arg1, unsigned int arg2, ns3::sip::SipElement::TransactionState arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('unsigned int', 'arg1'), param('unsigned int', 'arg2'), param('ns3::sip::SipElement::TransactionState', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_long_Unsigned_int_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned long, unsigned int, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned long, unsigned int, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned long, unsigned int, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned long, unsigned int, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned long, unsigned int, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned long, unsigned int, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned long, unsigned int, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, long unsigned int arg1, unsigned int arg2, double arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('long unsigned int', 'arg1'), param('unsigned int', 'arg2'), param('double', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Bool_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, short unsigned int arg1, double arg2, double arg3, bool arg4, unsigned char arg5) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('double', 'arg2'), param('double', 'arg3'), param('bool', 'arg4'), param('unsigned char', 'arg5')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, short unsigned int arg1, double arg2, double arg3, unsigned char arg4) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('double', 'arg2'), param('double', 'arg3'), param('unsigned char', 'arg4')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, short unsigned int arg1, double arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('double', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, short unsigned int arg1, double arg2, unsigned char arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('double', 'arg2'), param('unsigned char', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3LteUePhyState_Ns3LteUePhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, short unsigned int arg1, ns3::LteUePhy::State arg2, ns3::LteUePhy::State arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('ns3::LteUePhy::State', 'arg2'), param('ns3::LteUePhy::State', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, short unsigned int arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('short unsigned int', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3DlCqiLteControlMessage_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::DlCqiLteControlMessage::DlCqiLteControlMessage(ns3::DlCqiLteControlMessage const & arg0) [constructor]
    cls.add_constructor([param('ns3::DlCqiLteControlMessage const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::DlCqiLteControlMessage::DlCqiLteControlMessage() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): ns3::CqiListElement_s ns3::DlCqiLteControlMessage::GetDlCqi() [member function]
    cls.add_method('GetDlCqi', 
                   'ns3::CqiListElement_s', 
                   [])
    ## lte-control-messages.h (module 'lte'): void ns3::DlCqiLteControlMessage::SetDlCqi(ns3::CqiListElement_s dlcqi) [member function]
    cls.add_method('SetDlCqi', 
                   'void', 
                   [param('ns3::CqiListElement_s', 'dlcqi')])
    return

def register_Ns3DlDciLteControlMessage_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::DlDciLteControlMessage::DlDciLteControlMessage(ns3::DlDciLteControlMessage const & arg0) [constructor]
    cls.add_constructor([param('ns3::DlDciLteControlMessage const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::DlDciLteControlMessage::DlDciLteControlMessage() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): ns3::DlDciListElement_s ns3::DlDciLteControlMessage::GetDci() [member function]
    cls.add_method('GetDci', 
                   'ns3::DlDciListElement_s', 
                   [])
    ## lte-control-messages.h (module 'lte'): void ns3::DlDciLteControlMessage::SetDci(ns3::DlDciListElement_s dci) [member function]
    cls.add_method('SetDci', 
                   'void', 
                   [param('ns3::DlDciListElement_s', 'dci')])
    return

def register_Ns3DlHarqFeedbackLteControlMessage_methods(root_module, cls):
    ## lte-control-messages.h (module 'lte'): ns3::DlHarqFeedbackLteControlMessage::DlHarqFeedbackLteControlMessage(ns3::DlHarqFeedbackLteControlMessage const & arg0) [constructor]
    cls.add_constructor([param('ns3::DlHarqFeedbackLteControlMessage const &', 'arg0')])
    ## lte-control-messages.h (module 'lte'): ns3::DlHarqFeedbackLteControlMessage::DlHarqFeedbackLteControlMessage() [constructor]
    cls.add_constructor([])
    ## lte-control-messages.h (module 'lte'): ns3::DlInfoListElement_s ns3::DlHarqFeedbackLteControlMessage::GetDlHarqFeedback() [member function]
    cls.add_method('GetDlHarqFeedback', 
                   'ns3::DlInfoListElement_s', 
                   [])
    ## lte-control-messages.h (module 'lte'): void ns3::DlHarqFeedbackLteControlMessage::SetDlHarqFeedback(ns3::DlInfoListElement_s m) [member function]
    cls.add_method('SetDlHarqFeedback', 
                   'void', 
                   [param('ns3::DlInfoListElement_s', 'm')])
    return

def register_Ns3LteDataRadioBearerInfo_methods(root_module, cls):
    ## lte-radio-bearer-info.h (module 'lte'): static ns3::TypeId ns3::LteDataRadioBearerInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteDataRadioBearerInfo::m_epsBearer [variable]
    cls.add_instance_attribute('m_epsBearer', 'ns3::EpsBearer', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteDataRadioBearerInfo::m_epsBearerIdentity [variable]
    cls.add_instance_attribute('m_epsBearerIdentity', 'uint8_t', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteDataRadioBearerInfo::m_drbIdentity [variable]
    cls.add_instance_attribute('m_drbIdentity', 'uint8_t', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteDataRadioBearerInfo::m_rlcConfig [variable]
    cls.add_instance_attribute('m_rlcConfig', 'ns3::LteRrcSap::RlcConfig', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteDataRadioBearerInfo::m_logicalChannelIdentity [variable]
    cls.add_instance_attribute('m_logicalChannelIdentity', 'uint8_t', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteDataRadioBearerInfo::m_logicalChannelConfig [variable]
    cls.add_instance_attribute('m_logicalChannelConfig', 'ns3::LteRrcSap::LogicalChannelConfig', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteDataRadioBearerInfo::m_gtpTeid [variable]
    cls.add_instance_attribute('m_gtpTeid', 'uint32_t', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteDataRadioBearerInfo::m_transportLayerAddress [variable]
    cls.add_instance_attribute('m_transportLayerAddress', 'ns3::Ipv4Address', is_const=False)
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteDataRadioBearerInfo::LteDataRadioBearerInfo(ns3::LteDataRadioBearerInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteDataRadioBearerInfo const &', 'arg0')])
    ## lte-radio-bearer-info.h (module 'lte'): ns3::LteDataRadioBearerInfo::LteDataRadioBearerInfo() [constructor]
    cls.add_constructor([])
    return

def register_Ns3LteEnbPhy_methods(root_module, cls):
    ## lte-enb-phy.h (module 'lte'): ns3::LteEnbPhy::LteEnbPhy(ns3::LteEnbPhy const & arg0) [constructor]
    cls.add_constructor([param('ns3::LteEnbPhy const &', 'arg0')])
    ## lte-enb-phy.h (module 'lte'): ns3::LteEnbPhy::LteEnbPhy() [constructor]
    cls.add_constructor([])
    ## lte-enb-phy.h (module 'lte'): ns3::LteEnbPhy::LteEnbPhy(ns3::Ptr<ns3::LteSpectrumPhy> dlPhy, ns3::Ptr<ns3::LteSpectrumPhy> ulPhy) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::LteSpectrumPhy >', 'dlPhy'), param('ns3::Ptr< ns3::LteSpectrumPhy >', 'ulPhy')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::CalcChannelQualityForUe(std::vector<double, std::allocator<double>> sinr, ns3::Ptr<ns3::LteSpectrumPhy> ue) [member function]
    cls.add_method('CalcChannelQualityForUe', 
                   'void', 
                   [param('std::vector< double >', 'sinr'), param('ns3::Ptr< ns3::LteSpectrumPhy >', 'ue')])
    ## lte-enb-phy.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters ns3::LteEnbPhy::CreatePuschCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('CreatePuschCqiReport', 
                   'ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters', 
                   [param('ns3::SpectrumValue const &', 'sinr')])
    ## lte-enb-phy.h (module 'lte'): ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters ns3::LteEnbPhy::CreateSrsCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('CreateSrsCqiReport', 
                   'ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters', 
                   [param('ns3::SpectrumValue const &', 'sinr')])
    ## lte-enb-phy.h (module 'lte'): ns3::Ptr<ns3::SpectrumValue> ns3::LteEnbPhy::CreateTxPowerSpectralDensity() [member function]
    cls.add_method('CreateTxPowerSpectralDensity', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [], 
                   is_virtual=True)
    ## lte-enb-phy.h (module 'lte'): ns3::Ptr<ns3::SpectrumValue> ns3::LteEnbPhy::CreateTxPowerSpectralDensityWithPowerAllocation() [member function]
    cls.add_method('CreateTxPowerSpectralDensityWithPowerAllocation', 
                   'ns3::Ptr< ns3::SpectrumValue >', 
                   [], 
                   is_virtual=True)
    ## lte-enb-phy.h (module 'lte'): std::list<ns3::UlDciLteControlMessage, std::allocator<ns3::UlDciLteControlMessage>> ns3::LteEnbPhy::DequeueUlDci() [member function]
    cls.add_method('DequeueUlDci', 
                   'std::list< ns3::UlDciLteControlMessage >', 
                   [])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::DisableEnbPhy(bool disableEnbPhy) [member function]
    cls.add_method('DisableEnbPhy', 
                   'void', 
                   [param('bool', 'disableEnbPhy')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-enb-phy.h (module 'lte'): int8_t ns3::LteEnbPhy::DoGetReferenceSignalPower() const [member function]
    cls.add_method('DoGetReferenceSignalPower', 
                   'int8_t', 
                   [], 
                   is_const=True)
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::EndFrame() [member function]
    cls.add_method('EndFrame', 
                   'void', 
                   [])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::EndSubFrame() [member function]
    cls.add_method('EndSubFrame', 
                   'void', 
                   [])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::GenerateCtrlCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateCtrlCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_virtual=True)
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::GenerateDataCqiReport(ns3::SpectrumValue const & sinr) [member function]
    cls.add_method('GenerateDataCqiReport', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'sinr')], 
                   is_virtual=True)
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::GeneratePowerAllocationMap(uint16_t rnti, int rbId) [member function]
    cls.add_method('GeneratePowerAllocationMap', 
                   'void', 
                   [param('uint16_t', 'rnti'), param('int', 'rbId')])
    ## lte-enb-phy.h (module 'lte'): ns3::Ptr<ns3::LteSpectrumPhy> ns3::LteEnbPhy::GetDlSpectrumPhy() const [member function]
    cls.add_method('GetDlSpectrumPhy', 
                   'ns3::Ptr< ns3::LteSpectrumPhy >', 
                   [], 
                   is_const=True)
    ## lte-enb-phy.h (module 'lte'): std::vector<int, std::allocator<int>> ns3::LteEnbPhy::GetDownlinkSubChannels() [member function]
    cls.add_method('GetDownlinkSubChannels', 
                   'std::vector< int >', 
                   [])
    ## lte-enb-phy.h (module 'lte'): ns3::LteEnbCphySapProvider * ns3::LteEnbPhy::GetLteEnbCphySapProvider() [member function]
    cls.add_method('GetLteEnbCphySapProvider', 
                   'ns3::LteEnbCphySapProvider *', 
                   [])
    ## lte-enb-phy.h (module 'lte'): ns3::LteEnbPhySapProvider * ns3::LteEnbPhy::GetLteEnbPhySapProvider() [member function]
    cls.add_method('GetLteEnbPhySapProvider', 
                   'ns3::LteEnbPhySapProvider *', 
                   [])
    ## lte-enb-phy.h (module 'lte'): uint8_t ns3::LteEnbPhy::GetMacChDelay() const [member function]
    cls.add_method('GetMacChDelay', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## lte-enb-phy.h (module 'lte'): double ns3::LteEnbPhy::GetNoiseFigure() const [member function]
    cls.add_method('GetNoiseFigure', 
                   'double', 
                   [], 
                   is_const=True)
    ## lte-enb-phy.h (module 'lte'): double ns3::LteEnbPhy::GetTxPower() const [member function]
    cls.add_method('GetTxPower', 
                   'double', 
                   [], 
                   is_const=True)
    ## lte-enb-phy.h (module 'lte'): static ns3::TypeId ns3::LteEnbPhy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-enb-phy.h (module 'lte'): ns3::Ptr<ns3::LteSpectrumPhy> ns3::LteEnbPhy::GetUlSpectrumPhy() const [member function]
    cls.add_method('GetUlSpectrumPhy', 
                   'ns3::Ptr< ns3::LteSpectrumPhy >', 
                   [], 
                   is_const=True)
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::PhyPduReceived(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('PhyPduReceived', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::QueueUlDci(ns3::UlDciLteControlMessage m) [member function]
    cls.add_method('QueueUlDci', 
                   'void', 
                   [param('ns3::UlDciLteControlMessage', 'm')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::ReceiveLteControlMessage(ns3::Ptr<ns3::LteControlMessage> msg) [member function]
    cls.add_method('ReceiveLteControlMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteControlMessage >', 'msg')], 
                   is_virtual=True)
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::ReceiveLteControlMessageList(std::list<ns3::Ptr<ns3::LteControlMessage>, std::allocator<ns3::Ptr<ns3::LteControlMessage>>> msgList) [member function]
    cls.add_method('ReceiveLteControlMessageList', 
                   'void', 
                   [param('std::list< ns3::Ptr< ns3::LteControlMessage > >', 'msgList')], 
                   is_virtual=True)
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::ReportInterference(ns3::SpectrumValue const & interf) [member function]
    cls.add_method('ReportInterference', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'interf')], 
                   is_virtual=True)
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::ReportRsReceivedPower(ns3::SpectrumValue const & power) [member function]
    cls.add_method('ReportRsReceivedPower', 
                   'void', 
                   [param('ns3::SpectrumValue const &', 'power')], 
                   is_virtual=True)
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::ReportUlHarqFeedback(ns3::UlInfoListElement_s mes) [member function]
    cls.add_method('ReportUlHarqFeedback', 
                   'void', 
                   [param('ns3::UlInfoListElement_s', 'mes')], 
                   is_virtual=True)
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::SendControlChannels(std::list<ns3::Ptr<ns3::LteControlMessage>, std::allocator<ns3::Ptr<ns3::LteControlMessage>>> ctrlMsgList) [member function]
    cls.add_method('SendControlChannels', 
                   'void', 
                   [param('std::list< ns3::Ptr< ns3::LteControlMessage > >', 'ctrlMsgList')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::SendDataChannels(ns3::Ptr<ns3::PacketBurst> pb) [member function]
    cls.add_method('SendDataChannels', 
                   'void', 
                   [param('ns3::Ptr< ns3::PacketBurst >', 'pb')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::SetDownlinkSubChannels(std::vector<int, std::allocator<int>> mask) [member function]
    cls.add_method('SetDownlinkSubChannels', 
                   'void', 
                   [param('std::vector< int >', 'mask')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::SetDownlinkSubChannelsWithPowerAllocation(std::vector<int, std::allocator<int>> mask) [member function]
    cls.add_method('SetDownlinkSubChannelsWithPowerAllocation', 
                   'void', 
                   [param('std::vector< int >', 'mask')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::SetHarqPhyModule(ns3::Ptr<ns3::LteHarqPhy> harq) [member function]
    cls.add_method('SetHarqPhyModule', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteHarqPhy >', 'harq')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::SetLteEnbCphySapUser(ns3::LteEnbCphySapUser * s) [member function]
    cls.add_method('SetLteEnbCphySapUser', 
                   'void', 
                   [param('ns3::LteEnbCphySapUser *', 's')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::SetLteEnbPhySapUser(ns3::LteEnbPhySapUser * s) [member function]
    cls.add_method('SetLteEnbPhySapUser', 
                   'void', 
                   [param('ns3::LteEnbPhySapUser *', 's')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::SetMacChDelay(uint8_t delay) [member function]
    cls.add_method('SetMacChDelay', 
                   'void', 
                   [param('uint8_t', 'delay')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::SetNoiseFigure(double pow) [member function]
    cls.add_method('SetNoiseFigure', 
                   'void', 
                   [param('double', 'pow')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::SetTxPower(double pow) [member function]
    cls.add_method('SetTxPower', 
                   'void', 
                   [param('double', 'pow')])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::StartFrame() [member function]
    cls.add_method('StartFrame', 
                   'void', 
                   [])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::StartSubFrame() [member function]
    cls.add_method('StartSubFrame', 
                   'void', 
                   [])
    ## lte-enb-phy.h (module 'lte'): void ns3::LteEnbPhy::DoSendMacPdu(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoSendMacPdu', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3LteNetDevice_methods(root_module, cls):
    ## lte-net-device.h (module 'lte'): static ns3::TypeId ns3::LteNetDevice::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-net-device.h (module 'lte'): ns3::LteNetDevice::LteNetDevice() [constructor]
    cls.add_constructor([])
    ## lte-net-device.h (module 'lte'): void ns3::LteNetDevice::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-net-device.h (module 'lte'): void ns3::LteNetDevice::SetIfIndex(uint32_t const index) [member function]
    cls.add_method('SetIfIndex', 
                   'void', 
                   [param('uint32_t const', 'index')], 
                   is_virtual=True)
    ## lte-net-device.h (module 'lte'): uint32_t ns3::LteNetDevice::GetIfIndex() const [member function]
    cls.add_method('GetIfIndex', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): ns3::Ptr<ns3::Channel> ns3::LteNetDevice::GetChannel() const [member function]
    cls.add_method('GetChannel', 
                   'ns3::Ptr< ns3::Channel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): bool ns3::LteNetDevice::SetMtu(uint16_t const mtu) [member function]
    cls.add_method('SetMtu', 
                   'bool', 
                   [param('uint16_t const', 'mtu')], 
                   is_virtual=True)
    ## lte-net-device.h (module 'lte'): uint16_t ns3::LteNetDevice::GetMtu() const [member function]
    cls.add_method('GetMtu', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): void ns3::LteNetDevice::SetAddress(ns3::Address address) [member function]
    cls.add_method('SetAddress', 
                   'void', 
                   [param('ns3::Address', 'address')], 
                   is_virtual=True)
    ## lte-net-device.h (module 'lte'): ns3::Address ns3::LteNetDevice::GetAddress() const [member function]
    cls.add_method('GetAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): bool ns3::LteNetDevice::IsLinkUp() const [member function]
    cls.add_method('IsLinkUp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): void ns3::LteNetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
    cls.add_method('AddLinkChangeCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')], 
                   is_virtual=True)
    ## lte-net-device.h (module 'lte'): bool ns3::LteNetDevice::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): ns3::Address ns3::LteNetDevice::GetBroadcast() const [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): bool ns3::LteNetDevice::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): bool ns3::LteNetDevice::IsPointToPoint() const [member function]
    cls.add_method('IsPointToPoint', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): bool ns3::LteNetDevice::IsBridge() const [member function]
    cls.add_method('IsBridge', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): ns3::Ptr<ns3::Node> ns3::LteNetDevice::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): void ns3::LteNetDevice::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_virtual=True)
    ## lte-net-device.h (module 'lte'): bool ns3::LteNetDevice::NeedsArp() const [member function]
    cls.add_method('NeedsArp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): void ns3::LteNetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
    cls.add_method('SetReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_virtual=True)
    ## lte-net-device.h (module 'lte'): ns3::Address ns3::LteNetDevice::GetMulticast(ns3::Ipv4Address addr) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv4Address', 'addr')], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): ns3::Address ns3::LteNetDevice::GetMulticast(ns3::Ipv6Address addr) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv6Address', 'addr')], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): void ns3::LteNetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
    cls.add_method('SetPromiscReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_virtual=True)
    ## lte-net-device.h (module 'lte'): bool ns3::LteNetDevice::SendFrom(ns3::Ptr<ns3::Packet> packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('SendFrom', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_virtual=True)
    ## lte-net-device.h (module 'lte'): bool ns3::LteNetDevice::SupportsSendFrom() const [member function]
    cls.add_method('SupportsSendFrom', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## lte-net-device.h (module 'lte'): void ns3::LteNetDevice::Receive(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    return

def register_Ns3LteUeNetDevice_methods(root_module, cls):
    ## lte-ue-net-device.h (module 'lte'): static ns3::TypeId ns3::LteUeNetDevice::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## lte-ue-net-device.h (module 'lte'): ns3::LteUeNetDevice::LteUeNetDevice() [constructor]
    cls.add_constructor([])
    ## lte-ue-net-device.h (module 'lte'): void ns3::LteUeNetDevice::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## lte-ue-net-device.h (module 'lte'): bool ns3::LteUeNetDevice::Send(ns3::Ptr<ns3::Packet> packet, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('Send', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_virtual=True)
    ## lte-ue-net-device.h (module 'lte'): ns3::Ptr<ns3::LteUeMac> ns3::LteUeNetDevice::GetMac() const [member function]
    cls.add_method('GetMac', 
                   'ns3::Ptr< ns3::LteUeMac >', 
                   [], 
                   is_const=True)
    ## lte-ue-net-device.h (module 'lte'): ns3::Ptr<ns3::LteUeRrc> ns3::LteUeNetDevice::GetRrc() const [member function]
    cls.add_method('GetRrc', 
                   'ns3::Ptr< ns3::LteUeRrc >', 
                   [], 
                   is_const=True)
    ## lte-ue-net-device.h (module 'lte'): ns3::Ptr<ns3::LteUePhy> ns3::LteUeNetDevice::GetPhy() const [member function]
    cls.add_method('GetPhy', 
                   'ns3::Ptr< ns3::LteUePhy >', 
                   [], 
                   is_const=True)
    ## lte-ue-net-device.h (module 'lte'): ns3::Ptr<ns3::EpcUeNas> ns3::LteUeNetDevice::GetNas() const [member function]
    cls.add_method('GetNas', 
                   'ns3::Ptr< ns3::EpcUeNas >', 
                   [], 
                   is_const=True)
    ## lte-ue-net-device.h (module 'lte'): ns3::Ptr<ns3::LteUeComponentCarrierManager> ns3::LteUeNetDevice::GetComponentCarrierManager() const [member function]
    cls.add_method('GetComponentCarrierManager', 
                   'ns3::Ptr< ns3::LteUeComponentCarrierManager >', 
                   [], 
                   is_const=True)
    ## lte-ue-net-device.h (module 'lte'): uint64_t ns3::LteUeNetDevice::GetImsi() const [member function]
    cls.add_method('GetImsi', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## lte-ue-net-device.h (module 'lte'): uint32_t ns3::LteUeNetDevice::GetDlEarfcn() const [member function]
    cls.add_method('GetDlEarfcn', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-ue-net-device.h (module 'lte'): void ns3::LteUeNetDevice::SetDlEarfcn(uint32_t earfcn) [member function]
    cls.add_method('SetDlEarfcn', 
                   'void', 
                   [param('uint32_t', 'earfcn')])
    ## lte-ue-net-device.h (module 'lte'): uint32_t ns3::LteUeNetDevice::GetCsgId() const [member function]
    cls.add_method('GetCsgId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## lte-ue-net-device.h (module 'lte'): void ns3::LteUeNetDevice::SetCsgId(uint32_t csgId) [member function]
    cls.add_method('SetCsgId', 
                   'void', 
                   [param('uint32_t', 'csgId')])
    ## lte-ue-net-device.h (module 'lte'): void ns3::LteUeNetDevice::SetTargetEnb(ns3::Ptr<ns3::LteEnbNetDevice> enb) [member function]
    cls.add_method('SetTargetEnb', 
                   'void', 
                   [param('ns3::Ptr< ns3::LteEnbNetDevice >', 'enb')])
    ## lte-ue-net-device.h (module 'lte'): ns3::Ptr<ns3::LteEnbNetDevice> ns3::LteUeNetDevice::GetTargetEnb() [member function]
    cls.add_method('GetTargetEnb', 
                   'ns3::Ptr< ns3::LteEnbNetDevice >', 
                   [])
    ## lte-ue-net-device.h (module 'lte'): void ns3::LteUeNetDevice::SetCcMap(std::map<unsigned char, ns3::Ptr<ns3::ComponentCarrierUe>, std::less<unsigned char>, std::allocator<std::pair<const unsigned char, ns3::Ptr<ns3::ComponentCarrierUe>>>> ccm) [member function]
    cls.add_method('SetCcMap', 
                   'void', 
                   [param('std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierUe > >', 'ccm')])
    ## lte-ue-net-device.h (module 'lte'): std::map<unsigned char, ns3::Ptr<ns3::ComponentCarrierUe>, std::less<unsigned char>, std::allocator<std::pair<const unsigned char, ns3::Ptr<ns3::ComponentCarrierUe>>>> ns3::LteUeNetDevice::GetCcMap() [member function]
    cls.add_method('GetCcMap', 
                   'std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierUe > >', 
                   [])
    ## lte-ue-net-device.h (module 'lte'): void ns3::LteUeNetDevice::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3ConfigMatchContainer_methods(root_module, cls):
    ## config.h (module 'core'): ns3::Config::MatchContainer::MatchContainer(ns3::Config::MatchContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::Config::MatchContainer const &', 'arg0')])
    ## config.h (module 'core'): ns3::Config::MatchContainer::MatchContainer() [constructor]
    cls.add_constructor([])
    ## config.h (module 'core'): ns3::Config::MatchContainer::MatchContainer(std::vector<ns3::Ptr<ns3::Object>, std::allocator<ns3::Ptr<ns3::Object>>> const & objects, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char>>> const & contexts, std::string path) [constructor]
    cls.add_constructor([param('std::vector< ns3::Ptr< ns3::Object > > const &', 'objects'), param('std::vector< std::string > const &', 'contexts'), param('std::string', 'path')])
    ## config.h (module 'core'): ns3::Config::MatchContainer::Iterator ns3::Config::MatchContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::Config::MatchContainer::Iterator', 
                   [], 
                   is_const=True)
    ## config.h (module 'core'): void ns3::Config::MatchContainer::Connect(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('Connect', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## config.h (module 'core'): bool ns3::Config::MatchContainer::ConnectFailSafe(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('ConnectFailSafe', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## config.h (module 'core'): void ns3::Config::MatchContainer::ConnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('ConnectWithoutContext', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## config.h (module 'core'): bool ns3::Config::MatchContainer::ConnectWithoutContextFailSafe(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('ConnectWithoutContextFailSafe', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## config.h (module 'core'): void ns3::Config::MatchContainer::Disconnect(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('Disconnect', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## config.h (module 'core'): void ns3::Config::MatchContainer::DisconnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('DisconnectWithoutContext', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## config.h (module 'core'): ns3::Config::MatchContainer::Iterator ns3::Config::MatchContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::Config::MatchContainer::Iterator', 
                   [], 
                   is_const=True)
    ## config.h (module 'core'): ns3::Ptr<ns3::Object> ns3::Config::MatchContainer::Get(std::size_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::Object >', 
                   [param('std::size_t', 'i')], 
                   is_const=True)
    ## config.h (module 'core'): std::string ns3::Config::MatchContainer::GetMatchedPath(uint32_t i) const [member function]
    cls.add_method('GetMatchedPath', 
                   'std::string', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## config.h (module 'core'): std::size_t ns3::Config::MatchContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'std::size_t', 
                   [], 
                   is_const=True)
    ## config.h (module 'core'): std::string ns3::Config::MatchContainer::GetPath() const [member function]
    cls.add_method('GetPath', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## config.h (module 'core'): void ns3::Config::MatchContainer::Set(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    ## config.h (module 'core'): bool ns3::Config::MatchContainer::SetFailSafe(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('SetFailSafe', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    ## config.h (module 'core'): ns3::Config::MatchContainer::Iterator ns3::Config::MatchContainer::begin() const [member function]
    cls.add_method('begin', 
                   'ns3::Config::MatchContainer::Iterator', 
                   [], 
                   is_const=True)
    ## config.h (module 'core'): ns3::Config::MatchContainer::Iterator ns3::Config::MatchContainer::end() const [member function]
    cls.add_method('end', 
                   'ns3::Config::MatchContainer::Iterator', 
                   [], 
                   is_const=True)
    ## config.h (module 'core'): std::size_t ns3::Config::MatchContainer::size() const [member function]
    cls.add_method('size', 
                   'std::size_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3HashImplementation_methods(root_module, cls):
    ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hash::Implementation const &', 'arg0')])
    ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation() [constructor]
    cls.add_constructor([])
    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_pure_virtual=True, is_virtual=True)
    ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): void ns3::Hash::Implementation::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3HashFunctionFnv1a_methods(root_module, cls):
    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hash::Function::Fnv1a const &', 'arg0')])
    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a() [constructor]
    cls.add_constructor([])
    ## hash-fnv.h (module 'core'): uint32_t ns3::Hash::Function::Fnv1a::GetHash32(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-fnv.h (module 'core'): uint64_t ns3::Hash::Function::Fnv1a::GetHash64(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-fnv.h (module 'core'): void ns3::Hash::Function::Fnv1a::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3HashFunctionHash32_methods(root_module, cls):
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hash::Function::Hash32 const &', 'arg0')])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Hash32Function_ptr hp) [constructor]
    cls.add_constructor([param('ns3::Hash::Hash32Function_ptr', 'hp')])
    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): void ns3::Hash::Function::Hash32::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3HashFunctionHash64_methods(root_module, cls):
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hash::Function::Hash64 const &', 'arg0')])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Hash64Function_ptr hp) [constructor]
    cls.add_constructor([param('ns3::Hash::Hash64Function_ptr', 'hp')])
    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): void ns3::Hash::Function::Hash64::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3HashFunctionMurmur3_methods(root_module, cls):
    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hash::Function::Murmur3 const &', 'arg0')])
    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3() [constructor]
    cls.add_constructor([])
    ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-murmur3.h (module 'core'): void ns3::Hash::Function::Murmur3::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PscImsHelper_methods(root_module, cls):
    ## ims-helper.h (module 'psc'): ns3::psc::ImsHelper::ImsHelper(ns3::psc::ImsHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::ImsHelper const &', 'arg0')])
    ## ims-helper.h (module 'psc'): ns3::psc::ImsHelper::ImsHelper() [constructor]
    cls.add_constructor([])
    ## ims-helper.h (module 'psc'): void ns3::psc::ImsHelper::ConnectPgw(ns3::Ptr<ns3::Node> pgwNode) [member function]
    cls.add_method('ConnectPgw', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'pgwNode')])
    ## ims-helper.h (module 'psc'): void ns3::psc::ImsHelper::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## ims-helper.h (module 'psc'): ns3::Address ns3::psc::ImsHelper::GetImsGmAddress() const [member function]
    cls.add_method('GetImsGmAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True)
    ## ims-helper.h (module 'psc'): ns3::Ptr<ns3::PointToPointNetDevice> ns3::psc::ImsHelper::GetImsGmDevice() const [member function]
    cls.add_method('GetImsGmDevice', 
                   'ns3::Ptr< ns3::PointToPointNetDevice >', 
                   [], 
                   is_const=True)
    ## ims-helper.h (module 'psc'): ns3::Ptr<ns3::Node> ns3::psc::ImsHelper::GetImsNode() const [member function]
    cls.add_method('GetImsNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True)
    ## ims-helper.h (module 'psc'): static ns3::TypeId ns3::psc::ImsHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ims-helper.h (module 'psc'): void ns3::psc::ImsHelper::SetImsIpv4Network(ns3::Ipv4Address baseAddress, ns3::Ipv4Mask baseMask) [member function]
    cls.add_method('SetImsIpv4Network', 
                   'void', 
                   [param('ns3::Ipv4Address', 'baseAddress'), param('ns3::Ipv4Mask', 'baseMask')])
    ## ims-helper.h (module 'psc'): void ns3::psc::ImsHelper::SetImsIpv6Network(ns3::Ipv6Address baseAddress, ns3::Ipv6Prefix basePrefix) [member function]
    cls.add_method('SetImsIpv6Network', 
                   'void', 
                   [param('ns3::Ipv6Address', 'baseAddress'), param('ns3::Ipv6Prefix', 'basePrefix')])
    return

def register_Ns3PscIntelHttpClient_methods(root_module, cls):
    ## intel-http-client.h (module 'psc'): ns3::psc::IntelHttpClient::IntelHttpClient(ns3::psc::IntelHttpClient const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::IntelHttpClient const &', 'arg0')])
    ## intel-http-client.h (module 'psc'): ns3::psc::IntelHttpClient::IntelHttpClient() [constructor]
    cls.add_constructor([])
    ## intel-http-client.h (module 'psc'): static ns3::TypeId ns3::psc::IntelHttpClient::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## intel-http-client.h (module 'psc'): void ns3::psc::IntelHttpClient::SetRemote(ns3::Address ip, uint16_t port) [member function]
    cls.add_method('SetRemote', 
                   'void', 
                   [param('ns3::Address', 'ip'), param('uint16_t', 'port')])
    ## intel-http-client.h (module 'psc'): void ns3::psc::IntelHttpClient::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## intel-http-client.h (module 'psc'): void ns3::psc::IntelHttpClient::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## intel-http-client.h (module 'psc'): void ns3::psc::IntelHttpClient::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PscIntelHttpClientHelper_methods(root_module, cls):
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpClientHelper::IntelHttpClientHelper(ns3::psc::IntelHttpClientHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::IntelHttpClientHelper const &', 'arg0')])
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpClientHelper::IntelHttpClientHelper(ns3::Address const & remoteAddress) [constructor]
    cls.add_constructor([param('ns3::Address const &', 'remoteAddress')])
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpClientHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpClientHelper::Install(ns3::NodeContainer & nodes) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::NodeContainer &', 'nodes')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpClientHelper::Install(std::string const & nodeName) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('std::string const &', 'nodeName')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): void ns3::psc::IntelHttpClientHelper::Set(std::string const & name, ns3::AttributeValue const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string const &', 'name'), param('ns3::AttributeValue const &', 'value')])
    return

def register_Ns3PscIntelHttpHeader_methods(root_module, cls):
    ## intel-http-header.h (module 'psc'): ns3::psc::IntelHttpHeader::IntelHttpHeader(ns3::psc::IntelHttpHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::IntelHttpHeader const &', 'arg0')])
    ## intel-http-header.h (module 'psc'): ns3::psc::IntelHttpHeader::IntelHttpHeader() [constructor]
    cls.add_constructor([])
    ## intel-http-header.h (module 'psc'): uint32_t ns3::psc::IntelHttpHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## intel-http-header.h (module 'psc'): static uint32_t ns3::psc::IntelHttpHeader::GetHeaderSize() [member function]
    cls.add_method('GetHeaderSize', 
                   'uint32_t', 
                   [], 
                   is_static=True)
    ## intel-http-header.h (module 'psc'): ns3::TypeId ns3::psc::IntelHttpHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## intel-http-header.h (module 'psc'): uint16_t ns3::psc::IntelHttpHeader::GetNumberEmbeddedObjects() const [member function]
    cls.add_method('GetNumberEmbeddedObjects', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## intel-http-header.h (module 'psc'): uint32_t ns3::psc::IntelHttpHeader::GetPayloadSize() const [member function]
    cls.add_method('GetPayloadSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## intel-http-header.h (module 'psc'): ns3::psc::IntelHttpHeader::Type ns3::psc::IntelHttpHeader::GetRequestType() const [member function]
    cls.add_method('GetRequestType', 
                   'ns3::psc::IntelHttpHeader::Type', 
                   [], 
                   is_const=True)
    ## intel-http-header.h (module 'psc'): uint32_t ns3::psc::IntelHttpHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## intel-http-header.h (module 'psc'): static ns3::TypeId ns3::psc::IntelHttpHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## intel-http-header.h (module 'psc'): void ns3::psc::IntelHttpHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## intel-http-header.h (module 'psc'): void ns3::psc::IntelHttpHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## intel-http-header.h (module 'psc'): void ns3::psc::IntelHttpHeader::SetNumberEmbeddedObjects(uint16_t numEmbeddedObjects) [member function]
    cls.add_method('SetNumberEmbeddedObjects', 
                   'void', 
                   [param('uint16_t', 'numEmbeddedObjects')])
    ## intel-http-header.h (module 'psc'): void ns3::psc::IntelHttpHeader::SetPayloadSize(uint32_t payloadSize) [member function]
    cls.add_method('SetPayloadSize', 
                   'void', 
                   [param('uint32_t', 'payloadSize')])
    ## intel-http-header.h (module 'psc'): void ns3::psc::IntelHttpHeader::SetRequestType(ns3::psc::IntelHttpHeader::Type requestType) [member function]
    cls.add_method('SetRequestType', 
                   'void', 
                   [param('ns3::psc::IntelHttpHeader::Type', 'requestType')])
    return

def register_Ns3PscIntelHttpServer_methods(root_module, cls):
    ## intel-http-server.h (module 'psc'): ns3::psc::IntelHttpServer::IntelHttpServer(ns3::psc::IntelHttpServer const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::IntelHttpServer const &', 'arg0')])
    ## intel-http-server.h (module 'psc'): ns3::psc::IntelHttpServer::IntelHttpServer() [constructor]
    cls.add_constructor([])
    ## intel-http-server.h (module 'psc'): static ns3::TypeId ns3::psc::IntelHttpServer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## intel-http-server.h (module 'psc'): void ns3::psc::IntelHttpServer::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## intel-http-server.h (module 'psc'): void ns3::psc::IntelHttpServer::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## intel-http-server.h (module 'psc'): void ns3::psc::IntelHttpServer::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PscIntelHttpServerHelper_methods(root_module, cls):
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpServerHelper::IntelHttpServerHelper(ns3::psc::IntelHttpServerHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::IntelHttpServerHelper const &', 'arg0')])
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpServerHelper::IntelHttpServerHelper() [constructor]
    cls.add_constructor([])
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpServerHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpServerHelper::Install(ns3::NodeContainer & nodes) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::NodeContainer &', 'nodes')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpServerHelper::Install(std::string const & nodeName) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('std::string const &', 'nodeName')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): void ns3::psc::IntelHttpServerHelper::Set(std::string const & name, ns3::AttributeValue const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string const &', 'name'), param('ns3::AttributeValue const &', 'value')])
    return

def register_Ns3PscMcpttCall_methods(root_module, cls):
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall::McpttCall(ns3::psc::McpttCall const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCall const &', 'arg0')])
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall::McpttCall() [constructor]
    cls.add_constructor([])
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall::McpttCall(ns3::psc::McpttCall::NetworkCallType callType) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCall::NetworkCallType', 'callType')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::CloseFloorChannel() [member function]
    cls.add_method('CloseFloorChannel', 
                   'void', 
                   [])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::CloseMediaChannel() [member function]
    cls.add_method('CloseMediaChannel', 
                   'void', 
                   [])
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttCall::GetCallChannel() const [member function]
    cls.add_method('GetCallChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call.h (module 'psc'): uint16_t ns3::psc::McpttCall::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachine> ns3::psc::McpttCall::GetCallMachine() const [member function]
    cls.add_method('GetCallMachine', 
                   'ns3::Ptr< ns3::psc::McpttCallMachine >', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttCall::GetFloorChannel() const [member function]
    cls.add_method('GetFloorChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttFloorParticipant> ns3::psc::McpttCall::GetFloorMachine() const [member function]
    cls.add_method('GetFloorMachine', 
                   'ns3::Ptr< ns3::psc::McpttFloorParticipant >', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttCall::GetMediaChannel() const [member function]
    cls.add_method('GetMediaChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall::NetworkCallType ns3::psc::McpttCall::GetNetworkCallType() const [member function]
    cls.add_method('GetNetworkCallType', 
                   'ns3::psc::McpttCall::NetworkCallType', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttPttApp> ns3::psc::McpttCall::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttPttApp >', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Address ns3::psc::McpttCall::GetPeerSocketAddress() const [member function]
    cls.add_method('GetPeerSocketAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): uint32_t ns3::psc::McpttCall::GetPeerUserId() const [member function]
    cls.add_method('GetPeerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): bool ns3::psc::McpttCall::GetPushOnSelect() const [member function]
    cls.add_method('GetPushOnSelect', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Time ns3::psc::McpttCall::GetStartTime() const [member function]
    cls.add_method('GetStartTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Time ns3::psc::McpttCall::GetStopTime() const [member function]
    cls.add_method('GetStopTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCall::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call.h (module 'psc'): bool ns3::psc::McpttCall::IsFloorChannelOpen() const [member function]
    cls.add_method('IsFloorChannelOpen', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): bool ns3::psc::McpttCall::IsMediaChannelOpen() const [member function]
    cls.add_method('IsMediaChannelOpen', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::OpenFloorChannel(ns3::Address const & peerAddr, uint16_t const port) [member function]
    cls.add_method('OpenFloorChannel', 
                   'void', 
                   [param('ns3::Address const &', 'peerAddr'), param('uint16_t const', 'port')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::OpenMediaChannel(ns3::Address const & peerAddr, uint16_t const port) [member function]
    cls.add_method('OpenMediaChannel', 
                   'void', 
                   [param('ns3::Address const &', 'peerAddr'), param('uint16_t const', 'port')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Receive(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Receive(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::ReceiveSipEvent(char const * event, ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('ReceiveSipEvent', 
                   'void', 
                   [param('char const *', 'event'), param('ns3::sip::SipElement::TransactionState', 'state')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::ReceiveSipMessage(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr, ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('ReceiveSipMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr'), param('ns3::sip::SipElement::TransactionState', 'state')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Send(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Send(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SendSipMessage(ns3::Ptr<ns3::Packet> pkt, ns3::Address const & addr, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('SendSipMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address const &', 'addr'), param('ns3::sip::SipHeader const &', 'hdr')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetCallId(uint16_t callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('uint16_t', 'callId')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetCallMachine(ns3::Ptr<ns3::psc::McpttCallMachine> callMachine) [member function]
    cls.add_method('SetCallMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachine >', 'callMachine')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetFloorChannel(ns3::Ptr<ns3::psc::McpttChannel> floorChannel) [member function]
    cls.add_method('SetFloorChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttChannel >', 'floorChannel')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetFloorMachine(ns3::Ptr<ns3::psc::McpttFloorParticipant> floorMachine) [member function]
    cls.add_method('SetFloorMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttFloorParticipant >', 'floorMachine')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetMediaChannel(ns3::Ptr<ns3::psc::McpttChannel> mediaChannel) [member function]
    cls.add_method('SetMediaChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttChannel >', 'mediaChannel')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetNetworkCallType(ns3::psc::McpttCall::NetworkCallType callType) [member function]
    cls.add_method('SetNetworkCallType', 
                   'void', 
                   [param('ns3::psc::McpttCall::NetworkCallType', 'callType')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetOwner(ns3::Ptr<ns3::psc::McpttPttApp> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPttApp >', 'owner')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetPushOnSelect(bool pushOnSelect) [member function]
    cls.add_method('SetPushOnSelect', 
                   'void', 
                   [param('bool', 'pushOnSelect')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetStartTime(ns3::Time startTime) [member function]
    cls.add_method('SetStartTime', 
                   'void', 
                   [param('ns3::Time', 'startTime')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetStopTime(ns3::Time stopTime) [member function]
    cls.add_method('SetStopTime', 
                   'void', 
                   [param('ns3::Time', 'stopTime')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::ReceiveFloorPkt(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceiveFloorPkt', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   visibility='protected')
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::ReceiveMediaPkt(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceiveMediaPkt', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   visibility='protected')
    return

def register_Ns3PscMcpttCallHelper_methods(root_module, cls):
    ## mcptt-call-helper.h (module 'psc'): ns3::psc::McpttCallHelper::McpttCallHelper(ns3::psc::McpttCallHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallHelper const &', 'arg0')])
    ## mcptt-call-helper.h (module 'psc'): ns3::psc::McpttCallHelper::McpttCallHelper() [constructor]
    cls.add_constructor([])
    ## mcptt-call-helper.h (module 'psc'): uint16_t ns3::psc::McpttCallHelper::AddCall(ns3::ApplicationContainer clients, ns3::Ptr<ns3::psc::McpttServerApp> server, uint32_t groupId, ns3::psc::McpttCallMsgFieldCallType callType, ns3::Time startTime, ns3::Time stopTime) [member function]
    cls.add_method('AddCall', 
                   'uint16_t', 
                   [param('ns3::ApplicationContainer', 'clients'), param('ns3::Ptr< ns3::psc::McpttServerApp >', 'server'), param('uint32_t', 'groupId'), param('ns3::psc::McpttCallMsgFieldCallType', 'callType'), param('ns3::Time', 'startTime'), param('ns3::Time', 'stopTime')])
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::AddCallOffNetwork(ns3::ApplicationContainer clients, uint16_t callId, ns3::Address peerAddress, uint32_t groupId, ns3::psc::McpttCallMsgFieldCallType callType, ns3::Time startTime, ns3::Time stopTime) [member function]
    cls.add_method('AddCallOffNetwork', 
                   'void', 
                   [param('ns3::ApplicationContainer', 'clients'), param('uint16_t', 'callId'), param('ns3::Address', 'peerAddress'), param('uint32_t', 'groupId'), param('ns3::psc::McpttCallMsgFieldCallType', 'callType'), param('ns3::Time', 'startTime'), param('ns3::Time', 'stopTime')])
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::ConfigureOffNetworkBasicGrpCall(ns3::ApplicationContainer & apps, ns3::Address peerAddress, uint32_t usersPerGroup, uint32_t baseGroupId=1) [member function]
    cls.add_method('ConfigureOffNetworkBasicGrpCall', 
                   'void', 
                   [param('ns3::ApplicationContainer &', 'apps'), param('ns3::Address', 'peerAddress'), param('uint32_t', 'usersPerGroup'), param('uint32_t', 'baseGroupId', default_value='1')], 
                   is_virtual=True)
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::SetArbitrator(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetArbitrator', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::SetParticipant(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetParticipant', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::SetServerCall(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetServerCall', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::SetTowardsParticipant(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetTowardsParticipant', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachine_methods(root_module, cls):
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachine::McpttCallMachine(ns3::psc::McpttCallMachine const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachine const &', 'arg0')])
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachine::McpttCallMachine() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttCallMachine::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMachine::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMachine::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttCallMachine::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachine::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachine::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachine::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachine::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachine::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachine::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachine::CALL_INITIATED [variable]
    cls.add_static_attribute('CALL_INITIATED', 'char const * const', is_const=True)
    return

def register_Ns3PscMcpttCallMachineGrp_methods(root_module, cls):
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineGrp::McpttCallMachineGrp(ns3::psc::McpttCallMachineGrp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrp const &', 'arg0')])
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineGrp::McpttCallMachineGrp() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMachineGrp::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachineGrp::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachineGrp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachineGrp::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachineGrp::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineGrp::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasic_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasic::McpttCallMachineGrpBasic(ns3::psc::McpttCallMachineGrpBasic const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasic const &', 'arg0')])
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasic::McpttCallMachineGrpBasic(ns3::Ptr<ns3::psc::McpttCall> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCall >', 'owner', default_value='0')])
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Time ns3::psc::McpttCallMachineGrpBasic::CalcDelayForAfterCallProbe() [member function]
    cls.add_method('CalcDelayForAfterCallProbe', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Time ns3::psc::McpttCallMachineGrpBasic::CalcDelayForMaxDuration() const [member function]
    cls.add_method('CalcDelayForMaxDuration', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Time ns3::psc::McpttCallMachineGrpBasic::CalcDelayForPeriodicAnnoun() [member function]
    cls.add_method('CalcDelayForPeriodicAnnoun', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ChangeState(ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): uint16_t ns3::psc::McpttCallMachineGrpBasic::GenerateRandomCallId() const [member function]
    cls.add_method('GenerateRandomCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttCallMachineGrpBasic::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMachineGrpBasic::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMachineGrpBasic::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallTypeMachine> ns3::psc::McpttCallMachineGrpBasic::GetCallTypeMachine() const [member function]
    cls.add_method('GetCallTypeMachine', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachine >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): uint32_t ns3::psc::McpttCallMachineGrpBasic::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallMachineGrpBasic::GetCfg3() const [member function]
    cls.add_method('GetCfg3', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttEmergAlertMachineBasic> ns3::psc::McpttCallMachineGrpBasic::GetEmergMachine() const [member function]
    cls.add_method('GetEmergMachine', 
                   'ns3::Ptr< ns3::psc::McpttEmergAlertMachineBasic >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMachineGrpBasic::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachineGrpBasic::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMachineGrpBasic::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::GetProbeRespVal() const [member function]
    cls.add_method('GetProbeRespVal', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval ns3::psc::McpttCallMachineGrpBasic::GetRefInt() const [member function]
    cls.add_method('GetRefInt', 
                   'ns3::psc::McpttCallMsgFieldRefreshInterval', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::RandomVariableStream> ns3::psc::McpttCallMachineGrpBasic::GetRndDelays() const [member function]
    cls.add_method('GetRndDelays', 
                   'ns3::Ptr< ns3::RandomVariableStream >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMachineGrpBasic::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime ns3::psc::McpttCallMachineGrpBasic::GetStartTime() const [member function]
    cls.add_method('GetStartTime', 
                   'ns3::psc::McpttCallMsgFieldStartTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicState> ns3::psc::McpttCallMachineGrpBasic::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasic::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg1() const [member function]
    cls.add_method('GetTfg1', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg2() const [member function]
    cls.add_method('GetTfg2', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg3() const [member function]
    cls.add_method('GetTfg3', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg4() const [member function]
    cls.add_method('GetTfg4', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg5() const [member function]
    cls.add_method('GetTfg5', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg6() const [member function]
    cls.add_method('GetTfg6', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachineGrpBasic::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallTypeMachineGrpBasic> ns3::psc::McpttCallMachineGrpBasic::GetTypeMachine() const [member function]
    cls.add_method('GetTypeMachine', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachineGrpBasic >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::IsConfirmMode() const [member function]
    cls.add_method('IsConfirmMode', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::IsUserAckReq() const [member function]
    cls.add_method('IsUserAckReq', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::NotifyMerge(uint16_t callId) [member function]
    cls.add_method('NotifyMerge', 
                   'void', 
                   [param('uint16_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::NotifyNewCall(uint16_t callId) [member function]
    cls.add_method('NotifyNewCall', 
                   'void', 
                   [param('uint16_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallAccept(ns3::psc::McpttCallMsgGrpAccept const & msg) [member function]
    cls.add_method('ReceiveGrpCallAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlert', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallEmergAlertAck(ns3::psc::McpttCallMsgGrpEmergAlertAck const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallEmergAlertCancelAck(ns3::psc::McpttCallMsgGrpEmergAlertCancelAck const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancelAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancelAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallEmergEnd(ns3::psc::McpttCallMsgGrpEmergEnd const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergEnd const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallImmPerilEnd(ns3::psc::McpttCallMsgGrpImmPerilEnd const & msg) [member function]
    cls.add_method('ReceiveGrpCallImmPerilEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpImmPerilEnd const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallProbe(ns3::psc::McpttCallMsgGrpProbe const & msg) [member function]
    cls.add_method('ReceiveGrpCallProbe', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpProbe const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReportEvent(char const * reason) const [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('char const *', 'reason')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetCfg3(ns3::Ptr<ns3::psc::McpttCounter> cfg3) [member function]
    cls.add_method('SetCfg3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfg3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetDelayTfg1(ns3::Time const & delayTfg1) [member function]
    cls.add_method('SetDelayTfg1', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg1')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetDelayTfg3(ns3::Time const & delayTfg3) [member function]
    cls.add_method('SetDelayTfg3', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetDelayTfg4(ns3::Time const & delayTfg4) [member function]
    cls.add_method('SetDelayTfg4', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg4')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetDelayTfg5(ns3::Time const & delayTfg5) [member function]
    cls.add_method('SetDelayTfg5', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg5')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetEmergMachine(ns3::Ptr<ns3::psc::McpttEmergAlertMachineBasic> emergMachine) [member function]
    cls.add_method('SetEmergMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttEmergAlertMachineBasic >', 'emergMachine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetLimitCfg3(uint32_t limitCfg3) [member function]
    cls.add_method('SetLimitCfg3', 
                   'void', 
                   [param('uint32_t', 'limitCfg3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetMergeCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const mergeCb) [member function]
    cls.add_method('SetMergeCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'mergeCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetProbeRespVal(bool const & probeRespVal) [member function]
    cls.add_method('SetProbeRespVal', 
                   'void', 
                   [param('bool const &', 'probeRespVal')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetRefInt(ns3::psc::McpttCallMsgFieldRefreshInterval const & refInt) [member function]
    cls.add_method('SetRefInt', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldRefreshInterval const &', 'refInt')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetRefIntVal(uint16_t refIntVal) [member function]
    cls.add_method('SetRefIntVal', 
                   'void', 
                   [param('uint16_t', 'refIntVal')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetRndDelays(ns3::Ptr<ns3::RandomVariableStream> rndDelays) [member function]
    cls.add_method('SetRndDelays', 
                   'void', 
                   [param('ns3::Ptr< ns3::RandomVariableStream >', 'rndDelays')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdp) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdp')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetStartTime(ns3::psc::McpttCallMsgFieldStartTime const & startTime) [member function]
    cls.add_method('SetStartTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldStartTime const &', 'startTime')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetState(ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg1(ns3::Ptr<ns3::psc::McpttTimer> tfg1) [member function]
    cls.add_method('SetTfg1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg1')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg2(ns3::Ptr<ns3::psc::McpttTimer> tfg2) [member function]
    cls.add_method('SetTfg2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg2')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg3(ns3::Ptr<ns3::psc::McpttTimer> tfg3) [member function]
    cls.add_method('SetTfg3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg4(ns3::Ptr<ns3::psc::McpttTimer> tfg4) [member function]
    cls.add_method('SetTfg4', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg4')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg5(ns3::Ptr<ns3::psc::McpttTimer> tfg5) [member function]
    cls.add_method('SetTfg5', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg5')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg6(ns3::Ptr<ns3::psc::McpttTimer> tfg6) [member function]
    cls.add_method('SetTfg6', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg6')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTypeMachine(ns3::Ptr<ns3::psc::McpttCallTypeMachineGrpBasic> typeMachine) [member function]
    cls.add_method('SetTypeMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallTypeMachineGrpBasic >', 'typeMachine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg1() [member function]
    cls.add_method('ExpiryOfTfg1', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg2() [member function]
    cls.add_method('ExpiryOfTfg2', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg3() [member function]
    cls.add_method('ExpiryOfTfg3', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg4() [member function]
    cls.add_method('ExpiryOfTfg4', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg5() [member function]
    cls.add_method('ExpiryOfTfg5', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg6() [member function]
    cls.add_method('ExpiryOfTfg6', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMachineGrpBasicState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicState::McpttCallMachineGrpBasicState(ns3::psc::McpttCallMachineGrpBasicState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicState const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::AcceptCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg1(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg2(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg3(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg4(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg4', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg5(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg5', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg6(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg6', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::InitiateCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasicState::IsCallOngoing(ns3::psc::McpttCallMachineGrpBasic const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBasic const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ReceiveGrpCallAccept(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAccept const & msg) [member function]
    cls.add_method('ReceiveGrpCallAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ReceiveGrpCallProbe(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpProbe const & msg) [member function]
    cls.add_method('ReceiveGrpCallProbe', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpProbe const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::RejectCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ReleaseCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicState::McpttCallMachineGrpBasicState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS1_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS1::McpttCallMachineGrpBasicStateS1(ns3::psc::McpttCallMachineGrpBasicStateS1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS1 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS1::McpttCallMachineGrpBasicStateS1() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS1> ns3::psc::McpttCallMachineGrpBasicStateS1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS1 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS1::InitiateCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS1::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS2_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS2::McpttCallMachineGrpBasicStateS2(ns3::psc::McpttCallMachineGrpBasicStateS2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS2 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS2::McpttCallMachineGrpBasicStateS2() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS2::ExpiryOfTfg1(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS2::ExpiryOfTfg3(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS2> ns3::psc::McpttCallMachineGrpBasicStateS2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS2 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS2::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS2::ReleaseCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS3_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS3::McpttCallMachineGrpBasicStateS3(ns3::psc::McpttCallMachineGrpBasicStateS3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS3 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS3::McpttCallMachineGrpBasicStateS3() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ExpiryOfTfg2(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ExpiryOfTfg6(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg6', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS3> ns3::psc::McpttCallMachineGrpBasicStateS3::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS3 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS3::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS3::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasicStateS3::IsCallOngoing(ns3::psc::McpttCallMachineGrpBasic const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBasic const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ReceiveGrpCallAccept(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAccept const & msg) [member function]
    cls.add_method('ReceiveGrpCallAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ReceiveGrpCallProbe(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpProbe const & msg) [member function]
    cls.add_method('ReceiveGrpCallProbe', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpProbe const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ReleaseCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS4_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS4::McpttCallMachineGrpBasicStateS4(ns3::psc::McpttCallMachineGrpBasicStateS4 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS4 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS4::McpttCallMachineGrpBasicStateS4() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS4::AcceptCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS4::ExpiryOfTfg4(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg4', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS4> ns3::psc::McpttCallMachineGrpBasicStateS4::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS4 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS4::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS4::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasicStateS4::IsCallOngoing(ns3::psc::McpttCallMachineGrpBasic const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBasic const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS4::RejectCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS4::ReleaseCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS5_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS5::McpttCallMachineGrpBasicStateS5(ns3::psc::McpttCallMachineGrpBasicStateS5 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS5 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS5::McpttCallMachineGrpBasicStateS5() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS5::AcceptCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS5::ExpiryOfTfg4(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg4', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS5> ns3::psc::McpttCallMachineGrpBasicStateS5::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS5 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS5::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS5::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasicStateS5::IsCallOngoing(ns3::psc::McpttCallMachineGrpBasic const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBasic const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS5::RejectCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS5::ReleaseCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS6_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS6::McpttCallMachineGrpBasicStateS6(ns3::psc::McpttCallMachineGrpBasicStateS6 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS6 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS6::McpttCallMachineGrpBasicStateS6() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS6::ExpiryOfTfg5(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg5', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS6> ns3::psc::McpttCallMachineGrpBasicStateS6::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS6 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS6::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS6::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS6::InitiateCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS6::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS7_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS7::McpttCallMachineGrpBasicStateS7(ns3::psc::McpttCallMachineGrpBasicStateS7 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS7 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS7::McpttCallMachineGrpBasicStateS7() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS7::ExpiryOfTfg1(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS7> ns3::psc::McpttCallMachineGrpBasicStateS7::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS7 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS7::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS7::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS7::InitiateCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS7::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBroadcast_methods(root_module, cls):
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcast::McpttCallMachineGrpBroadcast(ns3::psc::McpttCallMachineGrpBroadcast const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcast const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcast::McpttCallMachineGrpBroadcast(ns3::Ptr<ns3::psc::McpttCall> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCall >', 'owner', default_value='0')])
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ChangeState(ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): uint16_t ns3::psc::McpttCallMachineGrpBroadcast::GenerateRandomCallId() const [member function]
    cls.add_method('GenerateRandomCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttCallMachineGrpBroadcast::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMachineGrpBroadcast::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMachineGrpBroadcast::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): uint32_t ns3::psc::McpttCallMachineGrpBroadcast::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMachineGrpBroadcast::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachineGrpBroadcast::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMachineGrpBroadcast::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): uint8_t ns3::psc::McpttCallMachineGrpBroadcast::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMachineGrpBroadcast::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastState> ns3::psc::McpttCallMachineGrpBroadcast::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcast::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBroadcast::GetTfb1() const [member function]
    cls.add_method('GetTfb1', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBroadcast::GetTfb2() const [member function]
    cls.add_method('GetTfb2', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBroadcast::GetTfb3() const [member function]
    cls.add_method('GetTfb3', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachineGrpBroadcast::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcast::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcast::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcast::IsUserAckReq() const [member function]
    cls.add_method('IsUserAckReq', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ReceiveGrpCallBroadcast(ns3::psc::McpttCallMsgGrpBroadcast const & msg) [member function]
    cls.add_method('ReceiveGrpCallBroadcast', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpBroadcast const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ReceiveGrpCallBroadcastEnd(ns3::psc::McpttCallMsgGrpBroadcastEnd const & msg) [member function]
    cls.add_method('ReceiveGrpCallBroadcastEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpBroadcastEnd const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ReportEvent(char const * reason) const [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('char const *', 'reason')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetDelayTfb1(ns3::Time const & delayTfb1) [member function]
    cls.add_method('SetDelayTfb1', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfb1')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetDelayTfb2(ns3::Time const & delayTfb2) [member function]
    cls.add_method('SetDelayTfb2', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfb2')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetDelayTfb3(ns3::Time const & delayTfb3) [member function]
    cls.add_method('SetDelayTfb3', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfb3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdp) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdp')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetState(ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetTfb1(ns3::Ptr<ns3::psc::McpttTimer> tfb1) [member function]
    cls.add_method('SetTfb1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfb1')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetTfb2(ns3::Ptr<ns3::psc::McpttTimer> tfb2) [member function]
    cls.add_method('SetTfb2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfb2')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetTfb3(ns3::Ptr<ns3::psc::McpttTimer> tfb3) [member function]
    cls.add_method('SetTfb3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfb3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::TakeNewCallNotification(uint16_t callId) [member function]
    cls.add_method('TakeNewCallNotification', 
                   'void', 
                   [param('uint16_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ExpiryOfTfb1() [member function]
    cls.add_method('ExpiryOfTfb1', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ExpiryOfTfb2() [member function]
    cls.add_method('ExpiryOfTfb2', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ExpiryOfTfb3() [member function]
    cls.add_method('ExpiryOfTfb3', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcast::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMachineGrpBroadcastState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastState::McpttCallMachineGrpBroadcastState(ns3::psc::McpttCallMachineGrpBroadcastState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcastState const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::AcceptCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ExpiryOfTfb1(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ExpiryOfTfb2(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ExpiryOfTfb3(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::InitiateCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcastState::IsCallOngoing(ns3::psc::McpttCallMachineGrpBroadcast const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ReceiveGrpCallBroadcast(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcast const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcast', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcast const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ReceiveGrpCallBroadcastEnd(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcastEnd const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcastEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcastEnd const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::RejectCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ReleaseCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastState::McpttCallMachineGrpBroadcastState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttCallMachineGrpBroadcastStateB1_methods(root_module, cls):
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB1::McpttCallMachineGrpBroadcastStateB1(ns3::psc::McpttCallMachineGrpBroadcastStateB1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcastStateB1 const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB1::McpttCallMachineGrpBroadcastStateB1() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastStateB1> ns3::psc::McpttCallMachineGrpBroadcastStateB1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastStateB1 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB1::InitiateCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB1::ReceiveGrpCallBroadcast(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcast const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcast', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcast const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBroadcastStateB2_methods(root_module, cls):
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB2::McpttCallMachineGrpBroadcastStateB2(ns3::psc::McpttCallMachineGrpBroadcastStateB2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcastStateB2 const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB2::McpttCallMachineGrpBroadcastStateB2() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB2::ExpiryOfTfb1(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB2::ExpiryOfTfb2(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastStateB2> ns3::psc::McpttCallMachineGrpBroadcastStateB2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastStateB2 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcastStateB2::IsCallOngoing(ns3::psc::McpttCallMachineGrpBroadcast const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB2::ReceiveGrpCallBroadcastEnd(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcastEnd const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcastEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcastEnd const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB2::ReleaseCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBroadcastStateB3_methods(root_module, cls):
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB3::McpttCallMachineGrpBroadcastStateB3(ns3::psc::McpttCallMachineGrpBroadcastStateB3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcastStateB3 const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB3::McpttCallMachineGrpBroadcastStateB3() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB3::AcceptCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB3::ExpiryOfTfb3(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastStateB3> ns3::psc::McpttCallMachineGrpBroadcastStateB3::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastStateB3 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB3::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB3::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB3::RejectCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBroadcastStateB4_methods(root_module, cls):
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB4::McpttCallMachineGrpBroadcastStateB4(ns3::psc::McpttCallMachineGrpBroadcastStateB4 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcastStateB4 const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB4::McpttCallMachineGrpBroadcastStateB4() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB4::ExpiryOfTfb1(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastStateB4> ns3::psc::McpttCallMachineGrpBroadcastStateB4::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastStateB4 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB4::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB4::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB4::ReceiveGrpCallBroadcast(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcast const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcast', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcast const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB4::ReceiveGrpCallBroadcastEnd(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcastEnd const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcastEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcastEnd const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineNull_methods(root_module, cls):
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineNull::McpttCallMachineNull(ns3::psc::McpttCallMachineNull const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineNull const &', 'arg0')])
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineNull::McpttCallMachineNull() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttCallMachineNull::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMachineNull::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMachineNull::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttCallMachineNull::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachineNull::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineNull::GetNullStateId() [member function]
    cls.add_method('GetNullStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineNull::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachineNull::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachineNull::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachineNull::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachineNull::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMachinePrivate_methods(root_module, cls):
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMachinePrivate::McpttCallMachinePrivate(ns3::psc::McpttCallMachinePrivate const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivate const &', 'arg0')])
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMachinePrivate::McpttCallMachinePrivate(ns3::Ptr<ns3::psc::McpttCall> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCall >', 'owner', default_value='0')])
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ChangeState(ns3::Ptr<ns3::psc::McpttCallMachinePrivateState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachinePrivateState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): uint16_t ns3::psc::McpttCallMachinePrivate::GenerateRandomCallId() const [member function]
    cls.add_method('GenerateRandomCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttCallMachinePrivate::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMachinePrivate::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMachinePrivate::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallTypeMachine> ns3::psc::McpttCallMachinePrivate::GetCallTypeMachine() const [member function]
    cls.add_method('GetCallTypeMachine', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachine >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMachinePrivate::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMachinePrivate::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): uint32_t ns3::psc::McpttCallMachinePrivate::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallMachinePrivate::GetCfp1() const [member function]
    cls.add_method('GetCfp1', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallMachinePrivate::GetCfp3() const [member function]
    cls.add_method('GetCfp3', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallMachinePrivate::GetCfp4() const [member function]
    cls.add_method('GetCfp4', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallMachinePrivate::GetCfp6() const [member function]
    cls.add_method('GetCfp6', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode ns3::psc::McpttCallMachinePrivate::GetCommMode() const [member function]
    cls.add_method('GetCommMode', 
                   'ns3::psc::McpttCallMsgFieldCommMode', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttEmergAlertMachineBasic> ns3::psc::McpttCallMachinePrivate::GetEmergMachine() const [member function]
    cls.add_method('GetEmergMachine', 
                   'ns3::Ptr< ns3::psc::McpttEmergAlertMachineBasic >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMachinePrivate::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachinePrivate::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMachinePrivate::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMachinePrivate::GetSdpEmerg() const [member function]
    cls.add_method('GetSdpEmerg', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachinePrivateState> ns3::psc::McpttCallMachinePrivate::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivate::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp1() const [member function]
    cls.add_method('GetTfp1', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp2() const [member function]
    cls.add_method('GetTfp2', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp3() const [member function]
    cls.add_method('GetTfp3', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp4() const [member function]
    cls.add_method('GetTfp4', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp5() const [member function]
    cls.add_method('GetTfp5', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp6() const [member function]
    cls.add_method('GetTfp6', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp7() const [member function]
    cls.add_method('GetTfp7', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp8() const [member function]
    cls.add_method('GetTfp8', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachinePrivate::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivate> ns3::psc::McpttCallMachinePrivate::GetTypeMachine() const [member function]
    cls.add_method('GetTypeMachine', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivate >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivate::IsAutoCommencement() const [member function]
    cls.add_method('IsAutoCommencement', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivate::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivate::IsFailure() const [member function]
    cls.add_method('IsFailure', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivate::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::NotifyNewCall(uint16_t callId) [member function]
    cls.add_method('NotifyNewCall', 
                   'void', 
                   [param('uint16_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveAccept(ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveAcceptAck(ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveEmergencyCancel(ns3::psc::McpttCallMsgPrivateEmergCancel const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveEmergencyCancelAck(ns3::psc::McpttCallMsgPrivateEmergCancelAck const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancelAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateEmergCancelAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveGrpCallEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlert', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveGrpCallEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveReject(ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveRelease(ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveReleaseAck(ns3::psc::McpttCallMsgPrivateReleaseAck const & msg) [member function]
    cls.add_method('ReceiveReleaseAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateReleaseAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveRinging(ns3::psc::McpttCallMsgPrivateRinging const & msg) [member function]
    cls.add_method('ReceiveRinging', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateRinging const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveSetupRequest(ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReportEvent(char const * reason) const [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('char const *', 'reason')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeId) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeId')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerId) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerId')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCfp1(ns3::Ptr<ns3::psc::McpttCounter> cfp1) [member function]
    cls.add_method('SetCfp1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfp1')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCfp3(ns3::Ptr<ns3::psc::McpttCounter> cfp3) [member function]
    cls.add_method('SetCfp3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfp3')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCfp4(ns3::Ptr<ns3::psc::McpttCounter> cfp4) [member function]
    cls.add_method('SetCfp4', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfp4')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCfp6(ns3::Ptr<ns3::psc::McpttCounter> cfp6) [member function]
    cls.add_method('SetCfp6', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfp6')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCommMode(ns3::psc::McpttCallMsgFieldCommMode const & commMode) [member function]
    cls.add_method('SetCommMode', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCommMode const &', 'commMode')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp1(ns3::Time const & delayTfp1) [member function]
    cls.add_method('SetDelayTfp1', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp1')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp2(ns3::Time const & delayTfp2) [member function]
    cls.add_method('SetDelayTfp2', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp2')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp3(ns3::Time const & delayTfp3) [member function]
    cls.add_method('SetDelayTfp3', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp3')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp4(ns3::Time const & delayTfp4) [member function]
    cls.add_method('SetDelayTfp4', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp4')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp5(ns3::Time const & delayTfp5) [member function]
    cls.add_method('SetDelayTfp5', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp5')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp6(ns3::Time const & delayTfp6) [member function]
    cls.add_method('SetDelayTfp6', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp6')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp7(ns3::Time const & delayTfp7) [member function]
    cls.add_method('SetDelayTfp7', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp7')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp8(ns3::Time const & delayTfp8) [member function]
    cls.add_method('SetDelayTfp8', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp8')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetEmergMachine(ns3::Ptr<ns3::psc::McpttEmergAlertMachineBasic> emergMachine) [member function]
    cls.add_method('SetEmergMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttEmergAlertMachineBasic >', 'emergMachine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetLimitCfp1(uint32_t limitCfp1) [member function]
    cls.add_method('SetLimitCfp1', 
                   'void', 
                   [param('uint32_t', 'limitCfp1')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetLimitCfp3(uint32_t limitCfp3) [member function]
    cls.add_method('SetLimitCfp3', 
                   'void', 
                   [param('uint32_t', 'limitCfp3')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetLimitCfp4(uint32_t limitCfp4) [member function]
    cls.add_method('SetLimitCfp4', 
                   'void', 
                   [param('uint32_t', 'limitCfp4')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetLimitCfp6(uint32_t limitCfp6) [member function]
    cls.add_method('SetLimitCfp6', 
                   'void', 
                   [param('uint32_t', 'limitCfp6')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdp) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdp')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetSdpEmerg(ns3::psc::McpttCallMsgFieldSdp const & sdpEmerg) [member function]
    cls.add_method('SetSdpEmerg', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdpEmerg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetState(ns3::Ptr<ns3::psc::McpttCallMachinePrivateState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachinePrivateState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp1(ns3::Ptr<ns3::psc::McpttTimer> tfp1) [member function]
    cls.add_method('SetTfp1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp1')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp2(ns3::Ptr<ns3::psc::McpttTimer> tfp2) [member function]
    cls.add_method('SetTfp2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp2')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp3(ns3::Ptr<ns3::psc::McpttTimer> tfp3) [member function]
    cls.add_method('SetTfp3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp3')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp4(ns3::Ptr<ns3::psc::McpttTimer> tfp4) [member function]
    cls.add_method('SetTfp4', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp4')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp5(ns3::Ptr<ns3::psc::McpttTimer> tfp5) [member function]
    cls.add_method('SetTfp5', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp5')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp6(ns3::Ptr<ns3::psc::McpttTimer> tfp6) [member function]
    cls.add_method('SetTfp6', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp6')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp7(ns3::Ptr<ns3::psc::McpttTimer> tfp7) [member function]
    cls.add_method('SetTfp7', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp7')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp8(ns3::Ptr<ns3::psc::McpttTimer> tfp8) [member function]
    cls.add_method('SetTfp8', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp8')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTypeMachine(ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivate> typeMachine) [member function]
    cls.add_method('SetTypeMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivate >', 'typeMachine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp1() [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp2() [member function]
    cls.add_method('ExpiryOfTfp2', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp3() [member function]
    cls.add_method('ExpiryOfTfp3', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp4() [member function]
    cls.add_method('ExpiryOfTfp4', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp5() [member function]
    cls.add_method('ExpiryOfTfp5', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp6() [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp7() [member function]
    cls.add_method('ExpiryOfTfp7', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp8() [member function]
    cls.add_method('ExpiryOfTfp8', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivate::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMachinePrivateState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateState::McpttCallMachinePrivateState(ns3::psc::McpttCallMachinePrivateState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateState const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::AcceptCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp1(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp2(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp3(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp4(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp4', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp5(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp5', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp6(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp7(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp7', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::InitiateCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivateState::IsCallOngoing(ns3::psc::McpttCallMachinePrivate const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachinePrivate const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveAccept(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveAcceptAck(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveMedia(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveReject(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveRelease(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveReleaseAck(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReleaseAck const & msg) [member function]
    cls.add_method('ReceiveReleaseAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReleaseAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveRinging(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRinging const & msg) [member function]
    cls.add_method('ReceiveRinging', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRinging const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveSetupRequest(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::RejectCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReleaseCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateState::McpttCallMachinePrivateState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttCallMachinePrivateStateP0_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP0::McpttCallMachinePrivateStateP0(ns3::psc::McpttCallMachinePrivateStateP0 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP0 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP0::McpttCallMachinePrivateStateP0() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP0> ns3::psc::McpttCallMachinePrivateStateP0::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP0 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP0::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP0::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP0::InitiateCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP0::ReceiveSetupRequest(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachinePrivateStateP1_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP1::McpttCallMachinePrivateStateP1(ns3::psc::McpttCallMachinePrivateStateP1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP1 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP1::McpttCallMachinePrivateStateP1() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP1::ExpiryOfTfp7(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp7', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP1> ns3::psc::McpttCallMachinePrivateStateP1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP1 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP1::InitiateCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP1::ReceiveRelease(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP1::ReceiveSetupRequest(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachinePrivateStateP2_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP2::McpttCallMachinePrivateStateP2(ns3::psc::McpttCallMachinePrivateStateP2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP2 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP2::McpttCallMachinePrivateStateP2() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ExpiryOfTfp1(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ExpiryOfTfp2(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP2> ns3::psc::McpttCallMachinePrivateStateP2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP2 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ReceiveAccept(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ReceiveReject(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ReceiveRinging(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRinging const & msg) [member function]
    cls.add_method('ReceiveRinging', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRinging const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ReleaseCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachinePrivateStateP3_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP3::McpttCallMachinePrivateStateP3(ns3::psc::McpttCallMachinePrivateStateP3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP3 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP3::McpttCallMachinePrivateStateP3() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP3::ExpiryOfTfp3(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP3> ns3::psc::McpttCallMachinePrivateStateP3::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP3 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP3::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP3::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP3::ReceiveReleaseAck(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReleaseAck const & msg) [member function]
    cls.add_method('ReceiveReleaseAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReleaseAck const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachinePrivateStateP4_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP4::McpttCallMachinePrivateStateP4(ns3::psc::McpttCallMachinePrivateStateP4 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP4 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP4::McpttCallMachinePrivateStateP4() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP4::ExpiryOfTfp1(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP4::ExpiryOfTfp5(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp5', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP4::ExpiryOfTfp6(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP4> ns3::psc::McpttCallMachinePrivateStateP4::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP4 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP4::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP4::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivateStateP4::IsCallOngoing(ns3::psc::McpttCallMachinePrivate const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachinePrivate const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP4::ReceiveRelease(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP4::ReleaseCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachinePrivateStateP5_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP5::McpttCallMachinePrivateStateP5(ns3::psc::McpttCallMachinePrivateStateP5 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP5 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP5::McpttCallMachinePrivateStateP5() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::AcceptCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::ExpiryOfTfp2(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::ExpiryOfTfp4(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp4', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP5> ns3::psc::McpttCallMachinePrivateStateP5::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP5 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP5::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP5::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::ReceiveAcceptAck(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::ReceiveMedia(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::ReceiveRelease(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::RejectCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgField_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgField::McpttCallMsgField(ns3::psc::McpttCallMsgField const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgField const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgField::McpttCallMsgField() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgField::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgField::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgField::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgField::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgField::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgField::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldCallId_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId::McpttCallMsgFieldCallId(ns3::psc::McpttCallMsgFieldCallId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldCallId const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId::McpttCallMsgFieldCallId() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId::McpttCallMsgFieldCallId(uint16_t callId) [constructor]
    cls.add_constructor([param('uint16_t', 'callId')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCallId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttCallMsgFieldCallId::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldCallId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCallId::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldCallId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallId::SetCallId(uint16_t id) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('uint16_t', 'id')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldCallType_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::McpttCallMsgFieldCallType(ns3::psc::McpttCallMsgFieldCallType const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldCallType const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::McpttCallMsgFieldCallType() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::McpttCallMsgFieldCallType(uint8_t type) [constructor]
    cls.add_constructor([param('uint8_t', 'type')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCallType::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static std::string ns3::psc::McpttCallMsgFieldCallType::GetCallTypeName(uint8_t type) [member function]
    cls.add_method('GetCallTypeName', 
                   'std::string', 
                   [param('uint8_t', 'type')], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): static uint8_t ns3::psc::McpttCallMsgFieldCallType::GetCallTypePriority(uint8_t type) [member function]
    cls.add_method('GetCallTypePriority', 
                   'uint8_t', 
                   [param('uint8_t', 'type')], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldCallType::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCallType::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttCallMsgFieldCallType::GetType() const [member function]
    cls.add_method('GetType', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldCallType::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallType::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallType::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallType::SetType(uint8_t type) [member function]
    cls.add_method('SetType', 
                   'void', 
                   [param('uint8_t', 'type')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::BASIC_GROUP [variable]
    cls.add_static_attribute('BASIC_GROUP', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::BROADCAST_GROUP [variable]
    cls.add_static_attribute('BROADCAST_GROUP', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::EMERGENCY_GROUP [variable]
    cls.add_static_attribute('EMERGENCY_GROUP', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::EMERGENCY_PRIVATE [variable]
    cls.add_static_attribute('EMERGENCY_PRIVATE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::IMMINENT_PERIL_GROUP [variable]
    cls.add_static_attribute('IMMINENT_PERIL_GROUP', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::PRIVATE [variable]
    cls.add_static_attribute('PRIVATE', 'uint8_t const', is_const=True)
    return

def register_Ns3PscMcpttCallMsgFieldCommMode_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode::McpttCallMsgFieldCommMode(ns3::psc::McpttCallMsgFieldCommMode const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldCommMode const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode::McpttCallMsgFieldCommMode() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode::McpttCallMsgFieldCommMode(uint8_t commMode) [constructor]
    cls.add_constructor([param('uint8_t', 'commMode')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCommMode::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldCommMode::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttCallMsgFieldCommMode::GetMode() const [member function]
    cls.add_method('GetMode', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCommMode::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldCommMode::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCommMode::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCommMode::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCommMode::SetMode(uint8_t mode) [member function]
    cls.add_method('SetMode', 
                   'void', 
                   [param('uint8_t', 'mode')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode::AUTOMATIC_MODE [variable]
    cls.add_static_attribute('AUTOMATIC_MODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode::MANUAL_MODE [variable]
    cls.add_static_attribute('MANUAL_MODE', 'uint8_t const', is_const=True)
    return

def register_Ns3PscMcpttCallMsgFieldConfirmMode_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldConfirmMode::McpttCallMsgFieldConfirmMode(ns3::psc::McpttCallMsgFieldConfirmMode const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldConfirmMode const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldConfirmMode::McpttCallMsgFieldConfirmMode() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldConfirmMode::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static uint8_t ns3::psc::McpttCallMsgFieldConfirmMode::GetIei() [member function]
    cls.add_method('GetIei', 
                   'uint8_t', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldConfirmMode::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldConfirmMode::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldConfirmMode::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldConfirmMode::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldConfirmMode::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldLastChgTime_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime::McpttCallMsgFieldLastChgTime(ns3::psc::McpttCallMsgFieldLastChgTime const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldLastChgTime const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime::McpttCallMsgFieldLastChgTime() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime::McpttCallMsgFieldLastChgTime(ns3::Time const & time) [constructor]
    cls.add_constructor([param('ns3::Time const &', 'time')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldLastChgTime::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldLastChgTime::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldLastChgTime::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::Time ns3::psc::McpttCallMsgFieldLastChgTime::GetTime() const [member function]
    cls.add_method('GetTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldLastChgTime::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldLastChgTime::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldLastChgTime::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldLastChgTime::SetTime(ns3::Time const & time) [member function]
    cls.add_method('SetTime', 
                   'void', 
                   [param('ns3::Time const &', 'time')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldMsgType_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldMsgType::McpttCallMsgFieldMsgType(ns3::psc::McpttCallMsgFieldMsgType const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldMsgType const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldMsgType::McpttCallMsgFieldMsgType() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldMsgType::McpttCallMsgFieldMsgType(uint8_t id) [constructor]
    cls.add_constructor([param('uint8_t', 'id')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldMsgType::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldMsgType::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldMsgType::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttCallMsgFieldMsgType::GetType() const [member function]
    cls.add_method('GetType', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldMsgType::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldMsgType::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldMsgType::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldMsgType::SetType(uint8_t type) [member function]
    cls.add_method('SetType', 
                   'void', 
                   [param('uint8_t', 'type')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldProbeResp_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldProbeResp::McpttCallMsgFieldProbeResp(ns3::psc::McpttCallMsgFieldProbeResp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldProbeResp const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldProbeResp::McpttCallMsgFieldProbeResp() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldProbeResp::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static uint8_t ns3::psc::McpttCallMsgFieldProbeResp::GetIei() [member function]
    cls.add_method('GetIei', 
                   'uint8_t', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldProbeResp::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldProbeResp::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldProbeResp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldProbeResp::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldProbeResp::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldReason_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::McpttCallMsgFieldReason(ns3::psc::McpttCallMsgFieldReason const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldReason const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::McpttCallMsgFieldReason() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::McpttCallMsgFieldReason(uint8_t reason) [constructor]
    cls.add_constructor([param('uint8_t', 'reason')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldReason::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldReason::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttCallMsgFieldReason::GetReason() const [member function]
    cls.add_method('GetReason', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldReason::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldReason::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldReason::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldReason::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldReason::SetReason(uint8_t mode) [member function]
    cls.add_method('SetReason', 
                   'void', 
                   [param('uint8_t', 'mode')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::BUSY [variable]
    cls.add_static_attribute('BUSY', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::FAILED [variable]
    cls.add_static_attribute('FAILED', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::NO_ANSWER [variable]
    cls.add_static_attribute('NO_ANSWER', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::REJECT [variable]
    cls.add_static_attribute('REJECT', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::SECURITY_FAILURE [variable]
    cls.add_static_attribute('SECURITY_FAILURE', 'uint8_t const', is_const=True)
    return

def register_Ns3PscMcpttCallMsgFieldRefreshInterval_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval::McpttCallMsgFieldRefreshInterval(ns3::psc::McpttCallMsgFieldRefreshInterval const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldRefreshInterval const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval::McpttCallMsgFieldRefreshInterval() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval::McpttCallMsgFieldRefreshInterval(uint16_t interval) [constructor]
    cls.add_constructor([param('uint16_t', 'interval')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldRefreshInterval::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldRefreshInterval::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttCallMsgFieldRefreshInterval::GetInterval() const [member function]
    cls.add_method('GetInterval', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldRefreshInterval::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldRefreshInterval::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldRefreshInterval::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldRefreshInterval::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldRefreshInterval::SetInterval(uint16_t interval) [member function]
    cls.add_method('SetInterval', 
                   'void', 
                   [param('uint16_t', 'interval')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldStartTime_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime::McpttCallMsgFieldStartTime(ns3::psc::McpttCallMsgFieldStartTime const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldStartTime const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime::McpttCallMsgFieldStartTime() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime::McpttCallMsgFieldStartTime(ns3::Time const & time) [constructor]
    cls.add_constructor([param('ns3::Time const &', 'time')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldStartTime::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldStartTime::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldStartTime::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::Time ns3::psc::McpttCallMsgFieldStartTime::GetTime() const [member function]
    cls.add_method('GetTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldStartTime::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldStartTime::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldStartTime::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldStartTime::SetTime(ns3::Time const & time) [member function]
    cls.add_method('SetTime', 
                   'void', 
                   [param('ns3::Time const &', 'time')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldType6_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldType6::McpttCallMsgFieldType6(ns3::psc::McpttCallMsgFieldType6 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldType6 const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldType6::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldType6::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttCallMsgFieldType6::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldType6::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldType6::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldType6::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldType6::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldType6::McpttCallMsgFieldType6() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldType6::McpttCallMsgFieldType6(uint16_t length) [constructor]
    cls.add_constructor([param('uint16_t', 'length')], 
                        visibility='protected')
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldType6::SetLength(uint16_t length) [member function]
    cls.add_method('SetLength', 
                   'void', 
                   [param('uint16_t', 'length')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgFieldUserId_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId::McpttCallMsgFieldUserId(ns3::psc::McpttCallMsgFieldUserId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldUserId const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId::McpttCallMsgFieldUserId() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId::McpttCallMsgFieldUserId(uint32_t id) [constructor]
    cls.add_constructor([param('uint32_t', 'id')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldUserId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldUserId::GetId() const [member function]
    cls.add_method('GetId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldUserId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldUserId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserId::SetId(uint32_t id) [member function]
    cls.add_method('SetId', 
                   'void', 
                   [param('uint32_t', 'id')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldUserLoc_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc::McpttCallMsgFieldUserLoc(ns3::psc::McpttCallMsgFieldUserLoc const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldUserLoc const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc::McpttCallMsgFieldUserLoc() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc::McpttCallMsgFieldUserLoc(ns3::Vector const & loc) [constructor]
    cls.add_constructor([param('ns3::Vector const &', 'loc')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldUserLoc::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static uint8_t ns3::psc::McpttCallMsgFieldUserLoc::GetIei() [member function]
    cls.add_method('GetIei', 
                   'uint8_t', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldUserLoc::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::Vector ns3::psc::McpttCallMsgFieldUserLoc::GetLoc() const [member function]
    cls.add_method('GetLoc', 
                   'ns3::Vector', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldUserLoc::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldUserLoc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserLoc::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserLoc::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserLoc::SetLoc(ns3::Vector const & loc) [member function]
    cls.add_method('SetLoc', 
                   'void', 
                   [param('ns3::Vector const &', 'loc')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallTypeMachine_methods(root_module, cls):
    ## mcptt-call-type-machine.h (module 'psc'): ns3::psc::McpttCallTypeMachine::McpttCallTypeMachine(ns3::psc::McpttCallTypeMachine const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachine const &', 'arg0')])
    ## mcptt-call-type-machine.h (module 'psc'): ns3::psc::McpttCallTypeMachine::McpttCallTypeMachine() [constructor]
    cls.add_constructor([])
    ## mcptt-call-type-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallTypeMachine::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallTypeMachine::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): uint8_t ns3::psc::McpttCallTypeMachine::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachine::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallTypeMachine::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine.h (module 'psc'): bool ns3::psc::McpttCallTypeMachine::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::SetDowngradeCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const downgradeCb) [member function]
    cls.add_method('SetDowngradeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'downgradeCb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::SetUpgradeCb(ns3::Callback<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const upgradeCb) [member function]
    cls.add_method('SetUpgradeCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'upgradeCb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallTypeMachineGrpBasic_methods(root_module, cls):
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::McpttCallTypeMachineGrpBasic(ns3::psc::McpttCallTypeMachineGrpBasic const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachineGrpBasic const &', 'arg0')])
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::McpttCallTypeMachineGrpBasic(ns3::Ptr<ns3::psc::McpttCallMachineGrpBasic> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBasic >', 'owner', default_value='0')])
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Time ns3::psc::McpttCallTypeMachineGrpBasic::CalcDelayForTfg13() const [member function]
    cls.add_method('CalcDelayForTfg13', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Time ns3::psc::McpttCallTypeMachineGrpBasic::CalcDelayForTfg14() const [member function]
    cls.add_method('CalcDelayForTfg14', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::CallStarted() [member function]
    cls.add_method('CallStarted', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ChangeState(ns3::psc::McpttEntityId const & stateId) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::psc::McpttEntityId const &', 'stateId')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::Downgrade() [member function]
    cls.add_method('Downgrade', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ExpiryOfTfg1() [member function]
    cls.add_method('ExpiryOfTfg1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallTypeMachineGrpBasic::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallTypeMachineGrpBasic::GetCfg11() const [member function]
    cls.add_method('GetCfg11', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallTypeMachineGrpBasic::GetCfg12() const [member function]
    cls.add_method('GetCfg12', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallTypeMachineGrpBasic::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime ns3::psc::McpttCallTypeMachineGrpBasic::GetLastChgTime() const [member function]
    cls.add_method('GetLastChgTime', 
                   'ns3::psc::McpttCallMsgFieldLastChgTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallTypeMachineGrpBasic::GetLastChgUserId() const [member function]
    cls.add_method('GetLastChgUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachineGrpBasic> ns3::psc::McpttCallTypeMachineGrpBasic::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasic >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): uint8_t ns3::psc::McpttCallTypeMachineGrpBasic::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallTypeMachineGrpBasic::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachineGrpBasic::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallTypeMachineGrpBasic::GetTfg11() const [member function]
    cls.add_method('GetTfg11', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallTypeMachineGrpBasic::GetTfg12() const [member function]
    cls.add_method('GetTfg12', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallTypeMachineGrpBasic::GetTfg13() const [member function]
    cls.add_method('GetTfg13', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallTypeMachineGrpBasic::GetTfg14() const [member function]
    cls.add_method('GetTfg14', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallTypeMachineGrpBasic::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::InitiateCall(uint8_t callType=ns3::psc::McpttCallMsgFieldCallType::BASIC_GROUP) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('uint8_t', 'callType', default_value='ns3::psc::McpttCallMsgFieldCallType::BASIC_GROUP')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallTypeMachineGrpBasic::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ReceiveGrpCallEmergEnd(ns3::psc::McpttCallMsgGrpEmergEnd const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergEnd const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ReceiveGrpCallImmPerilEnd(ns3::psc::McpttCallMsgGrpImmPerilEnd const & msg) [member function]
    cls.add_method('ReceiveGrpCallImmPerilEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpImmPerilEnd const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetCfg11(ns3::Ptr<ns3::psc::McpttCounter> cfg11) [member function]
    cls.add_method('SetCfg11', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfg11')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetCfg12(ns3::Ptr<ns3::psc::McpttCounter> cfg12) [member function]
    cls.add_method('SetCfg12', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfg12')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetDelayTfg11(ns3::Time const & delayTfg11) [member function]
    cls.add_method('SetDelayTfg11', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg11')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetDelayTfg12(ns3::Time const & delayTfg12) [member function]
    cls.add_method('SetDelayTfg12', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg12')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetDowngradeCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const downgradeCb) [member function]
    cls.add_method('SetDowngradeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'downgradeCb')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetLastChgTime(ns3::psc::McpttCallMsgFieldLastChgTime const & lastChgTime) [member function]
    cls.add_method('SetLastChgTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldLastChgTime const &', 'lastChgTime')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetLastChgUserId(ns3::psc::McpttCallMsgFieldUserId const & lastChgUserId) [member function]
    cls.add_method('SetLastChgUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'lastChgUserId')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetLimitCfg11(uint32_t limitCfg11) [member function]
    cls.add_method('SetLimitCfg11', 
                   'void', 
                   [param('uint32_t', 'limitCfg11')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetLimitCfg12(uint32_t limitCfg12) [member function]
    cls.add_method('SetLimitCfg12', 
                   'void', 
                   [param('uint32_t', 'limitCfg12')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetOwner(ns3::Ptr<ns3::psc::McpttCallMachineGrpBasic> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBasic >', 'owner')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetStateId(ns3::psc::McpttEntityId const & state) [member function]
    cls.add_method('SetStateId', 
                   'void', 
                   [param('ns3::psc::McpttEntityId const &', 'state')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetTfg11(ns3::Ptr<ns3::psc::McpttTimer> tfg11) [member function]
    cls.add_method('SetTfg11', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg11')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetTfg12(ns3::Ptr<ns3::psc::McpttTimer> tfg12) [member function]
    cls.add_method('SetTfg12', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg12')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetTfg13(ns3::Ptr<ns3::psc::McpttTimer> tfg13) [member function]
    cls.add_method('SetTfg13', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg13')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetTfg14(ns3::Ptr<ns3::psc::McpttTimer> tfg14) [member function]
    cls.add_method('SetTfg14', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg14')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetUpgradeCb(ns3::Callback<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const upgradeCb) [member function]
    cls.add_method('SetUpgradeCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'upgradeCb')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::UpgradeTo(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('UpgradeTo', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::T0 [variable]
    cls.add_static_attribute('T0', 'ns3::psc::McpttEntityId const', is_const=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::T1 [variable]
    cls.add_static_attribute('T1', 'ns3::psc::McpttEntityId const', is_const=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::T2 [variable]
    cls.add_static_attribute('T2', 'ns3::psc::McpttEntityId const', is_const=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::T3 [variable]
    cls.add_static_attribute('T3', 'ns3::psc::McpttEntityId const', is_const=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ExpiryOfTfg11() [member function]
    cls.add_method('ExpiryOfTfg11', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ExpiryOfTfg12() [member function]
    cls.add_method('ExpiryOfTfg12', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ExpiryOfTfg13() [member function]
    cls.add_method('ExpiryOfTfg13', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ExpiryOfTfg14() [member function]
    cls.add_method('ExpiryOfTfg14', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallTypeMachinePrivate_methods(root_module, cls):
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivate::McpttCallTypeMachinePrivate(ns3::psc::McpttCallTypeMachinePrivate const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachinePrivate const &', 'arg0')])
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivate::McpttCallTypeMachinePrivate(ns3::Ptr<ns3::psc::McpttCallMachinePrivate> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCallMachinePrivate >', 'owner', default_value='0')])
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ChangeState(ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::Downgrade() [member function]
    cls.add_method('Downgrade', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ExpiryOfTfp1() [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ExpiryOfTfp6() [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ExpiryOfTfp8() [member function]
    cls.add_method('ExpiryOfTfp8', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallTypeMachinePrivate::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallTypeMachinePrivate::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachinePrivate> ns3::psc::McpttCallTypeMachinePrivate::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivate >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): uint8_t ns3::psc::McpttCallTypeMachinePrivate::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): bool ns3::psc::McpttCallTypeMachinePrivate::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateState> ns3::psc::McpttCallTypeMachinePrivate::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivate::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallTypeMachinePrivate::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): bool ns3::psc::McpttCallTypeMachinePrivate::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveAccept(ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveAcceptAck(ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveEmergencyCancel(ns3::psc::McpttCallMsgPrivateEmergCancel const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveEmergencyCancelAck(ns3::psc::McpttCallMsgPrivateEmergCancelAck const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancelAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateEmergCancelAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveReject(ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveRelease(ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveSetupRequest(ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetDowngradeCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const downgradeCb) [member function]
    cls.add_method('SetDowngradeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'downgradeCb')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetOwner(ns3::Ptr<ns3::psc::McpttCallMachinePrivate> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachinePrivate >', 'owner')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetState(ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetUpgradeCb(ns3::Callback<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const upgradeCb) [member function]
    cls.add_method('SetUpgradeCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'upgradeCb')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::UpgradeTo(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('UpgradeTo', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallTypeMachinePrivateState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateState::McpttCallTypeMachinePrivateState(ns3::psc::McpttCallTypeMachinePrivateState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachinePrivateState const &', 'arg0')])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::Downgrade(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('Downgrade', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ExpiryOfTfp1(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ExpiryOfTfp6(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ExpiryOfTfp8(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp8', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::InitiateCall(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveAccept(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveAcceptAck(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveEmergencyCancel(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateEmergCancel const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveEmergencyCancelAck(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateEmergCancelAck const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancelAck', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateEmergCancelAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveReject(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveRelease(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveSetupRequest(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReleaseCall(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::UpgradeTo(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('UpgradeTo', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateState::McpttCallTypeMachinePrivateState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttCallTypeMachinePrivateStateQ0_methods(root_module, cls):
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ0::McpttCallTypeMachinePrivateStateQ0(ns3::psc::McpttCallTypeMachinePrivateStateQ0 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachinePrivateStateQ0 const &', 'arg0')])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ0::McpttCallTypeMachinePrivateStateQ0() [constructor]
    cls.add_constructor([])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateStateQ0> ns3::psc::McpttCallTypeMachinePrivateStateQ0::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateStateQ0 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ0::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ0::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ0::InitiateCall(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ0::ReceiveAccept(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ0::ReceiveAcceptAck(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ0::ReceiveSetupRequest(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallTypeMachinePrivateStateQ1_methods(root_module, cls):
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ1::McpttCallTypeMachinePrivateStateQ1(ns3::psc::McpttCallTypeMachinePrivateStateQ1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachinePrivateStateQ1 const &', 'arg0')])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ1::McpttCallTypeMachinePrivateStateQ1() [constructor]
    cls.add_constructor([])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ExpiryOfTfp6(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateStateQ1> ns3::psc::McpttCallTypeMachinePrivateStateQ1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateStateQ1 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ReceiveAccept(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ReceiveEmergencyCancel(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateEmergCancel const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ReceiveEmergencyCancelAck(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateEmergCancelAck const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancelAck', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateEmergCancelAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ReceiveSetupRequest(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ReleaseCall(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::UpgradeTo(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('UpgradeTo', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallTypeMachinePrivateStateQ2_methods(root_module, cls):
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ2::McpttCallTypeMachinePrivateStateQ2(ns3::psc::McpttCallTypeMachinePrivateStateQ2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachinePrivateStateQ2 const &', 'arg0')])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ2::McpttCallTypeMachinePrivateStateQ2() [constructor]
    cls.add_constructor([])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::Downgrade(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('Downgrade', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ExpiryOfTfp1(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ExpiryOfTfp8(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp8', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateStateQ2> ns3::psc::McpttCallTypeMachinePrivateStateQ2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateStateQ2 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ReceiveAccept(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ReceiveEmergencyCancel(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateEmergCancel const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ReceiveReject(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ReceiveSetupRequest(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ReleaseCall(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttChannel_methods(root_module, cls):
    ## mcptt-channel.h (module 'psc'): ns3::psc::McpttChannel::McpttChannel(ns3::psc::McpttChannel const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttChannel const &', 'arg0')])
    ## mcptt-channel.h (module 'psc'): ns3::psc::McpttChannel::McpttChannel() [constructor]
    cls.add_constructor([])
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::Close() [member function]
    cls.add_method('Close', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-channel.h (module 'psc'): ns3::TypeId ns3::psc::McpttChannel::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-channel.h (module 'psc'): ns3::Ptr<ns3::Socket> ns3::psc::McpttChannel::GetSocket() const [member function]
    cls.add_method('GetSocket', 
                   'ns3::Ptr< ns3::Socket >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-channel.h (module 'psc'): static ns3::TypeId ns3::psc::McpttChannel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-channel.h (module 'psc'): bool ns3::psc::McpttChannel::IsOpen() const [member function]
    cls.add_method('IsOpen', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-channel.h (module 'psc'): int ns3::psc::McpttChannel::Open(ns3::Ptr<ns3::Node> node, uint16_t port, ns3::Address const & local, ns3::Address const & peer) [member function]
    cls.add_method('Open', 
                   'int', 
                   [param('ns3::Ptr< ns3::Node >', 'node'), param('uint16_t', 'port'), param('ns3::Address const &', 'local'), param('ns3::Address const &', 'peer')], 
                   is_virtual=True)
    ## mcptt-channel.h (module 'psc'): int ns3::psc::McpttChannel::Send(ns3::Ptr<ns3::Packet> pkt) [member function]
    cls.add_method('Send', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt')], 
                   is_virtual=True)
    ## mcptt-channel.h (module 'psc'): int ns3::psc::McpttChannel::SendTo(ns3::Ptr<ns3::Packet> p, uint32_t flags, ns3::Address const & toAddress) [member function]
    cls.add_method('SendTo', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags'), param('ns3::Address const &', 'toAddress')], 
                   is_virtual=True)
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::SetRxPktCb(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const rxPktCb) [member function]
    cls.add_method('SetRxPktCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'rxPktCb')], 
                   is_virtual=True)
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::ReceivePkt(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceivePkt', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::ReceivePkts(ns3::Ptr<ns3::Socket> socket) [member function]
    cls.add_method('ReceivePkts', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::SetSocket(ns3::Ptr<ns3::Socket> socket) [member function]
    cls.add_method('SetSocket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCounter_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-counter.h (module 'psc'): ns3::psc::McpttCounter::McpttCounter(ns3::psc::McpttCounter const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCounter const &', 'arg0')])
    ## mcptt-counter.h (module 'psc'): ns3::psc::McpttCounter::McpttCounter() [constructor]
    cls.add_constructor([])
    ## mcptt-counter.h (module 'psc'): ns3::psc::McpttCounter::McpttCounter(ns3::psc::McpttEntityId const & id, uint32_t start=1, uint32_t limit=3) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEntityId const &', 'id'), param('uint32_t', 'start', default_value='1'), param('uint32_t', 'limit', default_value='3')])
    ## mcptt-counter.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCounter::GetId() const [member function]
    cls.add_method('GetId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): ns3::TypeId ns3::psc::McpttCounter::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): uint32_t ns3::psc::McpttCounter::GetLimit() const [member function]
    cls.add_method('GetLimit', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): uint32_t ns3::psc::McpttCounter::GetStart() const [member function]
    cls.add_method('GetStart', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCounter::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-counter.h (module 'psc'): uint32_t ns3::psc::McpttCounter::GetValue() const [member function]
    cls.add_method('GetValue', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::Increment(uint32_t amount=1) [member function]
    cls.add_method('Increment', 
                   'void', 
                   [param('uint32_t', 'amount', default_value='1')], 
                   is_virtual=True)
    ## mcptt-counter.h (module 'psc'): bool ns3::psc::McpttCounter::IsLimitExceeded() const [member function]
    cls.add_method('IsLimitExceeded', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): bool ns3::psc::McpttCounter::IsLimitReached() const [member function]
    cls.add_method('IsLimitReached', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::SetId(ns3::psc::McpttEntityId const & id) [member function]
    cls.add_method('SetId', 
                   'void', 
                   [param('ns3::psc::McpttEntityId const &', 'id')], 
                   is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::SetLimit(uint32_t limit) [member function]
    cls.add_method('SetLimit', 
                   'void', 
                   [param('uint32_t', 'limit')], 
                   is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::SetStart(uint32_t start) [member function]
    cls.add_method('SetStart', 
                   'void', 
                   [param('uint32_t', 'start')], 
                   is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::SetValue(uint32_t value) [member function]
    cls.add_method('SetValue', 
                   'void', 
                   [param('uint32_t', 'value')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttEmergAlertMachine_methods(root_module, cls):
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachine::McpttEmergAlertMachine(ns3::psc::McpttEmergAlertMachine const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEmergAlertMachine const &', 'arg0')])
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachine::McpttEmergAlertMachine() [constructor]
    cls.add_constructor([])
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttEmergAlertMachine::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttEmergAlertMachine::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachine::IsInEmergState() const [member function]
    cls.add_method('IsInEmergState', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachine::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::ReceiveGrpCallEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlert', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::ReceiveGrpCallEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::SendEmergAlert() [member function]
    cls.add_method('SendEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttEmergAlertMachineBasic_methods(root_module, cls):
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::McpttEmergAlertMachineBasic(ns3::psc::McpttEmergAlertMachineBasic const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEmergAlertMachineBasic const &', 'arg0')])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::McpttEmergAlertMachineBasic(ns3::Ptr<ns3::psc::McpttCallMachineGrp> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCallMachineGrp >', 'owner', default_value='0')])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::GetEmerg() const [member function]
    cls.add_method('GetEmerg', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::TypeId ns3::psc::McpttEmergAlertMachineBasic::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName ns3::psc::McpttEmergAlertMachineBasic::GetOrgName() const [member function]
    cls.add_method('GetOrgName', 
                   'ns3::psc::McpttCallMsgFieldOrgName', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachineGrp> ns3::psc::McpttEmergAlertMachineBasic::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrp >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): static ns3::TypeId ns3::psc::McpttEmergAlertMachineBasic::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::IsInEmergState() const [member function]
    cls.add_method('IsInEmergState', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::IsOtherInEmergState() const [member function]
    cls.add_method('IsOtherInEmergState', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::ReceiveGrpCallEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlert', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::ReceiveGrpCallEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SendEmergAlert() [member function]
    cls.add_method('SendEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetDelayTfe2(ns3::Time const & delayTfe2) [member function]
    cls.add_method('SetDelayTfe2', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfe2')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetEmerg(bool emerg) [member function]
    cls.add_method('SetEmerg', 
                   'void', 
                   [param('bool', 'emerg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetOrgName(ns3::psc::McpttCallMsgFieldOrgName const & orgName) [member function]
    cls.add_method('SetOrgName', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldOrgName const &', 'orgName')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetOwner(ns3::Ptr<ns3::psc::McpttCallMachineGrp> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrp >', 'owner')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetStarted(bool started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool', 'started')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetStateChangeCb(ns3::Callback<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::AddEmergUser(ns3::psc::McpttEmergAlertMachineBasic::EmergUser const & user) [member function]
    cls.add_method('AddEmergUser', 
                   'void', 
                   [param('ns3::psc::McpttEmergAlertMachineBasic::EmergUser const &', 'user')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::ExpiryOfTfe1(uint32_t userId) [member function]
    cls.add_method('ExpiryOfTfe1', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::ExpiryOfTfe2() [member function]
    cls.add_method('ExpiryOfTfe2', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::FindEmergUser(uint32_t userId, std::list<ns3::psc::McpttEmergAlertMachineBasic::EmergUser, std::allocator<ns3::psc::McpttEmergAlertMachineBasic::EmergUser>>::iterator & it) [member function]
    cls.add_method('FindEmergUser', 
                   'bool', 
                   [param('uint32_t', 'userId'), param('std::list< ns3::psc::McpttEmergAlertMachineBasic::EmergUser > iterator &', 'it')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): std::list<ns3::psc::McpttEmergAlertMachineBasic::EmergUser, std::allocator<ns3::psc::McpttEmergAlertMachineBasic::EmergUser>> ns3::psc::McpttEmergAlertMachineBasic::GetEmergUsers() const [member function]
    cls.add_method('GetEmergUsers', 
                   'std::list< ns3::psc::McpttEmergAlertMachineBasic::EmergUser >', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttEmergAlertMachineBasic::GetTfe2() const [member function]
    cls.add_method('GetTfe2', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::RemoveEmergUser(uint32_t userId) [member function]
    cls.add_method('RemoveEmergUser', 
                   'bool', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetEmergUsers(std::list<ns3::psc::McpttEmergAlertMachineBasic::EmergUser, std::allocator<ns3::psc::McpttEmergAlertMachineBasic::EmergUser>> const & emergUsers) [member function]
    cls.add_method('SetEmergUsers', 
                   'void', 
                   [param('std::list< ns3::psc::McpttEmergAlertMachineBasic::EmergUser > const &', 'emergUsers')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetTfe2(ns3::Ptr<ns3::psc::McpttTimer> tfe2) [member function]
    cls.add_method('SetTfe2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfe2')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttEmergAlertMachineBasicEmergUser_methods(root_module, cls):
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser::EmergUser() [constructor]
    cls.add_constructor([])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser::EmergUser(ns3::psc::McpttEmergAlertMachineBasic::EmergUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEmergAlertMachineBasic::EmergUser const &', 'arg0')])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser::Id [variable]
    cls.add_instance_attribute('Id', 'uint32_t', is_const=False)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser::Loc [variable]
    cls.add_instance_attribute('Loc', 'ns3::Vector', is_const=False)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser::Tfe1 [variable]
    cls.add_instance_attribute('Tfe1', 'ns3::Ptr< ns3::psc::McpttTimer >', is_const=False)
    return

def register_Ns3PscMcpttEmergAlertMachineNull_methods(root_module, cls):
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachineNull::McpttEmergAlertMachineNull(ns3::psc::McpttEmergAlertMachineNull const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEmergAlertMachineNull const &', 'arg0')])
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachineNull::McpttEmergAlertMachineNull() [constructor]
    cls.add_constructor([])
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttEmergAlertMachineNull::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttEmergAlertMachineNull::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineNull::IsInEmergState() const [member function]
    cls.add_method('IsInEmergState', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineNull::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::ReceiveGrpCallEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlert', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::ReceiveGrpCallEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::SendEmergAlert() [member function]
    cls.add_method('SendEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttEntityId_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_output_stream_operator()
    ## mcptt-entity-id.h (module 'psc'): ns3::psc::McpttEntityId::McpttEntityId(ns3::psc::McpttEntityId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEntityId const &', 'arg0')])
    ## mcptt-entity-id.h (module 'psc'): ns3::psc::McpttEntityId::McpttEntityId() [constructor]
    cls.add_constructor([])
    ## mcptt-entity-id.h (module 'psc'): ns3::psc::McpttEntityId::McpttEntityId(uint32_t number, std::string const & name) [constructor]
    cls.add_constructor([param('uint32_t', 'number'), param('std::string const &', 'name')])
    ## mcptt-entity-id.h (module 'psc'): std::string ns3::psc::McpttEntityId::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-entity-id.h (module 'psc'): uint32_t ns3::psc::McpttEntityId::GetNumber() const [member function]
    cls.add_method('GetNumber', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-entity-id.h (module 'psc'): void ns3::psc::McpttEntityId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-entity-id.h (module 'psc'): void ns3::psc::McpttEntityId::SetName(std::string const & name) [member function]
    cls.add_method('SetName', 
                   'void', 
                   [param('std::string const &', 'name')], 
                   is_virtual=True)
    ## mcptt-entity-id.h (module 'psc'): void ns3::psc::McpttEntityId::SetNumber(uint32_t number) [member function]
    cls.add_method('SetNumber', 
                   'void', 
                   [param('uint32_t', 'number')], 
                   is_virtual=True)
    ## mcptt-entity-id.h (module 'psc'): bool ns3::psc::McpttEntityId::IsEqualTo(ns3::psc::McpttEntityId const & other) const [member function]
    cls.add_method('IsEqualTo', 
                   'bool', 
                   [param('ns3::psc::McpttEntityId const &', 'other')], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3PscMcpttFloorMsgField_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgField::McpttFloorMsgField(ns3::psc::McpttFloorMsgField const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgField const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgField::McpttFloorMsgField() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgField::McpttFloorMsgField(uint8_t id, uint8_t length) [constructor]
    cls.add_constructor([param('uint8_t', 'id'), param('uint8_t', 'length')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgField::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgField::GetId() const [member function]
    cls.add_method('GetId', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgField::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgField::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgField::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgField::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgField::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgField::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgField::SetId(uint8_t id) [member function]
    cls.add_method('SetId', 
                   'void', 
                   [param('uint8_t', 'id')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgField::SetLength(uint8_t length) [member function]
    cls.add_method('SetLength', 
                   'void', 
                   [param('uint8_t', 'length')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgFieldDuration_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldDuration::McpttFloorMsgFieldDuration(ns3::psc::McpttFloorMsgFieldDuration const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldDuration const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldDuration::McpttFloorMsgFieldDuration() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldDuration::McpttFloorMsgFieldDuration(uint16_t duration) [constructor]
    cls.add_constructor([param('uint16_t', 'duration')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldDuration::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldDuration::GetDuration() const [member function]
    cls.add_method('GetDuration', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldDuration::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldDuration::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldDuration::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldDuration::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldDuration::SetDuration(uint16_t duration) [member function]
    cls.add_method('SetDuration', 
                   'void', 
                   [param('uint16_t', 'duration')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldGrantedPartyId_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldGrantedPartyId::McpttFloorMsgFieldGrantedPartyId(ns3::psc::McpttFloorMsgFieldGrantedPartyId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldGrantedPartyId const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldGrantedPartyId::McpttFloorMsgFieldGrantedPartyId() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldGrantedPartyId::McpttFloorMsgFieldGrantedPartyId(uint32_t partyId) [constructor]
    cls.add_constructor([param('uint32_t', 'partyId')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldGrantedPartyId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldGrantedPartyId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldGrantedPartyId::GetPartyId() const [member function]
    cls.add_method('GetPartyId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldGrantedPartyId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldGrantedPartyId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldGrantedPartyId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldGrantedPartyId::SetPartyId(uint32_t partyId) [member function]
    cls.add_method('SetPartyId', 
                   'void', 
                   [param('uint32_t', 'partyId')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldIndic_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::McpttFloorMsgFieldIndic(ns3::psc::McpttFloorMsgFieldIndic const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldIndic const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::McpttFloorMsgFieldIndic() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldIndic::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldIndic::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldIndic::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldIndic::Indicate(uint16_t pattern) [member function]
    cls.add_method('Indicate', 
                   'void', 
                   [param('uint16_t', 'pattern')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): bool ns3::psc::McpttFloorMsgFieldIndic::IsIndicated(uint16_t pattern) const [member function]
    cls.add_method('IsIndicated', 
                   'bool', 
                   [param('uint16_t', 'pattern')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldIndic::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldIndic::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldIndic::Unindicate(uint16_t pattern) [member function]
    cls.add_method('Unindicate', 
                   'void', 
                   [param('uint16_t', 'pattern')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::BROADCAST_CALL [variable]
    cls.add_static_attribute('BROADCAST_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::DUAL_FLOOR [variable]
    cls.add_static_attribute('DUAL_FLOOR', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::EMERGENCY_CALL [variable]
    cls.add_static_attribute('EMERGENCY_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::IMMINENT_CALL [variable]
    cls.add_static_attribute('IMMINENT_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::NORMAL_CALL [variable]
    cls.add_static_attribute('NORMAL_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::QUEUING_SUPP [variable]
    cls.add_static_attribute('QUEUING_SUPP', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::SYSTEM_CALL [variable]
    cls.add_static_attribute('SYSTEM_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::TEMPORARY_GROUP_CALL [variable]
    cls.add_static_attribute('TEMPORARY_GROUP_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldIndic::GetFlags() const [member function]
    cls.add_method('GetFlags', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldIndic::SetFlags(uint16_t flags) [member function]
    cls.add_method('SetFlags', 
                   'void', 
                   [param('uint16_t', 'flags')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgFieldPermToReq_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPermToReq::McpttFloorMsgFieldPermToReq(ns3::psc::McpttFloorMsgFieldPermToReq const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldPermToReq const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPermToReq::McpttFloorMsgFieldPermToReq() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPermToReq::McpttFloorMsgFieldPermToReq(uint16_t permission) [constructor]
    cls.add_constructor([param('uint16_t', 'permission')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldPermToReq::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldPermToReq::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldPermToReq::GetPermission() const [member function]
    cls.add_method('GetPermission', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldPermToReq::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPermToReq::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPermToReq::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPermToReq::SetPermission(uint16_t permission) [member function]
    cls.add_method('SetPermission', 
                   'void', 
                   [param('uint16_t', 'permission')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldPriority_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority::McpttFloorMsgFieldPriority(ns3::psc::McpttFloorMsgFieldPriority const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldPriority const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority::McpttFloorMsgFieldPriority() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority::McpttFloorMsgFieldPriority(uint8_t priority) [constructor]
    cls.add_constructor([param('uint8_t', 'priority')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldPriority::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldPriority::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldPriority::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldPriority::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPriority::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPriority::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPriority::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldQueuePositionInfo_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo::McpttFloorMsgFieldQueuePositionInfo(ns3::psc::McpttFloorMsgFieldQueuePositionInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldQueuePositionInfo const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo::McpttFloorMsgFieldQueuePositionInfo() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo::McpttFloorMsgFieldQueuePositionInfo(uint8_t position, uint8_t priority) [constructor]
    cls.add_constructor([param('uint8_t', 'position'), param('uint8_t', 'priority')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldQueuePositionInfo::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldQueuePositionInfo::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldQueuePositionInfo::GetPosition() const [member function]
    cls.add_method('GetPosition', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldQueuePositionInfo::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldQueuePositionInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuePositionInfo::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuePositionInfo::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuePositionInfo::SetPosition(uint8_t position) [member function]
    cls.add_method('SetPosition', 
                   'void', 
                   [param('uint8_t', 'position')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuePositionInfo::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldQueueSize_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueueSize::McpttFloorMsgFieldQueueSize(ns3::psc::McpttFloorMsgFieldQueueSize const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldQueueSize const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueueSize::McpttFloorMsgFieldQueueSize() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueueSize::McpttFloorMsgFieldQueueSize(uint16_t queueSize) [constructor]
    cls.add_constructor([param('uint16_t', 'queueSize')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldQueueSize::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldQueueSize::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldQueueSize::GetQueueSize() const [member function]
    cls.add_method('GetQueueSize', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldQueueSize::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueueSize::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueueSize::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueueSize::SetQueueSize(uint16_t queueSize) [member function]
    cls.add_method('SetQueueSize', 
                   'void', 
                   [param('uint16_t', 'queueSize')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldRejectCause_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::McpttFloorMsgFieldRejectCause(ns3::psc::McpttFloorMsgFieldRejectCause const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldRejectCause const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::McpttFloorMsgFieldRejectCause() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::McpttFloorMsgFieldRejectCause(uint16_t cause) [constructor]
    cls.add_constructor([param('uint16_t', 'cause')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldRejectCause::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldRejectCause::GetCause() const [member function]
    cls.add_method('GetCause', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldRejectCause::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldRejectCause::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldRejectCause::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldRejectCause::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldRejectCause::SetCause(uint16_t cause) [member function]
    cls.add_method('SetCause', 
                   'void', 
                   [param('uint16_t', 'cause')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_1 [variable]
    cls.add_static_attribute('CAUSE_1', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_2 [variable]
    cls.add_static_attribute('CAUSE_2', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_255 [variable]
    cls.add_static_attribute('CAUSE_255', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_3 [variable]
    cls.add_static_attribute('CAUSE_3', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_4 [variable]
    cls.add_static_attribute('CAUSE_4', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_5 [variable]
    cls.add_static_attribute('CAUSE_5', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_6 [variable]
    cls.add_static_attribute('CAUSE_6', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_7 [variable]
    cls.add_static_attribute('CAUSE_7', 'uint16_t const', is_const=True)
    return

def register_Ns3PscMcpttFloorMsgFieldSeqNum_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum::McpttFloorMsgFieldSeqNum(ns3::psc::McpttFloorMsgFieldSeqNum const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldSeqNum const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum::McpttFloorMsgFieldSeqNum() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum::McpttFloorMsgFieldSeqNum(uint16_t seqNum) [constructor]
    cls.add_constructor([param('uint16_t', 'seqNum')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldSeqNum::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldSeqNum::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldSeqNum::GetSeqNum() const [member function]
    cls.add_method('GetSeqNum', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldSeqNum::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSeqNum::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSeqNum::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSeqNum::SetSeqNum(uint16_t seqNum) [member function]
    cls.add_method('SetSeqNum', 
                   'void', 
                   [param('uint16_t', 'seqNum')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldSource_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::McpttFloorMsgFieldSource(ns3::psc::McpttFloorMsgFieldSource const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldSource const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::McpttFloorMsgFieldSource() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::McpttFloorMsgFieldSource(uint16_t source) [constructor]
    cls.add_constructor([param('uint16_t', 'source')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldSource::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldSource::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldSource::GetSource() const [member function]
    cls.add_method('GetSource', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldSource::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSource::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSource::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSource::SetSource(uint16_t source) [member function]
    cls.add_method('SetSource', 
                   'void', 
                   [param('uint16_t', 'source')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::CONTROLLING_FUNCTION [variable]
    cls.add_static_attribute('CONTROLLING_FUNCTION', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::FLOOR_PARTICIPANT [variable]
    cls.add_static_attribute('FLOOR_PARTICIPANT', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::NONCONTROLLING_FUNCTION [variable]
    cls.add_static_attribute('NONCONTROLLING_FUNCTION', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::PARTICIPATING_FUNCTION [variable]
    cls.add_static_attribute('PARTICIPATING_FUNCTION', 'uint16_t const', is_const=True)
    return

def register_Ns3PscMcpttFloorMsgFieldSsrc_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc::McpttFloorMsgFieldSsrc(ns3::psc::McpttFloorMsgFieldSsrc const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldSsrc const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc::McpttFloorMsgFieldSsrc() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc::McpttFloorMsgFieldSsrc(uint32_t ssrc) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldSsrc::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldSsrc::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldSsrc::GetSsrc() const [member function]
    cls.add_method('GetSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldSsrc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSsrc::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSsrc::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSsrc::SetSsrc(uint32_t ssrc) [member function]
    cls.add_method('SetSsrc', 
                   'void', 
                   [param('uint32_t', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc::McpttFloorMsgFieldSsrc(uint8_t id, uint8_t length, uint32_t ssrc) [constructor]
    cls.add_constructor([param('uint8_t', 'id'), param('uint8_t', 'length'), param('uint32_t', 'ssrc')], 
                        visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgFieldTrackInfo_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo::McpttFloorMsgFieldTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo::McpttFloorMsgFieldTrackInfo() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo::McpttFloorMsgFieldTrackInfo(uint8_t queueCap) [constructor]
    cls.add_constructor([param('uint8_t', 'queueCap')])
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::AddRef(uint32_t ref) [member function]
    cls.add_method('AddRef', 
                   'void', 
                   [param('uint32_t', 'ref')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::ClearRefs() [member function]
    cls.add_method('ClearRefs', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldTrackInfo::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldTrackInfo::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldTrackInfo::GetPtLength() const [member function]
    cls.add_method('GetPtLength', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldTrackInfo::GetPtLengthWithPadding() const [member function]
    cls.add_method('GetPtLengthWithPadding', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldTrackInfo::GetQueueCap() const [member function]
    cls.add_method('GetQueueCap', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): std::vector<unsigned int, std::allocator<unsigned int>> ns3::psc::McpttFloorMsgFieldTrackInfo::GetRefs() const [member function]
    cls.add_method('GetRefs', 
                   'std::vector< unsigned int >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldTrackInfo::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldTrackInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::SetQueueCap(uint8_t queueCap) [member function]
    cls.add_method('SetQueueCap', 
                   'void', 
                   [param('uint8_t', 'queueCap')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::UpdatePtLength(uint8_t ptLength) [member function]
    cls.add_method('UpdatePtLength', 
                   'void', 
                   [param('uint8_t', 'ptLength')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::SetPtLength(uint8_t ptLength) [member function]
    cls.add_method('SetPtLength', 
                   'void', 
                   [param('uint8_t', 'ptLength')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::SetRefs(std::vector<unsigned int, std::allocator<unsigned int>> const refs) [member function]
    cls.add_method('SetRefs', 
                   'void', 
                   [param('std::vector< unsigned int > const', 'refs')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgFieldType_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldType::McpttFloorMsgFieldType(ns3::psc::McpttFloorMsgFieldType const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldType const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldType::McpttFloorMsgFieldType() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldType::McpttFloorMsgFieldType(uint8_t msgType) [constructor]
    cls.add_constructor([param('uint8_t', 'msgType')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldType::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldType::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldType::GetMsgType() const [member function]
    cls.add_method('GetMsgType', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldType::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldType::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldType::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldType::SetMsgType(uint8_t msgType) [member function]
    cls.add_method('SetMsgType', 
                   'void', 
                   [param('uint8_t', 'msgType')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldUserId_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId::McpttFloorMsgFieldUserId(ns3::psc::McpttFloorMsgFieldUserId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldUserId const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId::McpttFloorMsgFieldUserId() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId::McpttFloorMsgFieldUserId(uint32_t userId) [constructor]
    cls.add_constructor([param('uint32_t', 'userId')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldUserId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldUserId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldUserId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldUserId::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldUserId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldUserId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldUserId::SetUserId(uint32_t userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId::McpttFloorMsgFieldUserId(uint8_t id, uint8_t length, uint16_t userId) [constructor]
    cls.add_constructor([param('uint8_t', 'id'), param('uint8_t', 'length'), param('uint16_t', 'userId')], 
                        visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgSink_methods(root_module, cls):
    ## mcptt-floor-msg-sink.h (module 'psc'): ns3::psc::McpttFloorMsgSink::McpttFloorMsgSink(ns3::psc::McpttFloorMsgSink const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgSink const &', 'arg0')])
    ## mcptt-floor-msg-sink.h (module 'psc'): ns3::psc::McpttFloorMsgSink::McpttFloorMsgSink() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::Receive(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorAck(ns3::psc::McpttFloorMsgAck const & msg) [member function]
    cls.add_method('ReceiveFloorAck', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorDeny(ns3::psc::McpttFloorMsgDeny const & msg) [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorGranted(ns3::psc::McpttFloorMsgGranted const & msg) [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorIdle(ns3::psc::McpttFloorMsgIdle const & msg) [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorQueuePositionInfo(ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorQueuePositionRequest(ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorRelease(ns3::psc::McpttFloorMsgRelease const & msg) [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorRevoke(ns3::psc::McpttFloorMsgRevoke const & msg) [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorTaken(ns3::psc::McpttFloorMsgTaken const & msg) [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorParticipant_methods(root_module, cls):
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::McpttFloorParticipant(ns3::psc::McpttFloorParticipant const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorParticipant const &', 'arg0')])
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::McpttFloorParticipant() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::AcceptGrant() [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorParticipant::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorParticipant::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-participant.h (module 'psc'): bool ns3::psc::McpttFloorParticipant::HasFloor() const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): bool ns3::psc::McpttFloorParticipant::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::MediaReady(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::ReleaseRequest() [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::SendFloorQueuePositionRequest() [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::SetFloorGrantedCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const floorGrantedCb) [member function]
    cls.add_method('SetFloorGrantedCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'floorGrantedCb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::SetOriginator(bool const & originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('bool const &', 'originator')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::PTT_BUTTON_PUSHED [variable]
    cls.add_static_attribute('PTT_BUTTON_PUSHED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::PTT_BUTTON_RELEASED [variable]
    cls.add_static_attribute('PTT_BUTTON_RELEASED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_DENY [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_DENY', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_GRANTED [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_GRANTED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_IDLE [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_IDLE', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_QUEUE [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_QUEUE', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_REVOKED [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_REVOKED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_TAKEN [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_TAKEN', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T100_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T100_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T100_EXPIRED_N_TIMES [variable]
    cls.add_static_attribute('TIMER_T100_EXPIRED_N_TIMES', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T101_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T101_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T101_EXPIRED_N_TIMES [variable]
    cls.add_static_attribute('TIMER_T101_EXPIRED_N_TIMES', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T103_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T103_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T104_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T104_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T104_EXPIRED_N_TIMES [variable]
    cls.add_static_attribute('TIMER_T104_EXPIRED_N_TIMES', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T132_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T132_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T203_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T203_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T204_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T204_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T204_EXPIRED_N_TIMES [variable]
    cls.add_static_attribute('TIMER_T204_EXPIRED_N_TIMES', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T233_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T233_EXPIRED', 'char const * const', is_const=True)
    return

def register_Ns3PscMcpttFloorParticipantNull_methods(root_module, cls):
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipantNull::McpttFloorParticipantNull(ns3::psc::McpttFloorParticipantNull const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorParticipantNull const &', 'arg0')])
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipantNull::McpttFloorParticipantNull() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::AcceptGrant() [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorParticipantNull::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorParticipantNull::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-participant.h (module 'psc'): bool ns3::psc::McpttFloorParticipantNull::HasFloor() const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): bool ns3::psc::McpttFloorParticipantNull::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::MediaReady(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::ReleaseRequest() [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::SendFloorQueuePositionRequest() [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::SetFloorGrantedCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const floorGrantedCb) [member function]
    cls.add_method('SetFloorGrantedCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'floorGrantedCb')], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::SetOriginator(bool const & originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('bool const &', 'originator')], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorQueue_methods(root_module, cls):
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttFloorQueue::McpttFloorQueue(ns3::psc::McpttFloorQueue const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorQueue const &', 'arg0')])
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttFloorQueue::McpttFloorQueue(uint16_t capacity=0) [constructor]
    cls.add_constructor([param('uint16_t', 'capacity', default_value='0')])
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttFloorQueue::McpttFloorQueue(std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo>> const & users, uint16_t capacity=0) [constructor]
    cls.add_constructor([param('std::list< ns3::psc::McpttQueuedUserInfo > const &', 'users'), param('uint16_t', 'capacity', default_value='0')])
    ## mcptt-floor-queue.h (module 'psc'): void ns3::psc::McpttFloorQueue::Clear() [member function]
    cls.add_method('Clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::Contains(uint32_t userId) const [member function]
    cls.add_method('Contains', 
                   'bool', 
                   [param('uint32_t', 'userId')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttQueuedUserInfo ns3::psc::McpttFloorQueue::Dequeue() [member function]
    cls.add_method('Dequeue', 
                   'ns3::psc::McpttQueuedUserInfo', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): void ns3::psc::McpttFloorQueue::Enqueue(ns3::psc::McpttQueuedUserInfo & user) [member function]
    cls.add_method('Enqueue', 
                   'void', 
                   [param('ns3::psc::McpttQueuedUserInfo &', 'user')], 
                   is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): uint16_t ns3::psc::McpttFloorQueue::Find(uint32_t userId) const [member function]
    cls.add_method('Find', 
                   'uint16_t', 
                   [param('uint32_t', 'userId')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): uint16_t ns3::psc::McpttFloorQueue::GetCount() const [member function]
    cls.add_method('GetCount', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorQueue::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorQueue::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::IsAtCapacity() const [member function]
    cls.add_method('IsAtCapacity', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::IsEnabled() const [member function]
    cls.add_method('IsEnabled', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttQueuedUserInfo ns3::psc::McpttFloorQueue::Peek() const [member function]
    cls.add_method('Peek', 
                   'ns3::psc::McpttQueuedUserInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::Pull(uint32_t userId) [member function]
    cls.add_method('Pull', 
                   'bool', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): void ns3::psc::McpttFloorQueue::UpdateUsers(std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo>> const & users) [member function]
    cls.add_method('UpdateUsers', 
                   'void', 
                   [param('std::list< ns3::psc::McpttQueuedUserInfo > const &', 'users')], 
                   is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::View(uint32_t userId, ns3::psc::McpttQueuedUserInfo & info, uint16_t & position) const [member function]
    cls.add_method('View', 
                   'bool', 
                   [param('uint32_t', 'userId'), param('ns3::psc::McpttQueuedUserInfo &', 'info'), param('uint16_t &', 'position')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo>> ns3::psc::McpttFloorQueue::ViewUsers() const [member function]
    cls.add_method('ViewUsers', 
                   'std::list< ns3::psc::McpttQueuedUserInfo >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): void ns3::psc::McpttFloorQueue::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttHelper_methods(root_module, cls):
    ## mcptt-helper.h (module 'psc'): ns3::psc::McpttHelper::McpttHelper(ns3::psc::McpttHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttHelper const &', 'arg0')])
    ## mcptt-helper.h (module 'psc'): ns3::psc::McpttHelper::McpttHelper() [constructor]
    cls.add_constructor([])
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::AddPushersToOrchestrator(ns3::Ptr<ns3::psc::McpttPusherOrchestratorInterface> orchestrator, ns3::ApplicationContainer const & apps) [member function]
    cls.add_method('AddPushersToOrchestrator', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusherOrchestratorInterface >', 'orchestrator'), param('ns3::ApplicationContainer const &', 'apps')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): static void ns3::psc::McpttHelper::EnableLogComponents() [member function]
    cls.add_method('EnableLogComponents', 
                   'void', 
                   [], 
                   is_static=True)
    ## mcptt-helper.h (module 'psc'): static uint32_t ns3::psc::McpttHelper::GetNextUserId() [member function]
    cls.add_method('GetNextUserId', 
                   'uint32_t', 
                   [], 
                   is_static=True)
    ## mcptt-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::McpttHelper::Install(ns3::NodeContainer const & c) [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::NodeContainer const &', 'c')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::McpttHelper::Install(ns3::Ptr<ns3::Node> const & node) [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::Ptr< ns3::Node > const &', 'node')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::McpttHelper::Install(std::string const & nodeName) [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('std::string const &', 'nodeName')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::SetMediaSrc(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetMediaSrc', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::SetPttApp(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetPttApp', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::SetPusher(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetPusher', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::SetPusherPttDurationVariable(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetPusherPttDurationVariable', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::SetPusherPttInterarrivalTimeVariable(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetPusherPttInterarrivalTimeVariable', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): ns3::Ptr<ns3::Application> ns3::psc::McpttHelper::InstallPriv(ns3::Ptr<ns3::Node> const & node) [member function]
    cls.add_method('InstallPriv', 
                   'ns3::Ptr< ns3::Application >', 
                   [param('ns3::Ptr< ns3::Node > const &', 'node')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttMediaSink_methods(root_module, cls):
    ## mcptt-media-sink.h (module 'psc'): ns3::psc::McpttMediaSink::McpttMediaSink(ns3::psc::McpttMediaSink const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttMediaSink const &', 'arg0')])
    ## mcptt-media-sink.h (module 'psc'): bool ns3::psc::McpttMediaSink::TakeSendReq(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('TakeSendReq', 
                   'bool', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-media-sink.h (module 'psc'): ns3::psc::McpttMediaSink::McpttMediaSink() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttMediaSrc_methods(root_module, cls):
    ## mcptt-media-src.h (module 'psc'): ns3::psc::McpttMediaSrc::McpttMediaSrc(ns3::psc::McpttMediaSrc const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttMediaSrc const &', 'arg0')])
    ## mcptt-media-src.h (module 'psc'): ns3::psc::McpttMediaSrc::McpttMediaSrc() [constructor]
    cls.add_constructor([])
    ## mcptt-media-src.h (module 'psc'): ns3::psc::McpttMediaSink * ns3::psc::McpttMediaSrc::GetSink() const [member function]
    cls.add_method('GetSink', 
                   'ns3::psc::McpttMediaSink *', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): uint16_t ns3::psc::McpttMediaSrc::GetTotalBytes() const [member function]
    cls.add_method('GetTotalBytes', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): static ns3::TypeId ns3::psc::McpttMediaSrc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-media-src.h (module 'psc'): bool ns3::psc::McpttMediaSrc::HasSink() [member function]
    cls.add_method('HasSink', 
                   'bool', 
                   [], 
                   is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): bool ns3::psc::McpttMediaSrc::IsMakingReq() const [member function]
    cls.add_method('IsMakingReq', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::SetSink(ns3::psc::McpttMediaSink * const & sink) [member function]
    cls.add_method('SetSink', 
                   'void', 
                   [param('ns3::psc::McpttMediaSink * const &', 'sink')], 
                   is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::StartMakingReq() [member function]
    cls.add_method('StartMakingReq', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::StopMakingReq() [member function]
    cls.add_method('StopMakingReq', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::AddToTotalBytes(uint16_t numBytes) [member function]
    cls.add_method('AddToTotalBytes', 
                   'void', 
                   [param('uint16_t', 'numBytes')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::CancelRequest() [member function]
    cls.add_method('CancelRequest', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): ns3::Time ns3::psc::McpttMediaSrc::GetLastReq() const [member function]
    cls.add_method('GetLastReq', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): ns3::EventId ns3::psc::McpttMediaSrc::GetReqEvent() const [member function]
    cls.add_method('GetReqEvent', 
                   'ns3::EventId', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::MakeRequest() [member function]
    cls.add_method('MakeRequest', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::ScheduleNextReq() [member function]
    cls.add_method('ScheduleNextReq', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::SetLastReq(ns3::Time const & lastReq) [member function]
    cls.add_method('SetLastReq', 
                   'void', 
                   [param('ns3::Time const &', 'lastReq')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::SetReqEvent(ns3::EventId const & reqEvent) [member function]
    cls.add_method('SetReqEvent', 
                   'void', 
                   [param('ns3::EventId const &', 'reqEvent')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::SetTotalBytes(uint16_t totalBytes) [member function]
    cls.add_method('SetTotalBytes', 
                   'void', 
                   [param('uint16_t', 'totalBytes')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttMsg_methods(root_module, cls):
    ## mcptt-msg.h (module 'psc'): ns3::psc::McpttMsg::McpttMsg(ns3::psc::McpttMsg const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttMsg const &', 'arg0')])
    ## mcptt-msg.h (module 'psc'): uint32_t ns3::psc::McpttMsg::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttMsg::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-msg.h (module 'psc'): uint32_t ns3::psc::McpttMsg::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttMsg::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-msg.h (module 'psc'): bool ns3::psc::McpttMsg::IsA(ns3::TypeId const & type) const [member function]
    cls.add_method('IsA', 
                   'bool', 
                   [param('ns3::TypeId const &', 'type')], 
                   is_const=True, is_virtual=True)
    ## mcptt-msg.h (module 'psc'): void ns3::psc::McpttMsg::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-msg.h (module 'psc'): void ns3::psc::McpttMsg::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-msg.h (module 'psc'): ns3::psc::McpttMsg::McpttMsg() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttMsgStats_methods(root_module, cls):
    ## mcptt-msg-stats.h (module 'psc'): static ns3::TypeId ns3::psc::McpttMsgStats::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-msg-stats.h (module 'psc'): ns3::psc::McpttMsgStats::McpttMsgStats() [constructor]
    cls.add_constructor([])
    ## mcptt-msg-stats.h (module 'psc'): void ns3::psc::McpttMsgStats::ReceiveRxTrace(ns3::Ptr<const ns3::Application> app, uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('ReceiveRxTrace', 
                   'void', 
                   [param('ns3::Ptr< ns3::Application const >', 'app'), param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')], 
                   is_virtual=True)
    ## mcptt-msg-stats.h (module 'psc'): void ns3::psc::McpttMsgStats::ReceiveTxTrace(ns3::Ptr<const ns3::Application> app, uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('ReceiveTxTrace', 
                   'void', 
                   [param('ns3::Ptr< ns3::Application const >', 'app'), param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')], 
                   is_virtual=True)
    ## mcptt-msg-stats.h (module 'psc'): void ns3::psc::McpttMsgStats::Trace(ns3::Ptr<const ns3::Application> app, uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType, bool rx) [member function]
    cls.add_method('Trace', 
                   'void', 
                   [param('ns3::Ptr< ns3::Application const >', 'app'), param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType'), param('bool', 'rx')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOffNetworkFloorParticipant_methods(root_module, cls):
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipant::McpttOffNetworkFloorParticipant(ns3::psc::McpttOffNetworkFloorParticipant const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipant const &', 'arg0')])
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipant::McpttOffNetworkFloorParticipant() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::AcceptGrant() [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ChangeState(ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ClearCandidateSsrc() [member function]
    cls.add_method('ClearCandidateSsrc', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ClearCurrentSsrc() [member function]
    cls.add_method('ClearCurrentSsrc', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOffNetworkFloorParticipant::GetC201() const [member function]
    cls.add_method('GetC201', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOffNetworkFloorParticipant::GetC204() const [member function]
    cls.add_method('GetC204', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOffNetworkFloorParticipant::GetC205() const [member function]
    cls.add_method('GetC205', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttOffNetworkFloorParticipant::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): uint8_t ns3::psc::McpttOffNetworkFloorParticipant::GetCallTypeId() const [member function]
    cls.add_method('GetCallTypeId', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): uint32_t ns3::psc::McpttOffNetworkFloorParticipant::GetCandidateSsrc() const [member function]
    cls.add_method('GetCandidateSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): uint32_t ns3::psc::McpttOffNetworkFloorParticipant::GetCurrentSsrc() const [member function]
    cls.add_method('GetCurrentSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttOffNetworkFloorParticipant::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::TypeId ns3::psc::McpttOffNetworkFloorParticipant::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttFloorMsgGranted ns3::psc::McpttOffNetworkFloorParticipant::GetLastGrantMsg() const [member function]
    cls.add_method('GetLastGrantMsg', 
                   'ns3::psc::McpttFloorMsgGranted', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::GetOriginator() const [member function]
    cls.add_method('GetOriginator', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): uint8_t ns3::psc::McpttOffNetworkFloorParticipant::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttFloorQueue> ns3::psc::McpttOffNetworkFloorParticipant::GetQueue() const [member function]
    cls.add_method('GetQueue', 
                   'ns3::Ptr< ns3::psc::McpttFloorQueue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Time ns3::psc::McpttOffNetworkFloorParticipant::GetSetupDelayStartTime() const [member function]
    cls.add_method('GetSetupDelayStartTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantState> ns3::psc::McpttOffNetworkFloorParticipant::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipant::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT201() const [member function]
    cls.add_method('GetT201', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT203() const [member function]
    cls.add_method('GetT203', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT204() const [member function]
    cls.add_method('GetT204', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT205() const [member function]
    cls.add_method('GetT205', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT206() const [member function]
    cls.add_method('GetT206', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT207() const [member function]
    cls.add_method('GetT207', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT230() const [member function]
    cls.add_method('GetT230', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT233() const [member function]
    cls.add_method('GetT233', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): uint32_t ns3::psc::McpttOffNetworkFloorParticipant::GetTxSsrc() const [member function]
    cls.add_method('GetTxSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOffNetworkFloorParticipant::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::HasCandidateSsrc() const [member function]
    cls.add_method('HasCandidateSsrc', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::HasCurrentSsrc() const [member function]
    cls.add_method('HasCurrentSsrc', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::HasFloor() const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::IsOriginator() const [member function]
    cls.add_method('IsOriginator', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::MediaReady(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::NotifyFloorGranted() [member function]
    cls.add_method('NotifyFloorGranted', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::Receive(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorAck(ns3::psc::McpttFloorMsgAck const & msg) [member function]
    cls.add_method('ReceiveFloorAck', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorDeny(ns3::psc::McpttFloorMsgDeny const & msg) [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorGranted(ns3::psc::McpttFloorMsgGranted const & msg) [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorIdle(ns3::psc::McpttFloorMsgIdle const & msg) [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorQueuePositionInfo(ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorQueuePositionRequest(ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorRelease(ns3::psc::McpttFloorMsgRelease const & msg) [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorRevoke(ns3::psc::McpttFloorMsgRevoke const & msg) [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorTaken(ns3::psc::McpttFloorMsgTaken const & msg) [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReleaseRequest() [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReportEvent(char const * reason) const [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('char const *', 'reason')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ResetCounters() [member function]
    cls.add_method('ResetCounters', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::Send(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SendFloorQueuePositionRequest() [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetC201(ns3::Ptr<ns3::psc::McpttCounter> c201) [member function]
    cls.add_method('SetC201', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'c201')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetC204(ns3::Ptr<ns3::psc::McpttCounter> c204) [member function]
    cls.add_method('SetC204', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'c204')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetC205(ns3::Ptr<ns3::psc::McpttCounter> c205) [member function]
    cls.add_method('SetC205', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'c205')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetCandidateSsrc(uint32_t candidateSsrc) [member function]
    cls.add_method('SetCandidateSsrc', 
                   'void', 
                   [param('uint32_t', 'candidateSsrc')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetCurrentSsrc(uint32_t currentSsrc) [member function]
    cls.add_method('SetCurrentSsrc', 
                   'void', 
                   [param('uint32_t', 'currentSsrc')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT201(ns3::Time const & delayT201) [member function]
    cls.add_method('SetDelayT201', 
                   'void', 
                   [param('ns3::Time const &', 'delayT201')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT203(ns3::Time const & delayT203) [member function]
    cls.add_method('SetDelayT203', 
                   'void', 
                   [param('ns3::Time const &', 'delayT203')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT204(ns3::Time const & delayT204) [member function]
    cls.add_method('SetDelayT204', 
                   'void', 
                   [param('ns3::Time const &', 'delayT204')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT205(ns3::Time const & delayT205) [member function]
    cls.add_method('SetDelayT205', 
                   'void', 
                   [param('ns3::Time const &', 'delayT205')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT206(ns3::Time const & delayT206) [member function]
    cls.add_method('SetDelayT206', 
                   'void', 
                   [param('ns3::Time const &', 'delayT206')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT207(ns3::Time const & delayT207) [member function]
    cls.add_method('SetDelayT207', 
                   'void', 
                   [param('ns3::Time const &', 'delayT207')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT230(ns3::Time const & delayT230) [member function]
    cls.add_method('SetDelayT230', 
                   'void', 
                   [param('ns3::Time const &', 'delayT230')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT233(ns3::Time const & delayT233) [member function]
    cls.add_method('SetDelayT233', 
                   'void', 
                   [param('ns3::Time const &', 'delayT233')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetFloorGrantedCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const floorGrantedCb) [member function]
    cls.add_method('SetFloorGrantedCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'floorGrantedCb')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetLastGrantMsg(ns3::psc::McpttFloorMsgGranted const & msg) [member function]
    cls.add_method('SetLastGrantMsg', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetLimitC201(uint32_t limitC201) [member function]
    cls.add_method('SetLimitC201', 
                   'void', 
                   [param('uint32_t', 'limitC201')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetLimitC204(uint32_t limitC204) [member function]
    cls.add_method('SetLimitC204', 
                   'void', 
                   [param('uint32_t', 'limitC204')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetLimitC205(uint32_t limitC205) [member function]
    cls.add_method('SetLimitC205', 
                   'void', 
                   [param('uint32_t', 'limitC205')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetOriginator(bool const & originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('bool const &', 'originator')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetQueue(ns3::Ptr<ns3::psc::McpttFloorQueue> queue) [member function]
    cls.add_method('SetQueue', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttFloorQueue >', 'queue')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetSetupDelayCb(ns3::Callback<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const setupDelayCb) [member function]
    cls.add_method('SetSetupDelayCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Time const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'setupDelayCb')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetSetupDelayStartTime(ns3::Time const & startTime) [member function]
    cls.add_method('SetSetupDelayStartTime', 
                   'void', 
                   [param('ns3::Time const &', 'startTime')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetState(ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT201(ns3::Ptr<ns3::psc::McpttTimer> t201) [member function]
    cls.add_method('SetT201', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't201')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT203(ns3::Ptr<ns3::psc::McpttTimer> t203) [member function]
    cls.add_method('SetT203', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't203')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT204(ns3::Ptr<ns3::psc::McpttTimer> t204) [member function]
    cls.add_method('SetT204', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't204')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT205(ns3::Ptr<ns3::psc::McpttTimer> t205) [member function]
    cls.add_method('SetT205', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't205')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT206(ns3::Ptr<ns3::psc::McpttTimer> t206) [member function]
    cls.add_method('SetT206', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't206')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT207(ns3::Ptr<ns3::psc::McpttTimer> t207) [member function]
    cls.add_method('SetT207', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't207')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT230(ns3::Ptr<ns3::psc::McpttTimer> t230) [member function]
    cls.add_method('SetT230', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't230')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT233(ns3::Ptr<ns3::psc::McpttTimer> t233) [member function]
    cls.add_method('SetT233', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't233')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::ShouldGenMedia() const [member function]
    cls.add_method('ShouldGenMedia', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::StopTimers() [member function]
    cls.add_method('StopTimers', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT201() [member function]
    cls.add_method('ExpiryOfT201', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT203() [member function]
    cls.add_method('ExpiryOfT203', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT204() [member function]
    cls.add_method('ExpiryOfT204', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT205() [member function]
    cls.add_method('ExpiryOfT205', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT206() [member function]
    cls.add_method('ExpiryOfT206', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT207() [member function]
    cls.add_method('ExpiryOfT207', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT230() [member function]
    cls.add_method('ExpiryOfT230', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT233() [member function]
    cls.add_method('ExpiryOfT233', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantState::McpttOffNetworkFloorParticipantState(ns3::psc::McpttOffNetworkFloorParticipantState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantState const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::AcceptGrant(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT201(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT201', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT203(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT203', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT204(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT204', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT205(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT205', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT206(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT206', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT207(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT207', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT230(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT230', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT233(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT233', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipantState::HasFloor(ns3::psc::McpttOffNetworkFloorParticipant const & floorMachine) const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant const &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::MediaReady(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::PttPush(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::PttRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveCallRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ReceiveCallRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorDeny(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorQueuePositionRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorTaken(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReleaseRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::Selected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::SendFloorQueuePositionRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::Start(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Start', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::Stop(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Stop', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::Unselected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantState::McpttOffNetworkFloorParticipantState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStateHasPerm_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::McpttOffNetworkFloorParticipantStateHasPerm(ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::McpttOffNetworkFloorParticipantStateHasPerm() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::ExpiryOfT206(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT206', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::ExpiryOfT207(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT207', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm> ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::HasFloor(ns3::psc::McpttOffNetworkFloorParticipant const & floorMachine) const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant const &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::MediaReady(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::PttRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::ReceiveFloorQueuePositionRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::ReceiveFloorRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::ReceiveFloorRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::Selected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::Unselected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStateNoPerm_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::McpttOffNetworkFloorParticipantStateNoPerm(ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::McpttOffNetworkFloorParticipantStateNoPerm() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::ExpiryOfT203(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT203', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm> ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::PttPush(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::ReceiveFloorRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::Selected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStatePendGrant_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::McpttOffNetworkFloorParticipantStatePendGrant(ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::McpttOffNetworkFloorParticipantStatePendGrant() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::ExpiryOfT205(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT205', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::ExpiryOfT233(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT233', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant> ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::HasFloor(ns3::psc::McpttOffNetworkFloorParticipant const & floorMachine) const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant const &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::ReceiveFloorRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::ReceiveFloorRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::Unselected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStatePendReq_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::McpttOffNetworkFloorParticipantStatePendReq(ns3::psc::McpttOffNetworkFloorParticipantStatePendReq const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStatePendReq const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::McpttOffNetworkFloorParticipantStatePendReq() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ExpiryOfT201(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT201', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStatePendReq> ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStatePendReq >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::PttRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveFloorDeny(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveFloorRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveFloorTaken(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStateQueued_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateQueued::McpttOffNetworkFloorParticipantStateQueued(ns3::psc::McpttOffNetworkFloorParticipantStateQueued const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStateQueued const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateQueued::McpttOffNetworkFloorParticipantStateQueued() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::AcceptGrant(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ExpiryOfT203(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT203', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ExpiryOfT204(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT204', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ExpiryOfT233(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT233', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStateQueued> ns3::psc::McpttOffNetworkFloorParticipantStateQueued::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStateQueued >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateQueued::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateQueued::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ReceiveFloorDeny(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ReleaseRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::SendFloorQueuePositionRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStateSilence_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateSilence::McpttOffNetworkFloorParticipantStateSilence(ns3::psc::McpttOffNetworkFloorParticipantStateSilence const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStateSilence const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateSilence::McpttOffNetworkFloorParticipantStateSilence() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::ExpiryOfT230(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT230', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStateSilence> ns3::psc::McpttOffNetworkFloorParticipantStateSilence::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStateSilence >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateSilence::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateSilence::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::PttPush(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::ReceiveFloorRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::ReceiveFloorTaken(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::Selected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStateStartStop_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::McpttOffNetworkFloorParticipantStateStartStop(ns3::psc::McpttOffNetworkFloorParticipantStateStartStop const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStateStartStop const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::McpttOffNetworkFloorParticipantStateStartStop() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStateStartStop> ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStateStartStop >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::PttPush(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::ReceiveFloorTaken(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::Start(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Start', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkCallMachineClient_methods(root_module, cls):
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClient::McpttOnNetworkCallMachineClient(ns3::psc::McpttOnNetworkCallMachineClient const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClient const &', 'arg0')])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClient::McpttOnNetworkCallMachineClient() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): int64_t ns3::psc::McpttOnNetworkCallMachineClient::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkCallMachineClient::GetByePayloadSize() [member function]
    cls.add_method('GetByePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttOnNetworkCallMachineClient::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttOnNetworkCallMachineClient::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttOnNetworkCallMachineClient::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkCallMachineClient::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttOnNetworkCallMachineClient::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::TypeId ns3::psc::McpttOnNetworkCallMachineClient::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkCallMachineClient::GetInvitePayloadSize() [member function]
    cls.add_method('GetInvitePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkCallMachineClient::GetResponsePayloadSize() [member function]
    cls.add_method('GetResponsePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientState> ns3::psc::McpttOnNetworkCallMachineClient::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClient::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOnNetworkCallMachineClient::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): bool ns3::psc::McpttOnNetworkCallMachineClient::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): bool ns3::psc::McpttOnNetworkCallMachineClient::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): bool ns3::psc::McpttOnNetworkCallMachineClient::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::ReceiveCallPacket(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveCallPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::Send(ns3::psc::McpttCallMsg const & hdr) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetState(ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkCallMachineClientState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientState::McpttOnNetworkCallMachineClientState(ns3::psc::McpttOnNetworkCallMachineClientState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClientState const &', 'arg0')])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientState::InitiateCall(ns3::psc::McpttOnNetworkCallMachineClient & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkCallMachineClientState::IsCallOngoing(ns3::psc::McpttOnNetworkCallMachineClient const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientState::ReceiveBye(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientState::ReceiveInvite(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientState::ReceiveResponse(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientState::ReleaseCall(ns3::psc::McpttOnNetworkCallMachineClient & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientState::McpttOnNetworkCallMachineClientState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkCallMachineClientStateS1_methods(root_module, cls):
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS1::McpttOnNetworkCallMachineClientStateS1(ns3::psc::McpttOnNetworkCallMachineClientStateS1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClientStateS1 const &', 'arg0')])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS1::McpttOnNetworkCallMachineClientStateS1() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientStateS1> ns3::psc::McpttOnNetworkCallMachineClientStateS1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientStateS1 >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS1::InitiateCall(ns3::psc::McpttOnNetworkCallMachineClient & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS1::ReceiveInvite(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkCallMachineClientStateS2_methods(root_module, cls):
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS2::McpttOnNetworkCallMachineClientStateS2(ns3::psc::McpttOnNetworkCallMachineClientStateS2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClientStateS2 const &', 'arg0')])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS2::McpttOnNetworkCallMachineClientStateS2() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientStateS2> ns3::psc::McpttOnNetworkCallMachineClientStateS2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientStateS2 >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS2::ReceiveBye(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS2::ReceiveInvite(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS2::ReceiveResponse(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS2::ReleaseCall(ns3::psc::McpttOnNetworkCallMachineClient & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkCallMachineClientStateS3_methods(root_module, cls):
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS3::McpttOnNetworkCallMachineClientStateS3(ns3::psc::McpttOnNetworkCallMachineClientStateS3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClientStateS3 const &', 'arg0')])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS3::McpttOnNetworkCallMachineClientStateS3() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientStateS3> ns3::psc::McpttOnNetworkCallMachineClientStateS3::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientStateS3 >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS3::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS3::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkCallMachineClientStateS3::IsCallOngoing(ns3::psc::McpttOnNetworkCallMachineClient const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS3::ReceiveBye(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS3::ReceiveResponse(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS3::ReleaseCall(ns3::psc::McpttOnNetworkCallMachineClient & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkCallMachineClientStateS4_methods(root_module, cls):
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS4::McpttOnNetworkCallMachineClientStateS4(ns3::psc::McpttOnNetworkCallMachineClientStateS4 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClientStateS4 const &', 'arg0')])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS4::McpttOnNetworkCallMachineClientStateS4() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientStateS4> ns3::psc::McpttOnNetworkCallMachineClientStateS4::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientStateS4 >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS4::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS4::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS4::ReceiveBye(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS4::ReceiveResponse(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitrator_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitrator::McpttOnNetworkFloorArbitrator(ns3::psc::McpttOnNetworkFloorArbitrator const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitrator const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitrator::McpttOnNetworkFloorArbitrator() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::AddParticipant(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> participant) [member function]
    cls.add_method('AddParticipant', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'participant')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::CallInitialized(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> participant, bool implicitRequest) [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'participant'), param('bool', 'implicitRequest')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::CallRelease1() [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::CallRelease2() [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ChangeState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ClientRelease() [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOnNetworkFloorArbitrator::GetC20() const [member function]
    cls.add_method('GetC20', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOnNetworkFloorArbitrator::GetC7() const [member function]
    cls.add_method('GetC7', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControl> ns3::psc::McpttOnNetworkFloorArbitrator::GetDualControl() const [member function]
    cls.add_method('GetDualControl', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControl >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttOnNetworkFloorArbitrator::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::TypeId ns3::psc::McpttOnNetworkFloorArbitrator::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorArbitrator::GetNParticipants() const [member function]
    cls.add_method('GetNParticipants', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> ns3::psc::McpttOnNetworkFloorArbitrator::GetOriginatingParticipant() const [member function]
    cls.add_method('GetOriginatingParticipant', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCall> ns3::psc::McpttOnNetworkFloorArbitrator::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttServerCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> ns3::psc::McpttOnNetworkFloorArbitrator::GetParticipant(uint32_t index) const [member function]
    cls.add_method('GetParticipant', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 
                   [param('uint32_t', 'index')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> ns3::psc::McpttOnNetworkFloorArbitrator::GetParticipantBySsrc(uint32_t const ssrc) const [member function]
    cls.add_method('GetParticipantBySsrc', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 
                   [param('uint32_t const', 'ssrc')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> ns3::psc::McpttOnNetworkFloorArbitrator::GetParticipantByUserId(uint32_t userId) const [member function]
    cls.add_method('GetParticipantByUserId', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 
                   [param('uint32_t', 'userId')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttFloorQueue> ns3::psc::McpttOnNetworkFloorArbitrator::GetQueue() const [member function]
    cls.add_method('GetQueue', 
                   'ns3::Ptr< ns3::psc::McpttFloorQueue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint16_t ns3::psc::McpttOnNetworkFloorArbitrator::GetRejectCause() const [member function]
    cls.add_method('GetRejectCause', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitrator::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint8_t ns3::psc::McpttOnNetworkFloorArbitrator::GetStoredPriority() const [member function]
    cls.add_method('GetStoredPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorArbitrator::GetStoredSsrc() const [member function]
    cls.add_method('GetStoredSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT1() const [member function]
    cls.add_method('GetT1', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT2() const [member function]
    cls.add_method('GetT2', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT20() const [member function]
    cls.add_method('GetT20', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT3() const [member function]
    cls.add_method('GetT3', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT4() const [member function]
    cls.add_method('GetT4', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT7() const [member function]
    cls.add_method('GetT7', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttOnNetworkFloorArbitrator::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorArbitrator::GetTxSsrc() const [member function]
    cls.add_method('GetTxSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOnNetworkFloorArbitrator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsAckRequired() const [member function]
    cls.add_method('IsAckRequired', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsAudioCutIn() const [member function]
    cls.add_method('IsAudioCutIn', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsDualFloor() const [member function]
    cls.add_method('IsDualFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsDualFloorSupported() const [member function]
    cls.add_method('IsDualFloorSupported', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsFloorOccupied() const [member function]
    cls.add_method('IsFloorOccupied', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsPreemptive(ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('IsPreemptive', 
                   'bool', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsQueueingSupported() const [member function]
    cls.add_method('IsQueueingSupported', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint16_t ns3::psc::McpttOnNetworkFloorArbitrator::NextSeqNum() [member function]
    cls.add_method('NextSeqNum', 
                   'uint16_t', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ReceiveFloorRelease(ns3::psc::McpttFloorMsgRelease const & msg) [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ReceiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SendTo(ns3::psc::McpttMsg & msg, uint32_t const ssrc) [member function]
    cls.add_method('SendTo', 
                   'void', 
                   [param('ns3::psc::McpttMsg &', 'msg'), param('uint32_t const', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SendToAll(ns3::psc::McpttMsg & msg) [member function]
    cls.add_method('SendToAll', 
                   'void', 
                   [param('ns3::psc::McpttMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SendToAllExcept(ns3::psc::McpttMsg & msg, uint32_t const ssrc) [member function]
    cls.add_method('SendToAllExcept', 
                   'void', 
                   [param('ns3::psc::McpttMsg &', 'msg'), param('uint32_t const', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT1(ns3::Time const & delayT1) [member function]
    cls.add_method('SetDelayT1', 
                   'void', 
                   [param('ns3::Time const &', 'delayT1')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT2(ns3::Time const & delayT2) [member function]
    cls.add_method('SetDelayT2', 
                   'void', 
                   [param('ns3::Time const &', 'delayT2')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT20(ns3::Time const & delayT20) [member function]
    cls.add_method('SetDelayT20', 
                   'void', 
                   [param('ns3::Time const &', 'delayT20')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT3(ns3::Time const & delayT3) [member function]
    cls.add_method('SetDelayT3', 
                   'void', 
                   [param('ns3::Time const &', 'delayT3')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT4(ns3::Time const & delayT4) [member function]
    cls.add_method('SetDelayT4', 
                   'void', 
                   [param('ns3::Time const &', 'delayT4')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT7(ns3::Time const & delayT7) [member function]
    cls.add_method('SetDelayT7', 
                   'void', 
                   [param('ns3::Time const &', 'delayT7')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDualControl(ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControl> const dualControl) [member function]
    cls.add_method('SetDualControl', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControl > const', 'dualControl')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetLimitC20(uint32_t limitC20) [member function]
    cls.add_method('SetLimitC20', 
                   'void', 
                   [param('uint32_t', 'limitC20')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetLimitC7(uint32_t limitC7) [member function]
    cls.add_method('SetLimitC7', 
                   'void', 
                   [param('uint32_t', 'limitC7')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetOwner(ns3::Ptr<ns3::psc::McpttServerCall> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCall >', 'owner')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetRejectCause(uint16_t const rejectCause) [member function]
    cls.add_method('SetRejectCause', 
                   'void', 
                   [param('uint16_t const', 'rejectCause')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetStoredPriority(uint8_t storedPriority) [member function]
    cls.add_method('SetStoredPriority', 
                   'void', 
                   [param('uint8_t', 'storedPriority')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetStoredSsrc(uint32_t const storedSsrc) [member function]
    cls.add_method('SetStoredSsrc', 
                   'void', 
                   [param('uint32_t const', 'storedSsrc')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT1() [member function]
    cls.add_method('ExpiryOfT1', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT2() [member function]
    cls.add_method('ExpiryOfT2', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT20() [member function]
    cls.add_method('ExpiryOfT20', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT3() [member function]
    cls.add_method('ExpiryOfT3', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT4() [member function]
    cls.add_method('ExpiryOfT4', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT7() [member function]
    cls.add_method('ExpiryOfT7', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorState::McpttOnNetworkFloorArbitratorState(ns3::psc::McpttOnNetworkFloorArbitratorState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorState const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::CallInitialized(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> participant) const [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'participant')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::CallRelease1(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::CallRelease2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ClientRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT1(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT20(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT20', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT3(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT4(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT4', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT7(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT7', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitratorState::IsFloorOccupied() const [member function]
    cls.add_method('IsFloorOccupied', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::Selected(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::Unselected(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorState::McpttOnNetworkFloorArbitratorState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateIdle_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::McpttOnNetworkFloorArbitratorStateIdle(ns3::psc::McpttOnNetworkFloorArbitratorStateIdle const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateIdle const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::McpttOnNetworkFloorArbitratorStateIdle() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::ExpiryOfT4(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT4', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::ExpiryOfT7(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT7', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateIdle> ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateIdle >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateInitialising_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::McpttOnNetworkFloorArbitratorStateInitialising(ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::McpttOnNetworkFloorArbitratorStateInitialising() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising> ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateReleasing_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::McpttOnNetworkFloorArbitratorStateReleasing(ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::McpttOnNetworkFloorArbitratorStateReleasing() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::CallRelease2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing> ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateRevoke_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::McpttOnNetworkFloorArbitratorStateRevoke(ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::McpttOnNetworkFloorArbitratorStateRevoke() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::ExpiryOfT1(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::ExpiryOfT3(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke> ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::IsFloorOccupied() const [member function]
    cls.add_method('IsFloorOccupied', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateStartStop_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::McpttOnNetworkFloorArbitratorStateStartStop(ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::McpttOnNetworkFloorArbitratorStateStartStop() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::CallInitialized(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> participant) const [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'participant')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop> ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateTaken_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::McpttOnNetworkFloorArbitratorStateTaken(ns3::psc::McpttOnNetworkFloorArbitratorStateTaken const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateTaken const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::McpttOnNetworkFloorArbitratorStateTaken() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ClientRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ExpiryOfT1(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ExpiryOfT2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ExpiryOfT20(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT20', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateTaken> ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateTaken >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::IsFloorOccupied() const [member function]
    cls.add_method('IsFloorOccupied', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorDualControl_methods(root_module, cls):
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControl::McpttOnNetworkFloorDualControl(ns3::psc::McpttOnNetworkFloorDualControl const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorDualControl const &', 'arg0')])
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControl::McpttOnNetworkFloorDualControl() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::CallRelease1() [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::CallRelease2() [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ChangeState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControlState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControlState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ClientRelease() [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::TypeId ns3::psc::McpttOnNetworkFloorDualControl::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> ns3::psc::McpttOnNetworkFloorDualControl::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControl::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): uint8_t ns3::psc::McpttOnNetworkFloorDualControl::GetStoredPriority() const [member function]
    cls.add_method('GetStoredPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorDualControl::GetStoredSsrc() const [member function]
    cls.add_method('GetStoredSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorDualControl::GetT11() const [member function]
    cls.add_method('GetT11', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorDualControl::GetT12() const [member function]
    cls.add_method('GetT12', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttOnNetworkFloorDualControl::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOnNetworkFloorDualControl::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorDualControl::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ReceiveFloorRelease(ns3::psc::McpttFloorMsgRelease const & msg) [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ReceiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ReceivePreemptiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceivePreemptiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetDelayT11(ns3::Time const & delayT11) [member function]
    cls.add_method('SetDelayT11', 
                   'void', 
                   [param('ns3::Time const &', 'delayT11')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetDelayT12(ns3::Time const & delayT12) [member function]
    cls.add_method('SetDelayT12', 
                   'void', 
                   [param('ns3::Time const &', 'delayT12')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetOwner(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'owner')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControlState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControlState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetStoredPriority(uint8_t storedPriority) [member function]
    cls.add_method('SetStoredPriority', 
                   'void', 
                   [param('uint8_t', 'storedPriority')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetStoredSsrc(uint32_t const storedSsrc) [member function]
    cls.add_method('SetStoredSsrc', 
                   'void', 
                   [param('uint32_t const', 'storedSsrc')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::Terminate() [member function]
    cls.add_method('Terminate', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ExpiryOfT11() [member function]
    cls.add_method('ExpiryOfT11', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ExpiryOfT12() [member function]
    cls.add_method('ExpiryOfT12', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorDualControlState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlState::McpttOnNetworkFloorDualControlState(ns3::psc::McpttOnNetworkFloorDualControlState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorDualControlState const &', 'arg0')])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::CallRelease1(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::CallRelease2(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ClientRelease(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::Enter(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ExpiryOfT11(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ExpiryOfT11', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ExpiryOfT12(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ExpiryOfT12', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ReceiveFloorRelease(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ReceiveFloorRequest(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ReceiveMedia(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ReceivePreemptiveFloorRequest(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceivePreemptiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::Selected(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::Terminate(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Terminate', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::Unselected(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlState::McpttOnNetworkFloorDualControlState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorDualControlStateReleasing_methods(root_module, cls):
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::McpttOnNetworkFloorDualControlStateReleasing(ns3::psc::McpttOnNetworkFloorDualControlStateReleasing const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorDualControlStateReleasing const &', 'arg0')])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::McpttOnNetworkFloorDualControlStateReleasing() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::CallRelease2(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControlStateReleasing> ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControlStateReleasing >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorDualControlStateStartStop_methods(root_module, cls):
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::McpttOnNetworkFloorDualControlStateStartStop(ns3::psc::McpttOnNetworkFloorDualControlStateStartStop const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorDualControlStateStartStop const &', 'arg0')])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::McpttOnNetworkFloorDualControlStateStartStop() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControlStateStartStop> ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControlStateStartStop >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::ReceivePreemptiveFloorRequest(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceivePreemptiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorDualControlStateTaken_methods(root_module, cls):
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateTaken::McpttOnNetworkFloorDualControlStateTaken(ns3::psc::McpttOnNetworkFloorDualControlStateTaken const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorDualControlStateTaken const &', 'arg0')])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateTaken::McpttOnNetworkFloorDualControlStateTaken() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ClientRelease(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::Enter(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ExpiryOfT11(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ExpiryOfT11', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ExpiryOfT12(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ExpiryOfT12', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControlStateTaken> ns3::psc::McpttOnNetworkFloorDualControlStateTaken::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControlStateTaken >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateTaken::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateTaken::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ReceiveFloorRelease(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ReceiveFloorRequest(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ReceiveMedia(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::Terminate(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Terminate', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipant_methods(root_module, cls):
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipant::McpttOnNetworkFloorParticipant(ns3::psc::McpttOnNetworkFloorParticipant const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipant const &', 'arg0')])
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipant::McpttOnNetworkFloorParticipant() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::AcceptGrant() [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::CallEstablished(ns3::psc::McpttSdpFmtpHeader const & sdpHeader) [member function]
    cls.add_method('CallEstablished', 
                   'void', 
                   [param('ns3::psc::McpttSdpFmtpHeader const &', 'sdpHeader')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::CallInitiated() [member function]
    cls.add_method('CallInitiated', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::CallRelease1() [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::CallRelease2() [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ChangeState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::FloorGranted() [member function]
    cls.add_method('FloorGranted', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOnNetworkFloorParticipant::GetC100() const [member function]
    cls.add_method('GetC100', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOnNetworkFloorParticipant::GetC101() const [member function]
    cls.add_method('GetC101', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOnNetworkFloorParticipant::GetC104() const [member function]
    cls.add_method('GetC104', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttOnNetworkFloorParticipant::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): uint8_t ns3::psc::McpttOnNetworkFloorParticipant::GetCallTypeId() const [member function]
    cls.add_method('GetCallTypeId', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttOnNetworkFloorParticipant::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::TypeId ns3::psc::McpttOnNetworkFloorParticipant::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): uint8_t ns3::psc::McpttOnNetworkFloorParticipant::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantState> ns3::psc::McpttOnNetworkFloorParticipant::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipant::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::Packet> ns3::psc::McpttOnNetworkFloorParticipant::GetStoredMsgs() const [member function]
    cls.add_method('GetStoredMsgs', 
                   'ns3::Ptr< ns3::Packet >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorParticipant::GetT100() const [member function]
    cls.add_method('GetT100', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorParticipant::GetT101() const [member function]
    cls.add_method('GetT101', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorParticipant::GetT103() const [member function]
    cls.add_method('GetT103', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorParticipant::GetT104() const [member function]
    cls.add_method('GetT104', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorParticipant::GetT132() const [member function]
    cls.add_method('GetT132', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorParticipant::GetTxSsrc() const [member function]
    cls.add_method('GetTxSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOnNetworkFloorParticipant::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::HasFloor() const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsAckRequired() const [member function]
    cls.add_method('IsAckRequired', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsDualFloor() const [member function]
    cls.add_method('IsDualFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsGranted() const [member function]
    cls.add_method('IsGranted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsImplicitRequest() const [member function]
    cls.add_method('IsImplicitRequest', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsOriginator() const [member function]
    cls.add_method('IsOriginator', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsOverridden() const [member function]
    cls.add_method('IsOverridden', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsOverriding() const [member function]
    cls.add_method('IsOverriding', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::MediaReady(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::Receive(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorAck(ns3::psc::McpttFloorMsgAck const & msg) [member function]
    cls.add_method('ReceiveFloorAck', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorDeny(ns3::psc::McpttFloorMsgDeny const & msg) [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorGranted(ns3::psc::McpttFloorMsgGranted const & msg) [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorIdle(ns3::psc::McpttFloorMsgIdle const & msg) [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorQueuePositionInfo(ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorRevoke(ns3::psc::McpttFloorMsgRevoke const & msg) [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorTaken(ns3::psc::McpttFloorMsgTaken const & msg) [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReleaseRequest() [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReportEvent(char const * reason) const [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('char const *', 'reason')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::Send(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SendFloorQueuePositionRequest() [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDelayT100(ns3::Time const & delayT100) [member function]
    cls.add_method('SetDelayT100', 
                   'void', 
                   [param('ns3::Time const &', 'delayT100')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDelayT101(ns3::Time const & delayT101) [member function]
    cls.add_method('SetDelayT101', 
                   'void', 
                   [param('ns3::Time const &', 'delayT101')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDelayT103(ns3::Time const & delayT103) [member function]
    cls.add_method('SetDelayT103', 
                   'void', 
                   [param('ns3::Time const &', 'delayT103')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDelayT104(ns3::Time const & delayT104) [member function]
    cls.add_method('SetDelayT104', 
                   'void', 
                   [param('ns3::Time const &', 'delayT104')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDelayT132(ns3::Time const & delayT132) [member function]
    cls.add_method('SetDelayT132', 
                   'void', 
                   [param('ns3::Time const &', 'delayT132')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDualFloor(bool const & dualFloor) [member function]
    cls.add_method('SetDualFloor', 
                   'void', 
                   [param('bool const &', 'dualFloor')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetFloorGrantedCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const floorGrantedCb) [member function]
    cls.add_method('SetFloorGrantedCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'floorGrantedCb')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetLimitC100(uint32_t limitC100) [member function]
    cls.add_method('SetLimitC100', 
                   'void', 
                   [param('uint32_t', 'limitC100')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetLimitC101(uint32_t limitC101) [member function]
    cls.add_method('SetLimitC101', 
                   'void', 
                   [param('uint32_t', 'limitC101')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetLimitC104(uint32_t limitC104) [member function]
    cls.add_method('SetLimitC104', 
                   'void', 
                   [param('uint32_t', 'limitC104')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetOriginator(bool const & originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('bool const &', 'originator')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetOverridden(bool const & overridden) [member function]
    cls.add_method('SetOverridden', 
                   'void', 
                   [param('bool const &', 'overridden')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetOverriding(bool const & overriding) [member function]
    cls.add_method('SetOverriding', 
                   'void', 
                   [param('bool const &', 'overriding')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::ShouldGenMedia() const [member function]
    cls.add_method('ShouldGenMedia', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ExpiryOfT100() [member function]
    cls.add_method('ExpiryOfT100', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ExpiryOfT101() [member function]
    cls.add_method('ExpiryOfT101', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ExpiryOfT103() [member function]
    cls.add_method('ExpiryOfT103', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ExpiryOfT104() [member function]
    cls.add_method('ExpiryOfT104', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ExpiryOfT132() [member function]
    cls.add_method('ExpiryOfT132', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantState::McpttOnNetworkFloorParticipantState(ns3::psc::McpttOnNetworkFloorParticipantState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantState const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::AcceptGrant(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::CallEstablished(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallEstablished', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::CallInitiated(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallInitiated', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::CallRelease1(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::CallRelease2(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ExpiryOfT100(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT100', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ExpiryOfT101(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT101', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ExpiryOfT103(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT103', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ExpiryOfT104(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT104', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ExpiryOfT132(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT132', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): std::string ns3::psc::McpttOnNetworkFloorParticipantState::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipantState::HasFloor(ns3::psc::McpttOnNetworkFloorParticipant const & machine) const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::MediaReady(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::PttPush(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::PttRelease(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorAck(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgAck const & msg) const [member function]
    cls.add_method('ReceiveFloorAck', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgAck const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorDeny(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReleaseRequest(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::Selected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::SendFloorQueuePositionRequest(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::Unselected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantState::McpttOnNetworkFloorParticipantState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStateHasNoPermission_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::McpttOnNetworkFloorParticipantStateHasNoPermission(ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::McpttOnNetworkFloorParticipantStateHasNoPermission() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::ExpiryOfT103(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT103', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission> ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::PttPush(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::Selected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStateHasPermission_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::McpttOnNetworkFloorParticipantStateHasPermission(ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::McpttOnNetworkFloorParticipantStateHasPermission() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission> ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::HasFloor(ns3::psc::McpttOnNetworkFloorParticipant const & machine) const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::MediaReady(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::PttRelease(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::Selected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::Unselected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStatePendingRelease_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::McpttOnNetworkFloorParticipantStatePendingRelease(ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::McpttOnNetworkFloorParticipantStatePendingRelease() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ExpiryOfT100(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT100', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease> ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStatePendingRequest_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::McpttOnNetworkFloorParticipantStatePendingRequest(ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::McpttOnNetworkFloorParticipantStatePendingRequest() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ExpiryOfT101(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT101', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest> ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::PttRelease(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ReceiveFloorDeny(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::Selected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStateQueued_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateQueued::McpttOnNetworkFloorParticipantStateQueued(ns3::psc::McpttOnNetworkFloorParticipantStateQueued const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStateQueued const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateQueued::McpttOnNetworkFloorParticipantStateQueued() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::AcceptGrant(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ExpiryOfT104(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT104', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ExpiryOfT132(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT132', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStateQueued> ns3::psc::McpttOnNetworkFloorParticipantStateQueued::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStateQueued >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateQueued::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateQueued::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::PttRelease(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorDeny(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::SendFloorQueuePositionRequest(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStateReleasing_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::McpttOnNetworkFloorParticipantStateReleasing(ns3::psc::McpttOnNetworkFloorParticipantStateReleasing const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStateReleasing const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::McpttOnNetworkFloorParticipantStateReleasing() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::CallRelease2(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStateReleasing> ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStateReleasing >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStateStartStop_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::McpttOnNetworkFloorParticipantStateStartStop(ns3::psc::McpttOnNetworkFloorParticipantStateStartStop const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStateStartStop const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::McpttOnNetworkFloorParticipantStateStartStop() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::CallEstablished(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallEstablished', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::CallInitiated(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallInitiated', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStateStartStop> ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStateStartStop >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::PttPush(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorAck(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgAck const & msg) const [member function]
    cls.add_method('ReceiveFloorAck', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgAck const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorDeny(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipant_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipant::McpttOnNetworkFloorTowardsParticipant(ns3::psc::McpttOnNetworkFloorTowardsParticipant const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipant const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipant::McpttOnNetworkFloorTowardsParticipant() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::CallInitialized(bool implicitRequest) [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('bool', 'implicitRequest')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::CallRelease1() [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::CallRelease2() [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ChangeState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ClientRelease() [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::DoSend(ns3::psc::McpttMsg & msg) [member function]
    cls.add_method('DoSend', 
                   'void', 
                   [param('ns3::psc::McpttMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetFloorChannel() const [member function]
    cls.add_method('GetFloorChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): uint16_t ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetFloorPort() const [member function]
    cls.add_method('GetFloorPort', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::TypeId ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetMediaChannel() const [member function]
    cls.add_method('GetMediaChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): uint16_t ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetMediaPort() const [member function]
    cls.add_method('GetMediaPort', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::Address ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetPeerAddress() const [member function]
    cls.add_method('GetPeerAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetPeerUserId() const [member function]
    cls.add_method('GetPeerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttFloorMsgRevoke ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetRevokeMsg() const [member function]
    cls.add_method('GetRevokeMsg', 
                   'ns3::psc::McpttFloorMsgRevoke', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): uint8_t ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetStoredPriority() const [member function]
    cls.add_method('GetStoredPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetStoredSsrc() const [member function]
    cls.add_method('GetStoredSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetT8() const [member function]
    cls.add_method('GetT8', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsDualFloor() const [member function]
    cls.add_method('IsDualFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsImplicitRequest() const [member function]
    cls.add_method('IsImplicitRequest', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsOriginator() const [member function]
    cls.add_method('IsOriginator', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsOverridden() const [member function]
    cls.add_method('IsOverridden', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsOverriding() const [member function]
    cls.add_method('IsOverriding', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsQueueing() const [member function]
    cls.add_method('IsQueueing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsReceiveOnly() const [member function]
    cls.add_method('IsReceiveOnly', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Receive(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveFloorQueuePositionRequest(ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveFloorRelease(ns3::psc::McpttFloorMsgRelease const & msg) [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Send(ns3::psc::McpttMsg & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetDelayT8(ns3::Time const & delayT8) [member function]
    cls.add_method('SetDelayT8', 
                   'void', 
                   [param('ns3::Time const &', 'delayT8')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetDualFloor(bool const dualFloor) [member function]
    cls.add_method('SetDualFloor', 
                   'void', 
                   [param('bool const', 'dualFloor')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetFloorChannel(ns3::Ptr<ns3::psc::McpttChannel> const floorChannel) [member function]
    cls.add_method('SetFloorChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttChannel > const', 'floorChannel')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetFloorPort(uint16_t const floorPort) [member function]
    cls.add_method('SetFloorPort', 
                   'void', 
                   [param('uint16_t const', 'floorPort')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetMediaChannel(ns3::Ptr<ns3::psc::McpttChannel> const mediaChannel) [member function]
    cls.add_method('SetMediaChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttChannel > const', 'mediaChannel')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetMediaPort(uint16_t const mediaPort) [member function]
    cls.add_method('SetMediaPort', 
                   'void', 
                   [param('uint16_t const', 'mediaPort')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetOriginator(bool const originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('bool const', 'originator')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetOverridden(bool const overridden) [member function]
    cls.add_method('SetOverridden', 
                   'void', 
                   [param('bool const', 'overridden')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetOverriding(bool const overriding) [member function]
    cls.add_method('SetOverriding', 
                   'void', 
                   [param('bool const', 'overriding')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetOwner(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'owner')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetPeerAddress(ns3::Address const & peerAddress) [member function]
    cls.add_method('SetPeerAddress', 
                   'void', 
                   [param('ns3::Address const &', 'peerAddress')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetPeerUserId(uint32_t userId) [member function]
    cls.add_method('SetPeerUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetRevokeMsg(ns3::psc::McpttFloorMsgRevoke const & revokeMsg) [member function]
    cls.add_method('SetRevokeMsg', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRevoke const &', 'revokeMsg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetStoredPriority(uint8_t storedPriority) [member function]
    cls.add_method('SetStoredPriority', 
                   'void', 
                   [param('uint8_t', 'storedPriority')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetStoredSsrc(uint32_t const storedSsrc) [member function]
    cls.add_method('SetStoredSsrc', 
                   'void', 
                   [param('uint32_t const', 'storedSsrc')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Terminate() [member function]
    cls.add_method('Terminate', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ExpiryOfT8() [member function]
    cls.add_method('ExpiryOfT8', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveFloorPkt(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceiveFloorPkt', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveMediaPkt(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceiveMediaPkt', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendFloorDeny(ns3::psc::McpttFloorMsgDeny & msg) [member function]
    cls.add_method('SendFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgDeny &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendFloorGranted(ns3::psc::McpttFloorMsgGranted & msg) [member function]
    cls.add_method('SendFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgGranted &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendFloorIdle(ns3::psc::McpttFloorMsgIdle & msg) [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendFloorRevoke(ns3::psc::McpttFloorMsgRevoke & msg) [member function]
    cls.add_method('SendFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRevoke &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendFloorTaken(ns3::psc::McpttFloorMsgTaken & msg) [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendMedia(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('SendMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantState::McpttOnNetworkFloorTowardsParticipantState(ns3::psc::McpttOnNetworkFloorTowardsParticipantState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantState const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::CallInitialized(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::CallRelease1(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::CallRelease2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ClientRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ExpiryOfT8(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('ExpiryOfT8', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ReceiveFloorQueuePositionRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::Selected(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendFloorDeny(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgDeny & msg) const [member function]
    cls.add_method('SendFloorDeny', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgDeny &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendFloorGranted(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgGranted & msg) const [member function]
    cls.add_method('SendFloorGranted', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgGranted &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendFloorRevoke(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRevoke & msg) const [member function]
    cls.add_method('SendFloorRevoke', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRevoke &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('SendMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::Terminate(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Terminate', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::Unselected(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantState::McpttOnNetworkFloorTowardsParticipantState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::SendFloorDeny(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgDeny & msg) const [member function]
    cls.add_method('SendFloorDeny', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgDeny &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::SendFloorGranted(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgGranted & msg) const [member function]
    cls.add_method('SendFloorGranted', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgGranted &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::SendFloorGranted(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgGranted & msg) const [member function]
    cls.add_method('SendFloorGranted', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgGranted &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::ExpiryOfT8(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('ExpiryOfT8', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::ReceiveFloorQueuePositionRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::SendFloorGranted(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgGranted & msg) const [member function]
    cls.add_method('SendFloorGranted', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgGranted &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStatePendingRevoke_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke(ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::ExpiryOfT8(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('ExpiryOfT8', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke> ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStatePermitted_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::McpttOnNetworkFloorTowardsParticipantStatePermitted(ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::McpttOnNetworkFloorTowardsParticipantStatePermitted() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted> ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::SendFloorRevoke(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRevoke & msg) const [member function]
    cls.add_method('SendFloorRevoke', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRevoke &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::SendMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('SendMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateReleasing_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::McpttOnNetworkFloorTowardsParticipantStateReleasing(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::McpttOnNetworkFloorTowardsParticipantStateReleasing() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::CallRelease2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateStartStop_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::McpttOnNetworkFloorTowardsParticipantStateStartStop(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::McpttOnNetworkFloorTowardsParticipantStateStartStop() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::CallInitialized(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttPttApp_methods(root_module, cls):
    ## mcptt-ptt-app.h (module 'psc'): ns3::psc::McpttPttApp::McpttPttApp(ns3::psc::McpttPttApp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPttApp const &', 'arg0')])
    ## mcptt-ptt-app.h (module 'psc'): ns3::psc::McpttPttApp::McpttPttApp() [constructor]
    cls.add_constructor([])
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::AcceptFloorGrant() [member function]
    cls.add_method('AcceptFloorGrant', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::AddCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('AddCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')])
    ## mcptt-ptt-app.h (module 'psc'): static uint16_t ns3::psc::McpttPttApp::AllocateNextPortNumber() [member function]
    cls.add_method('AllocateNextPortNumber', 
                   'uint16_t', 
                   [], 
                   is_static=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::CloseCallChannel(uint16_t port, ns3::Ptr<ns3::psc::McpttCall> call, ns3::psc::McpttCall::NetworkCallType callType) [member function]
    cls.add_method('CloseCallChannel', 
                   'void', 
                   [param('uint16_t', 'port'), param('ns3::Ptr< ns3::psc::McpttCall >', 'call'), param('ns3::psc::McpttCall::NetworkCallType', 'callType')])
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttPttApp::CreateCall(ns3::ObjectFactory & callFac, ns3::ObjectFactory & floorFac, ns3::psc::McpttCall::NetworkCallType callType) [member function]
    cls.add_method('CreateCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [param('ns3::ObjectFactory &', 'callFac'), param('ns3::ObjectFactory &', 'floorFac'), param('ns3::psc::McpttCall::NetworkCallType', 'callType')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttPttApp::CreateCall(ns3::ObjectFactory & callFac, ns3::ObjectFactory & floorFac, ns3::psc::McpttCall::NetworkCallType callType, uint16_t callId) [member function]
    cls.add_method('CreateCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [param('ns3::ObjectFactory &', 'callFac'), param('ns3::ObjectFactory &', 'floorFac'), param('ns3::psc::McpttCall::NetworkCallType', 'callType'), param('uint16_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttPttApp::GetCallChannel(uint16_t port) const [member function]
    cls.add_method('GetCallChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [param('uint16_t', 'port')], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): std::map<unsigned short, ns3::Ptr<ns3::psc::McpttCall>, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::Ptr<ns3::psc::McpttCall>>>> ns3::psc::McpttPttApp::GetCalls() const [member function]
    cls.add_method('GetCalls', 
                   'std::map< unsigned short, ns3::Ptr< ns3::psc::McpttCall > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): static uint16_t ns3::psc::McpttPttApp::GetCurrentPortNumber() [member function]
    cls.add_method('GetCurrentPortNumber', 
                   'uint16_t', 
                   [], 
                   is_static=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Address ns3::psc::McpttPttApp::GetLocalAddress() const [member function]
    cls.add_method('GetLocalAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttMediaSrc> ns3::psc::McpttPttApp::GetMediaSrc() const [member function]
    cls.add_method('GetMediaSrc', 
                   'ns3::Ptr< ns3::psc::McpttMediaSrc >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Vector ns3::psc::McpttPttApp::GetNodeLoc() const [member function]
    cls.add_method('GetNodeLoc', 
                   'ns3::Vector', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttPusher> ns3::psc::McpttPttApp::GetPusher() const [member function]
    cls.add_method('GetPusher', 
                   'ns3::Ptr< ns3::psc::McpttPusher >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttPttApp::GetSelectedCall() const [member function]
    cls.add_method('GetSelectedCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::sip::SipAgent> ns3::psc::McpttPttApp::GetSipAgent() const [member function]
    cls.add_method('GetSipAgent', 
                   'ns3::Ptr< ns3::sip::SipAgent >', 
                   [], 
                   is_const=True)
    ## mcptt-ptt-app.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPttApp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-ptt-app.h (module 'psc'): uint32_t ns3::psc::McpttPttApp::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): bool ns3::psc::McpttPttApp::HasGrpCallFor(uint32_t grpId) [member function]
    cls.add_method('HasGrpCallFor', 
                   'bool', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): bool ns3::psc::McpttPttApp::HasPrivateCallFor(uint32_t userId) [member function]
    cls.add_method('HasPrivateCallFor', 
                   'bool', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): bool ns3::psc::McpttPttApp::IsPushed() const [member function]
    cls.add_method('IsPushed', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): bool ns3::psc::McpttPttApp::IsRunning() const [member function]
    cls.add_method('IsRunning', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::NotifyPushed() [member function]
    cls.add_method('NotifyPushed', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::NotifyReleased() [member function]
    cls.add_method('NotifyReleased', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::OpenCallChannel(uint16_t port, ns3::Ptr<ns3::psc::McpttCall> call, ns3::psc::McpttCall::NetworkCallType callType) [member function]
    cls.add_method('OpenCallChannel', 
                   'void', 
                   [param('uint16_t', 'port'), param('ns3::Ptr< ns3::psc::McpttCall >', 'call'), param('ns3::psc::McpttCall::NetworkCallType', 'callType')])
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::ReleaseCallByCallId(uint32_t callId) [member function]
    cls.add_method('ReleaseCallByCallId', 
                   'void', 
                   [param('uint32_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::ReleaseRequest() [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::ReportEvent(uint16_t callId, char const * reason) [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('uint16_t', 'callId'), param('char const *', 'reason')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SelectCall(uint32_t callId, bool pushOnSelect=false) [member function]
    cls.add_method('SelectCall', 
                   'void', 
                   [param('uint32_t', 'callId'), param('bool', 'pushOnSelect', default_value='false')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SessionInitiateRequest() [member function]
    cls.add_method('SessionInitiateRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SessionReleaseRequest() [member function]
    cls.add_method('SessionReleaseRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetFloorGrantedCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const floorGrantedCb) [member function]
    cls.add_method('SetFloorGrantedCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'floorGrantedCb')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetLocalAddress(ns3::Address const & localAddress) [member function]
    cls.add_method('SetLocalAddress', 
                   'void', 
                   [param('ns3::Address const &', 'localAddress')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetMediaSrc(ns3::Ptr<ns3::psc::McpttMediaSrc> mediaSrc) [member function]
    cls.add_method('SetMediaSrc', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttMediaSrc >', 'mediaSrc')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('SetPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetSelectedCallChangeCb(ns3::Callback<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const selectedCallChangeCb) [member function]
    cls.add_method('SetSelectedCallChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::psc::McpttCall >, ns3::Ptr< ns3::psc::McpttCall >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'selectedCallChangeCb')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetUserId(uint32_t userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::TakePushNotification() [member function]
    cls.add_method('TakePushNotification', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::TakeReleaseNotification() [member function]
    cls.add_method('TakeReleaseNotification', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): bool ns3::psc::McpttPttApp::TakeSendReq(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('TakeSendReq', 
                   'bool', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::TraceMessageReceive(uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('TraceMessageReceive', 
                   'void', 
                   [param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')])
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::TraceMessageSend(uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('TraceMessageSend', 
                   'void', 
                   [param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')])
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::psc::McpttPttApp::CALL_SELECTED [variable]
    cls.add_static_attribute('CALL_SELECTED', 'char const * const', is_const=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::FloorGrantedCb() [member function]
    cls.add_method('FloorGrantedCb', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::NewCallCb(uint16_t callId) [member function]
    cls.add_method('NewCallCb', 
                   'void', 
                   [param('uint16_t', 'callId')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::Receive(ns3::Ptr<ns3::Packet> pkt, ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::ReceiveOffNetworkCallPacket(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceiveOffNetworkCallPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttPusher_methods(root_module, cls):
    ## mcptt-pusher.h (module 'psc'): ns3::psc::McpttPusher::McpttPusher(ns3::psc::McpttPusher const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusher const &', 'arg0')])
    ## mcptt-pusher.h (module 'psc'): ns3::psc::McpttPusher::McpttPusher() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::CancelPush() [member function]
    cls.add_method('CancelPush', 
                   'bool', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::CancelRelease() [member function]
    cls.add_method('CancelRelease', 
                   'bool', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): ns3::Ptr<ns3::psc::McpttPttApp> ns3::psc::McpttPusher::GetPttApp() const [member function]
    cls.add_method('GetPttApp', 
                   'ns3::Ptr< ns3::psc::McpttPttApp >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusher::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::IsPushing() const [member function]
    cls.add_method('IsPushing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::NotifyPushed() [member function]
    cls.add_method('NotifyPushed', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::NotifyReleased() [member function]
    cls.add_method('NotifyReleased', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::Push() [member function]
    cls.add_method('Push', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::Release() [member function]
    cls.add_method('Release', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::SchedulePush() [member function]
    cls.add_method('SchedulePush', 
                   'bool', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::SchedulePush(ns3::Time const & delay) [member function]
    cls.add_method('SchedulePush', 
                   'bool', 
                   [param('ns3::Time const &', 'delay')], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::ScheduleRelease() [member function]
    cls.add_method('ScheduleRelease', 
                   'bool', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::ScheduleRelease(ns3::Time const & delay) [member function]
    cls.add_method('ScheduleRelease', 
                   'bool', 
                   [param('ns3::Time const &', 'delay')], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::SetPttApp(ns3::Ptr<ns3::psc::McpttPttApp> pttApp) [member function]
    cls.add_method('SetPttApp', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPttApp >', 'pttApp')], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::CancelEvents() [member function]
    cls.add_method('CancelEvents', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::SetPushing(bool pushing) [member function]
    cls.add_method('SetPushing', 
                   'void', 
                   [param('bool', 'pushing')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttPusherOrchestratorInterface_methods(root_module, cls):
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): ns3::psc::McpttPusherOrchestratorInterface::McpttPusherOrchestratorInterface(ns3::psc::McpttPusherOrchestratorInterface const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusherOrchestratorInterface const &', 'arg0')])
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): ns3::psc::McpttPusherOrchestratorInterface::McpttPusherOrchestratorInterface() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::AddPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('AddPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): int64_t ns3::psc::McpttPusherOrchestratorInterface::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher>>> ns3::psc::McpttPusherOrchestratorInterface::GetActivePushers() const [member function]
    cls.add_method('GetActivePushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher>>> ns3::psc::McpttPusherOrchestratorInterface::GetPushers() const [member function]
    cls.add_method('GetPushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusherOrchestratorInterface::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorInterface::NextPttDuration() [member function]
    cls.add_method('NextPttDuration', 
                   'ns3::Time', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorInterface::NextPttIat() [member function]
    cls.add_method('NextPttIat', 
                   'ns3::Time', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::StartAt(ns3::Time const & t) [member function]
    cls.add_method('StartAt', 
                   'void', 
                   [param('ns3::Time const &', 't')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::StopAt(ns3::Time const & t) [member function]
    cls.add_method('StopAt', 
                   'void', 
                   [param('ns3::Time const &', 't')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::TracePttDuration(uint32_t const userId, ns3::Time const & duration) [member function]
    cls.add_method('TracePttDuration', 
                   'void', 
                   [param('uint32_t const', 'userId'), param('ns3::Time const &', 'duration')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::TracePttIat(uint32_t const userId, ns3::Time const & iat) [member function]
    cls.add_method('TracePttIat', 
                   'void', 
                   [param('uint32_t const', 'userId'), param('ns3::Time const &', 'iat')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttPusherOrchestratorSessionCdf_methods(root_module, cls):
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSessionCdf::McpttPusherOrchestratorSessionCdf(ns3::psc::McpttPusherOrchestratorSessionCdf const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusherOrchestratorSessionCdf const &', 'arg0')])
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSessionCdf::McpttPusherOrchestratorSessionCdf() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::AddPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('AddPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): int64_t ns3::psc::McpttPusherOrchestratorSessionCdf::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::ChangeCdf(ns3::Ptr<ns3::EmpiricalRandomVariable> sessionDurationVariable, double avgSessionDuration) [member function]
    cls.add_method('ChangeCdf', 
                   'void', 
                   [param('ns3::Ptr< ns3::EmpiricalRandomVariable >', 'sessionDurationVariable'), param('double', 'avgSessionDuration')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher>>> ns3::psc::McpttPusherOrchestratorSessionCdf::GetActivePushers() const [member function]
    cls.add_method('GetActivePushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): double ns3::psc::McpttPusherOrchestratorSessionCdf::GetActivityFactor() const [member function]
    cls.add_method('GetActivityFactor', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::Ptr<ns3::psc::McpttPusherOrchestratorInterface> ns3::psc::McpttPusherOrchestratorSessionCdf::GetOrchestrator() const [member function]
    cls.add_method('GetOrchestrator', 
                   'ns3::Ptr< ns3::psc::McpttPusherOrchestratorInterface >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher>>> ns3::psc::McpttPusherOrchestratorSessionCdf::GetPushers() const [member function]
    cls.add_method('GetPushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusherOrchestratorSessionCdf::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorSessionCdf::NextPttDuration() [member function]
    cls.add_method('NextPttDuration', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorSessionCdf::NextPttIat() [member function]
    cls.add_method('NextPttIat', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::SetActivityFactor(double af) [member function]
    cls.add_method('SetActivityFactor', 
                   'void', 
                   [param('double', 'af')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::SetOrchestrator(ns3::Ptr<ns3::psc::McpttPusherOrchestratorInterface> orchestrator) [member function]
    cls.add_method('SetOrchestrator', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusherOrchestratorInterface >', 'orchestrator')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSessionCdf::CDF_POINTS [variable]
    cls.add_static_attribute('CDF_POINTS', 'std::vector< std::pair< double, double > > const', is_const=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSessionCdf::CDF_POINTS_AVG [variable]
    cls.add_static_attribute('CDF_POINTS_AVG', 'double const', is_const=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::StartSession() [member function]
    cls.add_method('StartSession', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::StopSession() [member function]
    cls.add_method('StopSession', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::UpdateSessionIatVariable() [member function]
    cls.add_method('UpdateSessionIatVariable', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttPusherOrchestratorSpurtCdf_methods(root_module, cls):
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSpurtCdf::McpttPusherOrchestratorSpurtCdf(ns3::psc::McpttPusherOrchestratorSpurtCdf const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusherOrchestratorSpurtCdf const &', 'arg0')])
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSpurtCdf::McpttPusherOrchestratorSpurtCdf() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::AddPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('AddPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): int64_t ns3::psc::McpttPusherOrchestratorSpurtCdf::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::ChangeCdf(ns3::Ptr<ns3::EmpiricalRandomVariable> pttDurationVariable, double avgPttDuration) [member function]
    cls.add_method('ChangeCdf', 
                   'void', 
                   [param('ns3::Ptr< ns3::EmpiricalRandomVariable >', 'pttDurationVariable'), param('double', 'avgPttDuration')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher>>> ns3::psc::McpttPusherOrchestratorSpurtCdf::GetActivePushers() const [member function]
    cls.add_method('GetActivePushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): double ns3::psc::McpttPusherOrchestratorSpurtCdf::GetActivityFactor() const [member function]
    cls.add_method('GetActivityFactor', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher>>> ns3::psc::McpttPusherOrchestratorSpurtCdf::GetPushers() const [member function]
    cls.add_method('GetPushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusherOrchestratorSpurtCdf::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorSpurtCdf::NextPttDuration() [member function]
    cls.add_method('NextPttDuration', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorSpurtCdf::NextPttIat() [member function]
    cls.add_method('NextPttIat', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::SetActivityFactor(double af) [member function]
    cls.add_method('SetActivityFactor', 
                   'void', 
                   [param('double', 'af')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSpurtCdf::CDF_POINTS [variable]
    cls.add_static_attribute('CDF_POINTS', 'std::vector< std::pair< double, double > > const', is_const=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSpurtCdf::CDF_POINTS_AVG [variable]
    cls.add_static_attribute('CDF_POINTS_AVG', 'double const', is_const=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::PttDurationTrace(uint32_t userId, ns3::Time duration) [member function]
    cls.add_method('PttDurationTrace', 
                   'void', 
                   [param('uint32_t', 'userId'), param('ns3::Time', 'duration')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::PttIatTrace(uint32_t userId, ns3::Time iat) [member function]
    cls.add_method('PttIatTrace', 
                   'void', 
                   [param('uint32_t', 'userId'), param('ns3::Time', 'iat')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::UpdatePttIatVariable() [member function]
    cls.add_method('UpdatePttIatVariable', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttQueuedUserInfo_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttQueuedUserInfo::McpttQueuedUserInfo(ns3::psc::McpttQueuedUserInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttQueuedUserInfo const &', 'arg0')])
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttQueuedUserInfo::McpttQueuedUserInfo() [constructor]
    cls.add_constructor([])
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttQueuedUserInfo::McpttQueuedUserInfo(uint32_t ssrc, ns3::psc::McpttFloorMsgFieldQueuedUserId const & userId, ns3::psc::McpttFloorMsgFieldQueuePositionInfo const & info) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc'), param('ns3::psc::McpttFloorMsgFieldQueuedUserId const &', 'userId'), param('ns3::psc::McpttFloorMsgFieldQueuePositionInfo const &', 'info')])
    ## mcptt-queued-user-info.h (module 'psc'): uint32_t ns3::psc::McpttQueuedUserInfo::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo ns3::psc::McpttQueuedUserInfo::GetInfo() const [member function]
    cls.add_method('GetInfo', 
                   'ns3::psc::McpttFloorMsgFieldQueuePositionInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): ns3::TypeId ns3::psc::McpttQueuedUserInfo::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): uint32_t ns3::psc::McpttQueuedUserInfo::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): uint32_t ns3::psc::McpttQueuedUserInfo::GetSsrc() const [member function]
    cls.add_method('GetSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): static ns3::TypeId ns3::psc::McpttQueuedUserInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId ns3::psc::McpttQueuedUserInfo::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldQueuedUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): void ns3::psc::McpttQueuedUserInfo::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): void ns3::psc::McpttQueuedUserInfo::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): void ns3::psc::McpttQueuedUserInfo::SetInfo(ns3::psc::McpttFloorMsgFieldQueuePositionInfo const & info) [member function]
    cls.add_method('SetInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldQueuePositionInfo const &', 'info')], 
                   is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): void ns3::psc::McpttQueuedUserInfo::SetSsrc(uint32_t ssrc) [member function]
    cls.add_method('SetSsrc', 
                   'void', 
                   [param('uint32_t', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): void ns3::psc::McpttQueuedUserInfo::SetUserId(ns3::psc::McpttFloorMsgFieldQueuedUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldQueuedUserId const &', 'userId')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttRtpHeader_methods(root_module, cls):
    ## mcptt-rtp-header.h (module 'psc'): ns3::psc::McpttRtpHeader::McpttRtpHeader(ns3::psc::McpttRtpHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttRtpHeader const &', 'arg0')])
    ## mcptt-rtp-header.h (module 'psc'): ns3::psc::McpttRtpHeader::McpttRtpHeader() [constructor]
    cls.add_constructor([])
    ## mcptt-rtp-header.h (module 'psc'): ns3::psc::McpttRtpHeader::McpttRtpHeader(uint32_t ssrc) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc')])
    ## mcptt-rtp-header.h (module 'psc'): ns3::psc::McpttRtpHeader::McpttRtpHeader(uint32_t ssrc, uint8_t payloadType) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc'), param('uint8_t', 'payloadType')])
    ## mcptt-rtp-header.h (module 'psc'): bool ns3::psc::McpttRtpHeader::AddCsrc(uint32_t csrc) [member function]
    cls.add_method('AddCsrc', 
                   'bool', 
                   [param('uint32_t', 'csrc')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::ClearCsrcs() [member function]
    cls.add_method('ClearCsrcs', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint32_t ns3::psc::McpttRtpHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetCsrcCount() const [member function]
    cls.add_method('GetCsrcCount', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): std::vector<unsigned int, std::allocator<unsigned int>> ns3::psc::McpttRtpHeader::GetCsrcs() const [member function]
    cls.add_method('GetCsrcs', 
                   'std::vector< unsigned int >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetExtension() const [member function]
    cls.add_method('GetExtension', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): ns3::TypeId ns3::psc::McpttRtpHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetMarker() const [member function]
    cls.add_method('GetMarker', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetPadding() const [member function]
    cls.add_method('GetPadding', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetPayloadType() const [member function]
    cls.add_method('GetPayloadType', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint16_t ns3::psc::McpttRtpHeader::GetSeqNum() const [member function]
    cls.add_method('GetSeqNum', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint32_t ns3::psc::McpttRtpHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint32_t ns3::psc::McpttRtpHeader::GetSsrc() const [member function]
    cls.add_method('GetSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint32_t ns3::psc::McpttRtpHeader::GetTimestamp() const [member function]
    cls.add_method('GetTimestamp', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): static ns3::TypeId ns3::psc::McpttRtpHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetVersion() const [member function]
    cls.add_method('GetVersion', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): bool ns3::psc::McpttRtpHeader::RemoveCsrc(uint32_t csrc) [member function]
    cls.add_method('RemoveCsrc', 
                   'bool', 
                   [param('uint32_t', 'csrc')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetExtension(uint8_t extension) [member function]
    cls.add_method('SetExtension', 
                   'void', 
                   [param('uint8_t', 'extension')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetMarker(uint8_t marker) [member function]
    cls.add_method('SetMarker', 
                   'void', 
                   [param('uint8_t', 'marker')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetPadding(uint8_t padding) [member function]
    cls.add_method('SetPadding', 
                   'void', 
                   [param('uint8_t', 'padding')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetPayloadType(uint8_t payloadType) [member function]
    cls.add_method('SetPayloadType', 
                   'void', 
                   [param('uint8_t', 'payloadType')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetSeqNum(uint16_t seqNum) [member function]
    cls.add_method('SetSeqNum', 
                   'void', 
                   [param('uint16_t', 'seqNum')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetSsrc(uint32_t ssrc) [member function]
    cls.add_method('SetSsrc', 
                   'void', 
                   [param('uint32_t', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetTimestamp(uint32_t timestamp) [member function]
    cls.add_method('SetTimestamp', 
                   'void', 
                   [param('uint32_t', 'timestamp')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetVersion(uint8_t version) [member function]
    cls.add_method('SetVersion', 
                   'void', 
                   [param('uint8_t', 'version')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetCsrcCount(uint8_t csrcCount) [member function]
    cls.add_method('SetCsrcCount', 
                   'void', 
                   [param('uint8_t', 'csrcCount')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetCsrcs(std::vector<unsigned int, std::allocator<unsigned int>> const csrcs) [member function]
    cls.add_method('SetCsrcs', 
                   'void', 
                   [param('std::vector< unsigned int > const', 'csrcs')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttSdpFmtpHeader_methods(root_module, cls):
    ## mcptt-sdp-fmtp-header.h (module 'psc'): ns3::psc::McpttSdpFmtpHeader::McpttSdpFmtpHeader(ns3::psc::McpttSdpFmtpHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttSdpFmtpHeader const &', 'arg0')])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): ns3::psc::McpttSdpFmtpHeader::McpttSdpFmtpHeader() [constructor]
    cls.add_constructor([])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): uint32_t ns3::psc::McpttSdpFmtpHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): ns3::TypeId ns3::psc::McpttSdpFmtpHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): bool ns3::psc::McpttSdpFmtpHeader::GetMcGranted() const [member function]
    cls.add_method('GetMcGranted', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): bool ns3::psc::McpttSdpFmtpHeader::GetMcImplicitRequest() const [member function]
    cls.add_method('GetMcImplicitRequest', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): uint8_t ns3::psc::McpttSdpFmtpHeader::GetMcPriority() const [member function]
    cls.add_method('GetMcPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): bool ns3::psc::McpttSdpFmtpHeader::GetMcQueueing() const [member function]
    cls.add_method('GetMcQueueing', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): uint32_t ns3::psc::McpttSdpFmtpHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): static ns3::TypeId ns3::psc::McpttSdpFmtpHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::SetMcGranted(bool mcGranted) [member function]
    cls.add_method('SetMcGranted', 
                   'void', 
                   [param('bool', 'mcGranted')])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::SetMcImplicitRequest(bool mcImplicitRequest) [member function]
    cls.add_method('SetMcImplicitRequest', 
                   'void', 
                   [param('bool', 'mcImplicitRequest')])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::SetMcPriority(uint8_t mcPriority) [member function]
    cls.add_method('SetMcPriority', 
                   'void', 
                   [param('uint8_t', 'mcPriority')])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::SetMcQueueing(bool mcQueueing) [member function]
    cls.add_method('SetMcQueueing', 
                   'void', 
                   [param('bool', 'mcQueueing')])
    return

def register_Ns3PscMcpttServerApp_methods(root_module, cls):
    ## mcptt-server-app.h (module 'psc'): ns3::psc::McpttServerApp::McpttServerApp(ns3::psc::McpttServerApp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerApp const &', 'arg0')])
    ## mcptt-server-app.h (module 'psc'): ns3::psc::McpttServerApp::McpttServerApp() [constructor]
    cls.add_constructor([])
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::AddCall(ns3::Ptr<ns3::psc::McpttServerCall> call) [member function]
    cls.add_method('AddCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCall >', 'call')])
    ## mcptt-server-app.h (module 'psc'): uint16_t ns3::psc::McpttServerApp::AllocateCallId() [member function]
    cls.add_method('AllocateCallId', 
                   'uint16_t', 
                   [])
    ## mcptt-server-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCall> ns3::psc::McpttServerApp::GetCall(uint16_t callId) [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttServerCall >', 
                   [param('uint16_t', 'callId')])
    ## mcptt-server-app.h (module 'psc'): ns3::Address ns3::psc::McpttServerApp::GetLocalAddress() const [member function]
    cls.add_method('GetLocalAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True)
    ## mcptt-server-app.h (module 'psc'): ns3::Ptr<ns3::sip::SipProxy> ns3::psc::McpttServerApp::GetSipProxy() const [member function]
    cls.add_method('GetSipProxy', 
                   'ns3::Ptr< ns3::sip::SipProxy >', 
                   [], 
                   is_const=True)
    ## mcptt-server-app.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerApp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-app.h (module 'psc'): bool ns3::psc::McpttServerApp::IsRunning() const [member function]
    cls.add_method('IsRunning', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::SendCallControlPacket(ns3::Ptr<ns3::Packet> pkt, ns3::Address const & toAddr) [member function]
    cls.add_method('SendCallControlPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address const &', 'toAddr')], 
                   is_virtual=True)
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::SetLocalAddress(ns3::Address const & localAddress) [member function]
    cls.add_method('SetLocalAddress', 
                   'void', 
                   [param('ns3::Address const &', 'localAddress')])
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::TraceMessageReceive(uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('TraceMessageReceive', 
                   'void', 
                   [param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')])
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::TraceMessageSend(uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('TraceMessageSend', 
                   'void', 
                   [param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')])
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttServerCall_methods(root_module, cls):
    ## mcptt-server-call.h (module 'psc'): ns3::psc::McpttServerCall::McpttServerCall(ns3::psc::McpttServerCall const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCall const &', 'arg0')])
    ## mcptt-server-call.h (module 'psc'): ns3::psc::McpttServerCall::McpttServerCall() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> ns3::psc::McpttServerCall::GetArbitrator() const [member function]
    cls.add_method('GetArbitrator', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): uint16_t ns3::psc::McpttServerCall::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCallMachine> ns3::psc::McpttServerCall::GetCallMachine() const [member function]
    cls.add_method('GetCallMachine', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachine >', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): std::vector<unsigned int, std::allocator<unsigned int>> ns3::psc::McpttServerCall::GetClientUserIds() const [member function]
    cls.add_method('GetClientUserIds', 
                   'std::vector< unsigned int >', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): uint32_t ns3::psc::McpttServerCall::GetOriginator() const [member function]
    cls.add_method('GetOriginator', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerApp> ns3::psc::McpttServerCall::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttServerApp >', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerCall::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call.h (module 'psc'): bool ns3::psc::McpttServerCall::IsAmbientListening() const [member function]
    cls.add_method('IsAmbientListening', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call.h (module 'psc'): bool ns3::psc::McpttServerCall::IsTemporaryGroup() const [member function]
    cls.add_method('IsTemporaryGroup', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::ReceiveSipEvent(char const * event, ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('ReceiveSipEvent', 
                   'void', 
                   [param('char const *', 'event'), param('ns3::sip::SipElement::TransactionState', 'state')], 
                   is_virtual=True)
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::ReceiveSipMessage(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr, ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('ReceiveSipMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr'), param('ns3::sip::SipElement::TransactionState', 'state')], 
                   is_virtual=True)
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SendCallControlPacket(ns3::Ptr<ns3::Packet> pkt, ns3::Address const & toAddr, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('SendCallControlPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address const &', 'toAddr'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetArbitrator(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> arbitrator) [member function]
    cls.add_method('SetArbitrator', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'arbitrator')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetCallId(uint16_t callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('uint16_t', 'callId')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetCallMachine(ns3::Ptr<ns3::psc::McpttServerCallMachine> callMachine) [member function]
    cls.add_method('SetCallMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCallMachine >', 'callMachine')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetClientUserIds(std::vector<unsigned int, std::allocator<unsigned int>> clientUserIds) [member function]
    cls.add_method('SetClientUserIds', 
                   'void', 
                   [param('std::vector< unsigned int >', 'clientUserIds')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetOriginator(uint32_t originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('uint32_t', 'originator')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetOwner(ns3::Ptr<ns3::psc::McpttServerApp> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerApp >', 'owner')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttServerCallMachine_methods(root_module, cls):
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachine::McpttServerCallMachine(ns3::psc::McpttServerCallMachine const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachine const &', 'arg0')])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachine::McpttServerCallMachine() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttServerCallMachine::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttServerCallMachine::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachine::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttServerCallMachine::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCall> ns3::psc::McpttServerCallMachine::GetServerCall() const [member function]
    cls.add_method('GetServerCall', 
                   'ns3::Ptr< ns3::psc::McpttServerCall >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachine::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerCallMachine::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachine::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachine::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachine::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachine::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::ReceiveCallPacket(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveCallPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::SetServerCall(ns3::Ptr<ns3::psc::McpttServerCall> call) [member function]
    cls.add_method('SetServerCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCall >', 'call')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::SetUserId(uint32_t userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearrangedState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedState::McpttServerCallMachineGroupPrearrangedState(ns3::psc::McpttServerCallMachineGroupPrearrangedState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearrangedState const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearrangedState::IsCallOngoing(ns3::psc::McpttServerCallMachineGroupPrearranged const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedState::ReceiveBye(ns3::psc::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedState::ReceiveInvite(ns3::psc::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedState::ReceiveResponse(ns3::psc::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedState::McpttServerCallMachineGroupPrearrangedState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS1_methods(root_module, cls):
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::McpttServerCallMachineGroupPrearrangedStateS1(ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1 const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::McpttServerCallMachineGroupPrearrangedStateS1() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1> ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1 >', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::ReceiveInvite(ns3::psc::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS2_methods(root_module, cls):
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::McpttServerCallMachineGroupPrearrangedStateS2(ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2 const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::McpttServerCallMachineGroupPrearrangedStateS2() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2> ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2 >', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::ReceiveBye(ns3::psc::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::ReceiveInvite(ns3::psc::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::ReceiveResponse(ns3::psc::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS3_methods(root_module, cls):
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::McpttServerCallMachineGroupPrearrangedStateS3(ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3 const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::McpttServerCallMachineGroupPrearrangedStateS3() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3> ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3 >', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::IsCallOngoing(ns3::psc::McpttServerCallMachineGroupPrearranged const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::ReceiveBye(ns3::psc::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::ReceiveResponse(ns3::psc::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS4_methods(root_module, cls):
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::McpttServerCallMachineGroupPrearrangedStateS4(ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4 const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::McpttServerCallMachineGroupPrearrangedStateS4() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4> ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4 >', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::ReceiveBye(ns3::psc::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::ReceiveResponse(ns3::psc::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineGrp_methods(root_module, cls):
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineGrp::McpttServerCallMachineGrp(ns3::psc::McpttServerCallMachineGrp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGrp const &', 'arg0')])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineGrp::McpttServerCallMachineGrp() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttServerCallMachineGrp::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttServerCallMachineGrp::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerCallMachineGrp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGrp::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGrp::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineGrp::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineNull_methods(root_module, cls):
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineNull::McpttServerCallMachineNull(ns3::psc::McpttServerCallMachineNull const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineNull const &', 'arg0')])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineNull::McpttServerCallMachineNull() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttServerCallMachineNull::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttServerCallMachineNull::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineNull::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttServerCallMachineNull::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineNull::GetNullStateId() [member function]
    cls.add_method('GetNullStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCall> ns3::psc::McpttServerCallMachineNull::GetServerCall() const [member function]
    cls.add_method('GetServerCall', 
                   'ns3::Ptr< ns3::psc::McpttServerCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineNull::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerCallMachineNull::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineNull::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachineNull::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachineNull::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachineNull::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::ReceiveCallPacket(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveCallPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::SetServerCall(ns3::Ptr<ns3::psc::McpttServerCall> call) [member function]
    cls.add_method('SetServerCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::SetUserId(uint32_t userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttServerHelper_methods(root_module, cls):
    ## mcptt-server-helper.h (module 'psc'): ns3::psc::McpttServerHelper::McpttServerHelper(ns3::psc::McpttServerHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerHelper const &', 'arg0')])
    ## mcptt-server-helper.h (module 'psc'): ns3::psc::McpttServerHelper::McpttServerHelper() [constructor]
    cls.add_constructor([])
    ## mcptt-server-helper.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerApp> ns3::psc::McpttServerHelper::Install(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('Install', 
                   'ns3::Ptr< ns3::psc::McpttServerApp >', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## mcptt-server-helper.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerApp> ns3::psc::McpttServerHelper::Install(std::string const & nodeName) [member function]
    cls.add_method('Install', 
                   'ns3::Ptr< ns3::psc::McpttServerApp >', 
                   [param('std::string const &', 'nodeName')])
    ## mcptt-server-helper.h (module 'psc'): void ns3::psc::McpttServerHelper::SetServerAttributes(std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetServerAttributes', 
                   'void', 
                   [param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')])
    ## mcptt-server-helper.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerApp> ns3::psc::McpttServerHelper::InstallPriv(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('InstallPriv', 
                   'ns3::Ptr< ns3::psc::McpttServerApp >', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   visibility='protected')
    return

def register_Ns3PscMcpttStateMachineStats_methods(root_module, cls):
    ## mcptt-state-machine-stats.h (module 'psc'): static ns3::TypeId ns3::psc::McpttStateMachineStats::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-state-machine-stats.h (module 'psc'): ns3::psc::McpttStateMachineStats::McpttStateMachineStats() [constructor]
    cls.add_constructor([])
    ## mcptt-state-machine-stats.h (module 'psc'): ns3::TypeId ns3::psc::McpttStateMachineStats::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-state-machine-stats.h (module 'psc'): void ns3::psc::McpttStateMachineStats::StateChangeCb(uint32_t userId, uint16_t callId, std::string const & selected, std::string const & typeId, std::string const & oldStateName, std::string const & newStateName) [member function]
    cls.add_method('StateChangeCb', 
                   'void', 
                   [param('uint32_t', 'userId'), param('uint16_t', 'callId'), param('std::string const &', 'selected'), param('std::string const &', 'typeId'), param('std::string const &', 'oldStateName'), param('std::string const &', 'newStateName')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttTimer_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-timer.h (module 'psc'): ns3::psc::McpttTimer::McpttTimer(ns3::psc::McpttTimer const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttTimer const &', 'arg0')])
    ## mcptt-timer.h (module 'psc'): ns3::psc::McpttTimer::McpttTimer() [constructor]
    cls.add_constructor([])
    ## mcptt-timer.h (module 'psc'): ns3::psc::McpttTimer::McpttTimer(ns3::psc::McpttEntityId const & id) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEntityId const &', 'id')])
    ## mcptt-timer.h (module 'psc'): ns3::Time ns3::psc::McpttTimer::GetDelay() const [member function]
    cls.add_method('GetDelay', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttTimer::GetId() const [member function]
    cls.add_method('GetId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): ns3::TypeId ns3::psc::McpttTimer::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): ns3::Timer * ns3::psc::McpttTimer::GetRawTimer() const [member function]
    cls.add_method('GetRawTimer', 
                   'ns3::Timer *', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): ns3::Time ns3::psc::McpttTimer::GetTimeLeft() const [member function]
    cls.add_method('GetTimeLeft', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): static ns3::TypeId ns3::psc::McpttTimer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-timer.h (module 'psc'): bool ns3::psc::McpttTimer::IsExpired() const [member function]
    cls.add_method('IsExpired', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): bool ns3::psc::McpttTimer::IsRunning() const [member function]
    cls.add_method('IsRunning', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::Restart() [member function]
    cls.add_method('Restart', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::SetDelay(ns3::Time const & delay) [member function]
    cls.add_method('SetDelay', 
                   'void', 
                   [param('ns3::Time const &', 'delay')], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::SetId(ns3::psc::McpttEntityId const & id) [member function]
    cls.add_method('SetId', 
                   'void', 
                   [param('ns3::psc::McpttEntityId const &', 'id')], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::SetRawTimer(ns3::Timer * const & rawTimer) [member function]
    cls.add_method('SetRawTimer', 
                   'void', 
                   [param('ns3::Timer * const &', 'rawTimer')], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::StartWith(ns3::Time const & delay) [member function]
    cls.add_method('StartWith', 
                   'void', 
                   [param('ns3::Time const &', 'delay')], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttTraceHelper_methods(root_module, cls):
    ## mcptt-trace-helper.h (module 'psc'): static ns3::TypeId ns3::psc::McpttTraceHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-trace-helper.h (module 'psc'): ns3::psc::McpttTraceHelper::McpttTraceHelper() [constructor]
    cls.add_constructor([])
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::EnableMsgTraces() [member function]
    cls.add_method('EnableMsgTraces', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::DisableMsgTraces() [member function]
    cls.add_method('DisableMsgTraces', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::EnableStateMachineTraces() [member function]
    cls.add_method('EnableStateMachineTraces', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::DisableStateMachineTraces() [member function]
    cls.add_method('DisableStateMachineTraces', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::EnableAccessTimeTrace() [member function]
    cls.add_method('EnableAccessTimeTrace', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::EnableAccessTimeTrace(std::string filename) [member function]
    cls.add_method('EnableAccessTimeTrace', 
                   'void', 
                   [param('std::string', 'filename')], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::DisableAccessTimeTrace() [member function]
    cls.add_method('DisableAccessTimeTrace', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::EnableMouthToEarLatencyTrace() [member function]
    cls.add_method('EnableMouthToEarLatencyTrace', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::EnableMouthToEarLatencyTrace(std::string filename) [member function]
    cls.add_method('EnableMouthToEarLatencyTrace', 
                   'void', 
                   [param('std::string', 'filename')], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::DisableMouthToEarLatencyTrace() [member function]
    cls.add_method('DisableMouthToEarLatencyTrace', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscPscApplication_methods(root_module, cls):
    ## psc-application.h (module 'psc'): ns3::psc::PscApplication::PscApplication(ns3::psc::PscApplication const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscApplication const &', 'arg0')])
    ## psc-application.h (module 'psc'): ns3::psc::PscApplication::PscApplication() [constructor]
    cls.add_constructor([])
    ## psc-application.h (module 'psc'): static ns3::TypeId ns3::psc::PscApplication::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## psc-application.h (module 'psc'): void ns3::psc::PscApplication::StopNow() [member function]
    cls.add_method('StopNow', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## psc-application.h (module 'psc'): void ns3::psc::PscApplication::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscPscApplicationClient_methods(root_module, cls):
    ## psc-application-client.h (module 'psc'): ns3::psc::PscApplicationClient::PscApplicationClient(ns3::psc::PscApplicationClient const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscApplicationClient const &', 'arg0')])
    ## psc-application-client.h (module 'psc'): ns3::psc::PscApplicationClient::PscApplicationClient() [constructor]
    cls.add_constructor([])
    ## psc-application-client.h (module 'psc'): static ns3::TypeId ns3::psc::PscApplicationClient::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## psc-application-client.h (module 'psc'): void ns3::psc::PscApplicationClient::SetPacketInterval(ns3::Ptr<ns3::RandomVariableStream> pktInterval) [member function]
    cls.add_method('SetPacketInterval', 
                   'void', 
                   [param('ns3::Ptr< ns3::RandomVariableStream >', 'pktInterval')])
    ## psc-application-client.h (module 'psc'): void ns3::psc::PscApplicationClient::SetPacketsPerSession(ns3::Ptr<ns3::RandomVariableStream> pktsPerSession) [member function]
    cls.add_method('SetPacketsPerSession', 
                   'void', 
                   [param('ns3::Ptr< ns3::RandomVariableStream >', 'pktsPerSession')])
    ## psc-application-client.h (module 'psc'): void ns3::psc::PscApplicationClient::SetRemote(ns3::Address ip, uint16_t port) [member function]
    cls.add_method('SetRemote', 
                   'void', 
                   [param('ns3::Address', 'ip'), param('uint16_t', 'port')])
    ## psc-application-client.h (module 'psc'): void ns3::psc::PscApplicationClient::SetSessionInterval(ns3::Ptr<ns3::RandomVariableStream> sessionInterval) [member function]
    cls.add_method('SetSessionInterval', 
                   'void', 
                   [param('ns3::Ptr< ns3::RandomVariableStream >', 'sessionInterval')])
    ## psc-application-client.h (module 'psc'): void ns3::psc::PscApplicationClient::StopNow() [member function]
    cls.add_method('StopNow', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## psc-application-client.h (module 'psc'): void ns3::psc::PscApplicationClient::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## psc-application-client.h (module 'psc'): void ns3::psc::PscApplicationClient::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## psc-application-client.h (module 'psc'): void ns3::psc::PscApplicationClient::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PscPscApplicationConfiguration_methods(root_module, cls):
    ## psc-application-configuration.h (module 'psc'): ns3::psc::PscApplicationConfiguration::PscApplicationConfiguration(ns3::psc::PscApplicationConfiguration const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscApplicationConfiguration const &', 'arg0')])
    ## psc-application-configuration.h (module 'psc'): ns3::psc::PscApplicationConfiguration::PscApplicationConfiguration(std::string name, ns3::TypeId sType, uint16_t basePort) [constructor]
    cls.add_constructor([param('std::string', 'name'), param('ns3::TypeId', 'sType'), param('uint16_t', 'basePort')])
    ## psc-application-configuration.h (module 'psc'): std::string ns3::psc::PscApplicationConfiguration::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## psc-application-configuration.h (module 'psc'): uint16_t ns3::psc::PscApplicationConfiguration::GetNextPort() [member function]
    cls.add_method('GetNextPort', 
                   'uint16_t', 
                   [])
    ## psc-application-configuration.h (module 'psc'): ns3::Ptr<ns3::RandomVariableStream> ns3::psc::PscApplicationConfiguration::GetPacketInterval() [member function]
    cls.add_method('GetPacketInterval', 
                   'ns3::Ptr< ns3::RandomVariableStream >', 
                   [])
    ## psc-application-configuration.h (module 'psc'): uint32_t ns3::psc::PscApplicationConfiguration::GetPacketSizeClient() [member function]
    cls.add_method('GetPacketSizeClient', 
                   'uint32_t', 
                   [])
    ## psc-application-configuration.h (module 'psc'): uint32_t ns3::psc::PscApplicationConfiguration::GetPacketSizeServer() [member function]
    cls.add_method('GetPacketSizeServer', 
                   'uint32_t', 
                   [])
    ## psc-application-configuration.h (module 'psc'): ns3::Ptr<ns3::RandomVariableStream> ns3::psc::PscApplicationConfiguration::GetPacketsPerSession() [member function]
    cls.add_method('GetPacketsPerSession', 
                   'ns3::Ptr< ns3::RandomVariableStream >', 
                   [])
    ## psc-application-configuration.h (module 'psc'): ns3::Ptr<ns3::RandomVariableStream> ns3::psc::PscApplicationConfiguration::GetSessionInterval() [member function]
    cls.add_method('GetSessionInterval', 
                   'ns3::Ptr< ns3::RandomVariableStream >', 
                   [])
    ## psc-application-configuration.h (module 'psc'): ns3::TypeId ns3::psc::PscApplicationConfiguration::GetSocketType() const [member function]
    cls.add_method('GetSocketType', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    ## psc-application-configuration.h (module 'psc'): uint32_t ns3::psc::PscApplicationConfiguration::IncrementInstances() [member function]
    cls.add_method('IncrementInstances', 
                   'uint32_t', 
                   [])
    ## psc-application-configuration.h (module 'psc'): void ns3::psc::PscApplicationConfiguration::SetApplicationPattern(ns3::Ptr<ns3::RandomVariableStream> pktsPerSessionRandomVariable, ns3::Ptr<ns3::RandomVariableStream> pktsIntervalRandomVariable, ns3::Ptr<ns3::RandomVariableStream> sessionIntervalRandomVariable, uint32_t pSizeClient, uint32_t pSizeServer=0) [member function]
    cls.add_method('SetApplicationPattern', 
                   'void', 
                   [param('ns3::Ptr< ns3::RandomVariableStream >', 'pktsPerSessionRandomVariable'), param('ns3::Ptr< ns3::RandomVariableStream >', 'pktsIntervalRandomVariable'), param('ns3::Ptr< ns3::RandomVariableStream >', 'sessionIntervalRandomVariable'), param('uint32_t', 'pSizeClient'), param('uint32_t', 'pSizeServer', default_value='0')])
    return

def register_Ns3PscPscApplicationHelper_methods(root_module, cls):
    ## psc-application-helper.h (module 'psc'): ns3::psc::PscApplicationHelper::PscApplicationHelper(ns3::psc::PscApplicationHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscApplicationHelper const &', 'arg0')])
    ## psc-application-helper.h (module 'psc'): ns3::psc::PscApplicationHelper::PscApplicationHelper() [constructor]
    cls.add_constructor([])
    ## psc-application-helper.h (module 'psc'): static ns3::TypeId ns3::psc::PscApplicationHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## psc-application-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::PscApplicationHelper::Install(ns3::Ptr<ns3::psc::PscApplicationConfiguration> config, ns3::Ptr<ns3::Node> client, ns3::Ptr<ns3::Node> server, ns3::Ipv6Address serverAddress, bool serverResponse, ns3::Time startTime, ns3::Time stopTime) [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::Ptr< ns3::psc::PscApplicationConfiguration >', 'config'), param('ns3::Ptr< ns3::Node >', 'client'), param('ns3::Ptr< ns3::Node >', 'server'), param('ns3::Ipv6Address', 'serverAddress'), param('bool', 'serverResponse'), param('ns3::Time', 'startTime'), param('ns3::Time', 'stopTime')])
    return

def register_Ns3PscPscApplicationServer_methods(root_module, cls):
    ## psc-application-server.h (module 'psc'): ns3::psc::PscApplicationServer::PscApplicationServer(ns3::psc::PscApplicationServer const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscApplicationServer const &', 'arg0')])
    ## psc-application-server.h (module 'psc'): ns3::psc::PscApplicationServer::PscApplicationServer() [constructor]
    cls.add_constructor([])
    ## psc-application-server.h (module 'psc'): static ns3::TypeId ns3::psc::PscApplicationServer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## psc-application-server.h (module 'psc'): void ns3::psc::PscApplicationServer::StopNow() [member function]
    cls.add_method('StopNow', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## psc-application-server.h (module 'psc'): void ns3::psc::PscApplicationServer::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## psc-application-server.h (module 'psc'): void ns3::psc::PscApplicationServer::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## psc-application-server.h (module 'psc'): void ns3::psc::PscApplicationServer::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PscPscScenarioDefinition_methods(root_module, cls):
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::PscScenarioDefinition(ns3::psc::PscScenarioDefinition const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscScenarioDefinition const &', 'arg0')])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::PscScenarioDefinition() [constructor]
    cls.add_constructor([])
    ## psc-scenario-definition.h (module 'psc'): void ns3::psc::PscScenarioDefinition::AddApplication(ns3::psc::PscScenarioDefinition::ApplicationId id, ns3::psc::PscScenarioDefinition::ApplicationInfo application) [member function]
    cls.add_method('AddApplication', 
                   'void', 
                   [param('uint16_t', 'id'), param('ns3::psc::PscScenarioDefinition::ApplicationInfo', 'application')])
    ## psc-scenario-definition.h (module 'psc'): void ns3::psc::PscScenarioDefinition::AddArea(ns3::psc::PscScenarioDefinition::AreaId id, ns3::psc::PscScenarioDefinition::AreaInfo area) [member function]
    cls.add_method('AddArea', 
                   'void', 
                   [param('uint16_t', 'id'), param('ns3::psc::PscScenarioDefinition::AreaInfo', 'area')])
    ## psc-scenario-definition.h (module 'psc'): void ns3::psc::PscScenarioDefinition::AddKeyEvent(ns3::psc::PscScenarioDefinition::KeyEventId id, ns3::psc::PscScenarioDefinition::KeyEventInfo event) [member function]
    cls.add_method('AddKeyEvent', 
                   'void', 
                   [param('uint16_t', 'id'), param('ns3::psc::PscScenarioDefinition::KeyEventInfo', 'event')])
    ## psc-scenario-definition.h (module 'psc'): void ns3::psc::PscScenarioDefinition::AddNodes(ns3::psc::PscScenarioDefinition::GroupId id, ns3::psc::PscScenarioDefinition::NodeGroupInfo nodes) [member function]
    cls.add_method('AddNodes', 
                   'void', 
                   [param('uint16_t', 'id'), param('ns3::psc::PscScenarioDefinition::NodeGroupInfo', 'nodes')])
    ## psc-scenario-definition.h (module 'psc'): void ns3::psc::PscScenarioDefinition::AddStructure(ns3::psc::PscScenarioDefinition::StructureId id, ns3::psc::PscScenarioDefinition::StructureInfo buildings) [member function]
    cls.add_method('AddStructure', 
                   'void', 
                   [param('uint16_t', 'id'), param('ns3::psc::PscScenarioDefinition::StructureInfo', 'buildings')])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::ApplicationInfo ns3::psc::PscScenarioDefinition::GetApplication(ns3::psc::PscScenarioDefinition::ApplicationId id) const [member function]
    cls.add_method('GetApplication', 
                   'ns3::psc::PscScenarioDefinition::ApplicationInfo', 
                   [param('uint16_t', 'id')], 
                   is_const=True)
    ## psc-scenario-definition.h (module 'psc'): std::map<unsigned short, ns3::psc::PscScenarioDefinition::ApplicationInfo, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::psc::PscScenarioDefinition::ApplicationInfo>>> ns3::psc::PscScenarioDefinition::GetApplications() const [member function]
    cls.add_method('GetApplications', 
                   'std::map< unsigned short, ns3::psc::PscScenarioDefinition::ApplicationInfo >', 
                   [], 
                   is_const=True)
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::AreaInfo ns3::psc::PscScenarioDefinition::GetArea(ns3::psc::PscScenarioDefinition::AreaId id) const [member function]
    cls.add_method('GetArea', 
                   'ns3::psc::PscScenarioDefinition::AreaInfo', 
                   [param('uint16_t', 'id')], 
                   is_const=True)
    ## psc-scenario-definition.h (module 'psc'): std::map<unsigned short, ns3::psc::PscScenarioDefinition::AreaInfo, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::psc::PscScenarioDefinition::AreaInfo>>> ns3::psc::PscScenarioDefinition::GetAreas() const [member function]
    cls.add_method('GetAreas', 
                   'std::map< unsigned short, ns3::psc::PscScenarioDefinition::AreaInfo >', 
                   [], 
                   is_const=True)
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::KeyEventInfo ns3::psc::PscScenarioDefinition::GetKeyEventTime(ns3::psc::PscScenarioDefinition::KeyEventId id) const [member function]
    cls.add_method('GetKeyEventTime', 
                   'ns3::psc::PscScenarioDefinition::KeyEventInfo', 
                   [param('uint16_t', 'id')], 
                   is_const=True)
    ## psc-scenario-definition.h (module 'psc'): std::map<unsigned short, ns3::psc::PscScenarioDefinition::KeyEventInfo, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::psc::PscScenarioDefinition::KeyEventInfo>>> ns3::psc::PscScenarioDefinition::GetKeyEvents() const [member function]
    cls.add_method('GetKeyEvents', 
                   'std::map< unsigned short, ns3::psc::PscScenarioDefinition::KeyEventInfo >', 
                   [], 
                   is_const=True)
    ## psc-scenario-definition.h (module 'psc'): std::string ns3::psc::PscScenarioDefinition::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## psc-scenario-definition.h (module 'psc'): std::map<unsigned short, ns3::psc::PscScenarioDefinition::NodeGroupInfo, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::psc::PscScenarioDefinition::NodeGroupInfo>>> ns3::psc::PscScenarioDefinition::GetNodes() const [member function]
    cls.add_method('GetNodes', 
                   'std::map< unsigned short, ns3::psc::PscScenarioDefinition::NodeGroupInfo >', 
                   [], 
                   is_const=True)
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::NodeGroupInfo ns3::psc::PscScenarioDefinition::GetNodesForGroup(ns3::psc::PscScenarioDefinition::GroupId id) const [member function]
    cls.add_method('GetNodesForGroup', 
                   'ns3::psc::PscScenarioDefinition::NodeGroupInfo', 
                   [param('uint16_t', 'id')], 
                   is_const=True)
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::StructureInfo ns3::psc::PscScenarioDefinition::GetStructure(ns3::psc::PscScenarioDefinition::StructureId id) const [member function]
    cls.add_method('GetStructure', 
                   'ns3::psc::PscScenarioDefinition::StructureInfo', 
                   [param('uint16_t', 'id')], 
                   is_const=True)
    ## psc-scenario-definition.h (module 'psc'): std::map<unsigned short, ns3::psc::PscScenarioDefinition::StructureInfo, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::psc::PscScenarioDefinition::StructureInfo>>> ns3::psc::PscScenarioDefinition::GetStructures() const [member function]
    cls.add_method('GetStructures', 
                   'std::map< unsigned short, ns3::psc::PscScenarioDefinition::StructureInfo >', 
                   [], 
                   is_const=True)
    ## psc-scenario-definition.h (module 'psc'): static ns3::TypeId ns3::psc::PscScenarioDefinition::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## psc-scenario-definition.h (module 'psc'): void ns3::psc::PscScenarioDefinition::SetName(std::string name) [member function]
    cls.add_method('SetName', 
                   'void', 
                   [param('std::string', 'name')])
    return

def register_Ns3PscPscScenarioDefinitionApplicationInfo_methods(root_module, cls):
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::ApplicationInfo::ApplicationInfo() [constructor]
    cls.add_constructor([])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::ApplicationInfo::ApplicationInfo(ns3::psc::PscScenarioDefinition::ApplicationInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscScenarioDefinition::ApplicationInfo const &', 'arg0')])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::ApplicationInfo::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    return

def register_Ns3PscPscScenarioDefinitionAreaInfo_methods(root_module, cls):
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::AreaInfo::AreaInfo() [constructor]
    cls.add_constructor([])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::AreaInfo::AreaInfo(ns3::psc::PscScenarioDefinition::AreaInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscScenarioDefinition::AreaInfo const &', 'arg0')])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::AreaInfo::area [variable]
    cls.add_instance_attribute('area', 'ns3::Rectangle', is_const=False)
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::AreaInfo::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    return

def register_Ns3PscPscScenarioDefinitionKeyEventInfo_methods(root_module, cls):
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::KeyEventInfo::KeyEventInfo() [constructor]
    cls.add_constructor([])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::KeyEventInfo::KeyEventInfo(ns3::psc::PscScenarioDefinition::KeyEventInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscScenarioDefinition::KeyEventInfo const &', 'arg0')])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::KeyEventInfo::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::KeyEventInfo::time [variable]
    cls.add_instance_attribute('time', 'ns3::Time', is_const=False)
    return

def register_Ns3PscPscScenarioDefinitionNodeGroupInfo_methods(root_module, cls):
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::NodeGroupInfo::NodeGroupInfo() [constructor]
    cls.add_constructor([])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::NodeGroupInfo::NodeGroupInfo(ns3::psc::PscScenarioDefinition::NodeGroupInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscScenarioDefinition::NodeGroupInfo const &', 'arg0')])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::NodeGroupInfo::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::NodeGroupInfo::nodes [variable]
    cls.add_instance_attribute('nodes', 'ns3::NodeContainer', is_const=False)
    return

def register_Ns3PscPscScenarioDefinitionStructureInfo_methods(root_module, cls):
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::StructureInfo::StructureInfo() [constructor]
    cls.add_constructor([])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::StructureInfo::StructureInfo(ns3::psc::PscScenarioDefinition::StructureInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscScenarioDefinition::StructureInfo const &', 'arg0')])
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::StructureInfo::buildings [variable]
    cls.add_instance_attribute('buildings', 'ns3::BuildingContainer', is_const=False)
    ## psc-scenario-definition.h (module 'psc'): ns3::psc::PscScenarioDefinition::StructureInfo::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    return

def register_Ns3PscPscScenarioTraceHelper_methods(root_module, cls):
    ## psc-scenario-trace-helper.h (module 'psc'): ns3::psc::PscScenarioTraceHelper::PscScenarioTraceHelper(ns3::psc::PscScenarioTraceHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscScenarioTraceHelper const &', 'arg0')])
    ## psc-scenario-trace-helper.h (module 'psc'): ns3::psc::PscScenarioTraceHelper::PscScenarioTraceHelper() [constructor]
    cls.add_constructor([])
    ## psc-scenario-trace-helper.h (module 'psc'): ns3::psc::PscScenarioTraceHelper::PscScenarioTraceHelper(ns3::Ptr<ns3::psc::PscScenarioDefinition> scenarioDefinition) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::PscScenarioDefinition >', 'scenarioDefinition')])
    ## psc-scenario-trace-helper.h (module 'psc'): void ns3::psc::PscScenarioTraceHelper::EnableAreasTrace() [member function]
    cls.add_method('EnableAreasTrace', 
                   'void', 
                   [])
    ## psc-scenario-trace-helper.h (module 'psc'): void ns3::psc::PscScenarioTraceHelper::EnableEventsTrace() [member function]
    cls.add_method('EnableEventsTrace', 
                   'void', 
                   [])
    ## psc-scenario-trace-helper.h (module 'psc'): void ns3::psc::PscScenarioTraceHelper::EnableNodesTrace() [member function]
    cls.add_method('EnableNodesTrace', 
                   'void', 
                   [])
    ## psc-scenario-trace-helper.h (module 'psc'): void ns3::psc::PscScenarioTraceHelper::EnableScenarioTraces() [member function]
    cls.add_method('EnableScenarioTraces', 
                   'void', 
                   [])
    ## psc-scenario-trace-helper.h (module 'psc'): void ns3::psc::PscScenarioTraceHelper::EnableStructuresTrace() [member function]
    cls.add_method('EnableStructuresTrace', 
                   'void', 
                   [])
    ## psc-scenario-trace-helper.h (module 'psc'): void ns3::psc::PscScenarioTraceHelper::EnableTimeTrace(ns3::Time const & reportTime) [member function]
    cls.add_method('EnableTimeTrace', 
                   'void', 
                   [param('ns3::Time const &', 'reportTime')])
    ## psc-scenario-trace-helper.h (module 'psc'): static ns3::TypeId ns3::psc::PscScenarioTraceHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## psc-scenario-trace-helper.h (module 'psc'): void ns3::psc::PscScenarioTraceHelper::TraceTime(ns3::Time const & reportTime) [member function]
    cls.add_method('TraceTime', 
                   'void', 
                   [param('ns3::Time const &', 'reportTime')], 
                   visibility='protected')
    return

def register_Ns3PscPscSequenceNumber_methods(root_module, cls):
    ## psc-application.h (module 'psc'): ns3::psc::PscSequenceNumber::PscSequenceNumber() [constructor]
    cls.add_constructor([])
    ## psc-application.h (module 'psc'): ns3::psc::PscSequenceNumber::PscSequenceNumber(ns3::psc::PscSequenceNumber const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscSequenceNumber const &', 'arg0')])
    ## psc-application.h (module 'psc'): static uint64_t ns3::psc::PscSequenceNumber::GetSequenceNumber() [member function]
    cls.add_method('GetSequenceNumber', 
                   'uint64_t', 
                   [], 
                   is_static=True)
    ## psc-application.h (module 'psc'): ns3::psc::PscSequenceNumber::s_sequenceNumber [variable]
    cls.add_static_attribute('s_sequenceNumber', 'uint64_t', is_const=False)
    return

def register_Ns3PscPscVideoStreaming_methods(root_module, cls):
    ## psc-video-streaming.h (module 'psc'): ns3::psc::PscVideoStreaming::PscVideoStreaming(ns3::psc::PscVideoStreaming const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscVideoStreaming const &', 'arg0')])
    ## psc-video-streaming.h (module 'psc'): ns3::psc::PscVideoStreaming::PscVideoStreaming() [constructor]
    cls.add_constructor([])
    ## psc-video-streaming.h (module 'psc'): static ns3::TypeId ns3::psc::PscVideoStreaming::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::LoadCdfs() [member function]
    cls.add_method('LoadCdfs', 
                   'void', 
                   [])
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::ReadCustomDistribution(std::string sizeCdfFilePath, std::string intervalCdfFilePath) [member function]
    cls.add_method('ReadCustomDistribution', 
                   'void', 
                   [param('std::string', 'sizeCdfFilePath'), param('std::string', 'intervalCdfFilePath')])
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::SetReceiver(ns3::Address recvAddress, uint16_t recvPort) [member function]
    cls.add_method('SetReceiver', 
                   'void', 
                   [param('ns3::Address', 'recvAddress'), param('uint16_t', 'recvPort')])
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PscPscVideoStreamingDistributions_methods(root_module, cls):
    ## psc-video-streaming-distributions.h (module 'psc'): ns3::psc::PscVideoStreamingDistributions::PscVideoStreamingDistributions() [constructor]
    cls.add_constructor([])
    ## psc-video-streaming-distributions.h (module 'psc'): ns3::psc::PscVideoStreamingDistributions::PscVideoStreamingDistributions(ns3::psc::PscVideoStreamingDistributions const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscVideoStreamingDistributions const &', 'arg0')])
    ## psc-video-streaming-distributions.h (module 'psc'): static std::map<double, double, std::less<double>, std::allocator<std::pair<const double, double>>> ns3::psc::PscVideoStreamingDistributions::GetIntervalDistribution(std::string distributionName) [member function]
    cls.add_method('GetIntervalDistribution', 
                   'std::map< double, double >', 
                   [param('std::string', 'distributionName')], 
                   is_static=True)
    ## psc-video-streaming-distributions.h (module 'psc'): static std::map<double, unsigned int, std::less<double>, std::allocator<std::pair<const double, unsigned int>>> ns3::psc::PscVideoStreamingDistributions::GetSizeDistribution(std::string distributionName) [member function]
    cls.add_method('GetSizeDistribution', 
                   'std::map< double, unsigned int >', 
                   [param('std::string', 'distributionName')], 
                   is_static=True)
    return

def register_Ns3PscUavMobilityEnergyModel_methods(root_module, cls):
    ## uav-mobility-energy-model.h (module 'psc'): ns3::psc::UavMobilityEnergyModel::UavMobilityEnergyModel(ns3::psc::UavMobilityEnergyModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::UavMobilityEnergyModel const &', 'arg0')])
    ## uav-mobility-energy-model.h (module 'psc'): ns3::psc::UavMobilityEnergyModel::UavMobilityEnergyModel() [constructor]
    cls.add_constructor([])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Ascend(double speed) [member function]
    cls.add_method('Ascend', 
                   'void', 
                   [param('double', 'speed')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::ChangeState(int newState) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('int', 'newState')], 
                   is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::ConnectMobility(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('ConnectMobility', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Descend(double speed) [member function]
    cls.add_method('Descend', 
                   'void', 
                   [param('double', 'speed')])
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::GetAscendEnergyConversionFactor() const [member function]
    cls.add_method('GetAscendEnergyConversionFactor', 
                   'double', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::GetDescendEnergyConversionFactor() const [member function]
    cls.add_method('GetDescendEnergyConversionFactor', 
                   'double', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): ns3::Ptr<ns3::EnergySource> ns3::psc::UavMobilityEnergyModel::GetEnergySource() const [member function]
    cls.add_method('GetEnergySource', 
                   'ns3::Ptr< ns3::EnergySource >', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::GetHoverCurrent() const [member function]
    cls.add_method('GetHoverCurrent', 
                   'double', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::GetMoveEnergyConversionFactor() const [member function]
    cls.add_method('GetMoveEnergyConversionFactor', 
                   'double', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): ns3::psc::UavMobilityEnergyModel::State ns3::psc::UavMobilityEnergyModel::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::psc::UavMobilityEnergyModel::State', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::GetTotalEnergyConsumption() const [member function]
    cls.add_method('GetTotalEnergyConsumption', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): static ns3::TypeId ns3::psc::UavMobilityEnergyModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::HandleEnergyChanged() [member function]
    cls.add_method('HandleEnergyChanged', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::HandleEnergyDepletion() [member function]
    cls.add_method('HandleEnergyDepletion', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::HandleEnergyRecharged() [member function]
    cls.add_method('HandleEnergyRecharged', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Hover() [member function]
    cls.add_method('Hover', 
                   'void', 
                   [])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Init(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::EnergySource> energySource) [member function]
    cls.add_method('Init', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::EnergySource >', 'energySource')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Move(ns3::Vector const & velocity) [member function]
    cls.add_method('Move', 
                   'void', 
                   [param('ns3::Vector const &', 'velocity')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::SetAscendEnergyConversionFactor(double ascendEnergyConversionFactor) [member function]
    cls.add_method('SetAscendEnergyConversionFactor', 
                   'void', 
                   [param('double', 'ascendEnergyConversionFactor')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::SetDescendEnergyConversionFactor(double descendEnergyConversionFactor) [member function]
    cls.add_method('SetDescendEnergyConversionFactor', 
                   'void', 
                   [param('double', 'descendEnergyConversionFactor')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::SetEnergySource(ns3::Ptr<ns3::EnergySource> source) [member function]
    cls.add_method('SetEnergySource', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::SetHoverCurrent(double hoverEnergyCurrent) [member function]
    cls.add_method('SetHoverCurrent', 
                   'void', 
                   [param('double', 'hoverEnergyCurrent')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::SetMoveEnergyConversionFactor(double moveEnergyConversionFactor) [member function]
    cls.add_method('SetMoveEnergyConversionFactor', 
                   'void', 
                   [param('double', 'moveEnergyConversionFactor')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::DoGetCurrentA() const [member function]
    cls.add_method('DoGetCurrentA', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3PscUavMobilityEnergyModelHelper_methods(root_module, cls):
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::psc::UavMobilityEnergyModelHelper::UavMobilityEnergyModelHelper(ns3::psc::UavMobilityEnergyModelHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::UavMobilityEnergyModelHelper const &', 'arg0')])
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::psc::UavMobilityEnergyModelHelper::UavMobilityEnergyModelHelper() [constructor]
    cls.add_constructor([])
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::DeviceEnergyModelContainer ns3::psc::UavMobilityEnergyModelHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True)
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::DeviceEnergyModelContainer ns3::psc::UavMobilityEnergyModelHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::EnergySource> source) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_const=True)
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::DeviceEnergyModelContainer ns3::psc::UavMobilityEnergyModelHelper::Install(ns3::NodeContainer & nodes) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::NodeContainer &', 'nodes')], 
                   is_const=True)
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::DeviceEnergyModelContainer ns3::psc::UavMobilityEnergyModelHelper::Install(ns3::NodeContainer & nodes, ns3::EnergySourceContainer & sources) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::NodeContainer &', 'nodes'), param('ns3::EnergySourceContainer &', 'sources')], 
                   is_const=True)
    ## uav-mobility-energy-model-helper.h (module 'psc'): void ns3::psc::UavMobilityEnergyModelHelper::Set(std::string const & name, ns3::AttributeValue const & v) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string const &', 'name'), param('ns3::AttributeValue const &', 'v')])
    ## uav-mobility-energy-model-helper.h (module 'psc'): void ns3::psc::UavMobilityEnergyModelHelper::SetEnergySource(std::string name, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetEnergySource', 
                   'void', 
                   [param('std::string', 'name'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')])
    ## uav-mobility-energy-model-helper.h (module 'psc'): void ns3::psc::UavMobilityEnergyModelHelper::SetMobilityModel(std::string name, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetMobilityModel', 
                   'void', 
                   [param('std::string', 'name'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')])
    return

def register_Ns3PscUdpGroupEchoClient_methods(root_module, cls):
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient::UdpGroupEchoClient() [constructor]
    cls.add_constructor([])
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient::UdpGroupEchoClient(ns3::psc::UdpGroupEchoClient const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::UdpGroupEchoClient const &', 'arg0')])
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient::m_address [variable]
    cls.add_instance_attribute('m_address', 'ns3::Address', is_const=False)
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient::m_echo_address [variable]
    cls.add_instance_attribute('m_echo_address', 'ns3::Address', is_const=False)
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient::m_timestamp [variable]
    cls.add_instance_attribute('m_timestamp', 'ns3::Time', is_const=False)
    return

def register_Ns3PscUdpGroupEchoServer_methods(root_module, cls):
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoServer::UdpGroupEchoServer(ns3::psc::UdpGroupEchoServer const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::UdpGroupEchoServer const &', 'arg0')])
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoServer::UdpGroupEchoServer() [constructor]
    cls.add_constructor([])
    ## udp-group-echo-server.h (module 'psc'): void ns3::psc::UdpGroupEchoServer::AddClient(ns3::Address const & client) [member function]
    cls.add_method('AddClient', 
                   'void', 
                   [param('ns3::Address const &', 'client')], 
                   is_virtual=True)
    ## udp-group-echo-server.h (module 'psc'): static ns3::TypeId ns3::psc::UdpGroupEchoServer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## udp-group-echo-server.h (module 'psc'): void ns3::psc::UdpGroupEchoServer::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## udp-group-echo-server.h (module 'psc'): void ns3::psc::UdpGroupEchoServer::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## udp-group-echo-server.h (module 'psc'): void ns3::psc::UdpGroupEchoServer::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PscUdpGroupEchoServerHelper_methods(root_module, cls):
    ## udp-group-echo-helper.h (module 'psc'): ns3::psc::UdpGroupEchoServerHelper::UdpGroupEchoServerHelper(ns3::psc::UdpGroupEchoServerHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::UdpGroupEchoServerHelper const &', 'arg0')])
    ## udp-group-echo-helper.h (module 'psc'): ns3::psc::UdpGroupEchoServerHelper::UdpGroupEchoServerHelper(uint16_t port) [constructor]
    cls.add_constructor([param('uint16_t', 'port')])
    ## udp-group-echo-helper.h (module 'psc'): ns3::psc::UdpGroupEchoServerHelper::UdpGroupEchoServerHelper(uint16_t port, ns3::Time expirationTime) [constructor]
    cls.add_constructor([param('uint16_t', 'port'), param('ns3::Time', 'expirationTime')])
    ## udp-group-echo-helper.h (module 'psc'): ns3::psc::UdpGroupEchoServerHelper::UdpGroupEchoServerHelper(uint16_t port, ns3::Time expirationTime, ns3::psc::UdpGroupEchoServer::Mode_t mode, bool echoClient) [constructor]
    cls.add_constructor([param('uint16_t', 'port'), param('ns3::Time', 'expirationTime'), param('ns3::psc::UdpGroupEchoServer::Mode_t', 'mode'), param('bool', 'echoClient')])
    ## udp-group-echo-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::UdpGroupEchoServerHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True)
    ## udp-group-echo-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::UdpGroupEchoServerHelper::Install(std::string nodeName) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('std::string', 'nodeName')], 
                   is_const=True)
    ## udp-group-echo-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::UdpGroupEchoServerHelper::Install(ns3::NodeContainer c) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::NodeContainer', 'c')], 
                   is_const=True)
    ## udp-group-echo-helper.h (module 'psc'): void ns3::psc::UdpGroupEchoServerHelper::SetAttribute(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('SetAttribute', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    return

def register_Ns3PscMcpttCallMsg_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsg::McpttCallMsg(ns3::psc::McpttCallMsg const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsg const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsg::McpttCallMsg() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsg::McpttCallMsg(ns3::psc::McpttCallMsgFieldMsgType const & msgType) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldMsgType const &', 'msgType')])
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsg::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsg::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldMsgType ns3::psc::McpttCallMsg::GetMsgType() const [member function]
    cls.add_method('GetMsgType', 
                   'ns3::psc::McpttCallMsgFieldMsgType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsg::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsg::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::SetMsgType(ns3::psc::McpttCallMsgFieldMsgType const & msgType) [member function]
    cls.add_method('SetMsgType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldMsgType const &', 'msgType')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::Visit(ns3::psc::McpttCallMachineGrpBroadcast & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsg::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgFieldGrpId_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId::McpttCallMsgFieldGrpId(ns3::psc::McpttCallMsgFieldGrpId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldGrpId const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId::McpttCallMsgFieldGrpId() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId::McpttCallMsgFieldGrpId(uint32_t grpId) [constructor]
    cls.add_constructor([param('uint32_t', 'grpId')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldGrpId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldGrpId::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldGrpId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldGrpId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldGrpId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldGrpId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldGrpId::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldOrgName_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName::McpttCallMsgFieldOrgName(ns3::psc::McpttCallMsgFieldOrgName const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldOrgName const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName::McpttCallMsgFieldOrgName() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName::McpttCallMsgFieldOrgName(std::string const & name) [constructor]
    cls.add_constructor([param('std::string const &', 'name')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldOrgName::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldOrgName::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): std::string ns3::psc::McpttCallMsgFieldOrgName::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldOrgName::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldOrgName::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldOrgName::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldOrgName::SetName(std::string const & name) [member function]
    cls.add_method('SetName', 
                   'void', 
                   [param('std::string const &', 'name')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldOrgName::UpdateName(std::string const & orgName) [member function]
    cls.add_method('UpdateName', 
                   'void', 
                   [param('std::string const &', 'orgName')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgFieldSdp_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp::McpttCallMsgFieldSdp(ns3::psc::McpttCallMsgFieldSdp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldSdp const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp::McpttCallMsgFieldSdp() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldSdp::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::FromStr(std::string const & strRep) [member function]
    cls.add_method('FromStr', 
                   'void', 
                   [param('std::string const &', 'strRep')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttCallMsgFieldSdp::GetFloorPort() const [member function]
    cls.add_method('GetFloorPort', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::Address ns3::psc::McpttCallMsgFieldSdp::GetGrpAddr() const [member function]
    cls.add_method('GetGrpAddr', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldSdp::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::Address ns3::psc::McpttCallMsgFieldSdp::GetOrigAddr() const [member function]
    cls.add_method('GetOrigAddr', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttCallMsgFieldSdp::GetSpeechPort() const [member function]
    cls.add_method('GetSpeechPort', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldSdp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::SetFloorPort(uint16_t floorPort) [member function]
    cls.add_method('SetFloorPort', 
                   'void', 
                   [param('uint16_t', 'floorPort')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::SetGrpAddr(ns3::Address const & grpAddr) [member function]
    cls.add_method('SetGrpAddr', 
                   'void', 
                   [param('ns3::Address const &', 'grpAddr')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::SetOrigAddr(ns3::Address const & origAddr) [member function]
    cls.add_method('SetOrigAddr', 
                   'void', 
                   [param('ns3::Address const &', 'origAddr')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::SetSpeechPort(uint16_t speechPort) [member function]
    cls.add_method('SetSpeechPort', 
                   'void', 
                   [param('uint16_t', 'speechPort')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): std::string ns3::psc::McpttCallMsgFieldSdp::ToStr() const [member function]
    cls.add_method('ToStr', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::UpdateLength() [member function]
    cls.add_method('UpdateLength', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgGrpAccept_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAccept::McpttCallMsgGrpAccept(ns3::psc::McpttCallMsgGrpAccept const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpAccept const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAccept::McpttCallMsgGrpAccept() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpAccept::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMsgGrpAccept::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpAccept::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpAccept::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpAccept::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpAccept::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpAccept::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::SetUserId(ns3::psc::McpttCallMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAccept::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpAccept::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpAnnoun_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAnnoun::McpttCallMsgGrpAnnoun(ns3::psc::McpttCallMsgGrpAnnoun const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAnnoun::McpttCallMsgGrpAnnoun() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpAnnoun::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMsgGrpAnnoun::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): bool ns3::psc::McpttCallMsgGrpAnnoun::GetConfirmMode() const [member function]
    cls.add_method('GetConfirmMode', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpAnnoun::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpAnnoun::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime ns3::psc::McpttCallMsgGrpAnnoun::GetLastChgTime() const [member function]
    cls.add_method('GetLastChgTime', 
                   'ns3::psc::McpttCallMsgFieldLastChgTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpAnnoun::GetLastChgUserId() const [member function]
    cls.add_method('GetLastChgUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpAnnoun::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): bool ns3::psc::McpttCallMsgGrpAnnoun::GetProbeResp() const [member function]
    cls.add_method('GetProbeResp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval ns3::psc::McpttCallMsgGrpAnnoun::GetRefInt() const [member function]
    cls.add_method('GetRefInt', 
                   'ns3::psc::McpttCallMsgFieldRefreshInterval', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMsgGrpAnnoun::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpAnnoun::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime ns3::psc::McpttCallMsgGrpAnnoun::GetStartTime() const [member function]
    cls.add_method('GetStartTime', 
                   'ns3::psc::McpttCallMsgFieldStartTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpAnnoun::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): bool ns3::psc::McpttCallMsgGrpAnnoun::IsConfirmModeIndicated() const [member function]
    cls.add_method('IsConfirmModeIndicated', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): bool ns3::psc::McpttCallMsgGrpAnnoun::IsProbeResp() const [member function]
    cls.add_method('IsProbeResp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetConfirmMode(bool const & confirmMode) [member function]
    cls.add_method('SetConfirmMode', 
                   'void', 
                   [param('bool const &', 'confirmMode')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetLastChgTime(ns3::psc::McpttCallMsgFieldLastChgTime const & lastChgTime) [member function]
    cls.add_method('SetLastChgTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldLastChgTime const &', 'lastChgTime')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetLastChgUserId(ns3::psc::McpttCallMsgFieldUserId const & lastChgUserId) [member function]
    cls.add_method('SetLastChgUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'lastChgUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origUserId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetProbeResp(bool const & probeResp) [member function]
    cls.add_method('SetProbeResp', 
                   'void', 
                   [param('bool const &', 'probeResp')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetRefInt(ns3::psc::McpttCallMsgFieldRefreshInterval const & refInt) [member function]
    cls.add_method('SetRefInt', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldRefreshInterval const &', 'refInt')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdpField) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdpField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetStartTime(ns3::psc::McpttCallMsgFieldStartTime const & startTime) [member function]
    cls.add_method('SetStartTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldStartTime const &', 'startTime')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAnnoun::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpAnnoun::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpBroadcast_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcast::McpttCallMsgGrpBroadcast(ns3::psc::McpttCallMsgGrpBroadcast const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpBroadcast const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcast::McpttCallMsgGrpBroadcast() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpBroadcast::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMsgGrpBroadcast::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpBroadcast::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpBroadcast::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpBroadcast::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMsgGrpBroadcast::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpBroadcast::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpBroadcast::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origUserId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdpField) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdpField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::Visit(ns3::psc::McpttCallMachineGrpBroadcast & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcast::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpBroadcast::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpBroadcastEnd_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcastEnd::McpttCallMsgGrpBroadcastEnd(ns3::psc::McpttCallMsgGrpBroadcastEnd const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpBroadcastEnd const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcastEnd::McpttCallMsgGrpBroadcastEnd() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpBroadcastEnd::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpBroadcastEnd::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpBroadcastEnd::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpBroadcastEnd::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpBroadcastEnd::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpBroadcastEnd::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origUserId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::Visit(ns3::psc::McpttCallMachineGrpBroadcast & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcastEnd::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpBroadcastEnd::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpEmergAlert_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlert::McpttCallMsgGrpEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlert::McpttCallMsgGrpEmergAlert() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpEmergAlert::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlert::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName ns3::psc::McpttCallMsgGrpEmergAlert::GetOrgName() const [member function]
    cls.add_method('GetOrgName', 
                   'ns3::psc::McpttCallMsgFieldOrgName', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlert::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlert::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlert::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc ns3::psc::McpttCallMsgGrpEmergAlert::GetUserLoc() const [member function]
    cls.add_method('GetUserLoc', 
                   'ns3::psc::McpttCallMsgFieldUserLoc', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::SetOrgName(ns3::psc::McpttCallMsgFieldOrgName const & orgName) [member function]
    cls.add_method('SetOrgName', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldOrgName const &', 'orgName')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::SetUserId(ns3::psc::McpttCallMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::SetUserLoc(ns3::psc::McpttCallMsgFieldUserLoc const & userLoc) [member function]
    cls.add_method('SetUserLoc', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserLoc const &', 'userLoc')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlert::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlert::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpEmergAlertAck_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertAck::McpttCallMsgGrpEmergAlertAck(ns3::psc::McpttCallMsgGrpEmergAlertAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpEmergAlertAck const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertAck::McpttCallMsgGrpEmergAlertAck() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpEmergAlertAck::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertAck::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertAck::GetSendingId() const [member function]
    cls.add_method('GetSendingId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertAck::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::SetSendingId(ns3::psc::McpttCallMsgFieldUserId const & sendingId) [member function]
    cls.add_method('SetSendingId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'sendingId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertAck::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpEmergAlertCancel_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancel::McpttCallMsgGrpEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancel::McpttCallMsgGrpEmergAlertCancel() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetSendingId() const [member function]
    cls.add_method('GetSendingId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::SetSendingId(ns3::psc::McpttCallMsgFieldUserId const & sendingId) [member function]
    cls.add_method('SetSendingId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'sendingId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancel::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertCancel::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpEmergAlertCancelAck_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::McpttCallMsgGrpEmergAlertCancelAck(ns3::psc::McpttCallMsgGrpEmergAlertCancelAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpEmergAlertCancelAck const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::McpttCallMsgGrpEmergAlertCancelAck() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetSendingId() const [member function]
    cls.add_method('GetSendingId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::SetSendingId(ns3::psc::McpttCallMsgFieldUserId const & sendingId) [member function]
    cls.add_method('SetSendingId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'sendingId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpEmergEnd_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergEnd::McpttCallMsgGrpEmergEnd(ns3::psc::McpttCallMsgGrpEmergEnd const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpEmergEnd const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergEnd::McpttCallMsgGrpEmergEnd() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpEmergEnd::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpEmergEnd::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpEmergEnd::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime ns3::psc::McpttCallMsgGrpEmergEnd::GetLastChgTime() const [member function]
    cls.add_method('GetLastChgTime', 
                   'ns3::psc::McpttCallMsgFieldLastChgTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergEnd::GetLastChgUserId() const [member function]
    cls.add_method('GetLastChgUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergEnd::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpEmergEnd::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergEnd::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::SetLastChgTime(ns3::psc::McpttCallMsgFieldLastChgTime const & lastChgTime) [member function]
    cls.add_method('SetLastChgTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldLastChgTime const &', 'lastChgTime')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::SetLastChgUserId(ns3::psc::McpttCallMsgFieldUserId const & lastChgUserId) [member function]
    cls.add_method('SetLastChgUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'lastChgUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::SetUserId(ns3::psc::McpttCallMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergEnd::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergEnd::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpImmPerilEnd_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpImmPerilEnd::McpttCallMsgGrpImmPerilEnd(ns3::psc::McpttCallMsgGrpImmPerilEnd const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpImmPerilEnd const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpImmPerilEnd::McpttCallMsgGrpImmPerilEnd() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime ns3::psc::McpttCallMsgGrpImmPerilEnd::GetLastChgTime() const [member function]
    cls.add_method('GetLastChgTime', 
                   'ns3::psc::McpttCallMsgFieldLastChgTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetLastChgUserId() const [member function]
    cls.add_method('GetLastChgUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpImmPerilEnd::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::SetLastChgTime(ns3::psc::McpttCallMsgFieldLastChgTime const & lastChgTime) [member function]
    cls.add_method('SetLastChgTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldLastChgTime const &', 'lastChgTime')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::SetLastChgUserId(ns3::psc::McpttCallMsgFieldUserId const & lastChgUserId) [member function]
    cls.add_method('SetLastChgUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'lastChgUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::SetUserId(ns3::psc::McpttCallMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpImmPerilEnd::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpImmPerilEnd::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpProbe_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpProbe::McpttCallMsgGrpProbe(ns3::psc::McpttCallMsgGrpProbe const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpProbe const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpProbe::McpttCallMsgGrpProbe() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpProbe::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpProbe::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpProbe::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpProbe::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpProbe::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpProbe::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpProbe::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpProbe::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpProbe::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpProbe::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateAccept_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAccept::McpttCallMsgPrivateAccept(ns3::psc::McpttCallMsgPrivateAccept const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateAccept const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAccept::McpttCallMsgPrivateAccept() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateAccept::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateAccept::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateAccept::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateAccept::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMsgPrivateAccept::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateAccept::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateAccept::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdpField) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdpField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAccept::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateAccept::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateAcceptAck_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAcceptAck::McpttCallMsgPrivateAcceptAck(ns3::psc::McpttCallMsgPrivateAcceptAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAcceptAck::McpttCallMsgPrivateAcceptAck() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateAcceptAck::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateAcceptAck::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateAcceptAck::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateAcceptAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateAcceptAck::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateAcceptAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAcceptAck::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateAcceptAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateEmergCancel_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancel::McpttCallMsgPrivateEmergCancel(ns3::psc::McpttCallMsgPrivateEmergCancel const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancel::McpttCallMsgPrivateEmergCancel() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateEmergCancel::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateEmergCancel::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateEmergCancel::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateEmergCancel::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateEmergCancel::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateEmergCancel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancel::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateEmergCancel::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateEmergCancelAck_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancelAck::McpttCallMsgPrivateEmergCancelAck(ns3::psc::McpttCallMsgPrivateEmergCancelAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateEmergCancelAck const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancelAck::McpttCallMsgPrivateEmergCancelAck() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancelAck::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateEmergCancelAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateReject_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReject::McpttCallMsgPrivateReject(ns3::psc::McpttCallMsgPrivateReject const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateReject const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReject::McpttCallMsgPrivateReject() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateReject::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateReject::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateReject::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateReject::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason ns3::psc::McpttCallMsgPrivateReject::GetReason() const [member function]
    cls.add_method('GetReason', 
                   'ns3::psc::McpttCallMsgFieldReason', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateReject::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateReject::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::SetReason(ns3::psc::McpttCallMsgFieldReason const & reasonField) [member function]
    cls.add_method('SetReason', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldReason const &', 'reasonField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReject::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateReject::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateRelease_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRelease::McpttCallMsgPrivateRelease(ns3::psc::McpttCallMsgPrivateRelease const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateRelease const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRelease::McpttCallMsgPrivateRelease() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateRelease::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateRelease::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateRelease::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateRelease::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateRelease::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateRelease::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRelease::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateRelease::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateReleaseAck_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReleaseAck::McpttCallMsgPrivateReleaseAck(ns3::psc::McpttCallMsgPrivateReleaseAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateReleaseAck const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReleaseAck::McpttCallMsgPrivateReleaseAck() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateReleaseAck::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateReleaseAck::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateReleaseAck::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateReleaseAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateReleaseAck::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateReleaseAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReleaseAck::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateReleaseAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateRinging_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRinging::McpttCallMsgPrivateRinging(ns3::psc::McpttCallMsgPrivateRinging const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateRinging const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRinging::McpttCallMsgPrivateRinging() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateRinging::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateRinging::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateRinging::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateRinging::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateRinging::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateRinging::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRinging::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateRinging::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateSetupReq_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateSetupReq::McpttCallMsgPrivateSetupReq(ns3::psc::McpttCallMsgPrivateSetupReq const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateSetupReq::McpttCallMsgPrivateSetupReq() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateSetupReq::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMsgPrivateSetupReq::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateSetupReq::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateSetupReq::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode ns3::psc::McpttCallMsgPrivateSetupReq::GetCommMode() const [member function]
    cls.add_method('GetCommMode', 
                   'ns3::psc::McpttCallMsgFieldCommMode', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateSetupReq::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMsgPrivateSetupReq::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateSetupReq::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateSetupReq::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc ns3::psc::McpttCallMsgPrivateSetupReq::GetUserLoc() const [member function]
    cls.add_method('GetUserLoc', 
                   'ns3::psc::McpttCallMsgFieldUserLoc', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callTypeField) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callTypeField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetCommMode(ns3::psc::McpttCallMsgFieldCommMode const & commModeField) [member function]
    cls.add_method('SetCommMode', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCommMode const &', 'commModeField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdpField) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdpField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetUserLoc(ns3::psc::McpttCallMsgFieldUserLoc const & userLocField) [member function]
    cls.add_method('SetUserLoc', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserLoc const &', 'userLocField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateSetupReq::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateSetupReq::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsg_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsg::McpttFloorMsg(ns3::psc::McpttFloorMsg const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsg const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsg::McpttFloorMsg() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsg::McpttFloorMsg(uint8_t subtype, uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint8_t', 'subtype'), param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsg::McpttFloorMsg(std::string const & name, uint8_t payloadType, uint8_t subtype, uint32_t ssrc) [constructor]
    cls.add_constructor([param('std::string const &', 'name'), param('uint8_t', 'payloadType'), param('uint8_t', 'subtype'), param('uint32_t', 'ssrc')])
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsg::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsg::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsg::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): std::string ns3::psc::McpttFloorMsg::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsg::GetPadding() const [member function]
    cls.add_method('GetPadding', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsg::GetPayloadType() const [member function]
    cls.add_method('GetPayloadType', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsg::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsg::GetSsrc() const [member function]
    cls.add_method('GetSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsg::GetSubtype() const [member function]
    cls.add_method('GetSubtype', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsg::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsg::GetVersion() const [member function]
    cls.add_method('GetVersion', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetLength(uint16_t length) [member function]
    cls.add_method('SetLength', 
                   'void', 
                   [param('uint16_t', 'length')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetName(std::string const & name) [member function]
    cls.add_method('SetName', 
                   'void', 
                   [param('std::string const &', 'name')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetPadding(uint8_t paddingBit) [member function]
    cls.add_method('SetPadding', 
                   'void', 
                   [param('uint8_t', 'paddingBit')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetPayloadType(uint8_t payloadType) [member function]
    cls.add_method('SetPayloadType', 
                   'void', 
                   [param('uint8_t', 'payloadType')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetSsrc(uint32_t ssrc) [member function]
    cls.add_method('SetSsrc', 
                   'void', 
                   [param('uint32_t', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetSubtype(uint8_t subtype) [member function]
    cls.add_method('SetSubtype', 
                   'void', 
                   [param('uint8_t', 'subtype')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetVersion(uint8_t version) [member function]
    cls.add_method('SetVersion', 
                   'void', 
                   [param('uint8_t', 'version')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsg::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::UpdateLength(ns3::psc::McpttFloorMsgField const & currField, ns3::psc::McpttFloorMsgField const & newField) [member function]
    cls.add_method('UpdateLength', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgField const &', 'currField'), param('ns3::psc::McpttFloorMsgField const &', 'newField')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgAck_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgAck::McpttFloorMsgAck(ns3::psc::McpttFloorMsgAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgAck const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgAck::McpttFloorMsgAck(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldType ns3::psc::McpttFloorMsgAck::GetMsgType() const [member function]
    cls.add_method('GetMsgType', 
                   'ns3::psc::McpttFloorMsgFieldType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource ns3::psc::McpttFloorMsgAck::GetSource() const [member function]
    cls.add_method('GetSource', 
                   'ns3::psc::McpttFloorMsgFieldSource', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgAck::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::SetMsgType(ns3::psc::McpttFloorMsgFieldType const & msgType) [member function]
    cls.add_method('SetMsgType', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldType const &', 'msgType')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::SetSource(ns3::psc::McpttFloorMsgFieldSource const & source) [member function]
    cls.add_method('SetSource', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldSource const &', 'source')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgAck::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgDeny_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgDeny::McpttFloorMsgDeny(ns3::psc::McpttFloorMsgDeny const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgDeny const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgDeny::McpttFloorMsgDeny(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgDeny::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgDeny::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause ns3::psc::McpttFloorMsgDeny::GetRejCause() const [member function]
    cls.add_method('GetRejCause', 
                   'ns3::psc::McpttFloorMsgFieldRejectCause', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgDeny::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgDeny::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgDeny::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgDeny::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::SetRejCause(ns3::psc::McpttFloorMsgFieldRejectCause const & rejCause) [member function]
    cls.add_method('SetRejCause', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldRejectCause const &', 'rejCause')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgDeny::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgDeny::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgFieldQueuedUserId_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId::McpttFloorMsgFieldQueuedUserId(ns3::psc::McpttFloorMsgFieldQueuedUserId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldQueuedUserId const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId::McpttFloorMsgFieldQueuedUserId() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId::McpttFloorMsgFieldQueuedUserId(uint32_t userId) [constructor]
    cls.add_constructor([param('uint32_t', 'userId')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldQueuedUserId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldQueuedUserId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldQueuedUserId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuedUserId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuedUserId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgGranted_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgGranted::McpttFloorMsgGranted(ns3::psc::McpttFloorMsgGranted const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgGranted const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgGranted::McpttFloorMsgGranted(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::AddUserInfo(ns3::psc::McpttQueuedUserInfo const & userInfo) [member function]
    cls.add_method('AddUserInfo', 
                   'void', 
                   [param('ns3::psc::McpttQueuedUserInfo const &', 'userInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::ClearUserInfo() [member function]
    cls.add_method('ClearUserInfo', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldDuration ns3::psc::McpttFloorMsgGranted::GetDuration() const [member function]
    cls.add_method('GetDuration', 
                   'ns3::psc::McpttFloorMsgFieldDuration', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc ns3::psc::McpttFloorMsgGranted::GetGrantedSsrc() const [member function]
    cls.add_method('GetGrantedSsrc', 
                   'ns3::psc::McpttFloorMsgFieldSsrc', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgGranted::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgGranted::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority ns3::psc::McpttFloorMsgGranted::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'ns3::psc::McpttFloorMsgFieldPriority', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueueSize ns3::psc::McpttFloorMsgGranted::GetQueueSize() const [member function]
    cls.add_method('GetQueueSize', 
                   'ns3::psc::McpttFloorMsgFieldQueueSize', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgGranted::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgGranted::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgGranted::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo>> ns3::psc::McpttFloorMsgGranted::GetUsers() const [member function]
    cls.add_method('GetUsers', 
                   'std::list< ns3::psc::McpttQueuedUserInfo >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgGranted::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetDuration(ns3::psc::McpttFloorMsgFieldDuration const & duration) [member function]
    cls.add_method('SetDuration', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldDuration const &', 'duration')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetGrantedSsrc(ns3::psc::McpttFloorMsgFieldSsrc grantedSsrc) [member function]
    cls.add_method('SetGrantedSsrc', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldSsrc', 'grantedSsrc')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetPriority(ns3::psc::McpttFloorMsgFieldPriority const & priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldPriority const &', 'priority')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetUsers(std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo>> const & users) [member function]
    cls.add_method('SetUsers', 
                   'void', 
                   [param('std::list< ns3::psc::McpttQueuedUserInfo > const &', 'users')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::UpdateUsers(std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo>> const & users) [member function]
    cls.add_method('UpdateUsers', 
                   'void', 
                   [param('std::list< ns3::psc::McpttQueuedUserInfo > const &', 'users')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgGranted::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgGranted::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetQueueSize(ns3::psc::McpttFloorMsgFieldQueueSize const & queueSize) [member function]
    cls.add_method('SetQueueSize', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldQueueSize const &', 'queueSize')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgIdle_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgIdle::McpttFloorMsgIdle(ns3::psc::McpttFloorMsgIdle const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgIdle const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgIdle::McpttFloorMsgIdle(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgIdle::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgIdle::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum ns3::psc::McpttFloorMsgIdle::GetSeqNum() const [member function]
    cls.add_method('GetSeqNum', 
                   'ns3::psc::McpttFloorMsgFieldSeqNum', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgIdle::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgIdle::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgIdle::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::SetSeqNum(ns3::psc::McpttFloorMsgFieldSeqNum const & seqNum) [member function]
    cls.add_method('SetSeqNum', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldSeqNum const &', 'seqNum')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgIdle::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgIdle::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgQueuePositionInfo_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionInfo::McpttFloorMsgQueuePositionInfo(ns3::psc::McpttFloorMsgQueuePositionInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionInfo::McpttFloorMsgQueuePositionInfo(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgQueuePositionInfo::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgQueuePositionInfo::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo ns3::psc::McpttFloorMsgQueuePositionInfo::GetQueuePositionInfo() const [member function]
    cls.add_method('GetQueuePositionInfo', 
                   'ns3::psc::McpttFloorMsgFieldQueuePositionInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgQueuePositionInfo::GetQueuedSsrc() const [member function]
    cls.add_method('GetQueuedSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId ns3::psc::McpttFloorMsgQueuePositionInfo::GetQueuedUserId() const [member function]
    cls.add_method('GetQueuedUserId', 
                   'ns3::psc::McpttFloorMsgFieldQueuedUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgQueuePositionInfo::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgQueuePositionInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgQueuePositionInfo::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgQueuePositionInfo::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetQueuePositionInfo(ns3::psc::McpttFloorMsgFieldQueuePositionInfo const & queueInfo) [member function]
    cls.add_method('SetQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldQueuePositionInfo const &', 'queueInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetQueuedSsrc(uint32_t queuedSsrc) [member function]
    cls.add_method('SetQueuedSsrc', 
                   'void', 
                   [param('uint32_t', 'queuedSsrc')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetQueuedUserId(ns3::psc::McpttFloorMsgFieldQueuedUserId const & queuedUserId) [member function]
    cls.add_method('SetQueuedUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldQueuedUserId const &', 'queuedUserId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionInfo::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionInfo::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgQueuePositionRequest_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionRequest::McpttFloorMsgQueuePositionRequest(ns3::psc::McpttFloorMsgQueuePositionRequest const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionRequest::McpttFloorMsgQueuePositionRequest(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgQueuePositionRequest::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgQueuePositionRequest::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgQueuePositionRequest::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgQueuePositionRequest::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgQueuePositionRequest::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionRequest::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgRelease_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRelease::McpttFloorMsgRelease(ns3::psc::McpttFloorMsgRelease const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgRelease const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRelease::McpttFloorMsgRelease(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgRelease::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgRelease::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgRelease::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgRelease::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgRelease::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgRelease::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRelease::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRelease::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgRequest_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRequest::McpttFloorMsgRequest(ns3::psc::McpttFloorMsgRequest const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgRequest const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRequest::McpttFloorMsgRequest(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgRequest::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgRequest::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority ns3::psc::McpttFloorMsgRequest::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'ns3::psc::McpttFloorMsgFieldPriority', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgRequest::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgRequest::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgRequest::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgRequest::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::SetPriority(ns3::psc::McpttFloorMsgFieldPriority const & priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldPriority const &', 'priority')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRequest::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgRevoke_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRevoke::McpttFloorMsgRevoke(ns3::psc::McpttFloorMsgRevoke const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgRevoke const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRevoke::McpttFloorMsgRevoke(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgRevoke::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgRevoke::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause ns3::psc::McpttFloorMsgRevoke::GetRejCause() const [member function]
    cls.add_method('GetRejCause', 
                   'ns3::psc::McpttFloorMsgFieldRejectCause', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgRevoke::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgRevoke::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgRevoke::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::SetRejCause(ns3::psc::McpttFloorMsgFieldRejectCause const & rejCause) [member function]
    cls.add_method('SetRejCause', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldRejectCause const &', 'rejCause')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRevoke::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgTaken_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgTaken::McpttFloorMsgTaken(ns3::psc::McpttFloorMsgTaken const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgTaken const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgTaken::McpttFloorMsgTaken(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgTaken::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgTaken::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldGrantedPartyId ns3::psc::McpttFloorMsgTaken::GetPartyId() const [member function]
    cls.add_method('GetPartyId', 
                   'ns3::psc::McpttFloorMsgFieldGrantedPartyId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPermToReq ns3::psc::McpttFloorMsgTaken::GetPermission() const [member function]
    cls.add_method('GetPermission', 
                   'ns3::psc::McpttFloorMsgFieldPermToReq', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum ns3::psc::McpttFloorMsgTaken::GetSeqNum() const [member function]
    cls.add_method('GetSeqNum', 
                   'ns3::psc::McpttFloorMsgFieldSeqNum', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgTaken::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgTaken::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgTaken::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgTaken::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetPartyId(ns3::psc::McpttFloorMsgFieldGrantedPartyId const & partyId) [member function]
    cls.add_method('SetPartyId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldGrantedPartyId const &', 'partyId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetPermission(ns3::psc::McpttFloorMsgFieldPermToReq const & permission) [member function]
    cls.add_method('SetPermission', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldPermToReq const &', 'permission')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetSeqNum(ns3::psc::McpttFloorMsgFieldSeqNum const & seqNum) [member function]
    cls.add_method('SetSeqNum', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldSeqNum const &', 'seqNum')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgTaken::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgTaken::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttMediaMsg_methods(root_module, cls):
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg(ns3::psc::McpttMediaMsg const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttMediaMsg const &', 'arg0')])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg() [constructor]
    cls.add_constructor([])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg(ns3::psc::McpttRtpHeader const & header) [constructor]
    cls.add_constructor([param('ns3::psc::McpttRtpHeader const &', 'header')])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg(uint16_t payloadSize) [constructor]
    cls.add_constructor([param('uint16_t', 'payloadSize')])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg(ns3::psc::McpttRtpHeader const & header, uint16_t payloadSize) [constructor]
    cls.add_constructor([param('ns3::psc::McpttRtpHeader const &', 'header'), param('uint16_t', 'payloadSize')])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg(ns3::psc::McpttRtpHeader const & header, uint16_t payloadSize, ns3::Time talkSpurtStart) [constructor]
    cls.add_constructor([param('ns3::psc::McpttRtpHeader const &', 'header'), param('uint16_t', 'payloadSize'), param('ns3::Time', 'talkSpurtStart')])
    ## mcptt-media-msg.h (module 'psc'): uint32_t ns3::psc::McpttMediaMsg::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttRtpHeader ns3::psc::McpttMediaMsg::GetHeader() const [member function]
    cls.add_method('GetHeader', 
                   'ns3::psc::McpttRtpHeader', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttMediaMsg::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): uint16_t ns3::psc::McpttMediaMsg::GetPayloadSize() const [member function]
    cls.add_method('GetPayloadSize', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): uint32_t ns3::psc::McpttMediaMsg::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): uint32_t ns3::psc::McpttMediaMsg::GetSsrc() const [member function]
    cls.add_method('GetSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): ns3::Time ns3::psc::McpttMediaMsg::GetTalkSpurtStart() const [member function]
    cls.add_method('GetTalkSpurtStart', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttMediaMsg::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::SetHeader(ns3::psc::McpttRtpHeader const & header) [member function]
    cls.add_method('SetHeader', 
                   'void', 
                   [param('ns3::psc::McpttRtpHeader const &', 'header')], 
                   is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::SetPayloadSize(uint16_t payloadSize) [member function]
    cls.add_method('SetPayloadSize', 
                   'void', 
                   [param('uint16_t', 'payloadSize')], 
                   is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::SetSsrc(uint32_t const ssrc) [member function]
    cls.add_method('SetSsrc', 
                   'void', 
                   [param('uint32_t const', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::SetTalkSpurtStart(ns3::Time talkSpurtStart) [member function]
    cls.add_method('SetTalkSpurtStart', 
                   'void', 
                   [param('ns3::Time', 'talkSpurtStart')], 
                   is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::Visit(ns3::psc::McpttFloorMsgSink & floorMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttPusherOrchestrator_methods(root_module, cls):
    ## mcptt-pusher-orchestrator.h (module 'psc'): ns3::psc::McpttPusherOrchestrator::McpttPusherOrchestrator(ns3::psc::McpttPusherOrchestrator const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusherOrchestrator const &', 'arg0')])
    ## mcptt-pusher-orchestrator.h (module 'psc'): ns3::psc::McpttPusherOrchestrator::McpttPusherOrchestrator() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::AddPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('AddPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): int64_t ns3::psc::McpttPusherOrchestrator::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher>>> ns3::psc::McpttPusherOrchestrator::GetActivePushers() const [member function]
    cls.add_method('GetActivePushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher>>> ns3::psc::McpttPusherOrchestrator::GetPushers() const [member function]
    cls.add_method('GetPushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusherOrchestrator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): bool ns3::psc::McpttPusherOrchestrator::IsActive() const [member function]
    cls.add_method('IsActive', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestrator::NextPttDuration() [member function]
    cls.add_method('NextPttDuration', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestrator::NextPttIat() [member function]
    cls.add_method('NextPttIat', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::ActivatePusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('ActivatePusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::DeactivatePusher() [member function]
    cls.add_method('DeactivatePusher', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttPusherOrchestratorContention_methods(root_module, cls):
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::psc::McpttPusherOrchestratorContention::McpttPusherOrchestratorContention(ns3::psc::McpttPusherOrchestratorContention const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusherOrchestratorContention const &', 'arg0')])
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::psc::McpttPusherOrchestratorContention::McpttPusherOrchestratorContention() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::AddPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('AddPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): int64_t ns3::psc::McpttPusherOrchestratorContention::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher>>> ns3::psc::McpttPusherOrchestratorContention::GetActivePushers() const [member function]
    cls.add_method('GetActivePushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::Ptr<ns3::psc::McpttPusherOrchestratorInterface> ns3::psc::McpttPusherOrchestratorContention::GetOrchestrator() const [member function]
    cls.add_method('GetOrchestrator', 
                   'ns3::Ptr< ns3::psc::McpttPusherOrchestratorInterface >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher>>> ns3::psc::McpttPusherOrchestratorContention::GetPushers() const [member function]
    cls.add_method('GetPushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusherOrchestratorContention::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorContention::NextPttDuration() [member function]
    cls.add_method('NextPttDuration', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorContention::NextPttIat() [member function]
    cls.add_method('NextPttIat', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::SetOrchestrator(ns3::Ptr<ns3::psc::McpttPusherOrchestratorInterface> orchestrator) [member function]
    cls.add_method('SetOrchestrator', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusherOrchestratorInterface >', 'orchestrator')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::ActivatePusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('ActivatePusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::DeactivatePusher() [member function]
    cls.add_method('DeactivatePusher', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::PttDurationTraceCallback(uint32_t userId, ns3::Time pttDuration) [member function]
    cls.add_method('PttDurationTraceCallback', 
                   'void', 
                   [param('uint32_t', 'userId'), param('ns3::Time', 'pttDuration')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearranged_methods(root_module, cls):
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearranged::McpttServerCallMachineGroupPrearranged(ns3::psc::McpttServerCallMachineGroupPrearranged const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearranged const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearranged::McpttServerCallMachineGroupPrearranged() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): int64_t ns3::psc::McpttServerCallMachineGroupPrearranged::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetByePayloadSize() [member function]
    cls.add_method('GetByePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttServerCallMachineGroupPrearranged::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttServerCallMachineGroupPrearranged::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttServerCallMachineGroupPrearranged::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::TypeId ns3::psc::McpttServerCallMachineGroupPrearranged::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetInvitePayloadSize() [member function]
    cls.add_method('GetInvitePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetNPendingTransactions() const [member function]
    cls.add_method('GetNPendingTransactions', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetResponsePayloadSize() [member function]
    cls.add_method('GetResponsePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCall> ns3::psc::McpttServerCallMachineGroupPrearranged::GetServerCall() const [member function]
    cls.add_method('GetServerCall', 
                   'ns3::Ptr< ns3::psc::McpttServerCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedState> ns3::psc::McpttServerCallMachineGroupPrearranged::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearranged::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerCallMachineGroupPrearranged::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearranged::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearranged::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearranged::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::ReceiveCallPacket(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveCallPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearranged::RemoveFromPending(uint32_t userId) [member function]
    cls.add_method('RemoveFromPending', 
                   'bool', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SendSipRequest(uint32_t from, uint32_t to, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('SendSipRequest', 
                   'void', 
                   [param('uint32_t', 'from'), param('uint32_t', 'to'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SendSipResponse(uint32_t from, uint32_t to, ns3::Ptr<ns3::Packet> pkt, uint16_t statusCode, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('SendSipResponse', 
                   'void', 
                   [param('uint32_t', 'from'), param('uint32_t', 'to'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('uint16_t', 'statusCode'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetPendingTransactionList(std::vector<unsigned int, std::allocator<unsigned int>> pending) [member function]
    cls.add_method('SetPendingTransactionList', 
                   'void', 
                   [param('std::vector< unsigned int >', 'pending')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetServerCall(ns3::Ptr<ns3::psc::McpttServerCall> call) [member function]
    cls.add_method('SetServerCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetState(ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedState >', 'state')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetUserId(uint32_t userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3SipSipElement_methods(root_module, cls):
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::SipElement(ns3::sip::SipElement const & arg0) [constructor]
    cls.add_constructor([param('ns3::sip::SipElement const &', 'arg0')])
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::SipElement() [constructor]
    cls.add_constructor([])
    ## sip-element.h (module 'sip'): static std::string ns3::sip::SipElement::DialogStateToString(ns3::sip::SipElement::DialogState state) [member function]
    cls.add_method('DialogStateToString', 
                   'std::string', 
                   [param('ns3::sip::SipElement::DialogState', 'state')], 
                   is_static=True)
    ## sip-element.h (module 'sip'): static ns3::TypeId ns3::sip::SipElement::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::Receive(ns3::Ptr<ns3::Packet> p, ns3::Address from) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address', 'from')])
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SendBye(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint32_t requestUri, uint32_t from, uint32_t to, uint16_t callId, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('SendBye', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint32_t', 'requestUri'), param('uint32_t', 'from'), param('uint32_t', 'to'), param('uint16_t', 'callId'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')])
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SendInvite(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint32_t requestUri, uint32_t from, uint32_t to, uint16_t callId, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('SendInvite', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint32_t', 'requestUri'), param('uint32_t', 'from'), param('uint32_t', 'to'), param('uint16_t', 'callId'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')])
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SendResponse(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t statusCode, uint32_t from, uint32_t to, uint16_t callId, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('SendResponse', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint16_t', 'statusCode'), param('uint32_t', 'from'), param('uint32_t', 'to'), param('uint16_t', 'callId'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')], 
                   is_virtual=True)
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SetCallbacks(uint16_t callId, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> receiveCallback, ns3::Callback<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> eventCallback) [member function]
    cls.add_method('SetCallbacks', 
                   'void', 
                   [param('uint16_t', 'callId'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'receiveCallback'), param('ns3::Callback< void, char const *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'eventCallback')])
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SetDefaultSendCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('SetDefaultSendCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')])
    ## sip-element.h (module 'sip'): static std::string ns3::sip::SipElement::TransactionStateToString(ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('TransactionStateToString', 
                   'std::string', 
                   [param('ns3::sip::SipElement::TransactionState', 'state')], 
                   is_static=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::ACK_RECEIVED [variable]
    cls.add_static_attribute('ACK_RECEIVED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::REQUEST_TIMEOUT [variable]
    cls.add_static_attribute('REQUEST_TIMEOUT', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_A_EXPIRED [variable]
    cls.add_static_attribute('TIMER_A_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_B_EXPIRED [variable]
    cls.add_static_attribute('TIMER_B_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_C_EXPIRED [variable]
    cls.add_static_attribute('TIMER_C_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_E_EXPIRED [variable]
    cls.add_static_attribute('TIMER_E_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_F_EXPIRED [variable]
    cls.add_static_attribute('TIMER_F_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_I_EXPIRED [variable]
    cls.add_static_attribute('TIMER_I_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_J_EXPIRED [variable]
    cls.add_static_attribute('TIMER_J_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_K_EXPIRED [variable]
    cls.add_static_attribute('TIMER_K_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TRYING_RECEIVED [variable]
    cls.add_static_attribute('TRYING_RECEIVED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CacheTransactionPacket(ns3::sip::SipElement::TransactionId id, ns3::Ptr<const ns3::Packet> pkt, ns3::Address const & addr, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('CacheTransactionPacket', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::Address const &', 'addr'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CancelTimerA(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('CancelTimerA', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CancelTimerB(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('CancelTimerB', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CancelTimerE(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('CancelTimerE', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CancelTimerF(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('CancelTimerF', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CreateDialog(ns3::sip::SipElement::DialogId id, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('CreateDialog', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CreateTransaction(ns3::sip::SipElement::TransactionId id, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('CreateTransaction', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): bool ns3::sip::SipElement::DialogExists(ns3::sip::SipElement::DialogId id) const [member function]
    cls.add_method('DialogExists', 
                   'bool', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_const=True, visibility='protected')
    ## sip-element.h (module 'sip'): std::string ns3::sip::SipElement::DialogIdToString(ns3::sip::SipElement::DialogId id) const [member function]
    cls.add_method('DialogIdToString', 
                   'std::string', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_const=True, visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::FreeTransactionPacket(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('FreeTransactionPacket', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::DialogId ns3::sip::SipElement::GetDialogId(uint16_t callId, uint32_t uriA, uint32_t uriB) const [member function]
    cls.add_method('GetDialogId', 
                   'ns3::sip::SipElement::DialogId', 
                   [param('uint16_t', 'callId'), param('uint32_t', 'uriA'), param('uint32_t', 'uriB')], 
                   is_const=True, visibility='protected')
    ## sip-element.h (module 'sip'): std::unordered_map<std::tuple<unsigned short, unsigned int, unsigned int>, ns3::sip::SipElement::Dialog, ns3::sip::SipElement::TupleHash, std::equal_to<std::tuple<unsigned short, unsigned int, unsigned int>>, std::allocator<std::pair<const std::tuple<unsigned short, unsigned int, unsigned int>, ns3::sip::SipElement::Dialog>>> & ns3::sip::SipElement::GetDialogs() [member function]
    cls.add_method('GetDialogs', 
                   'std::unordered_map< std::tuple< unsigned short, unsigned int, unsigned int >, ns3::sip::SipElement::Dialog, ns3::sip::SipElement::TupleHash, std::equal_to< std::tuple< unsigned short, unsigned int, unsigned int > >, std::allocator< std::pair< std::tuple< unsigned short, unsigned int, unsigned int > const, ns3::sip::SipElement::Dialog > > > &', 
                   [], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): std::unordered_map<unsigned short, ns3::Callback<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::Callback<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>>>> & ns3::sip::SipElement::GetEventCallbacks() [member function]
    cls.add_method('GetEventCallbacks', 
                   'std::unordered_map< unsigned short, ns3::Callback< void, char const *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > > &', 
                   [], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): std::unordered_map<unsigned short, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>>>> & ns3::sip::SipElement::GetReceiveCallbacks() [member function]
    cls.add_method('GetReceiveCallbacks', 
                   'std::unordered_map< unsigned short, ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > > &', 
                   [], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TransactionId ns3::sip::SipElement::GetTransactionId(uint16_t callId, uint32_t from, uint32_t to) const [member function]
    cls.add_method('GetTransactionId', 
                   'ns3::sip::SipElement::TransactionId', 
                   [param('uint16_t', 'callId'), param('uint32_t', 'from'), param('uint32_t', 'to')], 
                   is_const=True, visibility='protected')
    ## sip-element.h (module 'sip'): ns3::Ptr<const ns3::Packet> ns3::sip::SipElement::GetTransactionPacket(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('GetTransactionPacket', 
                   'ns3::Ptr< ns3::Packet const >', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): std::unordered_map<std::tuple<unsigned short, unsigned int, unsigned int>, ns3::sip::SipElement::Transaction, ns3::sip::SipElement::TupleHash, std::equal_to<std::tuple<unsigned short, unsigned int, unsigned int>>, std::allocator<std::pair<const std::tuple<unsigned short, unsigned int, unsigned int>, ns3::sip::SipElement::Transaction>>> & ns3::sip::SipElement::GetTransactions() [member function]
    cls.add_method('GetTransactions', 
                   'std::unordered_map< std::tuple< unsigned short, unsigned int, unsigned int >, ns3::sip::SipElement::Transaction, ns3::sip::SipElement::TupleHash, std::equal_to< std::tuple< unsigned short, unsigned int, unsigned int > >, std::allocator< std::pair< std::tuple< unsigned short, unsigned int, unsigned int > const, ns3::sip::SipElement::Transaction > > > &', 
                   [], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerA(ns3::sip::SipElement::TransactionId id, uint32_t backoff) [member function]
    cls.add_method('HandleTimerA', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('uint32_t', 'backoff')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerB(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerB', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerE(ns3::sip::SipElement::TransactionId id, uint32_t backoff) [member function]
    cls.add_method('HandleTimerE', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('uint32_t', 'backoff')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerF(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerF', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerI(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerI', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerJ(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerJ', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerK(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerK', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerA(ns3::sip::SipElement::TransactionId id, uint32_t backoff) [member function]
    cls.add_method('ScheduleTimerA', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('uint32_t', 'backoff')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerB(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerB', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerE(ns3::sip::SipElement::TransactionId id, uint32_t backoff) [member function]
    cls.add_method('ScheduleTimerE', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('uint32_t', 'backoff')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerF(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerF', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerI(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerI', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerJ(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerJ', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerK(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerK', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SetDialogState(ns3::sip::SipElement::DialogId id, ns3::sip::SipElement::DialogState state) [member function]
    cls.add_method('SetDialogState', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('ns3::sip::SipElement::DialogState', 'state')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SetTransactionState(ns3::sip::SipElement::TransactionId id, ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('SetTransactionState', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('ns3::sip::SipElement::TransactionState', 'state')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): bool ns3::sip::SipElement::TransactionExists(ns3::sip::SipElement::TransactionId id) const [member function]
    cls.add_method('TransactionExists', 
                   'bool', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_const=True, visibility='protected')
    ## sip-element.h (module 'sip'): std::string ns3::sip::SipElement::TransactionIdToString(ns3::sip::SipElement::TransactionId id) const [member function]
    cls.add_method('TransactionIdToString', 
                   'std::string', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_const=True, visibility='protected')
    return

def register_Ns3SipSipHeader_methods(root_module, cls):
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipHeader(ns3::sip::SipHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::sip::SipHeader const &', 'arg0')])
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipHeader() [constructor]
    cls.add_constructor([])
    ## sip-header.h (module 'sip'): uint32_t ns3::sip::SipHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## sip-header.h (module 'sip'): uint16_t ns3::sip::SipHeader::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): uint32_t ns3::sip::SipHeader::GetFrom() const [member function]
    cls.add_method('GetFrom', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): ns3::TypeId ns3::sip::SipHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipMessageType ns3::sip::SipHeader::GetMessageType() const [member function]
    cls.add_method('GetMessageType', 
                   'ns3::sip::SipHeader::SipMessageType', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): std::string ns3::sip::SipHeader::GetMessageTypeName() const [member function]
    cls.add_method('GetMessageTypeName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipMethod ns3::sip::SipHeader::GetMethod() const [member function]
    cls.add_method('GetMethod', 
                   'ns3::sip::SipHeader::SipMethod', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): std::string ns3::sip::SipHeader::GetMethodName() const [member function]
    cls.add_method('GetMethodName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): uint32_t ns3::sip::SipHeader::GetRequestUri() const [member function]
    cls.add_method('GetRequestUri', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): uint32_t ns3::sip::SipHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## sip-header.h (module 'sip'): uint16_t ns3::sip::SipHeader::GetStatusCode() const [member function]
    cls.add_method('GetStatusCode', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): uint32_t ns3::sip::SipHeader::GetTo() const [member function]
    cls.add_method('GetTo', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): static ns3::TypeId ns3::sip::SipHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetCallId(uint16_t callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('uint16_t', 'callId')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetFrom(uint32_t from) [member function]
    cls.add_method('SetFrom', 
                   'void', 
                   [param('uint32_t', 'from')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetMessageType(ns3::sip::SipHeader::SipMessageType messageType) [member function]
    cls.add_method('SetMessageType', 
                   'void', 
                   [param('ns3::sip::SipHeader::SipMessageType', 'messageType')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetMethod(ns3::sip::SipHeader::SipMethod method) [member function]
    cls.add_method('SetMethod', 
                   'void', 
                   [param('ns3::sip::SipHeader::SipMethod', 'method')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetRequestUri(uint32_t requestUri) [member function]
    cls.add_method('SetRequestUri', 
                   'void', 
                   [param('uint32_t', 'requestUri')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetStatusCode(uint16_t statusCode) [member function]
    cls.add_method('SetStatusCode', 
                   'void', 
                   [param('uint16_t', 'statusCode')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetTo(uint32_t from) [member function]
    cls.add_method('SetTo', 
                   'void', 
                   [param('uint32_t', 'from')])
    return

def register_Ns3SipSipProxy_methods(root_module, cls):
    ## sip-proxy.h (module 'sip'): ns3::sip::SipProxy::SipProxy(ns3::sip::SipProxy const & arg0) [constructor]
    cls.add_constructor([param('ns3::sip::SipProxy const &', 'arg0')])
    ## sip-proxy.h (module 'sip'): ns3::sip::SipProxy::SipProxy() [constructor]
    cls.add_constructor([])
    ## sip-proxy.h (module 'sip'): void ns3::sip::SipProxy::CancelTimerC(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('CancelTimerC', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_virtual=True)
    ## sip-proxy.h (module 'sip'): static ns3::TypeId ns3::sip::SipProxy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## sip-proxy.h (module 'sip'): void ns3::sip::SipProxy::HandleTimerC(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerC', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_virtual=True)
    ## sip-proxy.h (module 'sip'): void ns3::sip::SipProxy::ScheduleTimerC(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerC', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_virtual=True)
    ## sip-proxy.h (module 'sip'): void ns3::sip::SipProxy::SendResponse(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t statusCode, uint32_t from, uint32_t to, uint16_t callId, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('SendResponse', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint16_t', 'statusCode'), param('uint32_t', 'from'), param('uint32_t', 'to'), param('uint16_t', 'callId'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')], 
                   is_virtual=True)
    ## sip-proxy.h (module 'sip'): void ns3::sip::SipProxy::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3SipSipAgent_methods(root_module, cls):
    ## sip-agent.h (module 'sip'): ns3::sip::SipAgent::SipAgent(ns3::sip::SipAgent const & arg0) [constructor]
    cls.add_constructor([param('ns3::sip::SipAgent const &', 'arg0')])
    ## sip-agent.h (module 'sip'): ns3::sip::SipAgent::SipAgent() [constructor]
    cls.add_constructor([])
    ## sip-agent.h (module 'sip'): static ns3::TypeId ns3::sip::SipAgent::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## sip-agent.h (module 'sip'): void ns3::sip::SipAgent::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_functions(root_module):
    module = root_module
    register_functions_ns3_Config(module.add_cpp_namespace('Config'), root_module)
    register_functions_ns3_FatalImpl(module.add_cpp_namespace('FatalImpl'), root_module)
    register_functions_ns3_Hash(module.add_cpp_namespace('Hash'), root_module)
    register_functions_ns3_TracedValueCallback(module.add_cpp_namespace('TracedValueCallback'), root_module)
    register_functions_ns3_internal(module.add_cpp_namespace('internal'), root_module)
    register_functions_ns3_psc(module.add_cpp_namespace('psc'), root_module)
    register_functions_ns3_sip(module.add_cpp_namespace('sip'), root_module)
    return

def register_functions_ns3_Config(module, root_module):
    return

def register_functions_ns3_FatalImpl(module, root_module):
    return

def register_functions_ns3_Hash(module, root_module):
    register_functions_ns3_Hash_Function(module.add_cpp_namespace('Function'), root_module)
    return

def register_functions_ns3_Hash_Function(module, root_module):
    return

def register_functions_ns3_TracedValueCallback(module, root_module):
    return

def register_functions_ns3_internal(module, root_module):
    return

def register_functions_ns3_psc(module, root_module):
    return

def register_functions_ns3_sip(module, root_module):
    return

def main():
    out = FileCodeSink(sys.stdout)
    root_module = module_init()
    register_types(root_module)
    register_methods(root_module)
    register_functions(root_module)
    root_module.generate(out)

if __name__ == '__main__':
    main()

